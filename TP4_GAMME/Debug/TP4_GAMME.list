
TP4_GAMME.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d0c  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002e48  08002e48  00003e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e74  08002e74  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002e74  08002e74  00003e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e7c  08002e7c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e7c  08002e7c  00003e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e80  08002e80  00003e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002e84  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  08002e90  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08002e90  000040c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009087  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018dc  00000000  00000000  0000d0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  0000e998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007f0  00000000  00000000  0000f410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000155f9  00000000  00000000  0000fc00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aa3c  00000000  00000000  000251f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008863a  00000000  00000000  0002fc35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b826f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b50  00000000  00000000  000b82b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000bae04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	08002e30 	.word	0x08002e30

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	08002e30 	.word	0x08002e30

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800018c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000190:	f000 b98c 	b.w	80004ac <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9d08      	ldr	r5, [sp, #32]
 80001b2:	468e      	mov	lr, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14a      	bne.n	8000252 <__udivmoddi4+0xa6>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4617      	mov	r7, r2
 80001c0:	d962      	bls.n	8000288 <__udivmoddi4+0xdc>
 80001c2:	fab2 f682 	clz	r6, r2
 80001c6:	b14e      	cbz	r6, 80001dc <__udivmoddi4+0x30>
 80001c8:	f1c6 0320 	rsb	r3, r6, #32
 80001cc:	fa01 f806 	lsl.w	r8, r1, r6
 80001d0:	fa20 f303 	lsr.w	r3, r0, r3
 80001d4:	40b7      	lsls	r7, r6
 80001d6:	ea43 0808 	orr.w	r8, r3, r8
 80001da:	40b4      	lsls	r4, r6
 80001dc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80001e0:	fbb8 f1fe 	udiv	r1, r8, lr
 80001e4:	fa1f fc87 	uxth.w	ip, r7
 80001e8:	fb0e 8811 	mls	r8, lr, r1, r8
 80001ec:	fb01 f20c 	mul.w	r2, r1, ip
 80001f0:	0c23      	lsrs	r3, r4, #16
 80001f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f6:	429a      	cmp	r2, r3
 80001f8:	d909      	bls.n	800020e <__udivmoddi4+0x62>
 80001fa:	18fb      	adds	r3, r7, r3
 80001fc:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000200:	f080 80eb 	bcs.w	80003da <__udivmoddi4+0x22e>
 8000204:	429a      	cmp	r2, r3
 8000206:	f240 80e8 	bls.w	80003da <__udivmoddi4+0x22e>
 800020a:	3902      	subs	r1, #2
 800020c:	443b      	add	r3, r7
 800020e:	1a9a      	subs	r2, r3, r2
 8000210:	fbb2 f0fe 	udiv	r0, r2, lr
 8000214:	fb0e 2210 	mls	r2, lr, r0, r2
 8000218:	fb00 fc0c 	mul.w	ip, r0, ip
 800021c:	b2a3      	uxth	r3, r4
 800021e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000222:	459c      	cmp	ip, r3
 8000224:	d909      	bls.n	800023a <__udivmoddi4+0x8e>
 8000226:	18fb      	adds	r3, r7, r3
 8000228:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 800022c:	f080 80d7 	bcs.w	80003de <__udivmoddi4+0x232>
 8000230:	459c      	cmp	ip, r3
 8000232:	f240 80d4 	bls.w	80003de <__udivmoddi4+0x232>
 8000236:	443b      	add	r3, r7
 8000238:	3802      	subs	r0, #2
 800023a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800023e:	2100      	movs	r1, #0
 8000240:	eba3 030c 	sub.w	r3, r3, ip
 8000244:	b11d      	cbz	r5, 800024e <__udivmoddi4+0xa2>
 8000246:	2200      	movs	r2, #0
 8000248:	40f3      	lsrs	r3, r6
 800024a:	e9c5 3200 	strd	r3, r2, [r5]
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	428b      	cmp	r3, r1
 8000254:	d905      	bls.n	8000262 <__udivmoddi4+0xb6>
 8000256:	b10d      	cbz	r5, 800025c <__udivmoddi4+0xb0>
 8000258:	e9c5 0100 	strd	r0, r1, [r5]
 800025c:	2100      	movs	r1, #0
 800025e:	4608      	mov	r0, r1
 8000260:	e7f5      	b.n	800024e <__udivmoddi4+0xa2>
 8000262:	fab3 f183 	clz	r1, r3
 8000266:	2900      	cmp	r1, #0
 8000268:	d146      	bne.n	80002f8 <__udivmoddi4+0x14c>
 800026a:	4573      	cmp	r3, lr
 800026c:	d302      	bcc.n	8000274 <__udivmoddi4+0xc8>
 800026e:	4282      	cmp	r2, r0
 8000270:	f200 8108 	bhi.w	8000484 <__udivmoddi4+0x2d8>
 8000274:	1a84      	subs	r4, r0, r2
 8000276:	eb6e 0203 	sbc.w	r2, lr, r3
 800027a:	2001      	movs	r0, #1
 800027c:	4690      	mov	r8, r2
 800027e:	2d00      	cmp	r5, #0
 8000280:	d0e5      	beq.n	800024e <__udivmoddi4+0xa2>
 8000282:	e9c5 4800 	strd	r4, r8, [r5]
 8000286:	e7e2      	b.n	800024e <__udivmoddi4+0xa2>
 8000288:	2a00      	cmp	r2, #0
 800028a:	f000 8091 	beq.w	80003b0 <__udivmoddi4+0x204>
 800028e:	fab2 f682 	clz	r6, r2
 8000292:	2e00      	cmp	r6, #0
 8000294:	f040 80a5 	bne.w	80003e2 <__udivmoddi4+0x236>
 8000298:	1a8a      	subs	r2, r1, r2
 800029a:	2101      	movs	r1, #1
 800029c:	0c03      	lsrs	r3, r0, #16
 800029e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002a2:	b280      	uxth	r0, r0
 80002a4:	b2bc      	uxth	r4, r7
 80002a6:	fbb2 fcfe 	udiv	ip, r2, lr
 80002aa:	fb0e 221c 	mls	r2, lr, ip, r2
 80002ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b2:	fb04 f20c 	mul.w	r2, r4, ip
 80002b6:	429a      	cmp	r2, r3
 80002b8:	d907      	bls.n	80002ca <__udivmoddi4+0x11e>
 80002ba:	18fb      	adds	r3, r7, r3
 80002bc:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80002c0:	d202      	bcs.n	80002c8 <__udivmoddi4+0x11c>
 80002c2:	429a      	cmp	r2, r3
 80002c4:	f200 80e3 	bhi.w	800048e <__udivmoddi4+0x2e2>
 80002c8:	46c4      	mov	ip, r8
 80002ca:	1a9b      	subs	r3, r3, r2
 80002cc:	fbb3 f2fe 	udiv	r2, r3, lr
 80002d0:	fb0e 3312 	mls	r3, lr, r2, r3
 80002d4:	fb02 f404 	mul.w	r4, r2, r4
 80002d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80002dc:	429c      	cmp	r4, r3
 80002de:	d907      	bls.n	80002f0 <__udivmoddi4+0x144>
 80002e0:	18fb      	adds	r3, r7, r3
 80002e2:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80002e6:	d202      	bcs.n	80002ee <__udivmoddi4+0x142>
 80002e8:	429c      	cmp	r4, r3
 80002ea:	f200 80cd 	bhi.w	8000488 <__udivmoddi4+0x2dc>
 80002ee:	4602      	mov	r2, r0
 80002f0:	1b1b      	subs	r3, r3, r4
 80002f2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80002f6:	e7a5      	b.n	8000244 <__udivmoddi4+0x98>
 80002f8:	f1c1 0620 	rsb	r6, r1, #32
 80002fc:	408b      	lsls	r3, r1
 80002fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000302:	431f      	orrs	r7, r3
 8000304:	fa2e fa06 	lsr.w	sl, lr, r6
 8000308:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800030c:	fbba f8f9 	udiv	r8, sl, r9
 8000310:	fa0e fe01 	lsl.w	lr, lr, r1
 8000314:	fa20 f306 	lsr.w	r3, r0, r6
 8000318:	fb09 aa18 	mls	sl, r9, r8, sl
 800031c:	fa1f fc87 	uxth.w	ip, r7
 8000320:	ea43 030e 	orr.w	r3, r3, lr
 8000324:	fa00 fe01 	lsl.w	lr, r0, r1
 8000328:	fb08 f00c 	mul.w	r0, r8, ip
 800032c:	0c1c      	lsrs	r4, r3, #16
 800032e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000332:	42a0      	cmp	r0, r4
 8000334:	fa02 f201 	lsl.w	r2, r2, r1
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x1a4>
 800033a:	193c      	adds	r4, r7, r4
 800033c:	f108 3aff 	add.w	sl, r8, #4294967295	@ 0xffffffff
 8000340:	f080 809e 	bcs.w	8000480 <__udivmoddi4+0x2d4>
 8000344:	42a0      	cmp	r0, r4
 8000346:	f240 809b 	bls.w	8000480 <__udivmoddi4+0x2d4>
 800034a:	f1a8 0802 	sub.w	r8, r8, #2
 800034e:	443c      	add	r4, r7
 8000350:	1a24      	subs	r4, r4, r0
 8000352:	b298      	uxth	r0, r3
 8000354:	fbb4 f3f9 	udiv	r3, r4, r9
 8000358:	fb09 4413 	mls	r4, r9, r3, r4
 800035c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000360:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x1d0>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 800036e:	f080 8085 	bcs.w	800047c <__udivmoddi4+0x2d0>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8082 	bls.w	800047c <__udivmoddi4+0x2d0>
 8000378:	3b02      	subs	r3, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	fba0 8c02 	umull	r8, ip, r0, r2
 8000388:	4564      	cmp	r4, ip
 800038a:	4643      	mov	r3, r8
 800038c:	46e1      	mov	r9, ip
 800038e:	d364      	bcc.n	800045a <__udivmoddi4+0x2ae>
 8000390:	d061      	beq.n	8000456 <__udivmoddi4+0x2aa>
 8000392:	b15d      	cbz	r5, 80003ac <__udivmoddi4+0x200>
 8000394:	ebbe 0203 	subs.w	r2, lr, r3
 8000398:	eb64 0409 	sbc.w	r4, r4, r9
 800039c:	fa04 f606 	lsl.w	r6, r4, r6
 80003a0:	fa22 f301 	lsr.w	r3, r2, r1
 80003a4:	431e      	orrs	r6, r3
 80003a6:	40cc      	lsrs	r4, r1
 80003a8:	e9c5 6400 	strd	r6, r4, [r5]
 80003ac:	2100      	movs	r1, #0
 80003ae:	e74e      	b.n	800024e <__udivmoddi4+0xa2>
 80003b0:	fbb1 fcf2 	udiv	ip, r1, r2
 80003b4:	0c01      	lsrs	r1, r0, #16
 80003b6:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80003ba:	b280      	uxth	r0, r0
 80003bc:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80003c0:	463b      	mov	r3, r7
 80003c2:	fbb1 f1f7 	udiv	r1, r1, r7
 80003c6:	4638      	mov	r0, r7
 80003c8:	463c      	mov	r4, r7
 80003ca:	46b8      	mov	r8, r7
 80003cc:	46be      	mov	lr, r7
 80003ce:	2620      	movs	r6, #32
 80003d0:	eba2 0208 	sub.w	r2, r2, r8
 80003d4:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80003d8:	e765      	b.n	80002a6 <__udivmoddi4+0xfa>
 80003da:	4601      	mov	r1, r0
 80003dc:	e717      	b.n	800020e <__udivmoddi4+0x62>
 80003de:	4610      	mov	r0, r2
 80003e0:	e72b      	b.n	800023a <__udivmoddi4+0x8e>
 80003e2:	f1c6 0120 	rsb	r1, r6, #32
 80003e6:	fa2e fc01 	lsr.w	ip, lr, r1
 80003ea:	40b7      	lsls	r7, r6
 80003ec:	fa0e fe06 	lsl.w	lr, lr, r6
 80003f0:	fa20 f101 	lsr.w	r1, r0, r1
 80003f4:	ea41 010e 	orr.w	r1, r1, lr
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	fbbc f8fe 	udiv	r8, ip, lr
 8000400:	b2bc      	uxth	r4, r7
 8000402:	fb0e cc18 	mls	ip, lr, r8, ip
 8000406:	fb08 f904 	mul.w	r9, r8, r4
 800040a:	0c0a      	lsrs	r2, r1, #16
 800040c:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000410:	40b0      	lsls	r0, r6
 8000412:	4591      	cmp	r9, r2
 8000414:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000418:	b280      	uxth	r0, r0
 800041a:	d93e      	bls.n	800049a <__udivmoddi4+0x2ee>
 800041c:	18ba      	adds	r2, r7, r2
 800041e:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000422:	d201      	bcs.n	8000428 <__udivmoddi4+0x27c>
 8000424:	4591      	cmp	r9, r2
 8000426:	d81f      	bhi.n	8000468 <__udivmoddi4+0x2bc>
 8000428:	eba2 0209 	sub.w	r2, r2, r9
 800042c:	fbb2 f9fe 	udiv	r9, r2, lr
 8000430:	fb09 f804 	mul.w	r8, r9, r4
 8000434:	fb0e 2a19 	mls	sl, lr, r9, r2
 8000438:	b28a      	uxth	r2, r1
 800043a:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 800043e:	4542      	cmp	r2, r8
 8000440:	d229      	bcs.n	8000496 <__udivmoddi4+0x2ea>
 8000442:	18ba      	adds	r2, r7, r2
 8000444:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000448:	d2c2      	bcs.n	80003d0 <__udivmoddi4+0x224>
 800044a:	4542      	cmp	r2, r8
 800044c:	d2c0      	bcs.n	80003d0 <__udivmoddi4+0x224>
 800044e:	f1a9 0102 	sub.w	r1, r9, #2
 8000452:	443a      	add	r2, r7
 8000454:	e7bc      	b.n	80003d0 <__udivmoddi4+0x224>
 8000456:	45c6      	cmp	lr, r8
 8000458:	d29b      	bcs.n	8000392 <__udivmoddi4+0x1e6>
 800045a:	ebb8 0302 	subs.w	r3, r8, r2
 800045e:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000462:	3801      	subs	r0, #1
 8000464:	46e1      	mov	r9, ip
 8000466:	e794      	b.n	8000392 <__udivmoddi4+0x1e6>
 8000468:	eba7 0909 	sub.w	r9, r7, r9
 800046c:	444a      	add	r2, r9
 800046e:	fbb2 f9fe 	udiv	r9, r2, lr
 8000472:	f1a8 0c02 	sub.w	ip, r8, #2
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	e7db      	b.n	8000434 <__udivmoddi4+0x288>
 800047c:	4603      	mov	r3, r0
 800047e:	e77d      	b.n	800037c <__udivmoddi4+0x1d0>
 8000480:	46d0      	mov	r8, sl
 8000482:	e765      	b.n	8000350 <__udivmoddi4+0x1a4>
 8000484:	4608      	mov	r0, r1
 8000486:	e6fa      	b.n	800027e <__udivmoddi4+0xd2>
 8000488:	443b      	add	r3, r7
 800048a:	3a02      	subs	r2, #2
 800048c:	e730      	b.n	80002f0 <__udivmoddi4+0x144>
 800048e:	f1ac 0c02 	sub.w	ip, ip, #2
 8000492:	443b      	add	r3, r7
 8000494:	e719      	b.n	80002ca <__udivmoddi4+0x11e>
 8000496:	4649      	mov	r1, r9
 8000498:	e79a      	b.n	80003d0 <__udivmoddi4+0x224>
 800049a:	eba2 0209 	sub.w	r2, r2, r9
 800049e:	fbb2 f9fe 	udiv	r9, r2, lr
 80004a2:	46c4      	mov	ip, r8
 80004a4:	fb09 f804 	mul.w	r8, r9, r4
 80004a8:	e7c4      	b.n	8000434 <__udivmoddi4+0x288>
 80004aa:	bf00      	nop

080004ac <__aeabi_idiv0>:
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop

080004b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b6:	f000 fbcf 	bl	8000c58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ba:	f000 f893 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004be:	f000 f981 	bl	80007c4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004c2:	f000 f8d5 	bl	8000670 <MX_SPI1_Init>
  MX_TIM3_Init();
 80004c6:	f000 f909 	bl	80006dc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  MAX7219_Init();
 80004ca:	f000 fb32 	bl	8000b32 <MAX7219_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80004ce:	2100      	movs	r1, #0
 80004d0:	4842      	ldr	r0, [pc, #264]	@ (80005dc <main+0x12c>)
 80004d2:	f001 ffdd 	bl	8002490 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  MAX7219_Clear();
 80004d6:	f000 fb63 	bl	8000ba0 <MAX7219_Clear>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	for (int i = 0; i < 7; i++) {
 80004da:	2300      	movs	r3, #0
 80004dc:	607b      	str	r3, [r7, #4]
 80004de:	e078      	b.n	80005d2 <main+0x122>
		if (i == 0) { // DO
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d10d      	bne.n	8000502 <main+0x52>
			MAX7219_DisplayChar(4, i);
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	4619      	mov	r1, r3
 80004ec:	2004      	movs	r0, #4
 80004ee:	f000 fb6d 	bl	8000bcc <MAX7219_DisplayChar>
			TIM3->PSC = ((16000000/524)/1600) - 1;
 80004f2:	4b3b      	ldr	r3, [pc, #236]	@ (80005e0 <main+0x130>)
 80004f4:	2212      	movs	r2, #18
 80004f6:	629a      	str	r2, [r3, #40]	@ 0x28
			HAL_Delay(500);
 80004f8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80004fc:	f000 fc1a 	bl	8000d34 <HAL_Delay>
 8000500:	e064      	b.n	80005cc <main+0x11c>
	     } else if (i == 1) { // RE
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	2b01      	cmp	r3, #1
 8000506:	d10d      	bne.n	8000524 <main+0x74>
	        MAX7219_DisplayChar(4, i);
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	b2db      	uxtb	r3, r3
 800050c:	4619      	mov	r1, r3
 800050e:	2004      	movs	r0, #4
 8000510:	f000 fb5c 	bl	8000bcc <MAX7219_DisplayChar>
	        TIM3->PSC = ((16000000/587)/1600) - 1;
 8000514:	4b32      	ldr	r3, [pc, #200]	@ (80005e0 <main+0x130>)
 8000516:	2210      	movs	r2, #16
 8000518:	629a      	str	r2, [r3, #40]	@ 0x28
	        HAL_Delay(500);
 800051a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800051e:	f000 fc09 	bl	8000d34 <HAL_Delay>
 8000522:	e053      	b.n	80005cc <main+0x11c>
	     } else if (i == 2) { // MI
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2b02      	cmp	r3, #2
 8000528:	d10d      	bne.n	8000546 <main+0x96>
	       MAX7219_DisplayChar(4, i);
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	b2db      	uxtb	r3, r3
 800052e:	4619      	mov	r1, r3
 8000530:	2004      	movs	r0, #4
 8000532:	f000 fb4b 	bl	8000bcc <MAX7219_DisplayChar>
	       TIM3->PSC = ((16000000/662)/1600) - 1;
 8000536:	4b2a      	ldr	r3, [pc, #168]	@ (80005e0 <main+0x130>)
 8000538:	220e      	movs	r2, #14
 800053a:	629a      	str	r2, [r3, #40]	@ 0x28
	       HAL_Delay(500);
 800053c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000540:	f000 fbf8 	bl	8000d34 <HAL_Delay>
 8000544:	e042      	b.n	80005cc <main+0x11c>
	     } else if (i == 3) { // FA
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	2b03      	cmp	r3, #3
 800054a:	d10d      	bne.n	8000568 <main+0xb8>
	       MAX7219_DisplayChar(4, i);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	b2db      	uxtb	r3, r3
 8000550:	4619      	mov	r1, r3
 8000552:	2004      	movs	r0, #4
 8000554:	f000 fb3a 	bl	8000bcc <MAX7219_DisplayChar>
	       TIM3->PSC = ((16000000/701)/1600) - 1;
 8000558:	4b21      	ldr	r3, [pc, #132]	@ (80005e0 <main+0x130>)
 800055a:	220d      	movs	r2, #13
 800055c:	629a      	str	r2, [r3, #40]	@ 0x28
	       HAL_Delay(500);
 800055e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000562:	f000 fbe7 	bl	8000d34 <HAL_Delay>
 8000566:	e031      	b.n	80005cc <main+0x11c>
	     } else if (i == 4) { // SOL
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	2b04      	cmp	r3, #4
 800056c:	d10d      	bne.n	800058a <main+0xda>
	       MAX7219_DisplayChar(4, i);
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	b2db      	uxtb	r3, r3
 8000572:	4619      	mov	r1, r3
 8000574:	2004      	movs	r0, #4
 8000576:	f000 fb29 	bl	8000bcc <MAX7219_DisplayChar>
	       TIM3->PSC = ((16000000/787)/1600) - 1;
 800057a:	4b19      	ldr	r3, [pc, #100]	@ (80005e0 <main+0x130>)
 800057c:	220b      	movs	r2, #11
 800057e:	629a      	str	r2, [r3, #40]	@ 0x28
	       HAL_Delay(500);
 8000580:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000584:	f000 fbd6 	bl	8000d34 <HAL_Delay>
 8000588:	e020      	b.n	80005cc <main+0x11c>
	     } else if (i == 5) { // LA
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2b05      	cmp	r3, #5
 800058e:	d10d      	bne.n	80005ac <main+0xfc>
	        MAX7219_DisplayChar(4, i);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	b2db      	uxtb	r3, r3
 8000594:	4619      	mov	r1, r3
 8000596:	2004      	movs	r0, #4
 8000598:	f000 fb18 	bl	8000bcc <MAX7219_DisplayChar>
	        TIM3->PSC = ((16000000/878)/1600) - 1;
 800059c:	4b10      	ldr	r3, [pc, #64]	@ (80005e0 <main+0x130>)
 800059e:	220a      	movs	r2, #10
 80005a0:	629a      	str	r2, [r3, #40]	@ 0x28
	        HAL_Delay(500);
 80005a2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005a6:	f000 fbc5 	bl	8000d34 <HAL_Delay>
 80005aa:	e00f      	b.n	80005cc <main+0x11c>
	     } else if (i == 6) { // SI
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2b06      	cmp	r3, #6
 80005b0:	d10c      	bne.n	80005cc <main+0x11c>
	        MAX7219_DisplayChar(4, i);
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	4619      	mov	r1, r3
 80005b8:	2004      	movs	r0, #4
 80005ba:	f000 fb07 	bl	8000bcc <MAX7219_DisplayChar>
	        TIM3->PSC = ((16000000/1004)/1600) - 1;
 80005be:	4b08      	ldr	r3, [pc, #32]	@ (80005e0 <main+0x130>)
 80005c0:	2208      	movs	r2, #8
 80005c2:	629a      	str	r2, [r3, #40]	@ 0x28
	        HAL_Delay(500);
 80005c4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005c8:	f000 fbb4 	bl	8000d34 <HAL_Delay>
	for (int i = 0; i < 7; i++) {
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	3301      	adds	r3, #1
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2b06      	cmp	r3, #6
 80005d6:	dd83      	ble.n	80004e0 <main+0x30>
 80005d8:	e77f      	b.n	80004da <main+0x2a>
 80005da:	bf00      	nop
 80005dc:	20000080 	.word	0x20000080
 80005e0:	40000400 	.word	0x40000400

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b092      	sub	sp, #72	@ 0x48
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	2234      	movs	r2, #52	@ 0x34
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f002 fbf0 	bl	8002dd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	463b      	mov	r3, r7
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000606:	4b19      	ldr	r3, [pc, #100]	@ (800066c <SystemClock_Config+0x88>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 800060e:	4a17      	ldr	r2, [pc, #92]	@ (800066c <SystemClock_Config+0x88>)
 8000610:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000614:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000616:	2302      	movs	r3, #2
 8000618:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800061a:	2301      	movs	r3, #1
 800061c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061e:	2310      	movs	r3, #16
 8000620:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000622:	2300      	movs	r3, #0
 8000624:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	4618      	mov	r0, r3
 800062c:	f000 fe7c 	bl	8001328 <HAL_RCC_OscConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000636:	f000 f94b 	bl	80008d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063a:	230f      	movs	r3, #15
 800063c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800063e:	2301      	movs	r3, #1
 8000640:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800064e:	463b      	mov	r3, r7
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f001 f998 	bl	8001988 <HAL_RCC_ClockConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800065e:	f000 f937 	bl	80008d0 <Error_Handler>
  }
}
 8000662:	bf00      	nop
 8000664:	3748      	adds	r7, #72	@ 0x48
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40007000 	.word	0x40007000

08000670 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000674:	4b17      	ldr	r3, [pc, #92]	@ (80006d4 <MX_SPI1_Init+0x64>)
 8000676:	4a18      	ldr	r2, [pc, #96]	@ (80006d8 <MX_SPI1_Init+0x68>)
 8000678:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800067a:	4b16      	ldr	r3, [pc, #88]	@ (80006d4 <MX_SPI1_Init+0x64>)
 800067c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000680:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000682:	4b14      	ldr	r3, [pc, #80]	@ (80006d4 <MX_SPI1_Init+0x64>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000688:	4b12      	ldr	r3, [pc, #72]	@ (80006d4 <MX_SPI1_Init+0x64>)
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800068e:	4b11      	ldr	r3, [pc, #68]	@ (80006d4 <MX_SPI1_Init+0x64>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000694:	4b0f      	ldr	r3, [pc, #60]	@ (80006d4 <MX_SPI1_Init+0x64>)
 8000696:	2200      	movs	r2, #0
 8000698:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800069a:	4b0e      	ldr	r3, [pc, #56]	@ (80006d4 <MX_SPI1_Init+0x64>)
 800069c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006a2:	4b0c      	ldr	r3, [pc, #48]	@ (80006d4 <MX_SPI1_Init+0x64>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006a8:	4b0a      	ldr	r3, [pc, #40]	@ (80006d4 <MX_SPI1_Init+0x64>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ae:	4b09      	ldr	r3, [pc, #36]	@ (80006d4 <MX_SPI1_Init+0x64>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006b4:	4b07      	ldr	r3, [pc, #28]	@ (80006d4 <MX_SPI1_Init+0x64>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006ba:	4b06      	ldr	r3, [pc, #24]	@ (80006d4 <MX_SPI1_Init+0x64>)
 80006bc:	220a      	movs	r2, #10
 80006be:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006c0:	4804      	ldr	r0, [pc, #16]	@ (80006d4 <MX_SPI1_Init+0x64>)
 80006c2:	f001 fbb3 	bl	8001e2c <HAL_SPI_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006cc:	f000 f900 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000028 	.word	0x20000028
 80006d8:	40013000 	.word	0x40013000

080006dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	@ 0x28
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006e2:	f107 0318 	add.w	r3, r7, #24
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f0:	f107 0310 	add.w	r3, r7, #16
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006fa:	463b      	mov	r3, r7
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000706:	4b2d      	ldr	r3, [pc, #180]	@ (80007bc <MX_TIM3_Init+0xe0>)
 8000708:	4a2d      	ldr	r2, [pc, #180]	@ (80007c0 <MX_TIM3_Init+0xe4>)
 800070a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 19-1;
 800070c:	4b2b      	ldr	r3, [pc, #172]	@ (80007bc <MX_TIM3_Init+0xe0>)
 800070e:	2212      	movs	r2, #18
 8000710:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000712:	4b2a      	ldr	r3, [pc, #168]	@ (80007bc <MX_TIM3_Init+0xe0>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1600-1;
 8000718:	4b28      	ldr	r3, [pc, #160]	@ (80007bc <MX_TIM3_Init+0xe0>)
 800071a:	f240 623f 	movw	r2, #1599	@ 0x63f
 800071e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000720:	4b26      	ldr	r3, [pc, #152]	@ (80007bc <MX_TIM3_Init+0xe0>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000726:	4b25      	ldr	r3, [pc, #148]	@ (80007bc <MX_TIM3_Init+0xe0>)
 8000728:	2280      	movs	r2, #128	@ 0x80
 800072a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800072c:	4823      	ldr	r0, [pc, #140]	@ (80007bc <MX_TIM3_Init+0xe0>)
 800072e:	f001 fe27 	bl	8002380 <HAL_TIM_Base_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8000738:	f000 f8ca 	bl	80008d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800073c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000740:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000742:	f107 0318 	add.w	r3, r7, #24
 8000746:	4619      	mov	r1, r3
 8000748:	481c      	ldr	r0, [pc, #112]	@ (80007bc <MX_TIM3_Init+0xe0>)
 800074a:	f001 fff9 	bl	8002740 <HAL_TIM_ConfigClockSource>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000754:	f000 f8bc 	bl	80008d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000758:	4818      	ldr	r0, [pc, #96]	@ (80007bc <MX_TIM3_Init+0xe0>)
 800075a:	f001 fe50 	bl	80023fe <HAL_TIM_PWM_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000764:	f000 f8b4 	bl	80008d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000768:	2300      	movs	r3, #0
 800076a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000770:	f107 0310 	add.w	r3, r7, #16
 8000774:	4619      	mov	r1, r3
 8000776:	4811      	ldr	r0, [pc, #68]	@ (80007bc <MX_TIM3_Init+0xe0>)
 8000778:	f002 fad0 	bl	8002d1c <HAL_TIMEx_MasterConfigSynchronization>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8000782:	f000 f8a5 	bl	80008d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000786:	2360      	movs	r3, #96	@ 0x60
 8000788:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 800-1;
 800078a:	f240 331f 	movw	r3, #799	@ 0x31f
 800078e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000790:	2300      	movs	r3, #0
 8000792:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000798:	463b      	mov	r3, r7
 800079a:	2200      	movs	r2, #0
 800079c:	4619      	mov	r1, r3
 800079e:	4807      	ldr	r0, [pc, #28]	@ (80007bc <MX_TIM3_Init+0xe0>)
 80007a0:	f001 ff0c 	bl	80025bc <HAL_TIM_PWM_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 80007aa:	f000 f891 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80007ae:	4803      	ldr	r0, [pc, #12]	@ (80007bc <MX_TIM3_Init+0xe0>)
 80007b0:	f000 f924 	bl	80009fc <HAL_TIM_MspPostInit>

}
 80007b4:	bf00      	nop
 80007b6:	3728      	adds	r7, #40	@ 0x28
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000080 	.word	0x20000080
 80007c0:	40000400 	.word	0x40000400

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b088      	sub	sp, #32
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007da:	4b39      	ldr	r3, [pc, #228]	@ (80008c0 <MX_GPIO_Init+0xfc>)
 80007dc:	69db      	ldr	r3, [r3, #28]
 80007de:	4a38      	ldr	r2, [pc, #224]	@ (80008c0 <MX_GPIO_Init+0xfc>)
 80007e0:	f043 0304 	orr.w	r3, r3, #4
 80007e4:	61d3      	str	r3, [r2, #28]
 80007e6:	4b36      	ldr	r3, [pc, #216]	@ (80008c0 <MX_GPIO_Init+0xfc>)
 80007e8:	69db      	ldr	r3, [r3, #28]
 80007ea:	f003 0304 	and.w	r3, r3, #4
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	4b33      	ldr	r3, [pc, #204]	@ (80008c0 <MX_GPIO_Init+0xfc>)
 80007f4:	69db      	ldr	r3, [r3, #28]
 80007f6:	4a32      	ldr	r2, [pc, #200]	@ (80008c0 <MX_GPIO_Init+0xfc>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	61d3      	str	r3, [r2, #28]
 80007fe:	4b30      	ldr	r3, [pc, #192]	@ (80008c0 <MX_GPIO_Init+0xfc>)
 8000800:	69db      	ldr	r3, [r3, #28]
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080a:	4b2d      	ldr	r3, [pc, #180]	@ (80008c0 <MX_GPIO_Init+0xfc>)
 800080c:	69db      	ldr	r3, [r3, #28]
 800080e:	4a2c      	ldr	r2, [pc, #176]	@ (80008c0 <MX_GPIO_Init+0xfc>)
 8000810:	f043 0302 	orr.w	r3, r3, #2
 8000814:	61d3      	str	r3, [r2, #28]
 8000816:	4b2a      	ldr	r3, [pc, #168]	@ (80008c0 <MX_GPIO_Init+0xfc>)
 8000818:	69db      	ldr	r3, [r3, #28]
 800081a:	f003 0302 	and.w	r3, r3, #2
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	2101      	movs	r1, #1
 8000826:	4827      	ldr	r0, [pc, #156]	@ (80008c4 <MX_GPIO_Init+0x100>)
 8000828:	f000 fd44 	bl	80012b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800082c:	2301      	movs	r3, #1
 800082e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000830:	2301      	movs	r3, #1
 8000832:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	2300      	movs	r3, #0
 800083a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	4619      	mov	r1, r3
 8000842:	4820      	ldr	r0, [pc, #128]	@ (80008c4 <MX_GPIO_Init+0x100>)
 8000844:	f000 fba6 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000848:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800084c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084e:	2302      	movs	r3, #2
 8000850:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800085a:	2303      	movs	r3, #3
 800085c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085e:	f107 030c 	add.w	r3, r7, #12
 8000862:	4619      	mov	r1, r3
 8000864:	4818      	ldr	r0, [pc, #96]	@ (80008c8 <MX_GPIO_Init+0x104>)
 8000866:	f000 fb95 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800086a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800086e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000870:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000874:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087a:	f107 030c 	add.w	r3, r7, #12
 800087e:	4619      	mov	r1, r3
 8000880:	4812      	ldr	r0, [pc, #72]	@ (80008cc <MX_GPIO_Init+0x108>)
 8000882:	f000 fb87 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000886:	2380      	movs	r3, #128	@ 0x80
 8000888:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	2302      	movs	r3, #2
 800088c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000896:	2302      	movs	r3, #2
 8000898:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089a:	f107 030c 	add.w	r3, r7, #12
 800089e:	4619      	mov	r1, r3
 80008a0:	4809      	ldr	r0, [pc, #36]	@ (80008c8 <MX_GPIO_Init+0x104>)
 80008a2:	f000 fb77 	bl	8000f94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2100      	movs	r1, #0
 80008aa:	2028      	movs	r0, #40	@ 0x28
 80008ac:	f000 fb3b 	bl	8000f26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008b0:	2028      	movs	r0, #40	@ 0x28
 80008b2:	f000 fb54 	bl	8000f5e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008b6:	bf00      	nop
 80008b8:	3720      	adds	r7, #32
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40020800 	.word	0x40020800
 80008c8:	40020400 	.word	0x40020400
 80008cc:	40020000 	.word	0x40020000

080008d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d4:	b672      	cpsid	i
}
 80008d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <Error_Handler+0x8>

080008dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80008e2:	4b14      	ldr	r3, [pc, #80]	@ (8000934 <HAL_MspInit+0x58>)
 80008e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008e6:	4a13      	ldr	r2, [pc, #76]	@ (8000934 <HAL_MspInit+0x58>)
 80008e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80008ec:	6253      	str	r3, [r2, #36]	@ 0x24
 80008ee:	4b11      	ldr	r3, [pc, #68]	@ (8000934 <HAL_MspInit+0x58>)
 80008f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000934 <HAL_MspInit+0x58>)
 80008fc:	6a1b      	ldr	r3, [r3, #32]
 80008fe:	4a0d      	ldr	r2, [pc, #52]	@ (8000934 <HAL_MspInit+0x58>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6213      	str	r3, [r2, #32]
 8000906:	4b0b      	ldr	r3, [pc, #44]	@ (8000934 <HAL_MspInit+0x58>)
 8000908:	6a1b      	ldr	r3, [r3, #32]
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000912:	4b08      	ldr	r3, [pc, #32]	@ (8000934 <HAL_MspInit+0x58>)
 8000914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000916:	4a07      	ldr	r2, [pc, #28]	@ (8000934 <HAL_MspInit+0x58>)
 8000918:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800091c:	6253      	str	r3, [r2, #36]	@ 0x24
 800091e:	4b05      	ldr	r3, [pc, #20]	@ (8000934 <HAL_MspInit+0x58>)
 8000920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092a:	bf00      	nop
 800092c:	3714      	adds	r7, #20
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr
 8000934:	40023800 	.word	0x40023800

08000938 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08a      	sub	sp, #40	@ 0x28
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a17      	ldr	r2, [pc, #92]	@ (80009b4 <HAL_SPI_MspInit+0x7c>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d127      	bne.n	80009aa <HAL_SPI_MspInit+0x72>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800095a:	4b17      	ldr	r3, [pc, #92]	@ (80009b8 <HAL_SPI_MspInit+0x80>)
 800095c:	6a1b      	ldr	r3, [r3, #32]
 800095e:	4a16      	ldr	r2, [pc, #88]	@ (80009b8 <HAL_SPI_MspInit+0x80>)
 8000960:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000964:	6213      	str	r3, [r2, #32]
 8000966:	4b14      	ldr	r3, [pc, #80]	@ (80009b8 <HAL_SPI_MspInit+0x80>)
 8000968:	6a1b      	ldr	r3, [r3, #32]
 800096a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000972:	4b11      	ldr	r3, [pc, #68]	@ (80009b8 <HAL_SPI_MspInit+0x80>)
 8000974:	69db      	ldr	r3, [r3, #28]
 8000976:	4a10      	ldr	r2, [pc, #64]	@ (80009b8 <HAL_SPI_MspInit+0x80>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	61d3      	str	r3, [r2, #28]
 800097e:	4b0e      	ldr	r3, [pc, #56]	@ (80009b8 <HAL_SPI_MspInit+0x80>)
 8000980:	69db      	ldr	r3, [r3, #28]
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800098a:	23e0      	movs	r3, #224	@ 0xe0
 800098c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	2302      	movs	r3, #2
 8000990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000996:	2303      	movs	r3, #3
 8000998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800099a:	2305      	movs	r3, #5
 800099c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	4619      	mov	r1, r3
 80009a4:	4805      	ldr	r0, [pc, #20]	@ (80009bc <HAL_SPI_MspInit+0x84>)
 80009a6:	f000 faf5 	bl	8000f94 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80009aa:	bf00      	nop
 80009ac:	3728      	adds	r7, #40	@ 0x28
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40013000 	.word	0x40013000
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40020000 	.word	0x40020000

080009c0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a09      	ldr	r2, [pc, #36]	@ (80009f4 <HAL_TIM_Base_MspInit+0x34>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d10b      	bne.n	80009ea <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009d2:	4b09      	ldr	r3, [pc, #36]	@ (80009f8 <HAL_TIM_Base_MspInit+0x38>)
 80009d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009d6:	4a08      	ldr	r2, [pc, #32]	@ (80009f8 <HAL_TIM_Base_MspInit+0x38>)
 80009d8:	f043 0302 	orr.w	r3, r3, #2
 80009dc:	6253      	str	r3, [r2, #36]	@ 0x24
 80009de:	4b06      	ldr	r3, [pc, #24]	@ (80009f8 <HAL_TIM_Base_MspInit+0x38>)
 80009e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009e2:	f003 0302 	and.w	r3, r3, #2
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80009ea:	bf00      	nop
 80009ec:	3714      	adds	r7, #20
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr
 80009f4:	40000400 	.word	0x40000400
 80009f8:	40023800 	.word	0x40023800

080009fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b088      	sub	sp, #32
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a11      	ldr	r2, [pc, #68]	@ (8000a60 <HAL_TIM_MspPostInit+0x64>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d11b      	bne.n	8000a56 <HAL_TIM_MspPostInit+0x5a>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1e:	4b11      	ldr	r3, [pc, #68]	@ (8000a64 <HAL_TIM_MspPostInit+0x68>)
 8000a20:	69db      	ldr	r3, [r3, #28]
 8000a22:	4a10      	ldr	r2, [pc, #64]	@ (8000a64 <HAL_TIM_MspPostInit+0x68>)
 8000a24:	f043 0304 	orr.w	r3, r3, #4
 8000a28:	61d3      	str	r3, [r2, #28]
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a64 <HAL_TIM_MspPostInit+0x68>)
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	f003 0304 	and.w	r3, r3, #4
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a36:	2340      	movs	r3, #64	@ 0x40
 8000a38:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000a46:	2302      	movs	r3, #2
 8000a48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a4a:	f107 030c 	add.w	r3, r7, #12
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4805      	ldr	r0, [pc, #20]	@ (8000a68 <HAL_TIM_MspPostInit+0x6c>)
 8000a52:	f000 fa9f 	bl	8000f94 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000a56:	bf00      	nop
 8000a58:	3720      	adds	r7, #32
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40000400 	.word	0x40000400
 8000a64:	40023800 	.word	0x40023800
 8000a68:	40020800 	.word	0x40020800

08000a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a70:	bf00      	nop
 8000a72:	e7fd      	b.n	8000a70 <NMI_Handler+0x4>

08000a74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <HardFault_Handler+0x4>

08000a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a80:	bf00      	nop
 8000a82:	e7fd      	b.n	8000a80 <MemManage_Handler+0x4>

08000a84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a88:	bf00      	nop
 8000a8a:	e7fd      	b.n	8000a88 <BusFault_Handler+0x4>

08000a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a90:	bf00      	nop
 8000a92:	e7fd      	b.n	8000a90 <UsageFault_Handler+0x4>

08000a94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr

08000aa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr

08000aac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr

08000ab8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000abc:	f000 f91e 	bl	8000cfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000ac8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000acc:	f000 fc0a 	bl	80012e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000ad0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000ad4:	f000 fc06 	bl	80012e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}

08000adc <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr

08000ae8 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ae8:	f7ff fff8 	bl	8000adc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aec:	480b      	ldr	r0, [pc, #44]	@ (8000b1c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000aee:	490c      	ldr	r1, [pc, #48]	@ (8000b20 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000af0:	4a0c      	ldr	r2, [pc, #48]	@ (8000b24 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af4:	e002      	b.n	8000afc <LoopCopyDataInit>

08000af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afa:	3304      	adds	r3, #4

08000afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b00:	d3f9      	bcc.n	8000af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b02:	4a09      	ldr	r2, [pc, #36]	@ (8000b28 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b04:	4c09      	ldr	r4, [pc, #36]	@ (8000b2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b08:	e001      	b.n	8000b0e <LoopFillZerobss>

08000b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b0c:	3204      	adds	r2, #4

08000b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b10:	d3fb      	bcc.n	8000b0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b12:	f002 f969 	bl	8002de8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b16:	f7ff fccb 	bl	80004b0 <main>
  bx lr
 8000b1a:	4770      	bx	lr
  ldr r0, =_sdata
 8000b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b20:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b24:	08002e84 	.word	0x08002e84
  ldr r2, =_sbss
 8000b28:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b2c:	200000c4 	.word	0x200000c4

08000b30 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b30:	e7fe      	b.n	8000b30 <ADC1_IRQHandler>

08000b32 <MAX7219_Init>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Init (void)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	af00      	add	r7, sp, #0
                               // configure "LOAD" as output

  MAX7219_Write(REG_SCAN_LIMIT, 7);                   // set up to scan all eight digits
 8000b36:	2107      	movs	r1, #7
 8000b38:	200b      	movs	r0, #11
 8000b3a:	f000 f85d 	bl	8000bf8 <MAX7219_Write>
  MAX7219_Write(REG_DECODE, 0x00);                    // set to "no decode" for all digits
 8000b3e:	2100      	movs	r1, #0
 8000b40:	2009      	movs	r0, #9
 8000b42:	f000 f859 	bl	8000bf8 <MAX7219_Write>
  MAX7219_ShutdownStop();                             // select normal operation (i.e. not shutdown)
 8000b46:	f000 f809 	bl	8000b5c <MAX7219_ShutdownStop>
  MAX7219_DisplayTestStop();                          // select normal operation (i.e. not test mode)
 8000b4a:	f000 f80f 	bl	8000b6c <MAX7219_DisplayTestStop>
  MAX7219_Clear();                                    // clear all digits
 8000b4e:	f000 f827 	bl	8000ba0 <MAX7219_Clear>
  MAX7219_SetBrightness(INTENSITY_MAX);               // set to maximum intensity
 8000b52:	200f      	movs	r0, #15
 8000b54:	f000 f812 	bl	8000b7c <MAX7219_SetBrightness>
}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <MAX7219_ShutdownStop>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_ShutdownStop (void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_SHUTDOWN, 1);                     // put MAX7219 into "normal" mode
 8000b60:	2101      	movs	r1, #1
 8000b62:	200c      	movs	r0, #12
 8000b64:	f000 f848 	bl	8000bf8 <MAX7219_Write>
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <MAX7219_DisplayTestStop>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_DisplayTestStop (void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_DISPLAY_TEST, 0);                 // put MAX7219 into "normal" mode
 8000b70:	2100      	movs	r1, #0
 8000b72:	200f      	movs	r0, #15
 8000b74:	f000 f840 	bl	8000bf8 <MAX7219_Write>
}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <MAX7219_SetBrightness>:
* Arguments  : brightness (0-15)
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_SetBrightness (char brightness)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
  brightness &= 0x0f;                                 // mask off extra bits
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	f003 030f 	and.w	r3, r3, #15
 8000b8c:	71fb      	strb	r3, [r7, #7]
  MAX7219_Write(REG_INTENSITY, brightness);           // set brightness
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	4619      	mov	r1, r3
 8000b92:	200a      	movs	r0, #10
 8000b94:	f000 f830 	bl	8000bf8 <MAX7219_Write>
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <MAX7219_Clear>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Clear (void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
  char i;
  for (i=0; i < 8; i++)
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	71fb      	strb	r3, [r7, #7]
 8000baa:	e007      	b.n	8000bbc <MAX7219_Clear+0x1c>
    MAX7219_Write(i, 0x00);                           // turn all segments off
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f000 f821 	bl	8000bf8 <MAX7219_Write>
  for (i=0; i < 8; i++)
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	71fb      	strb	r3, [r7, #7]
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	2b07      	cmp	r3, #7
 8000bc0:	d9f4      	bls.n	8000bac <MAX7219_Clear+0xc>
}
 8000bc2:	bf00      	nop
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <MAX7219_DisplayChar>:
*              character = character to display (0-9, A-Z)
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_DisplayChar(char digit, char character)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	460a      	mov	r2, r1
 8000bd6:	71fb      	strb	r3, [r7, #7]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	71bb      	strb	r3, [r7, #6]
  //MAX7219_Write(digit, MAX7219_LookupCode(character));
	MAX7219_Write(digit, conv_7seg[character]);
 8000bdc:	79bb      	ldrb	r3, [r7, #6]
 8000bde:	4a05      	ldr	r2, [pc, #20]	@ (8000bf4 <MAX7219_DisplayChar+0x28>)
 8000be0:	5cd2      	ldrb	r2, [r2, r3]
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	4611      	mov	r1, r2
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 f806 	bl	8000bf8 <MAX7219_Write>
}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	08002e64 	.word	0x08002e64

08000bf8 <MAX7219_Write>:
*              dataout = data to write to MAX7219
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Write (unsigned char reg_number, unsigned char dataout)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	460a      	mov	r2, r1
 8000c02:	71fb      	strb	r3, [r7, #7]
 8000c04:	4613      	mov	r3, r2
 8000c06:	71bb      	strb	r3, [r7, #6]
 MAX7219_nCS_PORT->BSRR = (uint32_t)MAX7219_nCS_PIN<<16;// nCS = 0                                          // take LOAD high to begin
 8000c08:	4b09      	ldr	r3, [pc, #36]	@ (8000c30 <MAX7219_Write+0x38>)
 8000c0a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000c0e:	619a      	str	r2, [r3, #24]
  MAX7219_SendByte(reg_number);                       // write register number to MAX7219
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	4618      	mov	r0, r3
 8000c14:	f000 f80e 	bl	8000c34 <MAX7219_SendByte>
  MAX7219_SendByte(dataout);                          // write data to MAX7219
 8000c18:	79bb      	ldrb	r3, [r7, #6]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 f80a 	bl	8000c34 <MAX7219_SendByte>
  MAX7219_nCS_PORT->BSRR = (uint32_t)MAX7219_nCS_PIN;// nCS = 1                                       // take LOAD low to latch in data
 8000c20:	4b03      	ldr	r3, [pc, #12]	@ (8000c30 <MAX7219_Write+0x38>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	619a      	str	r2, [r3, #24]
 }
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40020800 	.word	0x40020800

08000c34 <MAX7219_SendByte>:
* Returns    : none
*********************************************************************************************************
*/

static void MAX7219_SendByte (unsigned char dataout)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]

	HAL_SPI_Transmit(&hspi1, &dataout, 1, 1000);
 8000c3e:	1df9      	adds	r1, r7, #7
 8000c40:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c44:	2201      	movs	r2, #1
 8000c46:	4803      	ldr	r0, [pc, #12]	@ (8000c54 <MAX7219_SendByte+0x20>)
 8000c48:	f001 f979 	bl	8001f3e <HAL_SPI_Transmit>

}
 8000c4c:	bf00      	nop
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000028 	.word	0x20000028

08000c58 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c62:	2003      	movs	r0, #3
 8000c64:	f000 f954 	bl	8000f10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c68:	200f      	movs	r0, #15
 8000c6a:	f000 f80d 	bl	8000c88 <HAL_InitTick>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d002      	beq.n	8000c7a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c74:	2301      	movs	r3, #1
 8000c76:	71fb      	strb	r3, [r7, #7]
 8000c78:	e001      	b.n	8000c7e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c7a:	f7ff fe2f 	bl	80008dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c90:	2300      	movs	r3, #0
 8000c92:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c94:	4b16      	ldr	r3, [pc, #88]	@ (8000cf0 <HAL_InitTick+0x68>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d022      	beq.n	8000ce2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c9c:	4b15      	ldr	r3, [pc, #84]	@ (8000cf4 <HAL_InitTick+0x6c>)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	4b13      	ldr	r3, [pc, #76]	@ (8000cf0 <HAL_InitTick+0x68>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ca8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f000 f962 	bl	8000f7a <HAL_SYSTICK_Config>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d10f      	bne.n	8000cdc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2b0f      	cmp	r3, #15
 8000cc0:	d809      	bhi.n	8000cd6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	6879      	ldr	r1, [r7, #4]
 8000cc6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cca:	f000 f92c 	bl	8000f26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cce:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf8 <HAL_InitTick+0x70>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6013      	str	r3, [r2, #0]
 8000cd4:	e007      	b.n	8000ce6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	73fb      	strb	r3, [r7, #15]
 8000cda:	e004      	b.n	8000ce6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	73fb      	strb	r3, [r7, #15]
 8000ce0:	e001      	b.n	8000ce6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3710      	adds	r7, #16
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000008 	.word	0x20000008
 8000cf4:	20000000 	.word	0x20000000
 8000cf8:	20000004 	.word	0x20000004

08000cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d00:	4b05      	ldr	r3, [pc, #20]	@ (8000d18 <HAL_IncTick+0x1c>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4b05      	ldr	r3, [pc, #20]	@ (8000d1c <HAL_IncTick+0x20>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4413      	add	r3, r2
 8000d0a:	4a03      	ldr	r2, [pc, #12]	@ (8000d18 <HAL_IncTick+0x1c>)
 8000d0c:	6013      	str	r3, [r2, #0]
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	200000c0 	.word	0x200000c0
 8000d1c:	20000008 	.word	0x20000008

08000d20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return uwTick;
 8000d24:	4b02      	ldr	r3, [pc, #8]	@ (8000d30 <HAL_GetTick+0x10>)
 8000d26:	681b      	ldr	r3, [r3, #0]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr
 8000d30:	200000c0 	.word	0x200000c0

08000d34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d3c:	f7ff fff0 	bl	8000d20 <HAL_GetTick>
 8000d40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000d4c:	d004      	beq.n	8000d58 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d4e:	4b09      	ldr	r3, [pc, #36]	@ (8000d74 <HAL_Delay+0x40>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	68fa      	ldr	r2, [r7, #12]
 8000d54:	4413      	add	r3, r2
 8000d56:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d58:	bf00      	nop
 8000d5a:	f7ff ffe1 	bl	8000d20 <HAL_GetTick>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	68fa      	ldr	r2, [r7, #12]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d8f7      	bhi.n	8000d5a <HAL_Delay+0x26>
  {
  }
}
 8000d6a:	bf00      	nop
 8000d6c:	bf00      	nop
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000008 	.word	0x20000008

08000d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d88:	4b0c      	ldr	r3, [pc, #48]	@ (8000dbc <__NVIC_SetPriorityGrouping+0x44>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d8e:	68ba      	ldr	r2, [r7, #8]
 8000d90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d94:	4013      	ands	r3, r2
 8000d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000da4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000daa:	4a04      	ldr	r2, [pc, #16]	@ (8000dbc <__NVIC_SetPriorityGrouping+0x44>)
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	60d3      	str	r3, [r2, #12]
}
 8000db0:	bf00      	nop
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bc80      	pop	{r7}
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc4:	4b04      	ldr	r3, [pc, #16]	@ (8000dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	0a1b      	lsrs	r3, r3, #8
 8000dca:	f003 0307 	and.w	r3, r3, #7
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bc80      	pop	{r7}
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	db0b      	blt.n	8000e06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	f003 021f 	and.w	r2, r3, #31
 8000df4:	4906      	ldr	r1, [pc, #24]	@ (8000e10 <__NVIC_EnableIRQ+0x34>)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	095b      	lsrs	r3, r3, #5
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8000e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr
 8000e10:	e000e100 	.word	0xe000e100

08000e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	6039      	str	r1, [r7, #0]
 8000e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	db0a      	blt.n	8000e3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	490c      	ldr	r1, [pc, #48]	@ (8000e60 <__NVIC_SetPriority+0x4c>)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	0112      	lsls	r2, r2, #4
 8000e34:	b2d2      	uxtb	r2, r2
 8000e36:	440b      	add	r3, r1
 8000e38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e3c:	e00a      	b.n	8000e54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	4908      	ldr	r1, [pc, #32]	@ (8000e64 <__NVIC_SetPriority+0x50>)
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	f003 030f 	and.w	r3, r3, #15
 8000e4a:	3b04      	subs	r3, #4
 8000e4c:	0112      	lsls	r2, r2, #4
 8000e4e:	b2d2      	uxtb	r2, r2
 8000e50:	440b      	add	r3, r1
 8000e52:	761a      	strb	r2, [r3, #24]
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000e100 	.word	0xe000e100
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b089      	sub	sp, #36	@ 0x24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	f1c3 0307 	rsb	r3, r3, #7
 8000e82:	2b04      	cmp	r3, #4
 8000e84:	bf28      	it	cs
 8000e86:	2304      	movcs	r3, #4
 8000e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	2b06      	cmp	r3, #6
 8000e90:	d902      	bls.n	8000e98 <NVIC_EncodePriority+0x30>
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3b03      	subs	r3, #3
 8000e96:	e000      	b.n	8000e9a <NVIC_EncodePriority+0x32>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43da      	mvns	r2, r3
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	401a      	ands	r2, r3
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eba:	43d9      	mvns	r1, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec0:	4313      	orrs	r3, r2
         );
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3724      	adds	r7, #36	@ 0x24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr

08000ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000edc:	d301      	bcc.n	8000ee2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e00f      	b.n	8000f02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8000f0c <SysTick_Config+0x40>)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eea:	210f      	movs	r1, #15
 8000eec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ef0:	f7ff ff90 	bl	8000e14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef4:	4b05      	ldr	r3, [pc, #20]	@ (8000f0c <SysTick_Config+0x40>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efa:	4b04      	ldr	r3, [pc, #16]	@ (8000f0c <SysTick_Config+0x40>)
 8000efc:	2207      	movs	r2, #7
 8000efe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	e000e010 	.word	0xe000e010

08000f10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff ff2d 	bl	8000d78 <__NVIC_SetPriorityGrouping>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b086      	sub	sp, #24
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
 8000f32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f38:	f7ff ff42 	bl	8000dc0 <__NVIC_GetPriorityGrouping>
 8000f3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	68b9      	ldr	r1, [r7, #8]
 8000f42:	6978      	ldr	r0, [r7, #20]
 8000f44:	f7ff ff90 	bl	8000e68 <NVIC_EncodePriority>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff5f 	bl	8000e14 <__NVIC_SetPriority>
}
 8000f56:	bf00      	nop
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	4603      	mov	r3, r0
 8000f66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ff35 	bl	8000ddc <__NVIC_EnableIRQ>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff ffa2 	bl	8000ecc <SysTick_Config>
 8000f88:	4603      	mov	r3, r0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b087      	sub	sp, #28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000faa:	e160      	b.n	800126e <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb8:	4013      	ands	r3, r2
 8000fba:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	f000 8152 	beq.w	8001268 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d005      	beq.n	8000fdc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d130      	bne.n	800103e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	68da      	ldr	r2, [r3, #12]
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4313      	orrs	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001012:	2201      	movs	r2, #1
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43db      	mvns	r3, r3
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	4013      	ands	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	091b      	lsrs	r3, r3, #4
 8001028:	f003 0201 	and.w	r2, r3, #1
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4313      	orrs	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 0303 	and.w	r3, r3, #3
 8001046:	2b03      	cmp	r3, #3
 8001048:	d017      	beq.n	800107a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	2203      	movs	r2, #3
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43db      	mvns	r3, r3
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	4013      	ands	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	689a      	ldr	r2, [r3, #8]
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4313      	orrs	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f003 0303 	and.w	r3, r3, #3
 8001082:	2b02      	cmp	r3, #2
 8001084:	d123      	bne.n	80010ce <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	08da      	lsrs	r2, r3, #3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3208      	adds	r2, #8
 800108e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001092:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	220f      	movs	r2, #15
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	4013      	ands	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	691a      	ldr	r2, [r3, #16]
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	f003 0307 	and.w	r3, r3, #7
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4313      	orrs	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	08da      	lsrs	r2, r3, #3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3208      	adds	r2, #8
 80010c8:	6939      	ldr	r1, [r7, #16]
 80010ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	2203      	movs	r2, #3
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43db      	mvns	r3, r3
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	4013      	ands	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f003 0203 	and.w	r2, r3, #3
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800110a:	2b00      	cmp	r3, #0
 800110c:	f000 80ac 	beq.w	8001268 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001110:	4b5e      	ldr	r3, [pc, #376]	@ (800128c <HAL_GPIO_Init+0x2f8>)
 8001112:	6a1b      	ldr	r3, [r3, #32]
 8001114:	4a5d      	ldr	r2, [pc, #372]	@ (800128c <HAL_GPIO_Init+0x2f8>)
 8001116:	f043 0301 	orr.w	r3, r3, #1
 800111a:	6213      	str	r3, [r2, #32]
 800111c:	4b5b      	ldr	r3, [pc, #364]	@ (800128c <HAL_GPIO_Init+0x2f8>)
 800111e:	6a1b      	ldr	r3, [r3, #32]
 8001120:	f003 0301 	and.w	r3, r3, #1
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001128:	4a59      	ldr	r2, [pc, #356]	@ (8001290 <HAL_GPIO_Init+0x2fc>)
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	089b      	lsrs	r3, r3, #2
 800112e:	3302      	adds	r3, #2
 8001130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001134:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	220f      	movs	r2, #15
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	4013      	ands	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a51      	ldr	r2, [pc, #324]	@ (8001294 <HAL_GPIO_Init+0x300>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d025      	beq.n	80011a0 <HAL_GPIO_Init+0x20c>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a50      	ldr	r2, [pc, #320]	@ (8001298 <HAL_GPIO_Init+0x304>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d01f      	beq.n	800119c <HAL_GPIO_Init+0x208>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a4f      	ldr	r2, [pc, #316]	@ (800129c <HAL_GPIO_Init+0x308>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d019      	beq.n	8001198 <HAL_GPIO_Init+0x204>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a4e      	ldr	r2, [pc, #312]	@ (80012a0 <HAL_GPIO_Init+0x30c>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d013      	beq.n	8001194 <HAL_GPIO_Init+0x200>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a4d      	ldr	r2, [pc, #308]	@ (80012a4 <HAL_GPIO_Init+0x310>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d00d      	beq.n	8001190 <HAL_GPIO_Init+0x1fc>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a4c      	ldr	r2, [pc, #304]	@ (80012a8 <HAL_GPIO_Init+0x314>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d007      	beq.n	800118c <HAL_GPIO_Init+0x1f8>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a4b      	ldr	r2, [pc, #300]	@ (80012ac <HAL_GPIO_Init+0x318>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d101      	bne.n	8001188 <HAL_GPIO_Init+0x1f4>
 8001184:	2306      	movs	r3, #6
 8001186:	e00c      	b.n	80011a2 <HAL_GPIO_Init+0x20e>
 8001188:	2307      	movs	r3, #7
 800118a:	e00a      	b.n	80011a2 <HAL_GPIO_Init+0x20e>
 800118c:	2305      	movs	r3, #5
 800118e:	e008      	b.n	80011a2 <HAL_GPIO_Init+0x20e>
 8001190:	2304      	movs	r3, #4
 8001192:	e006      	b.n	80011a2 <HAL_GPIO_Init+0x20e>
 8001194:	2303      	movs	r3, #3
 8001196:	e004      	b.n	80011a2 <HAL_GPIO_Init+0x20e>
 8001198:	2302      	movs	r3, #2
 800119a:	e002      	b.n	80011a2 <HAL_GPIO_Init+0x20e>
 800119c:	2301      	movs	r3, #1
 800119e:	e000      	b.n	80011a2 <HAL_GPIO_Init+0x20e>
 80011a0:	2300      	movs	r3, #0
 80011a2:	697a      	ldr	r2, [r7, #20]
 80011a4:	f002 0203 	and.w	r2, r2, #3
 80011a8:	0092      	lsls	r2, r2, #2
 80011aa:	4093      	lsls	r3, r2
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80011b2:	4937      	ldr	r1, [pc, #220]	@ (8001290 <HAL_GPIO_Init+0x2fc>)
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	089b      	lsrs	r3, r3, #2
 80011b8:	3302      	adds	r3, #2
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011c0:	4b3b      	ldr	r3, [pc, #236]	@ (80012b0 <HAL_GPIO_Init+0x31c>)
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	43db      	mvns	r3, r3
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	4013      	ands	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d003      	beq.n	80011e4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011e4:	4a32      	ldr	r2, [pc, #200]	@ (80012b0 <HAL_GPIO_Init+0x31c>)
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011ea:	4b31      	ldr	r3, [pc, #196]	@ (80012b0 <HAL_GPIO_Init+0x31c>)
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	43db      	mvns	r3, r3
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	4013      	ands	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	4313      	orrs	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800120e:	4a28      	ldr	r2, [pc, #160]	@ (80012b0 <HAL_GPIO_Init+0x31c>)
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001214:	4b26      	ldr	r3, [pc, #152]	@ (80012b0 <HAL_GPIO_Init+0x31c>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	43db      	mvns	r3, r3
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	4013      	ands	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d003      	beq.n	8001238 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	4313      	orrs	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001238:	4a1d      	ldr	r2, [pc, #116]	@ (80012b0 <HAL_GPIO_Init+0x31c>)
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800123e:	4b1c      	ldr	r3, [pc, #112]	@ (80012b0 <HAL_GPIO_Init+0x31c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	43db      	mvns	r3, r3
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	4013      	ands	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4313      	orrs	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001262:	4a13      	ldr	r2, [pc, #76]	@ (80012b0 <HAL_GPIO_Init+0x31c>)
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	3301      	adds	r3, #1
 800126c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	fa22 f303 	lsr.w	r3, r2, r3
 8001278:	2b00      	cmp	r3, #0
 800127a:	f47f ae97 	bne.w	8000fac <HAL_GPIO_Init+0x18>
  }
}
 800127e:	bf00      	nop
 8001280:	bf00      	nop
 8001282:	371c      	adds	r7, #28
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	40023800 	.word	0x40023800
 8001290:	40010000 	.word	0x40010000
 8001294:	40020000 	.word	0x40020000
 8001298:	40020400 	.word	0x40020400
 800129c:	40020800 	.word	0x40020800
 80012a0:	40020c00 	.word	0x40020c00
 80012a4:	40021000 	.word	0x40021000
 80012a8:	40021400 	.word	0x40021400
 80012ac:	40021800 	.word	0x40021800
 80012b0:	40010400 	.word	0x40010400

080012b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	460b      	mov	r3, r1
 80012be:	807b      	strh	r3, [r7, #2]
 80012c0:	4613      	mov	r3, r2
 80012c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012c4:	787b      	ldrb	r3, [r7, #1]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012ca:	887a      	ldrh	r2, [r7, #2]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80012d0:	e003      	b.n	80012da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80012d2:	887b      	ldrh	r3, [r7, #2]
 80012d4:	041a      	lsls	r2, r3, #16
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	619a      	str	r2, [r3, #24]
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr

080012e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80012ee:	4b08      	ldr	r3, [pc, #32]	@ (8001310 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012f0:	695a      	ldr	r2, [r3, #20]
 80012f2:	88fb      	ldrh	r3, [r7, #6]
 80012f4:	4013      	ands	r3, r2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d006      	beq.n	8001308 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012fa:	4a05      	ldr	r2, [pc, #20]	@ (8001310 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012fc:	88fb      	ldrh	r3, [r7, #6]
 80012fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001300:	88fb      	ldrh	r3, [r7, #6]
 8001302:	4618      	mov	r0, r3
 8001304:	f000 f806 	bl	8001314 <HAL_GPIO_EXTI_Callback>
  }
}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40010400 	.word	0x40010400

08001314 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr

08001328 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b088      	sub	sp, #32
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d101      	bne.n	800133a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e31d      	b.n	8001976 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800133a:	4b94      	ldr	r3, [pc, #592]	@ (800158c <HAL_RCC_OscConfig+0x264>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f003 030c 	and.w	r3, r3, #12
 8001342:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001344:	4b91      	ldr	r3, [pc, #580]	@ (800158c <HAL_RCC_OscConfig+0x264>)
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800134c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	2b00      	cmp	r3, #0
 8001358:	d07b      	beq.n	8001452 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	2b08      	cmp	r3, #8
 800135e:	d006      	beq.n	800136e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	2b0c      	cmp	r3, #12
 8001364:	d10f      	bne.n	8001386 <HAL_RCC_OscConfig+0x5e>
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800136c:	d10b      	bne.n	8001386 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800136e:	4b87      	ldr	r3, [pc, #540]	@ (800158c <HAL_RCC_OscConfig+0x264>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d06a      	beq.n	8001450 <HAL_RCC_OscConfig+0x128>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d166      	bne.n	8001450 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e2f7      	b.n	8001976 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d106      	bne.n	800139c <HAL_RCC_OscConfig+0x74>
 800138e:	4b7f      	ldr	r3, [pc, #508]	@ (800158c <HAL_RCC_OscConfig+0x264>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a7e      	ldr	r2, [pc, #504]	@ (800158c <HAL_RCC_OscConfig+0x264>)
 8001394:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	e02d      	b.n	80013f8 <HAL_RCC_OscConfig+0xd0>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d10c      	bne.n	80013be <HAL_RCC_OscConfig+0x96>
 80013a4:	4b79      	ldr	r3, [pc, #484]	@ (800158c <HAL_RCC_OscConfig+0x264>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a78      	ldr	r2, [pc, #480]	@ (800158c <HAL_RCC_OscConfig+0x264>)
 80013aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013ae:	6013      	str	r3, [r2, #0]
 80013b0:	4b76      	ldr	r3, [pc, #472]	@ (800158c <HAL_RCC_OscConfig+0x264>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a75      	ldr	r2, [pc, #468]	@ (800158c <HAL_RCC_OscConfig+0x264>)
 80013b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013ba:	6013      	str	r3, [r2, #0]
 80013bc:	e01c      	b.n	80013f8 <HAL_RCC_OscConfig+0xd0>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	2b05      	cmp	r3, #5
 80013c4:	d10c      	bne.n	80013e0 <HAL_RCC_OscConfig+0xb8>
 80013c6:	4b71      	ldr	r3, [pc, #452]	@ (800158c <HAL_RCC_OscConfig+0x264>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a70      	ldr	r2, [pc, #448]	@ (800158c <HAL_RCC_OscConfig+0x264>)
 80013cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	4b6e      	ldr	r3, [pc, #440]	@ (800158c <HAL_RCC_OscConfig+0x264>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a6d      	ldr	r2, [pc, #436]	@ (800158c <HAL_RCC_OscConfig+0x264>)
 80013d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	e00b      	b.n	80013f8 <HAL_RCC_OscConfig+0xd0>
 80013e0:	4b6a      	ldr	r3, [pc, #424]	@ (800158c <HAL_RCC_OscConfig+0x264>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a69      	ldr	r2, [pc, #420]	@ (800158c <HAL_RCC_OscConfig+0x264>)
 80013e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013ea:	6013      	str	r3, [r2, #0]
 80013ec:	4b67      	ldr	r3, [pc, #412]	@ (800158c <HAL_RCC_OscConfig+0x264>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a66      	ldr	r2, [pc, #408]	@ (800158c <HAL_RCC_OscConfig+0x264>)
 80013f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d013      	beq.n	8001428 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001400:	f7ff fc8e 	bl	8000d20 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001408:	f7ff fc8a 	bl	8000d20 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b64      	cmp	r3, #100	@ 0x64
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e2ad      	b.n	8001976 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800141a:	4b5c      	ldr	r3, [pc, #368]	@ (800158c <HAL_RCC_OscConfig+0x264>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0f0      	beq.n	8001408 <HAL_RCC_OscConfig+0xe0>
 8001426:	e014      	b.n	8001452 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001428:	f7ff fc7a 	bl	8000d20 <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001430:	f7ff fc76 	bl	8000d20 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b64      	cmp	r3, #100	@ 0x64
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e299      	b.n	8001976 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001442:	4b52      	ldr	r3, [pc, #328]	@ (800158c <HAL_RCC_OscConfig+0x264>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f0      	bne.n	8001430 <HAL_RCC_OscConfig+0x108>
 800144e:	e000      	b.n	8001452 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d05a      	beq.n	8001514 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	2b04      	cmp	r3, #4
 8001462:	d005      	beq.n	8001470 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	2b0c      	cmp	r3, #12
 8001468:	d119      	bne.n	800149e <HAL_RCC_OscConfig+0x176>
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d116      	bne.n	800149e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001470:	4b46      	ldr	r3, [pc, #280]	@ (800158c <HAL_RCC_OscConfig+0x264>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d005      	beq.n	8001488 <HAL_RCC_OscConfig+0x160>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d001      	beq.n	8001488 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e276      	b.n	8001976 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001488:	4b40      	ldr	r3, [pc, #256]	@ (800158c <HAL_RCC_OscConfig+0x264>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	691b      	ldr	r3, [r3, #16]
 8001494:	021b      	lsls	r3, r3, #8
 8001496:	493d      	ldr	r1, [pc, #244]	@ (800158c <HAL_RCC_OscConfig+0x264>)
 8001498:	4313      	orrs	r3, r2
 800149a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800149c:	e03a      	b.n	8001514 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d020      	beq.n	80014e8 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014a6:	4b3a      	ldr	r3, [pc, #232]	@ (8001590 <HAL_RCC_OscConfig+0x268>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ac:	f7ff fc38 	bl	8000d20 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014b4:	f7ff fc34 	bl	8000d20 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e257      	b.n	8001976 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014c6:	4b31      	ldr	r3, [pc, #196]	@ (800158c <HAL_RCC_OscConfig+0x264>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0f0      	beq.n	80014b4 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d2:	4b2e      	ldr	r3, [pc, #184]	@ (800158c <HAL_RCC_OscConfig+0x264>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	021b      	lsls	r3, r3, #8
 80014e0:	492a      	ldr	r1, [pc, #168]	@ (800158c <HAL_RCC_OscConfig+0x264>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	604b      	str	r3, [r1, #4]
 80014e6:	e015      	b.n	8001514 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014e8:	4b29      	ldr	r3, [pc, #164]	@ (8001590 <HAL_RCC_OscConfig+0x268>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ee:	f7ff fc17 	bl	8000d20 <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80014f4:	e008      	b.n	8001508 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014f6:	f7ff fc13 	bl	8000d20 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e236      	b.n	8001976 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001508:	4b20      	ldr	r3, [pc, #128]	@ (800158c <HAL_RCC_OscConfig+0x264>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1f0      	bne.n	80014f6 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0310 	and.w	r3, r3, #16
 800151c:	2b00      	cmp	r3, #0
 800151e:	f000 80b8 	beq.w	8001692 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d170      	bne.n	800160a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001528:	4b18      	ldr	r3, [pc, #96]	@ (800158c <HAL_RCC_OscConfig+0x264>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001530:	2b00      	cmp	r3, #0
 8001532:	d005      	beq.n	8001540 <HAL_RCC_OscConfig+0x218>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e21a      	b.n	8001976 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a1a      	ldr	r2, [r3, #32]
 8001544:	4b11      	ldr	r3, [pc, #68]	@ (800158c <HAL_RCC_OscConfig+0x264>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800154c:	429a      	cmp	r2, r3
 800154e:	d921      	bls.n	8001594 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	4618      	mov	r0, r3
 8001556:	f000 fc09 	bl	8001d6c <RCC_SetFlashLatencyFromMSIRange>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e208      	b.n	8001976 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001564:	4b09      	ldr	r3, [pc, #36]	@ (800158c <HAL_RCC_OscConfig+0x264>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a1b      	ldr	r3, [r3, #32]
 8001570:	4906      	ldr	r1, [pc, #24]	@ (800158c <HAL_RCC_OscConfig+0x264>)
 8001572:	4313      	orrs	r3, r2
 8001574:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001576:	4b05      	ldr	r3, [pc, #20]	@ (800158c <HAL_RCC_OscConfig+0x264>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	061b      	lsls	r3, r3, #24
 8001584:	4901      	ldr	r1, [pc, #4]	@ (800158c <HAL_RCC_OscConfig+0x264>)
 8001586:	4313      	orrs	r3, r2
 8001588:	604b      	str	r3, [r1, #4]
 800158a:	e020      	b.n	80015ce <HAL_RCC_OscConfig+0x2a6>
 800158c:	40023800 	.word	0x40023800
 8001590:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001594:	4b99      	ldr	r3, [pc, #612]	@ (80017fc <HAL_RCC_OscConfig+0x4d4>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a1b      	ldr	r3, [r3, #32]
 80015a0:	4996      	ldr	r1, [pc, #600]	@ (80017fc <HAL_RCC_OscConfig+0x4d4>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015a6:	4b95      	ldr	r3, [pc, #596]	@ (80017fc <HAL_RCC_OscConfig+0x4d4>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	061b      	lsls	r3, r3, #24
 80015b4:	4991      	ldr	r1, [pc, #580]	@ (80017fc <HAL_RCC_OscConfig+0x4d4>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a1b      	ldr	r3, [r3, #32]
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 fbd4 	bl	8001d6c <RCC_SetFlashLatencyFromMSIRange>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e1d3      	b.n	8001976 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a1b      	ldr	r3, [r3, #32]
 80015d2:	0b5b      	lsrs	r3, r3, #13
 80015d4:	3301      	adds	r3, #1
 80015d6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80015de:	4a87      	ldr	r2, [pc, #540]	@ (80017fc <HAL_RCC_OscConfig+0x4d4>)
 80015e0:	6892      	ldr	r2, [r2, #8]
 80015e2:	0912      	lsrs	r2, r2, #4
 80015e4:	f002 020f 	and.w	r2, r2, #15
 80015e8:	4985      	ldr	r1, [pc, #532]	@ (8001800 <HAL_RCC_OscConfig+0x4d8>)
 80015ea:	5c8a      	ldrb	r2, [r1, r2]
 80015ec:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80015ee:	4a85      	ldr	r2, [pc, #532]	@ (8001804 <HAL_RCC_OscConfig+0x4dc>)
 80015f0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80015f2:	4b85      	ldr	r3, [pc, #532]	@ (8001808 <HAL_RCC_OscConfig+0x4e0>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fb46 	bl	8000c88 <HAL_InitTick>
 80015fc:	4603      	mov	r3, r0
 80015fe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d045      	beq.n	8001692 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001606:	7bfb      	ldrb	r3, [r7, #15]
 8001608:	e1b5      	b.n	8001976 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d029      	beq.n	8001666 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001612:	4b7e      	ldr	r3, [pc, #504]	@ (800180c <HAL_RCC_OscConfig+0x4e4>)
 8001614:	2201      	movs	r2, #1
 8001616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001618:	f7ff fb82 	bl	8000d20 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001620:	f7ff fb7e 	bl	8000d20 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e1a1      	b.n	8001976 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001632:	4b72      	ldr	r3, [pc, #456]	@ (80017fc <HAL_RCC_OscConfig+0x4d4>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800163a:	2b00      	cmp	r3, #0
 800163c:	d0f0      	beq.n	8001620 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800163e:	4b6f      	ldr	r3, [pc, #444]	@ (80017fc <HAL_RCC_OscConfig+0x4d4>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a1b      	ldr	r3, [r3, #32]
 800164a:	496c      	ldr	r1, [pc, #432]	@ (80017fc <HAL_RCC_OscConfig+0x4d4>)
 800164c:	4313      	orrs	r3, r2
 800164e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001650:	4b6a      	ldr	r3, [pc, #424]	@ (80017fc <HAL_RCC_OscConfig+0x4d4>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	69db      	ldr	r3, [r3, #28]
 800165c:	061b      	lsls	r3, r3, #24
 800165e:	4967      	ldr	r1, [pc, #412]	@ (80017fc <HAL_RCC_OscConfig+0x4d4>)
 8001660:	4313      	orrs	r3, r2
 8001662:	604b      	str	r3, [r1, #4]
 8001664:	e015      	b.n	8001692 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001666:	4b69      	ldr	r3, [pc, #420]	@ (800180c <HAL_RCC_OscConfig+0x4e4>)
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166c:	f7ff fb58 	bl	8000d20 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001674:	f7ff fb54 	bl	8000d20 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e177      	b.n	8001976 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001686:	4b5d      	ldr	r3, [pc, #372]	@ (80017fc <HAL_RCC_OscConfig+0x4d4>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f0      	bne.n	8001674 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0308 	and.w	r3, r3, #8
 800169a:	2b00      	cmp	r3, #0
 800169c:	d030      	beq.n	8001700 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d016      	beq.n	80016d4 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016a6:	4b5a      	ldr	r3, [pc, #360]	@ (8001810 <HAL_RCC_OscConfig+0x4e8>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ac:	f7ff fb38 	bl	8000d20 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016b4:	f7ff fb34 	bl	8000d20 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e157      	b.n	8001976 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80016c6:	4b4d      	ldr	r3, [pc, #308]	@ (80017fc <HAL_RCC_OscConfig+0x4d4>)
 80016c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0f0      	beq.n	80016b4 <HAL_RCC_OscConfig+0x38c>
 80016d2:	e015      	b.n	8001700 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016d4:	4b4e      	ldr	r3, [pc, #312]	@ (8001810 <HAL_RCC_OscConfig+0x4e8>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016da:	f7ff fb21 	bl	8000d20 <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016e2:	f7ff fb1d 	bl	8000d20 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e140      	b.n	8001976 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80016f4:	4b41      	ldr	r3, [pc, #260]	@ (80017fc <HAL_RCC_OscConfig+0x4d4>)
 80016f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1f0      	bne.n	80016e2 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	2b00      	cmp	r3, #0
 800170a:	f000 80b5 	beq.w	8001878 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800170e:	2300      	movs	r3, #0
 8001710:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001712:	4b3a      	ldr	r3, [pc, #232]	@ (80017fc <HAL_RCC_OscConfig+0x4d4>)
 8001714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10d      	bne.n	800173a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800171e:	4b37      	ldr	r3, [pc, #220]	@ (80017fc <HAL_RCC_OscConfig+0x4d4>)
 8001720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001722:	4a36      	ldr	r2, [pc, #216]	@ (80017fc <HAL_RCC_OscConfig+0x4d4>)
 8001724:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001728:	6253      	str	r3, [r2, #36]	@ 0x24
 800172a:	4b34      	ldr	r3, [pc, #208]	@ (80017fc <HAL_RCC_OscConfig+0x4d4>)
 800172c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800172e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001736:	2301      	movs	r3, #1
 8001738:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800173a:	4b36      	ldr	r3, [pc, #216]	@ (8001814 <HAL_RCC_OscConfig+0x4ec>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001742:	2b00      	cmp	r3, #0
 8001744:	d118      	bne.n	8001778 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001746:	4b33      	ldr	r3, [pc, #204]	@ (8001814 <HAL_RCC_OscConfig+0x4ec>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a32      	ldr	r2, [pc, #200]	@ (8001814 <HAL_RCC_OscConfig+0x4ec>)
 800174c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001750:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001752:	f7ff fae5 	bl	8000d20 <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001758:	e008      	b.n	800176c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800175a:	f7ff fae1 	bl	8000d20 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b64      	cmp	r3, #100	@ 0x64
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e104      	b.n	8001976 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800176c:	4b29      	ldr	r3, [pc, #164]	@ (8001814 <HAL_RCC_OscConfig+0x4ec>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001774:	2b00      	cmp	r3, #0
 8001776:	d0f0      	beq.n	800175a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d106      	bne.n	800178e <HAL_RCC_OscConfig+0x466>
 8001780:	4b1e      	ldr	r3, [pc, #120]	@ (80017fc <HAL_RCC_OscConfig+0x4d4>)
 8001782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001784:	4a1d      	ldr	r2, [pc, #116]	@ (80017fc <HAL_RCC_OscConfig+0x4d4>)
 8001786:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800178a:	6353      	str	r3, [r2, #52]	@ 0x34
 800178c:	e02d      	b.n	80017ea <HAL_RCC_OscConfig+0x4c2>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d10c      	bne.n	80017b0 <HAL_RCC_OscConfig+0x488>
 8001796:	4b19      	ldr	r3, [pc, #100]	@ (80017fc <HAL_RCC_OscConfig+0x4d4>)
 8001798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800179a:	4a18      	ldr	r2, [pc, #96]	@ (80017fc <HAL_RCC_OscConfig+0x4d4>)
 800179c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80017a0:	6353      	str	r3, [r2, #52]	@ 0x34
 80017a2:	4b16      	ldr	r3, [pc, #88]	@ (80017fc <HAL_RCC_OscConfig+0x4d4>)
 80017a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017a6:	4a15      	ldr	r2, [pc, #84]	@ (80017fc <HAL_RCC_OscConfig+0x4d4>)
 80017a8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80017ac:	6353      	str	r3, [r2, #52]	@ 0x34
 80017ae:	e01c      	b.n	80017ea <HAL_RCC_OscConfig+0x4c2>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	2b05      	cmp	r3, #5
 80017b6:	d10c      	bne.n	80017d2 <HAL_RCC_OscConfig+0x4aa>
 80017b8:	4b10      	ldr	r3, [pc, #64]	@ (80017fc <HAL_RCC_OscConfig+0x4d4>)
 80017ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017bc:	4a0f      	ldr	r2, [pc, #60]	@ (80017fc <HAL_RCC_OscConfig+0x4d4>)
 80017be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017c2:	6353      	str	r3, [r2, #52]	@ 0x34
 80017c4:	4b0d      	ldr	r3, [pc, #52]	@ (80017fc <HAL_RCC_OscConfig+0x4d4>)
 80017c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017c8:	4a0c      	ldr	r2, [pc, #48]	@ (80017fc <HAL_RCC_OscConfig+0x4d4>)
 80017ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017ce:	6353      	str	r3, [r2, #52]	@ 0x34
 80017d0:	e00b      	b.n	80017ea <HAL_RCC_OscConfig+0x4c2>
 80017d2:	4b0a      	ldr	r3, [pc, #40]	@ (80017fc <HAL_RCC_OscConfig+0x4d4>)
 80017d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017d6:	4a09      	ldr	r2, [pc, #36]	@ (80017fc <HAL_RCC_OscConfig+0x4d4>)
 80017d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80017dc:	6353      	str	r3, [r2, #52]	@ 0x34
 80017de:	4b07      	ldr	r3, [pc, #28]	@ (80017fc <HAL_RCC_OscConfig+0x4d4>)
 80017e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017e2:	4a06      	ldr	r2, [pc, #24]	@ (80017fc <HAL_RCC_OscConfig+0x4d4>)
 80017e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80017e8:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d024      	beq.n	800183c <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f2:	f7ff fa95 	bl	8000d20 <HAL_GetTick>
 80017f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017f8:	e019      	b.n	800182e <HAL_RCC_OscConfig+0x506>
 80017fa:	bf00      	nop
 80017fc:	40023800 	.word	0x40023800
 8001800:	08002e54 	.word	0x08002e54
 8001804:	20000000 	.word	0x20000000
 8001808:	20000004 	.word	0x20000004
 800180c:	42470020 	.word	0x42470020
 8001810:	42470680 	.word	0x42470680
 8001814:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001818:	f7ff fa82 	bl	8000d20 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001826:	4293      	cmp	r3, r2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e0a3      	b.n	8001976 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800182e:	4b54      	ldr	r3, [pc, #336]	@ (8001980 <HAL_RCC_OscConfig+0x658>)
 8001830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001832:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001836:	2b00      	cmp	r3, #0
 8001838:	d0ee      	beq.n	8001818 <HAL_RCC_OscConfig+0x4f0>
 800183a:	e014      	b.n	8001866 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800183c:	f7ff fa70 	bl	8000d20 <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001842:	e00a      	b.n	800185a <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001844:	f7ff fa6c 	bl	8000d20 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001852:	4293      	cmp	r3, r2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e08d      	b.n	8001976 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800185a:	4b49      	ldr	r3, [pc, #292]	@ (8001980 <HAL_RCC_OscConfig+0x658>)
 800185c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800185e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1ee      	bne.n	8001844 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001866:	7ffb      	ldrb	r3, [r7, #31]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d105      	bne.n	8001878 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800186c:	4b44      	ldr	r3, [pc, #272]	@ (8001980 <HAL_RCC_OscConfig+0x658>)
 800186e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001870:	4a43      	ldr	r2, [pc, #268]	@ (8001980 <HAL_RCC_OscConfig+0x658>)
 8001872:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001876:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187c:	2b00      	cmp	r3, #0
 800187e:	d079      	beq.n	8001974 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	2b0c      	cmp	r3, #12
 8001884:	d056      	beq.n	8001934 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800188a:	2b02      	cmp	r3, #2
 800188c:	d13b      	bne.n	8001906 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800188e:	4b3d      	ldr	r3, [pc, #244]	@ (8001984 <HAL_RCC_OscConfig+0x65c>)
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001894:	f7ff fa44 	bl	8000d20 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800189c:	f7ff fa40 	bl	8000d20 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e063      	b.n	8001976 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018ae:	4b34      	ldr	r3, [pc, #208]	@ (8001980 <HAL_RCC_OscConfig+0x658>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1f0      	bne.n	800189c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018ba:	4b31      	ldr	r3, [pc, #196]	@ (8001980 <HAL_RCC_OscConfig+0x658>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ca:	4319      	orrs	r1, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d0:	430b      	orrs	r3, r1
 80018d2:	492b      	ldr	r1, [pc, #172]	@ (8001980 <HAL_RCC_OscConfig+0x658>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001984 <HAL_RCC_OscConfig+0x65c>)
 80018da:	2201      	movs	r2, #1
 80018dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018de:	f7ff fa1f 	bl	8000d20 <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018e6:	f7ff fa1b 	bl	8000d20 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e03e      	b.n	8001976 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018f8:	4b21      	ldr	r3, [pc, #132]	@ (8001980 <HAL_RCC_OscConfig+0x658>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0f0      	beq.n	80018e6 <HAL_RCC_OscConfig+0x5be>
 8001904:	e036      	b.n	8001974 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001906:	4b1f      	ldr	r3, [pc, #124]	@ (8001984 <HAL_RCC_OscConfig+0x65c>)
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190c:	f7ff fa08 	bl	8000d20 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001914:	f7ff fa04 	bl	8000d20 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e027      	b.n	8001976 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001926:	4b16      	ldr	r3, [pc, #88]	@ (8001980 <HAL_RCC_OscConfig+0x658>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1f0      	bne.n	8001914 <HAL_RCC_OscConfig+0x5ec>
 8001932:	e01f      	b.n	8001974 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001938:	2b01      	cmp	r3, #1
 800193a:	d101      	bne.n	8001940 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e01a      	b.n	8001976 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001940:	4b0f      	ldr	r3, [pc, #60]	@ (8001980 <HAL_RCC_OscConfig+0x658>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001950:	429a      	cmp	r2, r3
 8001952:	d10d      	bne.n	8001970 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800195e:	429a      	cmp	r2, r3
 8001960:	d106      	bne.n	8001970 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800196c:	429a      	cmp	r2, r3
 800196e:	d001      	beq.n	8001974 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e000      	b.n	8001976 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3720      	adds	r7, #32
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40023800 	.word	0x40023800
 8001984:	42470060 	.word	0x42470060

08001988 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d101      	bne.n	800199c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e11a      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800199c:	4b8f      	ldr	r3, [pc, #572]	@ (8001bdc <HAL_RCC_ClockConfig+0x254>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d919      	bls.n	80019de <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d105      	bne.n	80019bc <HAL_RCC_ClockConfig+0x34>
 80019b0:	4b8a      	ldr	r3, [pc, #552]	@ (8001bdc <HAL_RCC_ClockConfig+0x254>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a89      	ldr	r2, [pc, #548]	@ (8001bdc <HAL_RCC_ClockConfig+0x254>)
 80019b6:	f043 0304 	orr.w	r3, r3, #4
 80019ba:	6013      	str	r3, [r2, #0]
 80019bc:	4b87      	ldr	r3, [pc, #540]	@ (8001bdc <HAL_RCC_ClockConfig+0x254>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f023 0201 	bic.w	r2, r3, #1
 80019c4:	4985      	ldr	r1, [pc, #532]	@ (8001bdc <HAL_RCC_ClockConfig+0x254>)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019cc:	4b83      	ldr	r3, [pc, #524]	@ (8001bdc <HAL_RCC_ClockConfig+0x254>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d001      	beq.n	80019de <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e0f9      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d008      	beq.n	80019fc <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019ea:	4b7d      	ldr	r3, [pc, #500]	@ (8001be0 <HAL_RCC_ClockConfig+0x258>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	497a      	ldr	r1, [pc, #488]	@ (8001be0 <HAL_RCC_ClockConfig+0x258>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 808e 	beq.w	8001b26 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d107      	bne.n	8001a22 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a12:	4b73      	ldr	r3, [pc, #460]	@ (8001be0 <HAL_RCC_ClockConfig+0x258>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d121      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e0d7      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b03      	cmp	r3, #3
 8001a28:	d107      	bne.n	8001a3a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a2a:	4b6d      	ldr	r3, [pc, #436]	@ (8001be0 <HAL_RCC_ClockConfig+0x258>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d115      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e0cb      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d107      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a42:	4b67      	ldr	r3, [pc, #412]	@ (8001be0 <HAL_RCC_ClockConfig+0x258>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d109      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e0bf      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a52:	4b63      	ldr	r3, [pc, #396]	@ (8001be0 <HAL_RCC_ClockConfig+0x258>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e0b7      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a62:	4b5f      	ldr	r3, [pc, #380]	@ (8001be0 <HAL_RCC_ClockConfig+0x258>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f023 0203 	bic.w	r2, r3, #3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	495c      	ldr	r1, [pc, #368]	@ (8001be0 <HAL_RCC_ClockConfig+0x258>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a74:	f7ff f954 	bl	8000d20 <HAL_GetTick>
 8001a78:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d112      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a82:	e00a      	b.n	8001a9a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a84:	f7ff f94c 	bl	8000d20 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e09b      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a9a:	4b51      	ldr	r3, [pc, #324]	@ (8001be0 <HAL_RCC_ClockConfig+0x258>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 030c 	and.w	r3, r3, #12
 8001aa2:	2b08      	cmp	r3, #8
 8001aa4:	d1ee      	bne.n	8001a84 <HAL_RCC_ClockConfig+0xfc>
 8001aa6:	e03e      	b.n	8001b26 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b03      	cmp	r3, #3
 8001aae:	d112      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ab0:	e00a      	b.n	8001ac8 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ab2:	f7ff f935 	bl	8000d20 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e084      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ac8:	4b45      	ldr	r3, [pc, #276]	@ (8001be0 <HAL_RCC_ClockConfig+0x258>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 030c 	and.w	r3, r3, #12
 8001ad0:	2b0c      	cmp	r3, #12
 8001ad2:	d1ee      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0x12a>
 8001ad4:	e027      	b.n	8001b26 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d11d      	bne.n	8001b1a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ade:	e00a      	b.n	8001af6 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ae0:	f7ff f91e 	bl	8000d20 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e06d      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001af6:	4b3a      	ldr	r3, [pc, #232]	@ (8001be0 <HAL_RCC_ClockConfig+0x258>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 030c 	and.w	r3, r3, #12
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	d1ee      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0x158>
 8001b02:	e010      	b.n	8001b26 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b04:	f7ff f90c 	bl	8000d20 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e05b      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001b1a:	4b31      	ldr	r3, [pc, #196]	@ (8001be0 <HAL_RCC_ClockConfig+0x258>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 030c 	and.w	r3, r3, #12
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1ee      	bne.n	8001b04 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b26:	4b2d      	ldr	r3, [pc, #180]	@ (8001bdc <HAL_RCC_ClockConfig+0x254>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d219      	bcs.n	8001b68 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d105      	bne.n	8001b46 <HAL_RCC_ClockConfig+0x1be>
 8001b3a:	4b28      	ldr	r3, [pc, #160]	@ (8001bdc <HAL_RCC_ClockConfig+0x254>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a27      	ldr	r2, [pc, #156]	@ (8001bdc <HAL_RCC_ClockConfig+0x254>)
 8001b40:	f043 0304 	orr.w	r3, r3, #4
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	4b25      	ldr	r3, [pc, #148]	@ (8001bdc <HAL_RCC_ClockConfig+0x254>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f023 0201 	bic.w	r2, r3, #1
 8001b4e:	4923      	ldr	r1, [pc, #140]	@ (8001bdc <HAL_RCC_ClockConfig+0x254>)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b56:	4b21      	ldr	r3, [pc, #132]	@ (8001bdc <HAL_RCC_ClockConfig+0x254>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d001      	beq.n	8001b68 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e034      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0304 	and.w	r3, r3, #4
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d008      	beq.n	8001b86 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b74:	4b1a      	ldr	r3, [pc, #104]	@ (8001be0 <HAL_RCC_ClockConfig+0x258>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	4917      	ldr	r1, [pc, #92]	@ (8001be0 <HAL_RCC_ClockConfig+0x258>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0308 	and.w	r3, r3, #8
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d009      	beq.n	8001ba6 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b92:	4b13      	ldr	r3, [pc, #76]	@ (8001be0 <HAL_RCC_ClockConfig+0x258>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	490f      	ldr	r1, [pc, #60]	@ (8001be0 <HAL_RCC_ClockConfig+0x258>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ba6:	f000 f823 	bl	8001bf0 <HAL_RCC_GetSysClockFreq>
 8001baa:	4602      	mov	r2, r0
 8001bac:	4b0c      	ldr	r3, [pc, #48]	@ (8001be0 <HAL_RCC_ClockConfig+0x258>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	091b      	lsrs	r3, r3, #4
 8001bb2:	f003 030f 	and.w	r3, r3, #15
 8001bb6:	490b      	ldr	r1, [pc, #44]	@ (8001be4 <HAL_RCC_ClockConfig+0x25c>)
 8001bb8:	5ccb      	ldrb	r3, [r1, r3]
 8001bba:	fa22 f303 	lsr.w	r3, r2, r3
 8001bbe:	4a0a      	ldr	r2, [pc, #40]	@ (8001be8 <HAL_RCC_ClockConfig+0x260>)
 8001bc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bec <HAL_RCC_ClockConfig+0x264>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff f85e 	bl	8000c88 <HAL_InitTick>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	72fb      	strb	r3, [r7, #11]

  return status;
 8001bd0:	7afb      	ldrb	r3, [r7, #11]
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40023c00 	.word	0x40023c00
 8001be0:	40023800 	.word	0x40023800
 8001be4:	08002e54 	.word	0x08002e54
 8001be8:	20000000 	.word	0x20000000
 8001bec:	20000004 	.word	0x20000004

08001bf0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bf4:	b08e      	sub	sp, #56	@ 0x38
 8001bf6:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001bf8:	4b58      	ldr	r3, [pc, #352]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x16c>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c00:	f003 030c 	and.w	r3, r3, #12
 8001c04:	2b0c      	cmp	r3, #12
 8001c06:	d00d      	beq.n	8001c24 <HAL_RCC_GetSysClockFreq+0x34>
 8001c08:	2b0c      	cmp	r3, #12
 8001c0a:	f200 8092 	bhi.w	8001d32 <HAL_RCC_GetSysClockFreq+0x142>
 8001c0e:	2b04      	cmp	r3, #4
 8001c10:	d002      	beq.n	8001c18 <HAL_RCC_GetSysClockFreq+0x28>
 8001c12:	2b08      	cmp	r3, #8
 8001c14:	d003      	beq.n	8001c1e <HAL_RCC_GetSysClockFreq+0x2e>
 8001c16:	e08c      	b.n	8001d32 <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c18:	4b51      	ldr	r3, [pc, #324]	@ (8001d60 <HAL_RCC_GetSysClockFreq+0x170>)
 8001c1a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001c1c:	e097      	b.n	8001d4e <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c1e:	4b51      	ldr	r3, [pc, #324]	@ (8001d64 <HAL_RCC_GetSysClockFreq+0x174>)
 8001c20:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001c22:	e094      	b.n	8001d4e <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c26:	0c9b      	lsrs	r3, r3, #18
 8001c28:	f003 020f 	and.w	r2, r3, #15
 8001c2c:	4b4e      	ldr	r3, [pc, #312]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0x178>)
 8001c2e:	5c9b      	ldrb	r3, [r3, r2]
 8001c30:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c34:	0d9b      	lsrs	r3, r3, #22
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c3e:	4b47      	ldr	r3, [pc, #284]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x16c>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d021      	beq.n	8001c8e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	61bb      	str	r3, [r7, #24]
 8001c50:	61fa      	str	r2, [r7, #28]
 8001c52:	4b44      	ldr	r3, [pc, #272]	@ (8001d64 <HAL_RCC_GetSysClockFreq+0x174>)
 8001c54:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001c58:	464a      	mov	r2, r9
 8001c5a:	fb03 f202 	mul.w	r2, r3, r2
 8001c5e:	2300      	movs	r3, #0
 8001c60:	4644      	mov	r4, r8
 8001c62:	fb04 f303 	mul.w	r3, r4, r3
 8001c66:	4413      	add	r3, r2
 8001c68:	4a3e      	ldr	r2, [pc, #248]	@ (8001d64 <HAL_RCC_GetSysClockFreq+0x174>)
 8001c6a:	4644      	mov	r4, r8
 8001c6c:	fba4 0102 	umull	r0, r1, r4, r2
 8001c70:	440b      	add	r3, r1
 8001c72:	4619      	mov	r1, r3
 8001c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c76:	2200      	movs	r2, #0
 8001c78:	613b      	str	r3, [r7, #16]
 8001c7a:	617a      	str	r2, [r7, #20]
 8001c7c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c80:	f7fe fa7c 	bl	800017c <__aeabi_uldivmod>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	4613      	mov	r3, r2
 8001c8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c8c:	e04e      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c90:	2200      	movs	r2, #0
 8001c92:	469a      	mov	sl, r3
 8001c94:	4693      	mov	fp, r2
 8001c96:	4652      	mov	r2, sl
 8001c98:	465b      	mov	r3, fp
 8001c9a:	f04f 0000 	mov.w	r0, #0
 8001c9e:	f04f 0100 	mov.w	r1, #0
 8001ca2:	0159      	lsls	r1, r3, #5
 8001ca4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ca8:	0150      	lsls	r0, r2, #5
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	ebb2 080a 	subs.w	r8, r2, sl
 8001cb2:	eb63 090b 	sbc.w	r9, r3, fp
 8001cb6:	f04f 0200 	mov.w	r2, #0
 8001cba:	f04f 0300 	mov.w	r3, #0
 8001cbe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001cc2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001cc6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001cca:	ebb2 0408 	subs.w	r4, r2, r8
 8001cce:	eb63 0509 	sbc.w	r5, r3, r9
 8001cd2:	f04f 0200 	mov.w	r2, #0
 8001cd6:	f04f 0300 	mov.w	r3, #0
 8001cda:	00eb      	lsls	r3, r5, #3
 8001cdc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ce0:	00e2      	lsls	r2, r4, #3
 8001ce2:	4614      	mov	r4, r2
 8001ce4:	461d      	mov	r5, r3
 8001ce6:	eb14 030a 	adds.w	r3, r4, sl
 8001cea:	603b      	str	r3, [r7, #0]
 8001cec:	eb45 030b 	adc.w	r3, r5, fp
 8001cf0:	607b      	str	r3, [r7, #4]
 8001cf2:	f04f 0200 	mov.w	r2, #0
 8001cf6:	f04f 0300 	mov.w	r3, #0
 8001cfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cfe:	4629      	mov	r1, r5
 8001d00:	028b      	lsls	r3, r1, #10
 8001d02:	4620      	mov	r0, r4
 8001d04:	4629      	mov	r1, r5
 8001d06:	4604      	mov	r4, r0
 8001d08:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001d0c:	4601      	mov	r1, r0
 8001d0e:	028a      	lsls	r2, r1, #10
 8001d10:	4610      	mov	r0, r2
 8001d12:	4619      	mov	r1, r3
 8001d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d16:	2200      	movs	r2, #0
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	60fa      	str	r2, [r7, #12]
 8001d1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d20:	f7fe fa2c 	bl	800017c <__aeabi_uldivmod>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	4613      	mov	r3, r2
 8001d2a:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      sysclockfreq = pllvco;
 8001d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d2e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001d30:	e00d      	b.n	8001d4e <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001d32:	4b0a      	ldr	r3, [pc, #40]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x16c>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	0b5b      	lsrs	r3, r3, #13
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001d3e:	6a3b      	ldr	r3, [r7, #32]
 8001d40:	3301      	adds	r3, #1
 8001d42:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001d4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3738      	adds	r7, #56	@ 0x38
 8001d54:	46bd      	mov	sp, r7
 8001d56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	00f42400 	.word	0x00f42400
 8001d64:	016e3600 	.word	0x016e3600
 8001d68:	08002e48 	.word	0x08002e48

08001d6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b087      	sub	sp, #28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d74:	2300      	movs	r3, #0
 8001d76:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001d78:	4b29      	ldr	r3, [pc, #164]	@ (8001e20 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d12c      	bne.n	8001dde <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d84:	4b26      	ldr	r3, [pc, #152]	@ (8001e20 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d005      	beq.n	8001d9c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001d90:	4b24      	ldr	r3, [pc, #144]	@ (8001e24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8001d98:	617b      	str	r3, [r7, #20]
 8001d9a:	e016      	b.n	8001dca <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d9c:	4b20      	ldr	r3, [pc, #128]	@ (8001e20 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da0:	4a1f      	ldr	r2, [pc, #124]	@ (8001e20 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001da2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001da6:	6253      	str	r3, [r2, #36]	@ 0x24
 8001da8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e20 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001db4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8001dbc:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dbe:	4b18      	ldr	r3, [pc, #96]	@ (8001e20 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc2:	4a17      	ldr	r2, [pc, #92]	@ (8001e20 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001dc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001dc8:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8001dd0:	d105      	bne.n	8001dde <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8001dd8:	d101      	bne.n	8001dde <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001dda:	2301      	movs	r3, #1
 8001ddc:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d105      	bne.n	8001df0 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001de4:	4b10      	ldr	r3, [pc, #64]	@ (8001e28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a0f      	ldr	r2, [pc, #60]	@ (8001e28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dea:	f043 0304 	orr.w	r3, r3, #4
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	4b0d      	ldr	r3, [pc, #52]	@ (8001e28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f023 0201 	bic.w	r2, r3, #1
 8001df8:	490b      	ldr	r1, [pc, #44]	@ (8001e28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e00:	4b09      	ldr	r3, [pc, #36]	@ (8001e28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d001      	beq.n	8001e12 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e000      	b.n	8001e14 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	371c      	adds	r7, #28
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	40023800 	.word	0x40023800
 8001e24:	40007000 	.word	0x40007000
 8001e28:	40023c00 	.word	0x40023c00

08001e2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e07b      	b.n	8001f36 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d108      	bne.n	8001e58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001e4e:	d009      	beq.n	8001e64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	61da      	str	r2, [r3, #28]
 8001e56:	e005      	b.n	8001e64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d106      	bne.n	8001e84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7fe fd5a 	bl	8000938 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2202      	movs	r2, #2
 8001e88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e9a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001eac:	431a      	orrs	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	431a      	orrs	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ee8:	ea42 0103 	orr.w	r1, r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ef0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	0c1b      	lsrs	r3, r3, #16
 8001f02:	f003 0104 	and.w	r1, r3, #4
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f0a:	f003 0210 	and.w	r2, r3, #16
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	69da      	ldr	r2, [r3, #28]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f24:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b088      	sub	sp, #32
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	60f8      	str	r0, [r7, #12]
 8001f46:	60b9      	str	r1, [r7, #8]
 8001f48:	603b      	str	r3, [r7, #0]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f4e:	f7fe fee7 	bl	8000d20 <HAL_GetTick>
 8001f52:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001f54:	88fb      	ldrh	r3, [r7, #6]
 8001f56:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d001      	beq.n	8001f68 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001f64:	2302      	movs	r3, #2
 8001f66:	e12a      	b.n	80021be <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d002      	beq.n	8001f74 <HAL_SPI_Transmit+0x36>
 8001f6e:	88fb      	ldrh	r3, [r7, #6]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e122      	b.n	80021be <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d101      	bne.n	8001f86 <HAL_SPI_Transmit+0x48>
 8001f82:	2302      	movs	r3, #2
 8001f84:	e11b      	b.n	80021be <HAL_SPI_Transmit+0x280>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2203      	movs	r2, #3
 8001f92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	88fa      	ldrh	r2, [r7, #6]
 8001fa6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	88fa      	ldrh	r2, [r7, #6]
 8001fac:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001fd4:	d10f      	bne.n	8001ff6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001fe4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001ff4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002000:	2b40      	cmp	r3, #64	@ 0x40
 8002002:	d007      	beq.n	8002014 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002012:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800201c:	d152      	bne.n	80020c4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d002      	beq.n	800202c <HAL_SPI_Transmit+0xee>
 8002026:	8b7b      	ldrh	r3, [r7, #26]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d145      	bne.n	80020b8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002030:	881a      	ldrh	r2, [r3, #0]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203c:	1c9a      	adds	r2, r3, #2
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002046:	b29b      	uxth	r3, r3
 8002048:	3b01      	subs	r3, #1
 800204a:	b29a      	uxth	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002050:	e032      	b.n	80020b8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b02      	cmp	r3, #2
 800205e:	d112      	bne.n	8002086 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002064:	881a      	ldrh	r2, [r3, #0]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002070:	1c9a      	adds	r2, r3, #2
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800207a:	b29b      	uxth	r3, r3
 800207c:	3b01      	subs	r3, #1
 800207e:	b29a      	uxth	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002084:	e018      	b.n	80020b8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002086:	f7fe fe4b 	bl	8000d20 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	429a      	cmp	r2, r3
 8002094:	d803      	bhi.n	800209e <HAL_SPI_Transmit+0x160>
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800209c:	d102      	bne.n	80020a4 <HAL_SPI_Transmit+0x166>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d109      	bne.n	80020b8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e082      	b.n	80021be <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020bc:	b29b      	uxth	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1c7      	bne.n	8002052 <HAL_SPI_Transmit+0x114>
 80020c2:	e053      	b.n	800216c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d002      	beq.n	80020d2 <HAL_SPI_Transmit+0x194>
 80020cc:	8b7b      	ldrh	r3, [r7, #26]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d147      	bne.n	8002162 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	330c      	adds	r3, #12
 80020dc:	7812      	ldrb	r2, [r2, #0]
 80020de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e4:	1c5a      	adds	r2, r3, #1
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	3b01      	subs	r3, #1
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80020f8:	e033      	b.n	8002162 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b02      	cmp	r3, #2
 8002106:	d113      	bne.n	8002130 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	330c      	adds	r3, #12
 8002112:	7812      	ldrb	r2, [r2, #0]
 8002114:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211a:	1c5a      	adds	r2, r3, #1
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002124:	b29b      	uxth	r3, r3
 8002126:	3b01      	subs	r3, #1
 8002128:	b29a      	uxth	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800212e:	e018      	b.n	8002162 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002130:	f7fe fdf6 	bl	8000d20 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	429a      	cmp	r2, r3
 800213e:	d803      	bhi.n	8002148 <HAL_SPI_Transmit+0x20a>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002146:	d102      	bne.n	800214e <HAL_SPI_Transmit+0x210>
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d109      	bne.n	8002162 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e02d      	b.n	80021be <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002166:	b29b      	uxth	r3, r3
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1c6      	bne.n	80020fa <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800216c:	69fa      	ldr	r2, [r7, #28]
 800216e:	6839      	ldr	r1, [r7, #0]
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f000 f8b1 	bl	80022d8 <SPI_EndRxTxTransaction>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d002      	beq.n	8002182 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2220      	movs	r2, #32
 8002180:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10a      	bne.n	80021a0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800218a:	2300      	movs	r3, #0
 800218c:	617b      	str	r3, [r7, #20]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	617b      	str	r3, [r7, #20]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e000      	b.n	80021be <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80021bc:	2300      	movs	r3, #0
  }
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3720      	adds	r7, #32
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
	...

080021c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b088      	sub	sp, #32
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	603b      	str	r3, [r7, #0]
 80021d4:	4613      	mov	r3, r2
 80021d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80021d8:	f7fe fda2 	bl	8000d20 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021e0:	1a9b      	subs	r3, r3, r2
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	4413      	add	r3, r2
 80021e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80021e8:	f7fe fd9a 	bl	8000d20 <HAL_GetTick>
 80021ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80021ee:	4b39      	ldr	r3, [pc, #228]	@ (80022d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	015b      	lsls	r3, r3, #5
 80021f4:	0d1b      	lsrs	r3, r3, #20
 80021f6:	69fa      	ldr	r2, [r7, #28]
 80021f8:	fb02 f303 	mul.w	r3, r2, r3
 80021fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80021fe:	e054      	b.n	80022aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002206:	d050      	beq.n	80022aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002208:	f7fe fd8a 	bl	8000d20 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	69fa      	ldr	r2, [r7, #28]
 8002214:	429a      	cmp	r2, r3
 8002216:	d902      	bls.n	800221e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d13d      	bne.n	800229a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800222c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002236:	d111      	bne.n	800225c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002240:	d004      	beq.n	800224c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800224a:	d107      	bne.n	800225c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800225a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002260:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002264:	d10f      	bne.n	8002286 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002284:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2201      	movs	r2, #1
 800228a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e017      	b.n	80022ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	4013      	ands	r3, r2
 80022b4:	68ba      	ldr	r2, [r7, #8]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	bf0c      	ite	eq
 80022ba:	2301      	moveq	r3, #1
 80022bc:	2300      	movne	r3, #0
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	461a      	mov	r2, r3
 80022c2:	79fb      	ldrb	r3, [r7, #7]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d19b      	bne.n	8002200 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3720      	adds	r7, #32
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000000 	.word	0x20000000

080022d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b088      	sub	sp, #32
 80022dc:	af02      	add	r7, sp, #8
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	9300      	str	r3, [sp, #0]
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	2201      	movs	r2, #1
 80022ec:	2102      	movs	r1, #2
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f7ff ff6a 	bl	80021c8 <SPI_WaitFlagStateUntilTimeout>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d007      	beq.n	800230a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022fe:	f043 0220 	orr.w	r2, r3, #32
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e032      	b.n	8002370 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800230a:	4b1b      	ldr	r3, [pc, #108]	@ (8002378 <SPI_EndRxTxTransaction+0xa0>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a1b      	ldr	r2, [pc, #108]	@ (800237c <SPI_EndRxTxTransaction+0xa4>)
 8002310:	fba2 2303 	umull	r2, r3, r2, r3
 8002314:	0d5b      	lsrs	r3, r3, #21
 8002316:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800231a:	fb02 f303 	mul.w	r3, r2, r3
 800231e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002328:	d112      	bne.n	8002350 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	9300      	str	r3, [sp, #0]
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	2200      	movs	r2, #0
 8002332:	2180      	movs	r1, #128	@ 0x80
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	f7ff ff47 	bl	80021c8 <SPI_WaitFlagStateUntilTimeout>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d016      	beq.n	800236e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002344:	f043 0220 	orr.w	r2, r3, #32
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e00f      	b.n	8002370 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00a      	beq.n	800236c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	3b01      	subs	r3, #1
 800235a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002366:	2b80      	cmp	r3, #128	@ 0x80
 8002368:	d0f2      	beq.n	8002350 <SPI_EndRxTxTransaction+0x78>
 800236a:	e000      	b.n	800236e <SPI_EndRxTxTransaction+0x96>
        break;
 800236c:	bf00      	nop
  }

  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	20000000 	.word	0x20000000
 800237c:	165e9f81 	.word	0x165e9f81

08002380 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e031      	b.n	80023f6 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d106      	bne.n	80023ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7fe fb0a 	bl	80009c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2202      	movs	r2, #2
 80023b0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3304      	adds	r3, #4
 80023bc:	4619      	mov	r1, r3
 80023be:	4610      	mov	r0, r2
 80023c0:	f000 fa86 	bl	80028d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d101      	bne.n	8002410 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e031      	b.n	8002474 <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b00      	cmp	r3, #0
 800241a:	d106      	bne.n	800242a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 f829 	bl	800247c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2202      	movs	r2, #2
 800242e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3304      	adds	r3, #4
 800243a:	4619      	mov	r1, r3
 800243c:	4610      	mov	r0, r2
 800243e:	f000 fa47 	bl	80028d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2201      	movs	r2, #1
 8002456:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	bc80      	pop	{r7}
 800248c:	4770      	bx	lr
	...

08002490 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d109      	bne.n	80024b4 <HAL_TIM_PWM_Start+0x24>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	bf14      	ite	ne
 80024ac:	2301      	movne	r3, #1
 80024ae:	2300      	moveq	r3, #0
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	e022      	b.n	80024fa <HAL_TIM_PWM_Start+0x6a>
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	d109      	bne.n	80024ce <HAL_TIM_PWM_Start+0x3e>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	bf14      	ite	ne
 80024c6:	2301      	movne	r3, #1
 80024c8:	2300      	moveq	r3, #0
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	e015      	b.n	80024fa <HAL_TIM_PWM_Start+0x6a>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d109      	bne.n	80024e8 <HAL_TIM_PWM_Start+0x58>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b01      	cmp	r3, #1
 80024de:	bf14      	ite	ne
 80024e0:	2301      	movne	r3, #1
 80024e2:	2300      	moveq	r3, #0
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	e008      	b.n	80024fa <HAL_TIM_PWM_Start+0x6a>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	bf14      	ite	ne
 80024f4:	2301      	movne	r3, #1
 80024f6:	2300      	moveq	r3, #0
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e051      	b.n	80025a6 <HAL_TIM_PWM_Start+0x116>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d104      	bne.n	8002512 <HAL_TIM_PWM_Start+0x82>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2202      	movs	r2, #2
 800250c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8002510:	e013      	b.n	800253a <HAL_TIM_PWM_Start+0xaa>
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	2b04      	cmp	r3, #4
 8002516:	d104      	bne.n	8002522 <HAL_TIM_PWM_Start+0x92>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2202      	movs	r2, #2
 800251c:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8002520:	e00b      	b.n	800253a <HAL_TIM_PWM_Start+0xaa>
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	2b08      	cmp	r3, #8
 8002526:	d104      	bne.n	8002532 <HAL_TIM_PWM_Start+0xa2>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2202      	movs	r2, #2
 800252c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002530:	e003      	b.n	800253a <HAL_TIM_PWM_Start+0xaa>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2202      	movs	r2, #2
 8002536:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2201      	movs	r2, #1
 8002540:	6839      	ldr	r1, [r7, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f000 fbc5 	bl	8002cd2 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002550:	d00e      	beq.n	8002570 <HAL_TIM_PWM_Start+0xe0>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a16      	ldr	r2, [pc, #88]	@ (80025b0 <HAL_TIM_PWM_Start+0x120>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d009      	beq.n	8002570 <HAL_TIM_PWM_Start+0xe0>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a14      	ldr	r2, [pc, #80]	@ (80025b4 <HAL_TIM_PWM_Start+0x124>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d004      	beq.n	8002570 <HAL_TIM_PWM_Start+0xe0>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a13      	ldr	r2, [pc, #76]	@ (80025b8 <HAL_TIM_PWM_Start+0x128>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d111      	bne.n	8002594 <HAL_TIM_PWM_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2b06      	cmp	r3, #6
 8002580:	d010      	beq.n	80025a4 <HAL_TIM_PWM_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f042 0201 	orr.w	r2, r2, #1
 8002590:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002592:	e007      	b.n	80025a4 <HAL_TIM_PWM_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 0201 	orr.w	r2, r2, #1
 80025a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40000400 	.word	0x40000400
 80025b4:	40000800 	.word	0x40000800
 80025b8:	40010800 	.word	0x40010800

080025bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025c8:	2300      	movs	r3, #0
 80025ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d101      	bne.n	80025da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80025d6:	2302      	movs	r3, #2
 80025d8:	e0ae      	b.n	8002738 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  switch (Channel)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b0c      	cmp	r3, #12
 80025e6:	f200 809f 	bhi.w	8002728 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80025ea:	a201      	add	r2, pc, #4	@ (adr r2, 80025f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80025ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f0:	08002625 	.word	0x08002625
 80025f4:	08002729 	.word	0x08002729
 80025f8:	08002729 	.word	0x08002729
 80025fc:	08002729 	.word	0x08002729
 8002600:	08002665 	.word	0x08002665
 8002604:	08002729 	.word	0x08002729
 8002608:	08002729 	.word	0x08002729
 800260c:	08002729 	.word	0x08002729
 8002610:	080026a7 	.word	0x080026a7
 8002614:	08002729 	.word	0x08002729
 8002618:	08002729 	.word	0x08002729
 800261c:	08002729 	.word	0x08002729
 8002620:	080026e7 	.word	0x080026e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68b9      	ldr	r1, [r7, #8]
 800262a:	4618      	mov	r0, r3
 800262c:	f000 f9c6 	bl	80029bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	699a      	ldr	r2, [r3, #24]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 0208 	orr.w	r2, r2, #8
 800263e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	699a      	ldr	r2, [r3, #24]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 0204 	bic.w	r2, r2, #4
 800264e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6999      	ldr	r1, [r3, #24]
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	68da      	ldr	r2, [r3, #12]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	430a      	orrs	r2, r1
 8002660:	619a      	str	r2, [r3, #24]
      break;
 8002662:	e064      	b.n	800272e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68b9      	ldr	r1, [r7, #8]
 800266a:	4618      	mov	r0, r3
 800266c:	f000 f9e2 	bl	8002a34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	699a      	ldr	r2, [r3, #24]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800267e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	699a      	ldr	r2, [r3, #24]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800268e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6999      	ldr	r1, [r3, #24]
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	021a      	lsls	r2, r3, #8
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	619a      	str	r2, [r3, #24]
      break;
 80026a4:	e043      	b.n	800272e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68b9      	ldr	r1, [r7, #8]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f000 f9ff 	bl	8002ab0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	69da      	ldr	r2, [r3, #28]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f042 0208 	orr.w	r2, r2, #8
 80026c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	69da      	ldr	r2, [r3, #28]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 0204 	bic.w	r2, r2, #4
 80026d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	69d9      	ldr	r1, [r3, #28]
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	68da      	ldr	r2, [r3, #12]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	61da      	str	r2, [r3, #28]
      break;
 80026e4:	e023      	b.n	800272e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68b9      	ldr	r1, [r7, #8]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f000 fa1c 	bl	8002b2a <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	69da      	ldr	r2, [r3, #28]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002700:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	69da      	ldr	r2, [r3, #28]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002710:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	69d9      	ldr	r1, [r3, #28]
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	021a      	lsls	r2, r3, #8
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	61da      	str	r2, [r3, #28]
      break;
 8002726:	e002      	b.n	800272e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	75fb      	strb	r3, [r7, #23]
      break;
 800272c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 8002736:	7dfb      	ldrb	r3, [r7, #23]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800274a:	2300      	movs	r3, #0
 800274c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002754:	2b01      	cmp	r3, #1
 8002756:	d101      	bne.n	800275c <HAL_TIM_ConfigClockSource+0x1c>
 8002758:	2302      	movs	r3, #2
 800275a:	e0b4      	b.n	80028c6 <HAL_TIM_ConfigClockSource+0x186>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2202      	movs	r2, #2
 8002768:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800277a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002782:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68ba      	ldr	r2, [r7, #8]
 800278a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002794:	d03e      	beq.n	8002814 <HAL_TIM_ConfigClockSource+0xd4>
 8002796:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800279a:	f200 8087 	bhi.w	80028ac <HAL_TIM_ConfigClockSource+0x16c>
 800279e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027a2:	f000 8086 	beq.w	80028b2 <HAL_TIM_ConfigClockSource+0x172>
 80027a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027aa:	d87f      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x16c>
 80027ac:	2b70      	cmp	r3, #112	@ 0x70
 80027ae:	d01a      	beq.n	80027e6 <HAL_TIM_ConfigClockSource+0xa6>
 80027b0:	2b70      	cmp	r3, #112	@ 0x70
 80027b2:	d87b      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x16c>
 80027b4:	2b60      	cmp	r3, #96	@ 0x60
 80027b6:	d050      	beq.n	800285a <HAL_TIM_ConfigClockSource+0x11a>
 80027b8:	2b60      	cmp	r3, #96	@ 0x60
 80027ba:	d877      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x16c>
 80027bc:	2b50      	cmp	r3, #80	@ 0x50
 80027be:	d03c      	beq.n	800283a <HAL_TIM_ConfigClockSource+0xfa>
 80027c0:	2b50      	cmp	r3, #80	@ 0x50
 80027c2:	d873      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x16c>
 80027c4:	2b40      	cmp	r3, #64	@ 0x40
 80027c6:	d058      	beq.n	800287a <HAL_TIM_ConfigClockSource+0x13a>
 80027c8:	2b40      	cmp	r3, #64	@ 0x40
 80027ca:	d86f      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x16c>
 80027cc:	2b30      	cmp	r3, #48	@ 0x30
 80027ce:	d064      	beq.n	800289a <HAL_TIM_ConfigClockSource+0x15a>
 80027d0:	2b30      	cmp	r3, #48	@ 0x30
 80027d2:	d86b      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x16c>
 80027d4:	2b20      	cmp	r3, #32
 80027d6:	d060      	beq.n	800289a <HAL_TIM_ConfigClockSource+0x15a>
 80027d8:	2b20      	cmp	r3, #32
 80027da:	d867      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x16c>
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d05c      	beq.n	800289a <HAL_TIM_ConfigClockSource+0x15a>
 80027e0:	2b10      	cmp	r3, #16
 80027e2:	d05a      	beq.n	800289a <HAL_TIM_ConfigClockSource+0x15a>
 80027e4:	e062      	b.n	80028ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027f6:	f000 fa4d 	bl	8002c94 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002808:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	609a      	str	r2, [r3, #8]
      break;
 8002812:	e04f      	b.n	80028b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002824:	f000 fa36 	bl	8002c94 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002836:	609a      	str	r2, [r3, #8]
      break;
 8002838:	e03c      	b.n	80028b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002846:	461a      	mov	r2, r3
 8002848:	f000 f9ad 	bl	8002ba6 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2150      	movs	r1, #80	@ 0x50
 8002852:	4618      	mov	r0, r3
 8002854:	f000 fa04 	bl	8002c60 <TIM_ITRx_SetConfig>
      break;
 8002858:	e02c      	b.n	80028b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002866:	461a      	mov	r2, r3
 8002868:	f000 f9cb 	bl	8002c02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2160      	movs	r1, #96	@ 0x60
 8002872:	4618      	mov	r0, r3
 8002874:	f000 f9f4 	bl	8002c60 <TIM_ITRx_SetConfig>
      break;
 8002878:	e01c      	b.n	80028b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002886:	461a      	mov	r2, r3
 8002888:	f000 f98d 	bl	8002ba6 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2140      	movs	r1, #64	@ 0x40
 8002892:	4618      	mov	r0, r3
 8002894:	f000 f9e4 	bl	8002c60 <TIM_ITRx_SetConfig>
      break;
 8002898:	e00c      	b.n	80028b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4619      	mov	r1, r3
 80028a4:	4610      	mov	r0, r2
 80028a6:	f000 f9db 	bl	8002c60 <TIM_ITRx_SetConfig>
      break;
 80028aa:	e003      	b.n	80028b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	73fb      	strb	r3, [r7, #15]
      break;
 80028b0:	e000      	b.n	80028b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80028b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
	...

080028d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028e6:	d00f      	beq.n	8002908 <TIM_Base_SetConfig+0x38>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a2e      	ldr	r2, [pc, #184]	@ (80029a4 <TIM_Base_SetConfig+0xd4>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d00b      	beq.n	8002908 <TIM_Base_SetConfig+0x38>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a2d      	ldr	r2, [pc, #180]	@ (80029a8 <TIM_Base_SetConfig+0xd8>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d007      	beq.n	8002908 <TIM_Base_SetConfig+0x38>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a2c      	ldr	r2, [pc, #176]	@ (80029ac <TIM_Base_SetConfig+0xdc>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d003      	beq.n	8002908 <TIM_Base_SetConfig+0x38>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a2b      	ldr	r2, [pc, #172]	@ (80029b0 <TIM_Base_SetConfig+0xe0>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d108      	bne.n	800291a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800290e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	4313      	orrs	r3, r2
 8002918:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002920:	d017      	beq.n	8002952 <TIM_Base_SetConfig+0x82>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a1f      	ldr	r2, [pc, #124]	@ (80029a4 <TIM_Base_SetConfig+0xd4>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d013      	beq.n	8002952 <TIM_Base_SetConfig+0x82>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a1e      	ldr	r2, [pc, #120]	@ (80029a8 <TIM_Base_SetConfig+0xd8>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d00f      	beq.n	8002952 <TIM_Base_SetConfig+0x82>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a1d      	ldr	r2, [pc, #116]	@ (80029ac <TIM_Base_SetConfig+0xdc>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d00b      	beq.n	8002952 <TIM_Base_SetConfig+0x82>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a1c      	ldr	r2, [pc, #112]	@ (80029b0 <TIM_Base_SetConfig+0xe0>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d007      	beq.n	8002952 <TIM_Base_SetConfig+0x82>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a1b      	ldr	r2, [pc, #108]	@ (80029b4 <TIM_Base_SetConfig+0xe4>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d003      	beq.n	8002952 <TIM_Base_SetConfig+0x82>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a1a      	ldr	r2, [pc, #104]	@ (80029b8 <TIM_Base_SetConfig+0xe8>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d108      	bne.n	8002964 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002958:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	4313      	orrs	r3, r2
 8002962:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	4313      	orrs	r3, r2
 8002970:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f043 0204 	orr.w	r2, r3, #4
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2201      	movs	r2, #1
 8002992:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	601a      	str	r2, [r3, #0]
}
 800299a:	bf00      	nop
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr
 80029a4:	40000400 	.word	0x40000400
 80029a8:	40000800 	.word	0x40000800
 80029ac:	40000c00 	.word	0x40000c00
 80029b0:	40010800 	.word	0x40010800
 80029b4:	40010c00 	.word	0x40010c00
 80029b8:	40011000 	.word	0x40011000

080029bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029bc:	b480      	push	{r7}
 80029be:	b087      	sub	sp, #28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	f023 0201 	bic.w	r2, r3, #1
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f023 0303 	bic.w	r3, r3, #3
 80029f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f023 0302 	bic.w	r3, r3, #2
 8002a04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685a      	ldr	r2, [r3, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	621a      	str	r2, [r3, #32]
}
 8002a2a:	bf00      	nop
 8002a2c:	371c      	adds	r7, #28
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr

08002a34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b087      	sub	sp, #28
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	f023 0210 	bic.w	r2, r3, #16
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	021b      	lsls	r3, r3, #8
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	f023 0320 	bic.w	r3, r3, #32
 8002a7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	011b      	lsls	r3, r3, #4
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	621a      	str	r2, [r3, #32]
}
 8002aa6:	bf00      	nop
 8002aa8:	371c      	adds	r7, #28
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr

08002ab0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b087      	sub	sp, #28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f023 0303 	bic.w	r3, r3, #3
 8002ae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002af8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	021b      	lsls	r3, r3, #8
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	621a      	str	r2, [r3, #32]
}
 8002b20:	bf00      	nop
 8002b22:	371c      	adds	r7, #28
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bc80      	pop	{r7}
 8002b28:	4770      	bx	lr

08002b2a <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b087      	sub	sp, #28
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
 8002b32:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	69db      	ldr	r3, [r3, #28]
 8002b50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b58:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b60:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	021b      	lsls	r3, r3, #8
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002b74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	031b      	lsls	r3, r3, #12
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	621a      	str	r2, [r3, #32]
}
 8002b9c:	bf00      	nop
 8002b9e:	371c      	adds	r7, #28
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bc80      	pop	{r7}
 8002ba4:	4770      	bx	lr

08002ba6 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b087      	sub	sp, #28
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	60f8      	str	r0, [r7, #12]
 8002bae:	60b9      	str	r1, [r7, #8]
 8002bb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	f023 0201 	bic.w	r2, r3, #1
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002bd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	f023 030a 	bic.w	r3, r3, #10
 8002be2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	621a      	str	r2, [r3, #32]
}
 8002bf8:	bf00      	nop
 8002bfa:	371c      	adds	r7, #28
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bc80      	pop	{r7}
 8002c00:	4770      	bx	lr

08002c02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b087      	sub	sp, #28
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	60f8      	str	r0, [r7, #12]
 8002c0a:	60b9      	str	r1, [r7, #8]
 8002c0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	f023 0210 	bic.w	r2, r3, #16
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002c2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	031b      	lsls	r3, r3, #12
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002c3e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	011b      	lsls	r3, r3, #4
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	621a      	str	r2, [r3, #32]
}
 8002c56:	bf00      	nop
 8002c58:	371c      	adds	r7, #28
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr

08002c60 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c76:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	f043 0307 	orr.w	r3, r3, #7
 8002c82:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	609a      	str	r2, [r3, #8]
}
 8002c8a:	bf00      	nop
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bc80      	pop	{r7}
 8002c92:	4770      	bx	lr

08002c94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b087      	sub	sp, #28
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
 8002ca0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002cae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	021a      	lsls	r2, r3, #8
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	609a      	str	r2, [r3, #8]
}
 8002cc8:	bf00      	nop
 8002cca:	371c      	adds	r7, #28
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bc80      	pop	{r7}
 8002cd0:	4770      	bx	lr

08002cd2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b087      	sub	sp, #28
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	60f8      	str	r0, [r7, #12]
 8002cda:	60b9      	str	r1, [r7, #8]
 8002cdc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	f003 031f 	and.w	r3, r3, #31
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6a1a      	ldr	r2, [r3, #32]
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	401a      	ands	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6a1a      	ldr	r2, [r3, #32]
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	f003 031f 	and.w	r3, r3, #31
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	621a      	str	r2, [r3, #32]
}
 8002d10:	bf00      	nop
 8002d12:	371c      	adds	r7, #28
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bc80      	pop	{r7}
 8002d18:	4770      	bx	lr
	...

08002d1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d101      	bne.n	8002d34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d30:	2302      	movs	r3, #2
 8002d32:	e046      	b.n	8002dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d76:	d00e      	beq.n	8002d96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a13      	ldr	r2, [pc, #76]	@ (8002dcc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d009      	beq.n	8002d96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a12      	ldr	r2, [pc, #72]	@ (8002dd0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d004      	beq.n	8002d96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a10      	ldr	r2, [pc, #64]	@ (8002dd4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d10c      	bne.n	8002db0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68ba      	ldr	r2, [r7, #8]
 8002dae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr
 8002dcc:	40000400 	.word	0x40000400
 8002dd0:	40000800 	.word	0x40000800
 8002dd4:	40010800 	.word	0x40010800

08002dd8 <memset>:
 8002dd8:	4603      	mov	r3, r0
 8002dda:	4402      	add	r2, r0
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d100      	bne.n	8002de2 <memset+0xa>
 8002de0:	4770      	bx	lr
 8002de2:	f803 1b01 	strb.w	r1, [r3], #1
 8002de6:	e7f9      	b.n	8002ddc <memset+0x4>

08002de8 <__libc_init_array>:
 8002de8:	b570      	push	{r4, r5, r6, lr}
 8002dea:	2600      	movs	r6, #0
 8002dec:	4d0c      	ldr	r5, [pc, #48]	@ (8002e20 <__libc_init_array+0x38>)
 8002dee:	4c0d      	ldr	r4, [pc, #52]	@ (8002e24 <__libc_init_array+0x3c>)
 8002df0:	1b64      	subs	r4, r4, r5
 8002df2:	10a4      	asrs	r4, r4, #2
 8002df4:	42a6      	cmp	r6, r4
 8002df6:	d109      	bne.n	8002e0c <__libc_init_array+0x24>
 8002df8:	f000 f81a 	bl	8002e30 <_init>
 8002dfc:	2600      	movs	r6, #0
 8002dfe:	4d0a      	ldr	r5, [pc, #40]	@ (8002e28 <__libc_init_array+0x40>)
 8002e00:	4c0a      	ldr	r4, [pc, #40]	@ (8002e2c <__libc_init_array+0x44>)
 8002e02:	1b64      	subs	r4, r4, r5
 8002e04:	10a4      	asrs	r4, r4, #2
 8002e06:	42a6      	cmp	r6, r4
 8002e08:	d105      	bne.n	8002e16 <__libc_init_array+0x2e>
 8002e0a:	bd70      	pop	{r4, r5, r6, pc}
 8002e0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e10:	4798      	blx	r3
 8002e12:	3601      	adds	r6, #1
 8002e14:	e7ee      	b.n	8002df4 <__libc_init_array+0xc>
 8002e16:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e1a:	4798      	blx	r3
 8002e1c:	3601      	adds	r6, #1
 8002e1e:	e7f2      	b.n	8002e06 <__libc_init_array+0x1e>
 8002e20:	08002e7c 	.word	0x08002e7c
 8002e24:	08002e7c 	.word	0x08002e7c
 8002e28:	08002e7c 	.word	0x08002e7c
 8002e2c:	08002e80 	.word	0x08002e80

08002e30 <_init>:
 8002e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e32:	bf00      	nop
 8002e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e36:	bc08      	pop	{r3}
 8002e38:	469e      	mov	lr, r3
 8002e3a:	4770      	bx	lr

08002e3c <_fini>:
 8002e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e3e:	bf00      	nop
 8002e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e42:	bc08      	pop	{r3}
 8002e44:	469e      	mov	lr, r3
 8002e46:	4770      	bx	lr
