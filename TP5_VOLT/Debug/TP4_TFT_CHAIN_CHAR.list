
TP4_TFT_CHAIN_CHAR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002660  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000086c  0800279c  0800279c  0000379c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003008  08003008  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003008  08003008  00004008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003010  08003010  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003010  08003010  00004010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003014  08003014  00004014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003018  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000000c  08003024  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  08003024  00005084  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006244  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016b0  00000000  00000000  0000b279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d8  00000000  00000000  0000c930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000511  00000000  00000000  0000d008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014ce5  00000000  00000000  0000d519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007ace  00000000  00000000  000221fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081820  00000000  00000000  00029ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ab4ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a7c  00000000  00000000  000ab530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000acfac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	08002784 	.word	0x08002784

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	08002784 	.word	0x08002784

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800018c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000190:	f000 b98c 	b.w	80004ac <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9d08      	ldr	r5, [sp, #32]
 80001b2:	468e      	mov	lr, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14a      	bne.n	8000252 <__udivmoddi4+0xa6>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4617      	mov	r7, r2
 80001c0:	d962      	bls.n	8000288 <__udivmoddi4+0xdc>
 80001c2:	fab2 f682 	clz	r6, r2
 80001c6:	b14e      	cbz	r6, 80001dc <__udivmoddi4+0x30>
 80001c8:	f1c6 0320 	rsb	r3, r6, #32
 80001cc:	fa01 f806 	lsl.w	r8, r1, r6
 80001d0:	fa20 f303 	lsr.w	r3, r0, r3
 80001d4:	40b7      	lsls	r7, r6
 80001d6:	ea43 0808 	orr.w	r8, r3, r8
 80001da:	40b4      	lsls	r4, r6
 80001dc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80001e0:	fbb8 f1fe 	udiv	r1, r8, lr
 80001e4:	fa1f fc87 	uxth.w	ip, r7
 80001e8:	fb0e 8811 	mls	r8, lr, r1, r8
 80001ec:	fb01 f20c 	mul.w	r2, r1, ip
 80001f0:	0c23      	lsrs	r3, r4, #16
 80001f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f6:	429a      	cmp	r2, r3
 80001f8:	d909      	bls.n	800020e <__udivmoddi4+0x62>
 80001fa:	18fb      	adds	r3, r7, r3
 80001fc:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000200:	f080 80eb 	bcs.w	80003da <__udivmoddi4+0x22e>
 8000204:	429a      	cmp	r2, r3
 8000206:	f240 80e8 	bls.w	80003da <__udivmoddi4+0x22e>
 800020a:	3902      	subs	r1, #2
 800020c:	443b      	add	r3, r7
 800020e:	1a9a      	subs	r2, r3, r2
 8000210:	fbb2 f0fe 	udiv	r0, r2, lr
 8000214:	fb0e 2210 	mls	r2, lr, r0, r2
 8000218:	fb00 fc0c 	mul.w	ip, r0, ip
 800021c:	b2a3      	uxth	r3, r4
 800021e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000222:	459c      	cmp	ip, r3
 8000224:	d909      	bls.n	800023a <__udivmoddi4+0x8e>
 8000226:	18fb      	adds	r3, r7, r3
 8000228:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 800022c:	f080 80d7 	bcs.w	80003de <__udivmoddi4+0x232>
 8000230:	459c      	cmp	ip, r3
 8000232:	f240 80d4 	bls.w	80003de <__udivmoddi4+0x232>
 8000236:	443b      	add	r3, r7
 8000238:	3802      	subs	r0, #2
 800023a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800023e:	2100      	movs	r1, #0
 8000240:	eba3 030c 	sub.w	r3, r3, ip
 8000244:	b11d      	cbz	r5, 800024e <__udivmoddi4+0xa2>
 8000246:	2200      	movs	r2, #0
 8000248:	40f3      	lsrs	r3, r6
 800024a:	e9c5 3200 	strd	r3, r2, [r5]
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	428b      	cmp	r3, r1
 8000254:	d905      	bls.n	8000262 <__udivmoddi4+0xb6>
 8000256:	b10d      	cbz	r5, 800025c <__udivmoddi4+0xb0>
 8000258:	e9c5 0100 	strd	r0, r1, [r5]
 800025c:	2100      	movs	r1, #0
 800025e:	4608      	mov	r0, r1
 8000260:	e7f5      	b.n	800024e <__udivmoddi4+0xa2>
 8000262:	fab3 f183 	clz	r1, r3
 8000266:	2900      	cmp	r1, #0
 8000268:	d146      	bne.n	80002f8 <__udivmoddi4+0x14c>
 800026a:	4573      	cmp	r3, lr
 800026c:	d302      	bcc.n	8000274 <__udivmoddi4+0xc8>
 800026e:	4282      	cmp	r2, r0
 8000270:	f200 8108 	bhi.w	8000484 <__udivmoddi4+0x2d8>
 8000274:	1a84      	subs	r4, r0, r2
 8000276:	eb6e 0203 	sbc.w	r2, lr, r3
 800027a:	2001      	movs	r0, #1
 800027c:	4690      	mov	r8, r2
 800027e:	2d00      	cmp	r5, #0
 8000280:	d0e5      	beq.n	800024e <__udivmoddi4+0xa2>
 8000282:	e9c5 4800 	strd	r4, r8, [r5]
 8000286:	e7e2      	b.n	800024e <__udivmoddi4+0xa2>
 8000288:	2a00      	cmp	r2, #0
 800028a:	f000 8091 	beq.w	80003b0 <__udivmoddi4+0x204>
 800028e:	fab2 f682 	clz	r6, r2
 8000292:	2e00      	cmp	r6, #0
 8000294:	f040 80a5 	bne.w	80003e2 <__udivmoddi4+0x236>
 8000298:	1a8a      	subs	r2, r1, r2
 800029a:	2101      	movs	r1, #1
 800029c:	0c03      	lsrs	r3, r0, #16
 800029e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002a2:	b280      	uxth	r0, r0
 80002a4:	b2bc      	uxth	r4, r7
 80002a6:	fbb2 fcfe 	udiv	ip, r2, lr
 80002aa:	fb0e 221c 	mls	r2, lr, ip, r2
 80002ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b2:	fb04 f20c 	mul.w	r2, r4, ip
 80002b6:	429a      	cmp	r2, r3
 80002b8:	d907      	bls.n	80002ca <__udivmoddi4+0x11e>
 80002ba:	18fb      	adds	r3, r7, r3
 80002bc:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80002c0:	d202      	bcs.n	80002c8 <__udivmoddi4+0x11c>
 80002c2:	429a      	cmp	r2, r3
 80002c4:	f200 80e3 	bhi.w	800048e <__udivmoddi4+0x2e2>
 80002c8:	46c4      	mov	ip, r8
 80002ca:	1a9b      	subs	r3, r3, r2
 80002cc:	fbb3 f2fe 	udiv	r2, r3, lr
 80002d0:	fb0e 3312 	mls	r3, lr, r2, r3
 80002d4:	fb02 f404 	mul.w	r4, r2, r4
 80002d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80002dc:	429c      	cmp	r4, r3
 80002de:	d907      	bls.n	80002f0 <__udivmoddi4+0x144>
 80002e0:	18fb      	adds	r3, r7, r3
 80002e2:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80002e6:	d202      	bcs.n	80002ee <__udivmoddi4+0x142>
 80002e8:	429c      	cmp	r4, r3
 80002ea:	f200 80cd 	bhi.w	8000488 <__udivmoddi4+0x2dc>
 80002ee:	4602      	mov	r2, r0
 80002f0:	1b1b      	subs	r3, r3, r4
 80002f2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80002f6:	e7a5      	b.n	8000244 <__udivmoddi4+0x98>
 80002f8:	f1c1 0620 	rsb	r6, r1, #32
 80002fc:	408b      	lsls	r3, r1
 80002fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000302:	431f      	orrs	r7, r3
 8000304:	fa2e fa06 	lsr.w	sl, lr, r6
 8000308:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800030c:	fbba f8f9 	udiv	r8, sl, r9
 8000310:	fa0e fe01 	lsl.w	lr, lr, r1
 8000314:	fa20 f306 	lsr.w	r3, r0, r6
 8000318:	fb09 aa18 	mls	sl, r9, r8, sl
 800031c:	fa1f fc87 	uxth.w	ip, r7
 8000320:	ea43 030e 	orr.w	r3, r3, lr
 8000324:	fa00 fe01 	lsl.w	lr, r0, r1
 8000328:	fb08 f00c 	mul.w	r0, r8, ip
 800032c:	0c1c      	lsrs	r4, r3, #16
 800032e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000332:	42a0      	cmp	r0, r4
 8000334:	fa02 f201 	lsl.w	r2, r2, r1
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x1a4>
 800033a:	193c      	adds	r4, r7, r4
 800033c:	f108 3aff 	add.w	sl, r8, #4294967295	@ 0xffffffff
 8000340:	f080 809e 	bcs.w	8000480 <__udivmoddi4+0x2d4>
 8000344:	42a0      	cmp	r0, r4
 8000346:	f240 809b 	bls.w	8000480 <__udivmoddi4+0x2d4>
 800034a:	f1a8 0802 	sub.w	r8, r8, #2
 800034e:	443c      	add	r4, r7
 8000350:	1a24      	subs	r4, r4, r0
 8000352:	b298      	uxth	r0, r3
 8000354:	fbb4 f3f9 	udiv	r3, r4, r9
 8000358:	fb09 4413 	mls	r4, r9, r3, r4
 800035c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000360:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x1d0>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 800036e:	f080 8085 	bcs.w	800047c <__udivmoddi4+0x2d0>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8082 	bls.w	800047c <__udivmoddi4+0x2d0>
 8000378:	3b02      	subs	r3, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	fba0 8c02 	umull	r8, ip, r0, r2
 8000388:	4564      	cmp	r4, ip
 800038a:	4643      	mov	r3, r8
 800038c:	46e1      	mov	r9, ip
 800038e:	d364      	bcc.n	800045a <__udivmoddi4+0x2ae>
 8000390:	d061      	beq.n	8000456 <__udivmoddi4+0x2aa>
 8000392:	b15d      	cbz	r5, 80003ac <__udivmoddi4+0x200>
 8000394:	ebbe 0203 	subs.w	r2, lr, r3
 8000398:	eb64 0409 	sbc.w	r4, r4, r9
 800039c:	fa04 f606 	lsl.w	r6, r4, r6
 80003a0:	fa22 f301 	lsr.w	r3, r2, r1
 80003a4:	431e      	orrs	r6, r3
 80003a6:	40cc      	lsrs	r4, r1
 80003a8:	e9c5 6400 	strd	r6, r4, [r5]
 80003ac:	2100      	movs	r1, #0
 80003ae:	e74e      	b.n	800024e <__udivmoddi4+0xa2>
 80003b0:	fbb1 fcf2 	udiv	ip, r1, r2
 80003b4:	0c01      	lsrs	r1, r0, #16
 80003b6:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80003ba:	b280      	uxth	r0, r0
 80003bc:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80003c0:	463b      	mov	r3, r7
 80003c2:	fbb1 f1f7 	udiv	r1, r1, r7
 80003c6:	4638      	mov	r0, r7
 80003c8:	463c      	mov	r4, r7
 80003ca:	46b8      	mov	r8, r7
 80003cc:	46be      	mov	lr, r7
 80003ce:	2620      	movs	r6, #32
 80003d0:	eba2 0208 	sub.w	r2, r2, r8
 80003d4:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80003d8:	e765      	b.n	80002a6 <__udivmoddi4+0xfa>
 80003da:	4601      	mov	r1, r0
 80003dc:	e717      	b.n	800020e <__udivmoddi4+0x62>
 80003de:	4610      	mov	r0, r2
 80003e0:	e72b      	b.n	800023a <__udivmoddi4+0x8e>
 80003e2:	f1c6 0120 	rsb	r1, r6, #32
 80003e6:	fa2e fc01 	lsr.w	ip, lr, r1
 80003ea:	40b7      	lsls	r7, r6
 80003ec:	fa0e fe06 	lsl.w	lr, lr, r6
 80003f0:	fa20 f101 	lsr.w	r1, r0, r1
 80003f4:	ea41 010e 	orr.w	r1, r1, lr
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	fbbc f8fe 	udiv	r8, ip, lr
 8000400:	b2bc      	uxth	r4, r7
 8000402:	fb0e cc18 	mls	ip, lr, r8, ip
 8000406:	fb08 f904 	mul.w	r9, r8, r4
 800040a:	0c0a      	lsrs	r2, r1, #16
 800040c:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000410:	40b0      	lsls	r0, r6
 8000412:	4591      	cmp	r9, r2
 8000414:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000418:	b280      	uxth	r0, r0
 800041a:	d93e      	bls.n	800049a <__udivmoddi4+0x2ee>
 800041c:	18ba      	adds	r2, r7, r2
 800041e:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000422:	d201      	bcs.n	8000428 <__udivmoddi4+0x27c>
 8000424:	4591      	cmp	r9, r2
 8000426:	d81f      	bhi.n	8000468 <__udivmoddi4+0x2bc>
 8000428:	eba2 0209 	sub.w	r2, r2, r9
 800042c:	fbb2 f9fe 	udiv	r9, r2, lr
 8000430:	fb09 f804 	mul.w	r8, r9, r4
 8000434:	fb0e 2a19 	mls	sl, lr, r9, r2
 8000438:	b28a      	uxth	r2, r1
 800043a:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 800043e:	4542      	cmp	r2, r8
 8000440:	d229      	bcs.n	8000496 <__udivmoddi4+0x2ea>
 8000442:	18ba      	adds	r2, r7, r2
 8000444:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000448:	d2c2      	bcs.n	80003d0 <__udivmoddi4+0x224>
 800044a:	4542      	cmp	r2, r8
 800044c:	d2c0      	bcs.n	80003d0 <__udivmoddi4+0x224>
 800044e:	f1a9 0102 	sub.w	r1, r9, #2
 8000452:	443a      	add	r2, r7
 8000454:	e7bc      	b.n	80003d0 <__udivmoddi4+0x224>
 8000456:	45c6      	cmp	lr, r8
 8000458:	d29b      	bcs.n	8000392 <__udivmoddi4+0x1e6>
 800045a:	ebb8 0302 	subs.w	r3, r8, r2
 800045e:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000462:	3801      	subs	r0, #1
 8000464:	46e1      	mov	r9, ip
 8000466:	e794      	b.n	8000392 <__udivmoddi4+0x1e6>
 8000468:	eba7 0909 	sub.w	r9, r7, r9
 800046c:	444a      	add	r2, r9
 800046e:	fbb2 f9fe 	udiv	r9, r2, lr
 8000472:	f1a8 0c02 	sub.w	ip, r8, #2
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	e7db      	b.n	8000434 <__udivmoddi4+0x288>
 800047c:	4603      	mov	r3, r0
 800047e:	e77d      	b.n	800037c <__udivmoddi4+0x1d0>
 8000480:	46d0      	mov	r8, sl
 8000482:	e765      	b.n	8000350 <__udivmoddi4+0x1a4>
 8000484:	4608      	mov	r0, r1
 8000486:	e6fa      	b.n	800027e <__udivmoddi4+0xd2>
 8000488:	443b      	add	r3, r7
 800048a:	3a02      	subs	r2, #2
 800048c:	e730      	b.n	80002f0 <__udivmoddi4+0x144>
 800048e:	f1ac 0c02 	sub.w	ip, ip, #2
 8000492:	443b      	add	r3, r7
 8000494:	e719      	b.n	80002ca <__udivmoddi4+0x11e>
 8000496:	4649      	mov	r1, r9
 8000498:	e79a      	b.n	80003d0 <__udivmoddi4+0x224>
 800049a:	eba2 0209 	sub.w	r2, r2, r9
 800049e:	fbb2 f9fe 	udiv	r9, r2, lr
 80004a2:	46c4      	mov	ip, r8
 80004a4:	fb09 f804 	mul.w	r8, r9, r4
 80004a8:	e7c4      	b.n	8000434 <__udivmoddi4+0x288>
 80004aa:	bf00      	nop

080004ac <__aeabi_idiv0>:
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop

080004b0 <affiche_mot>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void affiche_mot(uint8_t* mot, uint8_t col, uint8_t ligne) {
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b086      	sub	sp, #24
 80004b4:	af02      	add	r7, sp, #8
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	460b      	mov	r3, r1
 80004ba:	70fb      	strb	r3, [r7, #3]
 80004bc:	4613      	mov	r3, r2
 80004be:	70bb      	strb	r3, [r7, #2]
    uint8_t i = 0;
 80004c0:	2300      	movs	r3, #0
 80004c2:	73fb      	strb	r3, [r7, #15]
    while (mot[i] != '\0') {
 80004c4:	e01b      	b.n	80004fe <affiche_mot+0x4e>
        displayChar_TFT(col + (i * 12), ligne, mot[i], ST7735_RED, ST7735_BLACK, 2);
 80004c6:	78fb      	ldrb	r3, [r7, #3]
 80004c8:	b29a      	uxth	r2, r3
 80004ca:	7bfb      	ldrb	r3, [r7, #15]
 80004cc:	b29b      	uxth	r3, r3
 80004ce:	4619      	mov	r1, r3
 80004d0:	0049      	lsls	r1, r1, #1
 80004d2:	440b      	add	r3, r1
 80004d4:	009b      	lsls	r3, r3, #2
 80004d6:	b29b      	uxth	r3, r3
 80004d8:	4413      	add	r3, r2
 80004da:	b298      	uxth	r0, r3
 80004dc:	78bb      	ldrb	r3, [r7, #2]
 80004de:	b299      	uxth	r1, r3
 80004e0:	7bfb      	ldrb	r3, [r7, #15]
 80004e2:	687a      	ldr	r2, [r7, #4]
 80004e4:	4413      	add	r3, r2
 80004e6:	781a      	ldrb	r2, [r3, #0]
 80004e8:	2302      	movs	r3, #2
 80004ea:	9301      	str	r3, [sp, #4]
 80004ec:	2300      	movs	r3, #0
 80004ee:	9300      	str	r3, [sp, #0]
 80004f0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80004f4:	f001 ff9c 	bl	8002430 <displayChar_TFT>
        i++;
 80004f8:	7bfb      	ldrb	r3, [r7, #15]
 80004fa:	3301      	adds	r3, #1
 80004fc:	73fb      	strb	r3, [r7, #15]
    while (mot[i] != '\0') {
 80004fe:	7bfb      	ldrb	r3, [r7, #15]
 8000500:	687a      	ldr	r2, [r7, #4]
 8000502:	4413      	add	r3, r2
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d1dd      	bne.n	80004c6 <affiche_mot+0x16>
    }
}
 800050a:	bf00      	nop
 800050c:	bf00      	nop
 800050e:	3710      	adds	r7, #16
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fa7b 	bl	8000a14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f81d 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f897 	bl	8000654 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000526:	f000 f85f 	bl	80005e8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  MAX7219_Init();
 800052a:	f000 f9f6 	bl	800091a <MAX7219_Init>
  init_TFT();
 800052e:	f001 fe75 	bl	800221c <init_TFT>
  MAX7219_Clear();
 8000532:	f000 fa29 	bl	8000988 <MAX7219_Clear>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	uint8_t mot[] = "HELLO ISEN";
 8000536:	4a08      	ldr	r2, [pc, #32]	@ (8000558 <main+0x44>)
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	ca07      	ldmia	r2, {r0, r1, r2}
 800053c:	c303      	stmia	r3!, {r0, r1}
 800053e:	801a      	strh	r2, [r3, #0]
 8000540:	3302      	adds	r3, #2
 8000542:	0c12      	lsrs	r2, r2, #16
 8000544:	701a      	strb	r2, [r3, #0]
	affiche_mot(mot, 10, 100);
 8000546:	1d3b      	adds	r3, r7, #4
 8000548:	2264      	movs	r2, #100	@ 0x64
 800054a:	210a      	movs	r1, #10
 800054c:	4618      	mov	r0, r3
 800054e:	f7ff ffaf 	bl	80004b0 <affiche_mot>
  {
 8000552:	bf00      	nop
 8000554:	e7ef      	b.n	8000536 <main+0x22>
 8000556:	bf00      	nop
 8000558:	0800279c 	.word	0x0800279c

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b092      	sub	sp, #72	@ 0x48
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0314 	add.w	r3, r7, #20
 8000566:	2234      	movs	r2, #52	@ 0x34
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f002 f8de 	bl	800272c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	463b      	mov	r3, r7
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800057e:	4b19      	ldr	r3, [pc, #100]	@ (80005e4 <SystemClock_Config+0x88>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8000586:	4a17      	ldr	r2, [pc, #92]	@ (80005e4 <SystemClock_Config+0x88>)
 8000588:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800058c:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800058e:	2302      	movs	r3, #2
 8000590:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000592:	2301      	movs	r3, #1
 8000594:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000596:	2310      	movs	r3, #16
 8000598:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800059a:	2300      	movs	r3, #0
 800059c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 fd52 	bl	800104c <HAL_RCC_OscConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x56>
  {
    Error_Handler();
 80005ae:	f000 f8e5 	bl	800077c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b2:	230f      	movs	r3, #15
 80005b4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005b6:	2301      	movs	r3, #1
 80005b8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005c6:	463b      	mov	r3, r7
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f001 f86e 	bl	80016ac <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80005d6:	f000 f8d1 	bl	800077c <Error_Handler>
  }
}
 80005da:	bf00      	nop
 80005dc:	3748      	adds	r7, #72	@ 0x48
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40007000 	.word	0x40007000

080005e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005ec:	4b17      	ldr	r3, [pc, #92]	@ (800064c <MX_SPI1_Init+0x64>)
 80005ee:	4a18      	ldr	r2, [pc, #96]	@ (8000650 <MX_SPI1_Init+0x68>)
 80005f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005f2:	4b16      	ldr	r3, [pc, #88]	@ (800064c <MX_SPI1_Init+0x64>)
 80005f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80005f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005fa:	4b14      	ldr	r3, [pc, #80]	@ (800064c <MX_SPI1_Init+0x64>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000600:	4b12      	ldr	r3, [pc, #72]	@ (800064c <MX_SPI1_Init+0x64>)
 8000602:	2200      	movs	r2, #0
 8000604:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000606:	4b11      	ldr	r3, [pc, #68]	@ (800064c <MX_SPI1_Init+0x64>)
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800060c:	4b0f      	ldr	r3, [pc, #60]	@ (800064c <MX_SPI1_Init+0x64>)
 800060e:	2200      	movs	r2, #0
 8000610:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000612:	4b0e      	ldr	r3, [pc, #56]	@ (800064c <MX_SPI1_Init+0x64>)
 8000614:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000618:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800061a:	4b0c      	ldr	r3, [pc, #48]	@ (800064c <MX_SPI1_Init+0x64>)
 800061c:	2200      	movs	r2, #0
 800061e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000620:	4b0a      	ldr	r3, [pc, #40]	@ (800064c <MX_SPI1_Init+0x64>)
 8000622:	2200      	movs	r2, #0
 8000624:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000626:	4b09      	ldr	r3, [pc, #36]	@ (800064c <MX_SPI1_Init+0x64>)
 8000628:	2200      	movs	r2, #0
 800062a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800062c:	4b07      	ldr	r3, [pc, #28]	@ (800064c <MX_SPI1_Init+0x64>)
 800062e:	2200      	movs	r2, #0
 8000630:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000632:	4b06      	ldr	r3, [pc, #24]	@ (800064c <MX_SPI1_Init+0x64>)
 8000634:	220a      	movs	r2, #10
 8000636:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000638:	4804      	ldr	r0, [pc, #16]	@ (800064c <MX_SPI1_Init+0x64>)
 800063a:	f001 fa89 	bl	8001b50 <HAL_SPI_Init>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000644:	f000 f89a 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000028 	.word	0x20000028
 8000650:	40013000 	.word	0x40013000

08000654 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b08a      	sub	sp, #40	@ 0x28
 8000658:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065a:	f107 0314 	add.w	r3, r7, #20
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
 8000668:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800066a:	4b40      	ldr	r3, [pc, #256]	@ (800076c <MX_GPIO_Init+0x118>)
 800066c:	69db      	ldr	r3, [r3, #28]
 800066e:	4a3f      	ldr	r2, [pc, #252]	@ (800076c <MX_GPIO_Init+0x118>)
 8000670:	f043 0304 	orr.w	r3, r3, #4
 8000674:	61d3      	str	r3, [r2, #28]
 8000676:	4b3d      	ldr	r3, [pc, #244]	@ (800076c <MX_GPIO_Init+0x118>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	f003 0304 	and.w	r3, r3, #4
 800067e:	613b      	str	r3, [r7, #16]
 8000680:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	4b3a      	ldr	r3, [pc, #232]	@ (800076c <MX_GPIO_Init+0x118>)
 8000684:	69db      	ldr	r3, [r3, #28]
 8000686:	4a39      	ldr	r2, [pc, #228]	@ (800076c <MX_GPIO_Init+0x118>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	61d3      	str	r3, [r2, #28]
 800068e:	4b37      	ldr	r3, [pc, #220]	@ (800076c <MX_GPIO_Init+0x118>)
 8000690:	69db      	ldr	r3, [r3, #28]
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069a:	4b34      	ldr	r3, [pc, #208]	@ (800076c <MX_GPIO_Init+0x118>)
 800069c:	69db      	ldr	r3, [r3, #28]
 800069e:	4a33      	ldr	r2, [pc, #204]	@ (800076c <MX_GPIO_Init+0x118>)
 80006a0:	f043 0302 	orr.w	r3, r3, #2
 80006a4:	61d3      	str	r3, [r2, #28]
 80006a6:	4b31      	ldr	r3, [pc, #196]	@ (800076c <MX_GPIO_Init+0x118>)
 80006a8:	69db      	ldr	r3, [r3, #28]
 80006aa:	f003 0302 	and.w	r3, r3, #2
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006b2:	4b2e      	ldr	r3, [pc, #184]	@ (800076c <MX_GPIO_Init+0x118>)
 80006b4:	69db      	ldr	r3, [r3, #28]
 80006b6:	4a2d      	ldr	r2, [pc, #180]	@ (800076c <MX_GPIO_Init+0x118>)
 80006b8:	f043 0308 	orr.w	r3, r3, #8
 80006bc:	61d3      	str	r3, [r2, #28]
 80006be:	4b2b      	ldr	r3, [pc, #172]	@ (800076c <MX_GPIO_Init+0x118>)
 80006c0:	69db      	ldr	r3, [r3, #28]
 80006c2:	f003 0308 	and.w	r3, r3, #8
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2101      	movs	r1, #1
 80006ce:	4828      	ldr	r0, [pc, #160]	@ (8000770 <MX_GPIO_Init+0x11c>)
 80006d0:	f000 fca4 	bl	800101c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_SET);
 80006d4:	2201      	movs	r2, #1
 80006d6:	210e      	movs	r1, #14
 80006d8:	4825      	ldr	r0, [pc, #148]	@ (8000770 <MX_GPIO_Init+0x11c>)
 80006da:	f000 fc9f 	bl	800101c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 80006de:	2201      	movs	r2, #1
 80006e0:	2104      	movs	r1, #4
 80006e2:	4824      	ldr	r0, [pc, #144]	@ (8000774 <MX_GPIO_Init+0x120>)
 80006e4:	f000 fc9a 	bl	800101c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80006e8:	230f      	movs	r3, #15
 80006ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ec:	2301      	movs	r3, #1
 80006ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f4:	2300      	movs	r3, #0
 80006f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	4619      	mov	r1, r3
 80006fe:	481c      	ldr	r0, [pc, #112]	@ (8000770 <MX_GPIO_Init+0x11c>)
 8000700:	f000 fafc 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000704:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070a:	2302      	movs	r3, #2
 800070c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000712:	2300      	movs	r3, #0
 8000714:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8000716:	2303      	movs	r3, #3
 8000718:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	4619      	mov	r1, r3
 8000720:	4815      	ldr	r0, [pc, #84]	@ (8000778 <MX_GPIO_Init+0x124>)
 8000722:	f000 faeb 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000726:	2304      	movs	r3, #4
 8000728:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072a:	2301      	movs	r3, #1
 800072c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000732:	2300      	movs	r3, #0
 8000734:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	4619      	mov	r1, r3
 800073c:	480d      	ldr	r0, [pc, #52]	@ (8000774 <MX_GPIO_Init+0x120>)
 800073e:	f000 fadd 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000742:	2380      	movs	r3, #128	@ 0x80
 8000744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000746:	2302      	movs	r3, #2
 8000748:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	2300      	movs	r3, #0
 8000750:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000752:	2302      	movs	r3, #2
 8000754:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	4619      	mov	r1, r3
 800075c:	4806      	ldr	r0, [pc, #24]	@ (8000778 <MX_GPIO_Init+0x124>)
 800075e:	f000 facd 	bl	8000cfc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000762:	bf00      	nop
 8000764:	3728      	adds	r7, #40	@ 0x28
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800
 8000770:	40020800 	.word	0x40020800
 8000774:	40020c00 	.word	0x40020c00
 8000778:	40020400 	.word	0x40020400

0800077c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000780:	b672      	cpsid	i
}
 8000782:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <Error_Handler+0x8>

08000788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800078e:	4b14      	ldr	r3, [pc, #80]	@ (80007e0 <HAL_MspInit+0x58>)
 8000790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000792:	4a13      	ldr	r2, [pc, #76]	@ (80007e0 <HAL_MspInit+0x58>)
 8000794:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000798:	6253      	str	r3, [r2, #36]	@ 0x24
 800079a:	4b11      	ldr	r3, [pc, #68]	@ (80007e0 <HAL_MspInit+0x58>)
 800079c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800079e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a6:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <HAL_MspInit+0x58>)
 80007a8:	6a1b      	ldr	r3, [r3, #32]
 80007aa:	4a0d      	ldr	r2, [pc, #52]	@ (80007e0 <HAL_MspInit+0x58>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6213      	str	r3, [r2, #32]
 80007b2:	4b0b      	ldr	r3, [pc, #44]	@ (80007e0 <HAL_MspInit+0x58>)
 80007b4:	6a1b      	ldr	r3, [r3, #32]
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007be:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <HAL_MspInit+0x58>)
 80007c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007c2:	4a07      	ldr	r2, [pc, #28]	@ (80007e0 <HAL_MspInit+0x58>)
 80007c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007c8:	6253      	str	r3, [r2, #36]	@ 0x24
 80007ca:	4b05      	ldr	r3, [pc, #20]	@ (80007e0 <HAL_MspInit+0x58>)
 80007cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d6:	bf00      	nop
 80007d8:	3714      	adds	r7, #20
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr
 80007e0:	40023800 	.word	0x40023800

080007e4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08a      	sub	sp, #40	@ 0x28
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a17      	ldr	r2, [pc, #92]	@ (8000860 <HAL_SPI_MspInit+0x7c>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d127      	bne.n	8000856 <HAL_SPI_MspInit+0x72>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000806:	4b17      	ldr	r3, [pc, #92]	@ (8000864 <HAL_SPI_MspInit+0x80>)
 8000808:	6a1b      	ldr	r3, [r3, #32]
 800080a:	4a16      	ldr	r2, [pc, #88]	@ (8000864 <HAL_SPI_MspInit+0x80>)
 800080c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000810:	6213      	str	r3, [r2, #32]
 8000812:	4b14      	ldr	r3, [pc, #80]	@ (8000864 <HAL_SPI_MspInit+0x80>)
 8000814:	6a1b      	ldr	r3, [r3, #32]
 8000816:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	4b11      	ldr	r3, [pc, #68]	@ (8000864 <HAL_SPI_MspInit+0x80>)
 8000820:	69db      	ldr	r3, [r3, #28]
 8000822:	4a10      	ldr	r2, [pc, #64]	@ (8000864 <HAL_SPI_MspInit+0x80>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	61d3      	str	r3, [r2, #28]
 800082a:	4b0e      	ldr	r3, [pc, #56]	@ (8000864 <HAL_SPI_MspInit+0x80>)
 800082c:	69db      	ldr	r3, [r3, #28]
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000836:	23e0      	movs	r3, #224	@ 0xe0
 8000838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083a:	2302      	movs	r3, #2
 800083c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000842:	2303      	movs	r3, #3
 8000844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000846:	2305      	movs	r3, #5
 8000848:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	4619      	mov	r1, r3
 8000850:	4805      	ldr	r0, [pc, #20]	@ (8000868 <HAL_SPI_MspInit+0x84>)
 8000852:	f000 fa53 	bl	8000cfc <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000856:	bf00      	nop
 8000858:	3728      	adds	r7, #40	@ 0x28
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40013000 	.word	0x40013000
 8000864:	40023800 	.word	0x40023800
 8000868:	40020000 	.word	0x40020000

0800086c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <NMI_Handler+0x4>

08000874 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <HardFault_Handler+0x4>

0800087c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <MemManage_Handler+0x4>

08000884 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <BusFault_Handler+0x4>

0800088c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <UsageFault_Handler+0x4>

08000894 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr

080008a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr

080008ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr

080008b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008bc:	f000 f8fc 	bl	8000ab8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr

080008d0 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 80008d0:	f7ff fff8 	bl	80008c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008d4:	480b      	ldr	r0, [pc, #44]	@ (8000904 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008d6:	490c      	ldr	r1, [pc, #48]	@ (8000908 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008d8:	4a0c      	ldr	r2, [pc, #48]	@ (800090c <LoopFillZerobss+0x16>)
  movs r3, #0
 80008da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008dc:	e002      	b.n	80008e4 <LoopCopyDataInit>

080008de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008e2:	3304      	adds	r3, #4

080008e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e8:	d3f9      	bcc.n	80008de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ea:	4a09      	ldr	r2, [pc, #36]	@ (8000910 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008ec:	4c09      	ldr	r4, [pc, #36]	@ (8000914 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f0:	e001      	b.n	80008f6 <LoopFillZerobss>

080008f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f4:	3204      	adds	r2, #4

080008f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f8:	d3fb      	bcc.n	80008f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008fa:	f001 ff1f 	bl	800273c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008fe:	f7ff fe09 	bl	8000514 <main>
  bx lr
 8000902:	4770      	bx	lr
  ldr r0, =_sdata
 8000904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000908:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800090c:	08003018 	.word	0x08003018
  ldr r2, =_sbss
 8000910:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000914:	20000084 	.word	0x20000084

08000918 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000918:	e7fe      	b.n	8000918 <ADC1_IRQHandler>

0800091a <MAX7219_Init>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Init (void)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	af00      	add	r7, sp, #0
                               // configure "LOAD" as output

  MAX7219_Write(REG_SCAN_LIMIT, 7);                   // set up to scan all eight digits
 800091e:	2107      	movs	r1, #7
 8000920:	200b      	movs	r0, #11
 8000922:	f000 f847 	bl	80009b4 <MAX7219_Write>
  MAX7219_Write(REG_DECODE, 0x00);                    // set to "no decode" for all digits
 8000926:	2100      	movs	r1, #0
 8000928:	2009      	movs	r0, #9
 800092a:	f000 f843 	bl	80009b4 <MAX7219_Write>
  MAX7219_ShutdownStop();                             // select normal operation (i.e. not shutdown)
 800092e:	f000 f809 	bl	8000944 <MAX7219_ShutdownStop>
  MAX7219_DisplayTestStop();                          // select normal operation (i.e. not test mode)
 8000932:	f000 f80f 	bl	8000954 <MAX7219_DisplayTestStop>
  MAX7219_Clear();                                    // clear all digits
 8000936:	f000 f827 	bl	8000988 <MAX7219_Clear>
  MAX7219_SetBrightness(INTENSITY_MAX);               // set to maximum intensity
 800093a:	200f      	movs	r0, #15
 800093c:	f000 f812 	bl	8000964 <MAX7219_SetBrightness>
}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}

08000944 <MAX7219_ShutdownStop>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_ShutdownStop (void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_SHUTDOWN, 1);                     // put MAX7219 into "normal" mode
 8000948:	2101      	movs	r1, #1
 800094a:	200c      	movs	r0, #12
 800094c:	f000 f832 	bl	80009b4 <MAX7219_Write>
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}

08000954 <MAX7219_DisplayTestStop>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_DisplayTestStop (void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_DISPLAY_TEST, 0);                 // put MAX7219 into "normal" mode
 8000958:	2100      	movs	r1, #0
 800095a:	200f      	movs	r0, #15
 800095c:	f000 f82a 	bl	80009b4 <MAX7219_Write>
}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}

08000964 <MAX7219_SetBrightness>:
* Arguments  : brightness (0-15)
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_SetBrightness (char brightness)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
  brightness &= 0x0f;                                 // mask off extra bits
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	f003 030f 	and.w	r3, r3, #15
 8000974:	71fb      	strb	r3, [r7, #7]
  MAX7219_Write(REG_INTENSITY, brightness);           // set brightness
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	4619      	mov	r1, r3
 800097a:	200a      	movs	r0, #10
 800097c:	f000 f81a 	bl	80009b4 <MAX7219_Write>
}
 8000980:	bf00      	nop
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <MAX7219_Clear>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Clear (void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
  char i;
  for (i=0; i < 8; i++)
 800098e:	2300      	movs	r3, #0
 8000990:	71fb      	strb	r3, [r7, #7]
 8000992:	e007      	b.n	80009a4 <MAX7219_Clear+0x1c>
    MAX7219_Write(i, 0x00);                           // turn all segments off
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	2100      	movs	r1, #0
 8000998:	4618      	mov	r0, r3
 800099a:	f000 f80b 	bl	80009b4 <MAX7219_Write>
  for (i=0; i < 8; i++)
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	3301      	adds	r3, #1
 80009a2:	71fb      	strb	r3, [r7, #7]
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	2b07      	cmp	r3, #7
 80009a8:	d9f4      	bls.n	8000994 <MAX7219_Clear+0xc>
}
 80009aa:	bf00      	nop
 80009ac:	bf00      	nop
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <MAX7219_Write>:
*              dataout = data to write to MAX7219
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Write (unsigned char reg_number, unsigned char dataout)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	460a      	mov	r2, r1
 80009be:	71fb      	strb	r3, [r7, #7]
 80009c0:	4613      	mov	r3, r2
 80009c2:	71bb      	strb	r3, [r7, #6]
 MAX7219_nCS_PORT->BSRR = (uint32_t)MAX7219_nCS_PIN<<16;// nCS = 0                                          // take LOAD high to begin
 80009c4:	4b09      	ldr	r3, [pc, #36]	@ (80009ec <MAX7219_Write+0x38>)
 80009c6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80009ca:	619a      	str	r2, [r3, #24]
  MAX7219_SendByte(reg_number);                       // write register number to MAX7219
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	4618      	mov	r0, r3
 80009d0:	f000 f80e 	bl	80009f0 <MAX7219_SendByte>
  MAX7219_SendByte(dataout);                          // write data to MAX7219
 80009d4:	79bb      	ldrb	r3, [r7, #6]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 f80a 	bl	80009f0 <MAX7219_SendByte>
  MAX7219_nCS_PORT->BSRR = (uint32_t)MAX7219_nCS_PIN;// nCS = 1                                       // take LOAD low to latch in data
 80009dc:	4b03      	ldr	r3, [pc, #12]	@ (80009ec <MAX7219_Write+0x38>)
 80009de:	2201      	movs	r2, #1
 80009e0:	619a      	str	r2, [r3, #24]
 }
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40020800 	.word	0x40020800

080009f0 <MAX7219_SendByte>:
* Returns    : none
*********************************************************************************************************
*/

static void MAX7219_SendByte (unsigned char dataout)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	71fb      	strb	r3, [r7, #7]

	HAL_SPI_Transmit(&hspi1, &dataout, 1, 1000);
 80009fa:	1df9      	adds	r1, r7, #7
 80009fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a00:	2201      	movs	r2, #1
 8000a02:	4803      	ldr	r0, [pc, #12]	@ (8000a10 <MAX7219_SendByte+0x20>)
 8000a04:	f001 f92d 	bl	8001c62 <HAL_SPI_Transmit>

}
 8000a08:	bf00      	nop
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000028 	.word	0x20000028

08000a14 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a1e:	2003      	movs	r0, #3
 8000a20:	f000 f938 	bl	8000c94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a24:	200f      	movs	r0, #15
 8000a26:	f000 f80d 	bl	8000a44 <HAL_InitTick>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d002      	beq.n	8000a36 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a30:	2301      	movs	r3, #1
 8000a32:	71fb      	strb	r3, [r7, #7]
 8000a34:	e001      	b.n	8000a3a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a36:	f7ff fea7 	bl	8000788 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a50:	4b16      	ldr	r3, [pc, #88]	@ (8000aac <HAL_InitTick+0x68>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d022      	beq.n	8000a9e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a58:	4b15      	ldr	r3, [pc, #84]	@ (8000ab0 <HAL_InitTick+0x6c>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	4b13      	ldr	r3, [pc, #76]	@ (8000aac <HAL_InitTick+0x68>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a64:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f000 f938 	bl	8000ce2 <HAL_SYSTICK_Config>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d10f      	bne.n	8000a98 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2b0f      	cmp	r3, #15
 8000a7c:	d809      	bhi.n	8000a92 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	6879      	ldr	r1, [r7, #4]
 8000a82:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a86:	f000 f910 	bl	8000caa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab4 <HAL_InitTick+0x70>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6013      	str	r3, [r2, #0]
 8000a90:	e007      	b.n	8000aa2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
 8000a94:	73fb      	strb	r3, [r7, #15]
 8000a96:	e004      	b.n	8000aa2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	73fb      	strb	r3, [r7, #15]
 8000a9c:	e001      	b.n	8000aa2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3710      	adds	r7, #16
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000008 	.word	0x20000008
 8000ab0:	20000000 	.word	0x20000000
 8000ab4:	20000004 	.word	0x20000004

08000ab8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000abc:	4b05      	ldr	r3, [pc, #20]	@ (8000ad4 <HAL_IncTick+0x1c>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	4b05      	ldr	r3, [pc, #20]	@ (8000ad8 <HAL_IncTick+0x20>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	4a03      	ldr	r2, [pc, #12]	@ (8000ad4 <HAL_IncTick+0x1c>)
 8000ac8:	6013      	str	r3, [r2, #0]
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	20000080 	.word	0x20000080
 8000ad8:	20000008 	.word	0x20000008

08000adc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae0:	4b02      	ldr	r3, [pc, #8]	@ (8000aec <HAL_GetTick+0x10>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr
 8000aec:	20000080 	.word	0x20000080

08000af0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000af8:	f7ff fff0 	bl	8000adc <HAL_GetTick>
 8000afc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000b08:	d004      	beq.n	8000b14 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b0a:	4b09      	ldr	r3, [pc, #36]	@ (8000b30 <HAL_Delay+0x40>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	4413      	add	r3, r2
 8000b12:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b14:	bf00      	nop
 8000b16:	f7ff ffe1 	bl	8000adc <HAL_GetTick>
 8000b1a:	4602      	mov	r2, r0
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	1ad3      	subs	r3, r2, r3
 8000b20:	68fa      	ldr	r2, [r7, #12]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	d8f7      	bhi.n	8000b16 <HAL_Delay+0x26>
  {
  }
}
 8000b26:	bf00      	nop
 8000b28:	bf00      	nop
 8000b2a:	3710      	adds	r7, #16
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000008 	.word	0x20000008

08000b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b44:	4b0c      	ldr	r3, [pc, #48]	@ (8000b78 <__NVIC_SetPriorityGrouping+0x44>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4a:	68ba      	ldr	r2, [r7, #8]
 8000b4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b50:	4013      	ands	r3, r2
 8000b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b66:	4a04      	ldr	r2, [pc, #16]	@ (8000b78 <__NVIC_SetPriorityGrouping+0x44>)
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	60d3      	str	r3, [r2, #12]
}
 8000b6c:	bf00      	nop
 8000b6e:	3714      	adds	r7, #20
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b80:	4b04      	ldr	r3, [pc, #16]	@ (8000b94 <__NVIC_GetPriorityGrouping+0x18>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	0a1b      	lsrs	r3, r3, #8
 8000b86:	f003 0307 	and.w	r3, r3, #7
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	6039      	str	r1, [r7, #0]
 8000ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	db0a      	blt.n	8000bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	490c      	ldr	r1, [pc, #48]	@ (8000be4 <__NVIC_SetPriority+0x4c>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	0112      	lsls	r2, r2, #4
 8000bb8:	b2d2      	uxtb	r2, r2
 8000bba:	440b      	add	r3, r1
 8000bbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc0:	e00a      	b.n	8000bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4908      	ldr	r1, [pc, #32]	@ (8000be8 <__NVIC_SetPriority+0x50>)
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	f003 030f 	and.w	r3, r3, #15
 8000bce:	3b04      	subs	r3, #4
 8000bd0:	0112      	lsls	r2, r2, #4
 8000bd2:	b2d2      	uxtb	r2, r2
 8000bd4:	440b      	add	r3, r1
 8000bd6:	761a      	strb	r2, [r3, #24]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000e100 	.word	0xe000e100
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b089      	sub	sp, #36	@ 0x24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	f1c3 0307 	rsb	r3, r3, #7
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	bf28      	it	cs
 8000c0a:	2304      	movcs	r3, #4
 8000c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	3304      	adds	r3, #4
 8000c12:	2b06      	cmp	r3, #6
 8000c14:	d902      	bls.n	8000c1c <NVIC_EncodePriority+0x30>
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3b03      	subs	r3, #3
 8000c1a:	e000      	b.n	8000c1e <NVIC_EncodePriority+0x32>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43da      	mvns	r2, r3
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	401a      	ands	r2, r3
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c34:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3e:	43d9      	mvns	r1, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	4313      	orrs	r3, r2
         );
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3724      	adds	r7, #36	@ 0x24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr

08000c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c60:	d301      	bcc.n	8000c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c62:	2301      	movs	r3, #1
 8000c64:	e00f      	b.n	8000c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c66:	4a0a      	ldr	r2, [pc, #40]	@ (8000c90 <SysTick_Config+0x40>)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c6e:	210f      	movs	r1, #15
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c74:	f7ff ff90 	bl	8000b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c78:	4b05      	ldr	r3, [pc, #20]	@ (8000c90 <SysTick_Config+0x40>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c7e:	4b04      	ldr	r3, [pc, #16]	@ (8000c90 <SysTick_Config+0x40>)
 8000c80:	2207      	movs	r2, #7
 8000c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	e000e010 	.word	0xe000e010

08000c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f7ff ff49 	bl	8000b34 <__NVIC_SetPriorityGrouping>
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b086      	sub	sp, #24
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	60b9      	str	r1, [r7, #8]
 8000cb4:	607a      	str	r2, [r7, #4]
 8000cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cbc:	f7ff ff5e 	bl	8000b7c <__NVIC_GetPriorityGrouping>
 8000cc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	68b9      	ldr	r1, [r7, #8]
 8000cc6:	6978      	ldr	r0, [r7, #20]
 8000cc8:	f7ff ff90 	bl	8000bec <NVIC_EncodePriority>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd2:	4611      	mov	r1, r2
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff ff5f 	bl	8000b98 <__NVIC_SetPriority>
}
 8000cda:	bf00      	nop
 8000cdc:	3718      	adds	r7, #24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f7ff ffb0 	bl	8000c50 <SysTick_Config>
 8000cf0:	4603      	mov	r3, r0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
	...

08000cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b087      	sub	sp, #28
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d12:	e160      	b.n	8000fd6 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	2101      	movs	r1, #1
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d20:	4013      	ands	r3, r2
 8000d22:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	f000 8152 	beq.w	8000fd0 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f003 0303 	and.w	r3, r3, #3
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d005      	beq.n	8000d44 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d130      	bne.n	8000da6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	689b      	ldr	r3, [r3, #8]
 8000d48:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	2203      	movs	r2, #3
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	68da      	ldr	r2, [r3, #12]
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43db      	mvns	r3, r3
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	4013      	ands	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	091b      	lsrs	r3, r3, #4
 8000d90:	f003 0201 	and.w	r2, r3, #1
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f003 0303 	and.w	r3, r3, #3
 8000dae:	2b03      	cmp	r3, #3
 8000db0:	d017      	beq.n	8000de2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	68db      	ldr	r3, [r3, #12]
 8000db6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	2203      	movs	r2, #3
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	689a      	ldr	r2, [r3, #8]
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f003 0303 	and.w	r3, r3, #3
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	d123      	bne.n	8000e36 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	08da      	lsrs	r2, r3, #3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	3208      	adds	r2, #8
 8000df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dfa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	220f      	movs	r2, #15
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	691a      	ldr	r2, [r3, #16]
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	f003 0307 	and.w	r3, r3, #7
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	08da      	lsrs	r2, r3, #3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3208      	adds	r2, #8
 8000e30:	6939      	ldr	r1, [r7, #16]
 8000e32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	2203      	movs	r2, #3
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43db      	mvns	r3, r3
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f003 0203 	and.w	r2, r3, #3
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	f000 80ac 	beq.w	8000fd0 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e78:	4b5e      	ldr	r3, [pc, #376]	@ (8000ff4 <HAL_GPIO_Init+0x2f8>)
 8000e7a:	6a1b      	ldr	r3, [r3, #32]
 8000e7c:	4a5d      	ldr	r2, [pc, #372]	@ (8000ff4 <HAL_GPIO_Init+0x2f8>)
 8000e7e:	f043 0301 	orr.w	r3, r3, #1
 8000e82:	6213      	str	r3, [r2, #32]
 8000e84:	4b5b      	ldr	r3, [pc, #364]	@ (8000ff4 <HAL_GPIO_Init+0x2f8>)
 8000e86:	6a1b      	ldr	r3, [r3, #32]
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000e90:	4a59      	ldr	r2, [pc, #356]	@ (8000ff8 <HAL_GPIO_Init+0x2fc>)
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	089b      	lsrs	r3, r3, #2
 8000e96:	3302      	adds	r3, #2
 8000e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e9c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	f003 0303 	and.w	r3, r3, #3
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	220f      	movs	r2, #15
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a51      	ldr	r2, [pc, #324]	@ (8000ffc <HAL_GPIO_Init+0x300>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d025      	beq.n	8000f08 <HAL_GPIO_Init+0x20c>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a50      	ldr	r2, [pc, #320]	@ (8001000 <HAL_GPIO_Init+0x304>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d01f      	beq.n	8000f04 <HAL_GPIO_Init+0x208>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a4f      	ldr	r2, [pc, #316]	@ (8001004 <HAL_GPIO_Init+0x308>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d019      	beq.n	8000f00 <HAL_GPIO_Init+0x204>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a4e      	ldr	r2, [pc, #312]	@ (8001008 <HAL_GPIO_Init+0x30c>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d013      	beq.n	8000efc <HAL_GPIO_Init+0x200>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a4d      	ldr	r2, [pc, #308]	@ (800100c <HAL_GPIO_Init+0x310>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d00d      	beq.n	8000ef8 <HAL_GPIO_Init+0x1fc>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a4c      	ldr	r2, [pc, #304]	@ (8001010 <HAL_GPIO_Init+0x314>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d007      	beq.n	8000ef4 <HAL_GPIO_Init+0x1f8>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a4b      	ldr	r2, [pc, #300]	@ (8001014 <HAL_GPIO_Init+0x318>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d101      	bne.n	8000ef0 <HAL_GPIO_Init+0x1f4>
 8000eec:	2306      	movs	r3, #6
 8000eee:	e00c      	b.n	8000f0a <HAL_GPIO_Init+0x20e>
 8000ef0:	2307      	movs	r3, #7
 8000ef2:	e00a      	b.n	8000f0a <HAL_GPIO_Init+0x20e>
 8000ef4:	2305      	movs	r3, #5
 8000ef6:	e008      	b.n	8000f0a <HAL_GPIO_Init+0x20e>
 8000ef8:	2304      	movs	r3, #4
 8000efa:	e006      	b.n	8000f0a <HAL_GPIO_Init+0x20e>
 8000efc:	2303      	movs	r3, #3
 8000efe:	e004      	b.n	8000f0a <HAL_GPIO_Init+0x20e>
 8000f00:	2302      	movs	r3, #2
 8000f02:	e002      	b.n	8000f0a <HAL_GPIO_Init+0x20e>
 8000f04:	2301      	movs	r3, #1
 8000f06:	e000      	b.n	8000f0a <HAL_GPIO_Init+0x20e>
 8000f08:	2300      	movs	r3, #0
 8000f0a:	697a      	ldr	r2, [r7, #20]
 8000f0c:	f002 0203 	and.w	r2, r2, #3
 8000f10:	0092      	lsls	r2, r2, #2
 8000f12:	4093      	lsls	r3, r2
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f1a:	4937      	ldr	r1, [pc, #220]	@ (8000ff8 <HAL_GPIO_Init+0x2fc>)
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	089b      	lsrs	r3, r3, #2
 8000f20:	3302      	adds	r3, #2
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f28:	4b3b      	ldr	r3, [pc, #236]	@ (8001018 <HAL_GPIO_Init+0x31c>)
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	43db      	mvns	r3, r3
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4013      	ands	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d003      	beq.n	8000f4c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f4c:	4a32      	ldr	r2, [pc, #200]	@ (8001018 <HAL_GPIO_Init+0x31c>)
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f52:	4b31      	ldr	r3, [pc, #196]	@ (8001018 <HAL_GPIO_Init+0x31c>)
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d003      	beq.n	8000f76 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f76:	4a28      	ldr	r2, [pc, #160]	@ (8001018 <HAL_GPIO_Init+0x31c>)
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f7c:	4b26      	ldr	r3, [pc, #152]	@ (8001018 <HAL_GPIO_Init+0x31c>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	43db      	mvns	r3, r3
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d003      	beq.n	8000fa0 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fa0:	4a1d      	ldr	r2, [pc, #116]	@ (8001018 <HAL_GPIO_Init+0x31c>)
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fa6:	4b1c      	ldr	r3, [pc, #112]	@ (8001018 <HAL_GPIO_Init+0x31c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fca:	4a13      	ldr	r2, [pc, #76]	@ (8001018 <HAL_GPIO_Init+0x31c>)
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	f47f ae97 	bne.w	8000d14 <HAL_GPIO_Init+0x18>
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	bf00      	nop
 8000fea:	371c      	adds	r7, #28
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc80      	pop	{r7}
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40010000 	.word	0x40010000
 8000ffc:	40020000 	.word	0x40020000
 8001000:	40020400 	.word	0x40020400
 8001004:	40020800 	.word	0x40020800
 8001008:	40020c00 	.word	0x40020c00
 800100c:	40021000 	.word	0x40021000
 8001010:	40021400 	.word	0x40021400
 8001014:	40021800 	.word	0x40021800
 8001018:	40010400 	.word	0x40010400

0800101c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	460b      	mov	r3, r1
 8001026:	807b      	strh	r3, [r7, #2]
 8001028:	4613      	mov	r3, r2
 800102a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800102c:	787b      	ldrb	r3, [r7, #1]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001032:	887a      	ldrh	r2, [r7, #2]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001038:	e003      	b.n	8001042 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800103a:	887b      	ldrh	r3, [r7, #2]
 800103c:	041a      	lsls	r2, r3, #16
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	619a      	str	r2, [r3, #24]
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr

0800104c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d101      	bne.n	800105e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e31d      	b.n	800169a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800105e:	4b94      	ldr	r3, [pc, #592]	@ (80012b0 <HAL_RCC_OscConfig+0x264>)
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	f003 030c 	and.w	r3, r3, #12
 8001066:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001068:	4b91      	ldr	r3, [pc, #580]	@ (80012b0 <HAL_RCC_OscConfig+0x264>)
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001070:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	2b00      	cmp	r3, #0
 800107c:	d07b      	beq.n	8001176 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	2b08      	cmp	r3, #8
 8001082:	d006      	beq.n	8001092 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	2b0c      	cmp	r3, #12
 8001088:	d10f      	bne.n	80010aa <HAL_RCC_OscConfig+0x5e>
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001090:	d10b      	bne.n	80010aa <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001092:	4b87      	ldr	r3, [pc, #540]	@ (80012b0 <HAL_RCC_OscConfig+0x264>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d06a      	beq.n	8001174 <HAL_RCC_OscConfig+0x128>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d166      	bne.n	8001174 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e2f7      	b.n	800169a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d106      	bne.n	80010c0 <HAL_RCC_OscConfig+0x74>
 80010b2:	4b7f      	ldr	r3, [pc, #508]	@ (80012b0 <HAL_RCC_OscConfig+0x264>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a7e      	ldr	r2, [pc, #504]	@ (80012b0 <HAL_RCC_OscConfig+0x264>)
 80010b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010bc:	6013      	str	r3, [r2, #0]
 80010be:	e02d      	b.n	800111c <HAL_RCC_OscConfig+0xd0>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d10c      	bne.n	80010e2 <HAL_RCC_OscConfig+0x96>
 80010c8:	4b79      	ldr	r3, [pc, #484]	@ (80012b0 <HAL_RCC_OscConfig+0x264>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a78      	ldr	r2, [pc, #480]	@ (80012b0 <HAL_RCC_OscConfig+0x264>)
 80010ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010d2:	6013      	str	r3, [r2, #0]
 80010d4:	4b76      	ldr	r3, [pc, #472]	@ (80012b0 <HAL_RCC_OscConfig+0x264>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a75      	ldr	r2, [pc, #468]	@ (80012b0 <HAL_RCC_OscConfig+0x264>)
 80010da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010de:	6013      	str	r3, [r2, #0]
 80010e0:	e01c      	b.n	800111c <HAL_RCC_OscConfig+0xd0>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	2b05      	cmp	r3, #5
 80010e8:	d10c      	bne.n	8001104 <HAL_RCC_OscConfig+0xb8>
 80010ea:	4b71      	ldr	r3, [pc, #452]	@ (80012b0 <HAL_RCC_OscConfig+0x264>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a70      	ldr	r2, [pc, #448]	@ (80012b0 <HAL_RCC_OscConfig+0x264>)
 80010f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010f4:	6013      	str	r3, [r2, #0]
 80010f6:	4b6e      	ldr	r3, [pc, #440]	@ (80012b0 <HAL_RCC_OscConfig+0x264>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a6d      	ldr	r2, [pc, #436]	@ (80012b0 <HAL_RCC_OscConfig+0x264>)
 80010fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001100:	6013      	str	r3, [r2, #0]
 8001102:	e00b      	b.n	800111c <HAL_RCC_OscConfig+0xd0>
 8001104:	4b6a      	ldr	r3, [pc, #424]	@ (80012b0 <HAL_RCC_OscConfig+0x264>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a69      	ldr	r2, [pc, #420]	@ (80012b0 <HAL_RCC_OscConfig+0x264>)
 800110a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800110e:	6013      	str	r3, [r2, #0]
 8001110:	4b67      	ldr	r3, [pc, #412]	@ (80012b0 <HAL_RCC_OscConfig+0x264>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a66      	ldr	r2, [pc, #408]	@ (80012b0 <HAL_RCC_OscConfig+0x264>)
 8001116:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800111a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d013      	beq.n	800114c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001124:	f7ff fcda 	bl	8000adc <HAL_GetTick>
 8001128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800112a:	e008      	b.n	800113e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800112c:	f7ff fcd6 	bl	8000adc <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b64      	cmp	r3, #100	@ 0x64
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e2ad      	b.n	800169a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800113e:	4b5c      	ldr	r3, [pc, #368]	@ (80012b0 <HAL_RCC_OscConfig+0x264>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d0f0      	beq.n	800112c <HAL_RCC_OscConfig+0xe0>
 800114a:	e014      	b.n	8001176 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114c:	f7ff fcc6 	bl	8000adc <HAL_GetTick>
 8001150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001152:	e008      	b.n	8001166 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001154:	f7ff fcc2 	bl	8000adc <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b64      	cmp	r3, #100	@ 0x64
 8001160:	d901      	bls.n	8001166 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e299      	b.n	800169a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001166:	4b52      	ldr	r3, [pc, #328]	@ (80012b0 <HAL_RCC_OscConfig+0x264>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d1f0      	bne.n	8001154 <HAL_RCC_OscConfig+0x108>
 8001172:	e000      	b.n	8001176 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	2b00      	cmp	r3, #0
 8001180:	d05a      	beq.n	8001238 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	2b04      	cmp	r3, #4
 8001186:	d005      	beq.n	8001194 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	2b0c      	cmp	r3, #12
 800118c:	d119      	bne.n	80011c2 <HAL_RCC_OscConfig+0x176>
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d116      	bne.n	80011c2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001194:	4b46      	ldr	r3, [pc, #280]	@ (80012b0 <HAL_RCC_OscConfig+0x264>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0302 	and.w	r3, r3, #2
 800119c:	2b00      	cmp	r3, #0
 800119e:	d005      	beq.n	80011ac <HAL_RCC_OscConfig+0x160>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d001      	beq.n	80011ac <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e276      	b.n	800169a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ac:	4b40      	ldr	r3, [pc, #256]	@ (80012b0 <HAL_RCC_OscConfig+0x264>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	691b      	ldr	r3, [r3, #16]
 80011b8:	021b      	lsls	r3, r3, #8
 80011ba:	493d      	ldr	r1, [pc, #244]	@ (80012b0 <HAL_RCC_OscConfig+0x264>)
 80011bc:	4313      	orrs	r3, r2
 80011be:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011c0:	e03a      	b.n	8001238 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d020      	beq.n	800120c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011ca:	4b3a      	ldr	r3, [pc, #232]	@ (80012b4 <HAL_RCC_OscConfig+0x268>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d0:	f7ff fc84 	bl	8000adc <HAL_GetTick>
 80011d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011d6:	e008      	b.n	80011ea <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011d8:	f7ff fc80 	bl	8000adc <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e257      	b.n	800169a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011ea:	4b31      	ldr	r3, [pc, #196]	@ (80012b0 <HAL_RCC_OscConfig+0x264>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d0f0      	beq.n	80011d8 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f6:	4b2e      	ldr	r3, [pc, #184]	@ (80012b0 <HAL_RCC_OscConfig+0x264>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	691b      	ldr	r3, [r3, #16]
 8001202:	021b      	lsls	r3, r3, #8
 8001204:	492a      	ldr	r1, [pc, #168]	@ (80012b0 <HAL_RCC_OscConfig+0x264>)
 8001206:	4313      	orrs	r3, r2
 8001208:	604b      	str	r3, [r1, #4]
 800120a:	e015      	b.n	8001238 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800120c:	4b29      	ldr	r3, [pc, #164]	@ (80012b4 <HAL_RCC_OscConfig+0x268>)
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001212:	f7ff fc63 	bl	8000adc <HAL_GetTick>
 8001216:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001218:	e008      	b.n	800122c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800121a:	f7ff fc5f 	bl	8000adc <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d901      	bls.n	800122c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e236      	b.n	800169a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800122c:	4b20      	ldr	r3, [pc, #128]	@ (80012b0 <HAL_RCC_OscConfig+0x264>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	2b00      	cmp	r3, #0
 8001236:	d1f0      	bne.n	800121a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0310 	and.w	r3, r3, #16
 8001240:	2b00      	cmp	r3, #0
 8001242:	f000 80b8 	beq.w	80013b6 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d170      	bne.n	800132e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800124c:	4b18      	ldr	r3, [pc, #96]	@ (80012b0 <HAL_RCC_OscConfig+0x264>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001254:	2b00      	cmp	r3, #0
 8001256:	d005      	beq.n	8001264 <HAL_RCC_OscConfig+0x218>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d101      	bne.n	8001264 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e21a      	b.n	800169a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a1a      	ldr	r2, [r3, #32]
 8001268:	4b11      	ldr	r3, [pc, #68]	@ (80012b0 <HAL_RCC_OscConfig+0x264>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8001270:	429a      	cmp	r2, r3
 8001272:	d921      	bls.n	80012b8 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6a1b      	ldr	r3, [r3, #32]
 8001278:	4618      	mov	r0, r3
 800127a:	f000 fc09 	bl	8001a90 <RCC_SetFlashLatencyFromMSIRange>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e208      	b.n	800169a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001288:	4b09      	ldr	r3, [pc, #36]	@ (80012b0 <HAL_RCC_OscConfig+0x264>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a1b      	ldr	r3, [r3, #32]
 8001294:	4906      	ldr	r1, [pc, #24]	@ (80012b0 <HAL_RCC_OscConfig+0x264>)
 8001296:	4313      	orrs	r3, r2
 8001298:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800129a:	4b05      	ldr	r3, [pc, #20]	@ (80012b0 <HAL_RCC_OscConfig+0x264>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	061b      	lsls	r3, r3, #24
 80012a8:	4901      	ldr	r1, [pc, #4]	@ (80012b0 <HAL_RCC_OscConfig+0x264>)
 80012aa:	4313      	orrs	r3, r2
 80012ac:	604b      	str	r3, [r1, #4]
 80012ae:	e020      	b.n	80012f2 <HAL_RCC_OscConfig+0x2a6>
 80012b0:	40023800 	.word	0x40023800
 80012b4:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012b8:	4b99      	ldr	r3, [pc, #612]	@ (8001520 <HAL_RCC_OscConfig+0x4d4>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a1b      	ldr	r3, [r3, #32]
 80012c4:	4996      	ldr	r1, [pc, #600]	@ (8001520 <HAL_RCC_OscConfig+0x4d4>)
 80012c6:	4313      	orrs	r3, r2
 80012c8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012ca:	4b95      	ldr	r3, [pc, #596]	@ (8001520 <HAL_RCC_OscConfig+0x4d4>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	061b      	lsls	r3, r3, #24
 80012d8:	4991      	ldr	r1, [pc, #580]	@ (8001520 <HAL_RCC_OscConfig+0x4d4>)
 80012da:	4313      	orrs	r3, r2
 80012dc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a1b      	ldr	r3, [r3, #32]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 fbd4 	bl	8001a90 <RCC_SetFlashLatencyFromMSIRange>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e1d3      	b.n	800169a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a1b      	ldr	r3, [r3, #32]
 80012f6:	0b5b      	lsrs	r3, r3, #13
 80012f8:	3301      	adds	r3, #1
 80012fa:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001302:	4a87      	ldr	r2, [pc, #540]	@ (8001520 <HAL_RCC_OscConfig+0x4d4>)
 8001304:	6892      	ldr	r2, [r2, #8]
 8001306:	0912      	lsrs	r2, r2, #4
 8001308:	f002 020f 	and.w	r2, r2, #15
 800130c:	4985      	ldr	r1, [pc, #532]	@ (8001524 <HAL_RCC_OscConfig+0x4d8>)
 800130e:	5c8a      	ldrb	r2, [r1, r2]
 8001310:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001312:	4a85      	ldr	r2, [pc, #532]	@ (8001528 <HAL_RCC_OscConfig+0x4dc>)
 8001314:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001316:	4b85      	ldr	r3, [pc, #532]	@ (800152c <HAL_RCC_OscConfig+0x4e0>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fb92 	bl	8000a44 <HAL_InitTick>
 8001320:	4603      	mov	r3, r0
 8001322:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d045      	beq.n	80013b6 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800132a:	7bfb      	ldrb	r3, [r7, #15]
 800132c:	e1b5      	b.n	800169a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d029      	beq.n	800138a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001336:	4b7e      	ldr	r3, [pc, #504]	@ (8001530 <HAL_RCC_OscConfig+0x4e4>)
 8001338:	2201      	movs	r2, #1
 800133a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133c:	f7ff fbce 	bl	8000adc <HAL_GetTick>
 8001340:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001344:	f7ff fbca 	bl	8000adc <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b02      	cmp	r3, #2
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e1a1      	b.n	800169a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001356:	4b72      	ldr	r3, [pc, #456]	@ (8001520 <HAL_RCC_OscConfig+0x4d4>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800135e:	2b00      	cmp	r3, #0
 8001360:	d0f0      	beq.n	8001344 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001362:	4b6f      	ldr	r3, [pc, #444]	@ (8001520 <HAL_RCC_OscConfig+0x4d4>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a1b      	ldr	r3, [r3, #32]
 800136e:	496c      	ldr	r1, [pc, #432]	@ (8001520 <HAL_RCC_OscConfig+0x4d4>)
 8001370:	4313      	orrs	r3, r2
 8001372:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001374:	4b6a      	ldr	r3, [pc, #424]	@ (8001520 <HAL_RCC_OscConfig+0x4d4>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	69db      	ldr	r3, [r3, #28]
 8001380:	061b      	lsls	r3, r3, #24
 8001382:	4967      	ldr	r1, [pc, #412]	@ (8001520 <HAL_RCC_OscConfig+0x4d4>)
 8001384:	4313      	orrs	r3, r2
 8001386:	604b      	str	r3, [r1, #4]
 8001388:	e015      	b.n	80013b6 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800138a:	4b69      	ldr	r3, [pc, #420]	@ (8001530 <HAL_RCC_OscConfig+0x4e4>)
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001390:	f7ff fba4 	bl	8000adc <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001398:	f7ff fba0 	bl	8000adc <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e177      	b.n	800169a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80013aa:	4b5d      	ldr	r3, [pc, #372]	@ (8001520 <HAL_RCC_OscConfig+0x4d4>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f0      	bne.n	8001398 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0308 	and.w	r3, r3, #8
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d030      	beq.n	8001424 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d016      	beq.n	80013f8 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ca:	4b5a      	ldr	r3, [pc, #360]	@ (8001534 <HAL_RCC_OscConfig+0x4e8>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d0:	f7ff fb84 	bl	8000adc <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013d8:	f7ff fb80 	bl	8000adc <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e157      	b.n	800169a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80013ea:	4b4d      	ldr	r3, [pc, #308]	@ (8001520 <HAL_RCC_OscConfig+0x4d4>)
 80013ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0f0      	beq.n	80013d8 <HAL_RCC_OscConfig+0x38c>
 80013f6:	e015      	b.n	8001424 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013f8:	4b4e      	ldr	r3, [pc, #312]	@ (8001534 <HAL_RCC_OscConfig+0x4e8>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013fe:	f7ff fb6d 	bl	8000adc <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001406:	f7ff fb69 	bl	8000adc <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e140      	b.n	800169a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001418:	4b41      	ldr	r3, [pc, #260]	@ (8001520 <HAL_RCC_OscConfig+0x4d4>)
 800141a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800141c:	f003 0302 	and.w	r3, r3, #2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1f0      	bne.n	8001406 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0304 	and.w	r3, r3, #4
 800142c:	2b00      	cmp	r3, #0
 800142e:	f000 80b5 	beq.w	800159c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001432:	2300      	movs	r3, #0
 8001434:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001436:	4b3a      	ldr	r3, [pc, #232]	@ (8001520 <HAL_RCC_OscConfig+0x4d4>)
 8001438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800143a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d10d      	bne.n	800145e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001442:	4b37      	ldr	r3, [pc, #220]	@ (8001520 <HAL_RCC_OscConfig+0x4d4>)
 8001444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001446:	4a36      	ldr	r2, [pc, #216]	@ (8001520 <HAL_RCC_OscConfig+0x4d4>)
 8001448:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800144c:	6253      	str	r3, [r2, #36]	@ 0x24
 800144e:	4b34      	ldr	r3, [pc, #208]	@ (8001520 <HAL_RCC_OscConfig+0x4d4>)
 8001450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001452:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800145a:	2301      	movs	r3, #1
 800145c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800145e:	4b36      	ldr	r3, [pc, #216]	@ (8001538 <HAL_RCC_OscConfig+0x4ec>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001466:	2b00      	cmp	r3, #0
 8001468:	d118      	bne.n	800149c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800146a:	4b33      	ldr	r3, [pc, #204]	@ (8001538 <HAL_RCC_OscConfig+0x4ec>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a32      	ldr	r2, [pc, #200]	@ (8001538 <HAL_RCC_OscConfig+0x4ec>)
 8001470:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001474:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001476:	f7ff fb31 	bl	8000adc <HAL_GetTick>
 800147a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800147c:	e008      	b.n	8001490 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800147e:	f7ff fb2d 	bl	8000adc <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b64      	cmp	r3, #100	@ 0x64
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e104      	b.n	800169a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001490:	4b29      	ldr	r3, [pc, #164]	@ (8001538 <HAL_RCC_OscConfig+0x4ec>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001498:	2b00      	cmp	r3, #0
 800149a:	d0f0      	beq.n	800147e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d106      	bne.n	80014b2 <HAL_RCC_OscConfig+0x466>
 80014a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001520 <HAL_RCC_OscConfig+0x4d4>)
 80014a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014a8:	4a1d      	ldr	r2, [pc, #116]	@ (8001520 <HAL_RCC_OscConfig+0x4d4>)
 80014aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014ae:	6353      	str	r3, [r2, #52]	@ 0x34
 80014b0:	e02d      	b.n	800150e <HAL_RCC_OscConfig+0x4c2>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d10c      	bne.n	80014d4 <HAL_RCC_OscConfig+0x488>
 80014ba:	4b19      	ldr	r3, [pc, #100]	@ (8001520 <HAL_RCC_OscConfig+0x4d4>)
 80014bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014be:	4a18      	ldr	r2, [pc, #96]	@ (8001520 <HAL_RCC_OscConfig+0x4d4>)
 80014c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80014c4:	6353      	str	r3, [r2, #52]	@ 0x34
 80014c6:	4b16      	ldr	r3, [pc, #88]	@ (8001520 <HAL_RCC_OscConfig+0x4d4>)
 80014c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014ca:	4a15      	ldr	r2, [pc, #84]	@ (8001520 <HAL_RCC_OscConfig+0x4d4>)
 80014cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80014d0:	6353      	str	r3, [r2, #52]	@ 0x34
 80014d2:	e01c      	b.n	800150e <HAL_RCC_OscConfig+0x4c2>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	2b05      	cmp	r3, #5
 80014da:	d10c      	bne.n	80014f6 <HAL_RCC_OscConfig+0x4aa>
 80014dc:	4b10      	ldr	r3, [pc, #64]	@ (8001520 <HAL_RCC_OscConfig+0x4d4>)
 80014de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014e0:	4a0f      	ldr	r2, [pc, #60]	@ (8001520 <HAL_RCC_OscConfig+0x4d4>)
 80014e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014e6:	6353      	str	r3, [r2, #52]	@ 0x34
 80014e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001520 <HAL_RCC_OscConfig+0x4d4>)
 80014ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001520 <HAL_RCC_OscConfig+0x4d4>)
 80014ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014f2:	6353      	str	r3, [r2, #52]	@ 0x34
 80014f4:	e00b      	b.n	800150e <HAL_RCC_OscConfig+0x4c2>
 80014f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001520 <HAL_RCC_OscConfig+0x4d4>)
 80014f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014fa:	4a09      	ldr	r2, [pc, #36]	@ (8001520 <HAL_RCC_OscConfig+0x4d4>)
 80014fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001500:	6353      	str	r3, [r2, #52]	@ 0x34
 8001502:	4b07      	ldr	r3, [pc, #28]	@ (8001520 <HAL_RCC_OscConfig+0x4d4>)
 8001504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001506:	4a06      	ldr	r2, [pc, #24]	@ (8001520 <HAL_RCC_OscConfig+0x4d4>)
 8001508:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800150c:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d024      	beq.n	8001560 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001516:	f7ff fae1 	bl	8000adc <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800151c:	e019      	b.n	8001552 <HAL_RCC_OscConfig+0x506>
 800151e:	bf00      	nop
 8001520:	40023800 	.word	0x40023800
 8001524:	080027b4 	.word	0x080027b4
 8001528:	20000000 	.word	0x20000000
 800152c:	20000004 	.word	0x20000004
 8001530:	42470020 	.word	0x42470020
 8001534:	42470680 	.word	0x42470680
 8001538:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800153c:	f7ff face 	bl	8000adc <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	f241 3288 	movw	r2, #5000	@ 0x1388
 800154a:	4293      	cmp	r3, r2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e0a3      	b.n	800169a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001552:	4b54      	ldr	r3, [pc, #336]	@ (80016a4 <HAL_RCC_OscConfig+0x658>)
 8001554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001556:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800155a:	2b00      	cmp	r3, #0
 800155c:	d0ee      	beq.n	800153c <HAL_RCC_OscConfig+0x4f0>
 800155e:	e014      	b.n	800158a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001560:	f7ff fabc 	bl	8000adc <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001566:	e00a      	b.n	800157e <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001568:	f7ff fab8 	bl	8000adc <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001576:	4293      	cmp	r3, r2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e08d      	b.n	800169a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800157e:	4b49      	ldr	r3, [pc, #292]	@ (80016a4 <HAL_RCC_OscConfig+0x658>)
 8001580:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001582:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1ee      	bne.n	8001568 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800158a:	7ffb      	ldrb	r3, [r7, #31]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d105      	bne.n	800159c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001590:	4b44      	ldr	r3, [pc, #272]	@ (80016a4 <HAL_RCC_OscConfig+0x658>)
 8001592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001594:	4a43      	ldr	r2, [pc, #268]	@ (80016a4 <HAL_RCC_OscConfig+0x658>)
 8001596:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800159a:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d079      	beq.n	8001698 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	2b0c      	cmp	r3, #12
 80015a8:	d056      	beq.n	8001658 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d13b      	bne.n	800162a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b2:	4b3d      	ldr	r3, [pc, #244]	@ (80016a8 <HAL_RCC_OscConfig+0x65c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b8:	f7ff fa90 	bl	8000adc <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015c0:	f7ff fa8c 	bl	8000adc <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e063      	b.n	800169a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80015d2:	4b34      	ldr	r3, [pc, #208]	@ (80016a4 <HAL_RCC_OscConfig+0x658>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1f0      	bne.n	80015c0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015de:	4b31      	ldr	r3, [pc, #196]	@ (80016a4 <HAL_RCC_OscConfig+0x658>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ee:	4319      	orrs	r1, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f4:	430b      	orrs	r3, r1
 80015f6:	492b      	ldr	r1, [pc, #172]	@ (80016a4 <HAL_RCC_OscConfig+0x658>)
 80015f8:	4313      	orrs	r3, r2
 80015fa:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015fc:	4b2a      	ldr	r3, [pc, #168]	@ (80016a8 <HAL_RCC_OscConfig+0x65c>)
 80015fe:	2201      	movs	r2, #1
 8001600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001602:	f7ff fa6b 	bl	8000adc <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001608:	e008      	b.n	800161c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800160a:	f7ff fa67 	bl	8000adc <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e03e      	b.n	800169a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800161c:	4b21      	ldr	r3, [pc, #132]	@ (80016a4 <HAL_RCC_OscConfig+0x658>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d0f0      	beq.n	800160a <HAL_RCC_OscConfig+0x5be>
 8001628:	e036      	b.n	8001698 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800162a:	4b1f      	ldr	r3, [pc, #124]	@ (80016a8 <HAL_RCC_OscConfig+0x65c>)
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001630:	f7ff fa54 	bl	8000adc <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001638:	f7ff fa50 	bl	8000adc <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e027      	b.n	800169a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800164a:	4b16      	ldr	r3, [pc, #88]	@ (80016a4 <HAL_RCC_OscConfig+0x658>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1f0      	bne.n	8001638 <HAL_RCC_OscConfig+0x5ec>
 8001656:	e01f      	b.n	8001698 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800165c:	2b01      	cmp	r3, #1
 800165e:	d101      	bne.n	8001664 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e01a      	b.n	800169a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001664:	4b0f      	ldr	r3, [pc, #60]	@ (80016a4 <HAL_RCC_OscConfig+0x658>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001674:	429a      	cmp	r2, r3
 8001676:	d10d      	bne.n	8001694 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001682:	429a      	cmp	r2, r3
 8001684:	d106      	bne.n	8001694 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001690:	429a      	cmp	r2, r3
 8001692:	d001      	beq.n	8001698 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e000      	b.n	800169a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3720      	adds	r7, #32
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40023800 	.word	0x40023800
 80016a8:	42470060 	.word	0x42470060

080016ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d101      	bne.n	80016c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e11a      	b.n	80018f6 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016c0:	4b8f      	ldr	r3, [pc, #572]	@ (8001900 <HAL_RCC_ClockConfig+0x254>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d919      	bls.n	8001702 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d105      	bne.n	80016e0 <HAL_RCC_ClockConfig+0x34>
 80016d4:	4b8a      	ldr	r3, [pc, #552]	@ (8001900 <HAL_RCC_ClockConfig+0x254>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a89      	ldr	r2, [pc, #548]	@ (8001900 <HAL_RCC_ClockConfig+0x254>)
 80016da:	f043 0304 	orr.w	r3, r3, #4
 80016de:	6013      	str	r3, [r2, #0]
 80016e0:	4b87      	ldr	r3, [pc, #540]	@ (8001900 <HAL_RCC_ClockConfig+0x254>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f023 0201 	bic.w	r2, r3, #1
 80016e8:	4985      	ldr	r1, [pc, #532]	@ (8001900 <HAL_RCC_ClockConfig+0x254>)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f0:	4b83      	ldr	r3, [pc, #524]	@ (8001900 <HAL_RCC_ClockConfig+0x254>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	683a      	ldr	r2, [r7, #0]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d001      	beq.n	8001702 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e0f9      	b.n	80018f6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d008      	beq.n	8001720 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800170e:	4b7d      	ldr	r3, [pc, #500]	@ (8001904 <HAL_RCC_ClockConfig+0x258>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	497a      	ldr	r1, [pc, #488]	@ (8001904 <HAL_RCC_ClockConfig+0x258>)
 800171c:	4313      	orrs	r3, r2
 800171e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	2b00      	cmp	r3, #0
 800172a:	f000 808e 	beq.w	800184a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b02      	cmp	r3, #2
 8001734:	d107      	bne.n	8001746 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001736:	4b73      	ldr	r3, [pc, #460]	@ (8001904 <HAL_RCC_ClockConfig+0x258>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d121      	bne.n	8001786 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e0d7      	b.n	80018f6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b03      	cmp	r3, #3
 800174c:	d107      	bne.n	800175e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800174e:	4b6d      	ldr	r3, [pc, #436]	@ (8001904 <HAL_RCC_ClockConfig+0x258>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d115      	bne.n	8001786 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e0cb      	b.n	80018f6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d107      	bne.n	8001776 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001766:	4b67      	ldr	r3, [pc, #412]	@ (8001904 <HAL_RCC_ClockConfig+0x258>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d109      	bne.n	8001786 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e0bf      	b.n	80018f6 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001776:	4b63      	ldr	r3, [pc, #396]	@ (8001904 <HAL_RCC_ClockConfig+0x258>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e0b7      	b.n	80018f6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001786:	4b5f      	ldr	r3, [pc, #380]	@ (8001904 <HAL_RCC_ClockConfig+0x258>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f023 0203 	bic.w	r2, r3, #3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	495c      	ldr	r1, [pc, #368]	@ (8001904 <HAL_RCC_ClockConfig+0x258>)
 8001794:	4313      	orrs	r3, r2
 8001796:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001798:	f7ff f9a0 	bl	8000adc <HAL_GetTick>
 800179c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d112      	bne.n	80017cc <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80017a6:	e00a      	b.n	80017be <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017a8:	f7ff f998 	bl	8000adc <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e09b      	b.n	80018f6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80017be:	4b51      	ldr	r3, [pc, #324]	@ (8001904 <HAL_RCC_ClockConfig+0x258>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f003 030c 	and.w	r3, r3, #12
 80017c6:	2b08      	cmp	r3, #8
 80017c8:	d1ee      	bne.n	80017a8 <HAL_RCC_ClockConfig+0xfc>
 80017ca:	e03e      	b.n	800184a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2b03      	cmp	r3, #3
 80017d2:	d112      	bne.n	80017fa <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017d4:	e00a      	b.n	80017ec <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017d6:	f7ff f981 	bl	8000adc <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e084      	b.n	80018f6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017ec:	4b45      	ldr	r3, [pc, #276]	@ (8001904 <HAL_RCC_ClockConfig+0x258>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f003 030c 	and.w	r3, r3, #12
 80017f4:	2b0c      	cmp	r3, #12
 80017f6:	d1ee      	bne.n	80017d6 <HAL_RCC_ClockConfig+0x12a>
 80017f8:	e027      	b.n	800184a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d11d      	bne.n	800183e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001802:	e00a      	b.n	800181a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001804:	f7ff f96a 	bl	8000adc <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001812:	4293      	cmp	r3, r2
 8001814:	d901      	bls.n	800181a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e06d      	b.n	80018f6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800181a:	4b3a      	ldr	r3, [pc, #232]	@ (8001904 <HAL_RCC_ClockConfig+0x258>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f003 030c 	and.w	r3, r3, #12
 8001822:	2b04      	cmp	r3, #4
 8001824:	d1ee      	bne.n	8001804 <HAL_RCC_ClockConfig+0x158>
 8001826:	e010      	b.n	800184a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001828:	f7ff f958 	bl	8000adc <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001836:	4293      	cmp	r3, r2
 8001838:	d901      	bls.n	800183e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e05b      	b.n	80018f6 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800183e:	4b31      	ldr	r3, [pc, #196]	@ (8001904 <HAL_RCC_ClockConfig+0x258>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 030c 	and.w	r3, r3, #12
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1ee      	bne.n	8001828 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800184a:	4b2d      	ldr	r3, [pc, #180]	@ (8001900 <HAL_RCC_ClockConfig+0x254>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	429a      	cmp	r2, r3
 8001856:	d219      	bcs.n	800188c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d105      	bne.n	800186a <HAL_RCC_ClockConfig+0x1be>
 800185e:	4b28      	ldr	r3, [pc, #160]	@ (8001900 <HAL_RCC_ClockConfig+0x254>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a27      	ldr	r2, [pc, #156]	@ (8001900 <HAL_RCC_ClockConfig+0x254>)
 8001864:	f043 0304 	orr.w	r3, r3, #4
 8001868:	6013      	str	r3, [r2, #0]
 800186a:	4b25      	ldr	r3, [pc, #148]	@ (8001900 <HAL_RCC_ClockConfig+0x254>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f023 0201 	bic.w	r2, r3, #1
 8001872:	4923      	ldr	r1, [pc, #140]	@ (8001900 <HAL_RCC_ClockConfig+0x254>)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	4313      	orrs	r3, r2
 8001878:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800187a:	4b21      	ldr	r3, [pc, #132]	@ (8001900 <HAL_RCC_ClockConfig+0x254>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	429a      	cmp	r2, r3
 8001886:	d001      	beq.n	800188c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e034      	b.n	80018f6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	2b00      	cmp	r3, #0
 8001896:	d008      	beq.n	80018aa <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001898:	4b1a      	ldr	r3, [pc, #104]	@ (8001904 <HAL_RCC_ClockConfig+0x258>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	4917      	ldr	r1, [pc, #92]	@ (8001904 <HAL_RCC_ClockConfig+0x258>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d009      	beq.n	80018ca <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018b6:	4b13      	ldr	r3, [pc, #76]	@ (8001904 <HAL_RCC_ClockConfig+0x258>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	490f      	ldr	r1, [pc, #60]	@ (8001904 <HAL_RCC_ClockConfig+0x258>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ca:	f000 f823 	bl	8001914 <HAL_RCC_GetSysClockFreq>
 80018ce:	4602      	mov	r2, r0
 80018d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001904 <HAL_RCC_ClockConfig+0x258>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	091b      	lsrs	r3, r3, #4
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	490b      	ldr	r1, [pc, #44]	@ (8001908 <HAL_RCC_ClockConfig+0x25c>)
 80018dc:	5ccb      	ldrb	r3, [r1, r3]
 80018de:	fa22 f303 	lsr.w	r3, r2, r3
 80018e2:	4a0a      	ldr	r2, [pc, #40]	@ (800190c <HAL_RCC_ClockConfig+0x260>)
 80018e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80018e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001910 <HAL_RCC_ClockConfig+0x264>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff f8aa 	bl	8000a44 <HAL_InitTick>
 80018f0:	4603      	mov	r3, r0
 80018f2:	72fb      	strb	r3, [r7, #11]

  return status;
 80018f4:	7afb      	ldrb	r3, [r7, #11]
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40023c00 	.word	0x40023c00
 8001904:	40023800 	.word	0x40023800
 8001908:	080027b4 	.word	0x080027b4
 800190c:	20000000 	.word	0x20000000
 8001910:	20000004 	.word	0x20000004

08001914 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001914:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001918:	b08e      	sub	sp, #56	@ 0x38
 800191a:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800191c:	4b58      	ldr	r3, [pc, #352]	@ (8001a80 <HAL_RCC_GetSysClockFreq+0x16c>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001924:	f003 030c 	and.w	r3, r3, #12
 8001928:	2b0c      	cmp	r3, #12
 800192a:	d00d      	beq.n	8001948 <HAL_RCC_GetSysClockFreq+0x34>
 800192c:	2b0c      	cmp	r3, #12
 800192e:	f200 8092 	bhi.w	8001a56 <HAL_RCC_GetSysClockFreq+0x142>
 8001932:	2b04      	cmp	r3, #4
 8001934:	d002      	beq.n	800193c <HAL_RCC_GetSysClockFreq+0x28>
 8001936:	2b08      	cmp	r3, #8
 8001938:	d003      	beq.n	8001942 <HAL_RCC_GetSysClockFreq+0x2e>
 800193a:	e08c      	b.n	8001a56 <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800193c:	4b51      	ldr	r3, [pc, #324]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0x170>)
 800193e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001940:	e097      	b.n	8001a72 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001942:	4b51      	ldr	r3, [pc, #324]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x174>)
 8001944:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001946:	e094      	b.n	8001a72 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800194a:	0c9b      	lsrs	r3, r3, #18
 800194c:	f003 020f 	and.w	r2, r3, #15
 8001950:	4b4e      	ldr	r3, [pc, #312]	@ (8001a8c <HAL_RCC_GetSysClockFreq+0x178>)
 8001952:	5c9b      	ldrb	r3, [r3, r2]
 8001954:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001958:	0d9b      	lsrs	r3, r3, #22
 800195a:	f003 0303 	and.w	r3, r3, #3
 800195e:	3301      	adds	r3, #1
 8001960:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001962:	4b47      	ldr	r3, [pc, #284]	@ (8001a80 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d021      	beq.n	80019b2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800196e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001970:	2200      	movs	r2, #0
 8001972:	61bb      	str	r3, [r7, #24]
 8001974:	61fa      	str	r2, [r7, #28]
 8001976:	4b44      	ldr	r3, [pc, #272]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x174>)
 8001978:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800197c:	464a      	mov	r2, r9
 800197e:	fb03 f202 	mul.w	r2, r3, r2
 8001982:	2300      	movs	r3, #0
 8001984:	4644      	mov	r4, r8
 8001986:	fb04 f303 	mul.w	r3, r4, r3
 800198a:	4413      	add	r3, r2
 800198c:	4a3e      	ldr	r2, [pc, #248]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x174>)
 800198e:	4644      	mov	r4, r8
 8001990:	fba4 0102 	umull	r0, r1, r4, r2
 8001994:	440b      	add	r3, r1
 8001996:	4619      	mov	r1, r3
 8001998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199a:	2200      	movs	r2, #0
 800199c:	613b      	str	r3, [r7, #16]
 800199e:	617a      	str	r2, [r7, #20]
 80019a0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80019a4:	f7fe fbea 	bl	800017c <__aeabi_uldivmod>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	4613      	mov	r3, r2
 80019ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80019b0:	e04e      	b.n	8001a50 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80019b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019b4:	2200      	movs	r2, #0
 80019b6:	469a      	mov	sl, r3
 80019b8:	4693      	mov	fp, r2
 80019ba:	4652      	mov	r2, sl
 80019bc:	465b      	mov	r3, fp
 80019be:	f04f 0000 	mov.w	r0, #0
 80019c2:	f04f 0100 	mov.w	r1, #0
 80019c6:	0159      	lsls	r1, r3, #5
 80019c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019cc:	0150      	lsls	r0, r2, #5
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	ebb2 080a 	subs.w	r8, r2, sl
 80019d6:	eb63 090b 	sbc.w	r9, r3, fp
 80019da:	f04f 0200 	mov.w	r2, #0
 80019de:	f04f 0300 	mov.w	r3, #0
 80019e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80019e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80019ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80019ee:	ebb2 0408 	subs.w	r4, r2, r8
 80019f2:	eb63 0509 	sbc.w	r5, r3, r9
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	f04f 0300 	mov.w	r3, #0
 80019fe:	00eb      	lsls	r3, r5, #3
 8001a00:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a04:	00e2      	lsls	r2, r4, #3
 8001a06:	4614      	mov	r4, r2
 8001a08:	461d      	mov	r5, r3
 8001a0a:	eb14 030a 	adds.w	r3, r4, sl
 8001a0e:	603b      	str	r3, [r7, #0]
 8001a10:	eb45 030b 	adc.w	r3, r5, fp
 8001a14:	607b      	str	r3, [r7, #4]
 8001a16:	f04f 0200 	mov.w	r2, #0
 8001a1a:	f04f 0300 	mov.w	r3, #0
 8001a1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a22:	4629      	mov	r1, r5
 8001a24:	028b      	lsls	r3, r1, #10
 8001a26:	4620      	mov	r0, r4
 8001a28:	4629      	mov	r1, r5
 8001a2a:	4604      	mov	r4, r0
 8001a2c:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001a30:	4601      	mov	r1, r0
 8001a32:	028a      	lsls	r2, r1, #10
 8001a34:	4610      	mov	r0, r2
 8001a36:	4619      	mov	r1, r3
 8001a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	60fa      	str	r2, [r7, #12]
 8001a40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a44:	f7fe fb9a 	bl	800017c <__aeabi_uldivmod>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      sysclockfreq = pllvco;
 8001a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a52:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001a54:	e00d      	b.n	8001a72 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001a56:	4b0a      	ldr	r3, [pc, #40]	@ (8001a80 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	0b5b      	lsrs	r3, r3, #13
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001a62:	6a3b      	ldr	r3, [r7, #32]
 8001a64:	3301      	adds	r3, #1
 8001a66:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001a70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3738      	adds	r7, #56	@ 0x38
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a7e:	bf00      	nop
 8001a80:	40023800 	.word	0x40023800
 8001a84:	00f42400 	.word	0x00f42400
 8001a88:	016e3600 	.word	0x016e3600
 8001a8c:	080027a8 	.word	0x080027a8

08001a90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b087      	sub	sp, #28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001a98:	2300      	movs	r3, #0
 8001a9a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001a9c:	4b29      	ldr	r3, [pc, #164]	@ (8001b44 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d12c      	bne.n	8001b02 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001aa8:	4b26      	ldr	r3, [pc, #152]	@ (8001b44 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d005      	beq.n	8001ac0 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001ab4:	4b24      	ldr	r3, [pc, #144]	@ (8001b48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8001abc:	617b      	str	r3, [r7, #20]
 8001abe:	e016      	b.n	8001aee <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ac0:	4b20      	ldr	r3, [pc, #128]	@ (8001b44 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac4:	4a1f      	ldr	r2, [pc, #124]	@ (8001b44 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001ac6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aca:	6253      	str	r3, [r2, #36]	@ 0x24
 8001acc:	4b1d      	ldr	r3, [pc, #116]	@ (8001b44 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8001ae0:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ae2:	4b18      	ldr	r3, [pc, #96]	@ (8001b44 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae6:	4a17      	ldr	r2, [pc, #92]	@ (8001b44 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001ae8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001aec:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8001af4:	d105      	bne.n	8001b02 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8001afc:	d101      	bne.n	8001b02 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001afe:	2301      	movs	r3, #1
 8001b00:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d105      	bne.n	8001b14 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001b08:	4b10      	ldr	r3, [pc, #64]	@ (8001b4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a0f      	ldr	r2, [pc, #60]	@ (8001b4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b0e:	f043 0304 	orr.w	r3, r3, #4
 8001b12:	6013      	str	r3, [r2, #0]
 8001b14:	4b0d      	ldr	r3, [pc, #52]	@ (8001b4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f023 0201 	bic.w	r2, r3, #1
 8001b1c:	490b      	ldr	r1, [pc, #44]	@ (8001b4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001b24:	4b09      	ldr	r3, [pc, #36]	@ (8001b4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d001      	beq.n	8001b36 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e000      	b.n	8001b38 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	371c      	adds	r7, #28
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40007000 	.word	0x40007000
 8001b4c:	40023c00 	.word	0x40023c00

08001b50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e07b      	b.n	8001c5a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d108      	bne.n	8001b7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001b72:	d009      	beq.n	8001b88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	61da      	str	r2, [r3, #28]
 8001b7a:	e005      	b.n	8001b88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d106      	bne.n	8001ba8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7fe fe1e 	bl	80007e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2202      	movs	r2, #2
 8001bac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001bbe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001bd0:	431a      	orrs	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	431a      	orrs	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	431a      	orrs	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c02:	431a      	orrs	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a1b      	ldr	r3, [r3, #32]
 8001c08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c0c:	ea42 0103 	orr.w	r1, r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c14:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	0c1b      	lsrs	r3, r3, #16
 8001c26:	f003 0104 	and.w	r1, r3, #4
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2e:	f003 0210 	and.w	r2, r3, #16
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	430a      	orrs	r2, r1
 8001c38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	69da      	ldr	r2, [r3, #28]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b088      	sub	sp, #32
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	60f8      	str	r0, [r7, #12]
 8001c6a:	60b9      	str	r1, [r7, #8]
 8001c6c:	603b      	str	r3, [r7, #0]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c72:	f7fe ff33 	bl	8000adc <HAL_GetTick>
 8001c76:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001c78:	88fb      	ldrh	r3, [r7, #6]
 8001c7a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d001      	beq.n	8001c8c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	e12a      	b.n	8001ee2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d002      	beq.n	8001c98 <HAL_SPI_Transmit+0x36>
 8001c92:	88fb      	ldrh	r3, [r7, #6]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e122      	b.n	8001ee2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d101      	bne.n	8001caa <HAL_SPI_Transmit+0x48>
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	e11b      	b.n	8001ee2 <HAL_SPI_Transmit+0x280>
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2203      	movs	r2, #3
 8001cb6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	88fa      	ldrh	r2, [r7, #6]
 8001cca:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	88fa      	ldrh	r2, [r7, #6]
 8001cd0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2200      	movs	r2, #0
 8001cee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001cf8:	d10f      	bne.n	8001d1a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d08:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001d18:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d24:	2b40      	cmp	r3, #64	@ 0x40
 8001d26:	d007      	beq.n	8001d38 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001d40:	d152      	bne.n	8001de8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d002      	beq.n	8001d50 <HAL_SPI_Transmit+0xee>
 8001d4a:	8b7b      	ldrh	r3, [r7, #26]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d145      	bne.n	8001ddc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d54:	881a      	ldrh	r2, [r3, #0]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d60:	1c9a      	adds	r2, r3, #2
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001d74:	e032      	b.n	8001ddc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d112      	bne.n	8001daa <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d88:	881a      	ldrh	r2, [r3, #0]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d94:	1c9a      	adds	r2, r3, #2
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	3b01      	subs	r3, #1
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001da8:	e018      	b.n	8001ddc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001daa:	f7fe fe97 	bl	8000adc <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d803      	bhi.n	8001dc2 <HAL_SPI_Transmit+0x160>
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001dc0:	d102      	bne.n	8001dc8 <HAL_SPI_Transmit+0x166>
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d109      	bne.n	8001ddc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e082      	b.n	8001ee2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1c7      	bne.n	8001d76 <HAL_SPI_Transmit+0x114>
 8001de6:	e053      	b.n	8001e90 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d002      	beq.n	8001df6 <HAL_SPI_Transmit+0x194>
 8001df0:	8b7b      	ldrh	r3, [r7, #26]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d147      	bne.n	8001e86 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	330c      	adds	r3, #12
 8001e00:	7812      	ldrb	r2, [r2, #0]
 8001e02:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e08:	1c5a      	adds	r2, r3, #1
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	3b01      	subs	r3, #1
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001e1c:	e033      	b.n	8001e86 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d113      	bne.n	8001e54 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	330c      	adds	r3, #12
 8001e36:	7812      	ldrb	r2, [r2, #0]
 8001e38:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3e:	1c5a      	adds	r2, r3, #1
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001e52:	e018      	b.n	8001e86 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e54:	f7fe fe42 	bl	8000adc <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d803      	bhi.n	8001e6c <HAL_SPI_Transmit+0x20a>
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e6a:	d102      	bne.n	8001e72 <HAL_SPI_Transmit+0x210>
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d109      	bne.n	8001e86 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e02d      	b.n	8001ee2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1c6      	bne.n	8001e1e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e90:	69fa      	ldr	r2, [r7, #28]
 8001e92:	6839      	ldr	r1, [r7, #0]
 8001e94:	68f8      	ldr	r0, [r7, #12]
 8001e96:	f000 f8b1 	bl	8001ffc <SPI_EndRxTxTransaction>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d002      	beq.n	8001ea6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2220      	movs	r2, #32
 8001ea4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d10a      	bne.n	8001ec4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	617b      	str	r3, [r7, #20]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	617b      	str	r3, [r7, #20]
 8001ec2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e000      	b.n	8001ee2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
  }
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3720      	adds	r7, #32
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b088      	sub	sp, #32
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	603b      	str	r3, [r7, #0]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001efc:	f7fe fdee 	bl	8000adc <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f04:	1a9b      	subs	r3, r3, r2
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	4413      	add	r3, r2
 8001f0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001f0c:	f7fe fde6 	bl	8000adc <HAL_GetTick>
 8001f10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001f12:	4b39      	ldr	r3, [pc, #228]	@ (8001ff8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	015b      	lsls	r3, r3, #5
 8001f18:	0d1b      	lsrs	r3, r3, #20
 8001f1a:	69fa      	ldr	r2, [r7, #28]
 8001f1c:	fb02 f303 	mul.w	r3, r2, r3
 8001f20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f22:	e054      	b.n	8001fce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f2a:	d050      	beq.n	8001fce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001f2c:	f7fe fdd6 	bl	8000adc <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	69fa      	ldr	r2, [r7, #28]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d902      	bls.n	8001f42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d13d      	bne.n	8001fbe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001f50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001f5a:	d111      	bne.n	8001f80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f64:	d004      	beq.n	8001f70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f6e:	d107      	bne.n	8001f80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f88:	d10f      	bne.n	8001faa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001fa8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e017      	b.n	8001fee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	68ba      	ldr	r2, [r7, #8]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	bf0c      	ite	eq
 8001fde:	2301      	moveq	r3, #1
 8001fe0:	2300      	movne	r3, #0
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	79fb      	ldrb	r3, [r7, #7]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d19b      	bne.n	8001f24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3720      	adds	r7, #32
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000000 	.word	0x20000000

08001ffc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b088      	sub	sp, #32
 8002000:	af02      	add	r7, sp, #8
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	9300      	str	r3, [sp, #0]
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	2201      	movs	r2, #1
 8002010:	2102      	movs	r1, #2
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f7ff ff6a 	bl	8001eec <SPI_WaitFlagStateUntilTimeout>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d007      	beq.n	800202e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002022:	f043 0220 	orr.w	r2, r3, #32
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e032      	b.n	8002094 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800202e:	4b1b      	ldr	r3, [pc, #108]	@ (800209c <SPI_EndRxTxTransaction+0xa0>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a1b      	ldr	r2, [pc, #108]	@ (80020a0 <SPI_EndRxTxTransaction+0xa4>)
 8002034:	fba2 2303 	umull	r2, r3, r2, r3
 8002038:	0d5b      	lsrs	r3, r3, #21
 800203a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800203e:	fb02 f303 	mul.w	r3, r2, r3
 8002042:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800204c:	d112      	bne.n	8002074 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	9300      	str	r3, [sp, #0]
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	2200      	movs	r2, #0
 8002056:	2180      	movs	r1, #128	@ 0x80
 8002058:	68f8      	ldr	r0, [r7, #12]
 800205a:	f7ff ff47 	bl	8001eec <SPI_WaitFlagStateUntilTimeout>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d016      	beq.n	8002092 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002068:	f043 0220 	orr.w	r2, r3, #32
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e00f      	b.n	8002094 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00a      	beq.n	8002090 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	3b01      	subs	r3, #1
 800207e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800208a:	2b80      	cmp	r3, #128	@ 0x80
 800208c:	d0f2      	beq.n	8002074 <SPI_EndRxTxTransaction+0x78>
 800208e:	e000      	b.n	8002092 <SPI_EndRxTxTransaction+0x96>
        break;
 8002090:	bf00      	nop
  }

  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20000000 	.word	0x20000000
 80020a0:	165e9f81 	.word	0x165e9f81

080020a4 <writecommand>:
* Input          : command byte to write
* Output         : None
* Return         : None
*******************************************************************************/
void writecommand(unsigned char cmdout)           
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	71fb      	strb	r3, [r7, #7]

	//HAL_SPI_Transmit(&hspi1, &cmdout, 1, 100); // HAL_ERROR

	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1); // nCS = 1

	ST7735_D_nC_PORT->BSRR = (uint32_t)ST7735_D_nC_PIN << 16 ;// D/nC = 0  commande
 80020ae:	4b0a      	ldr	r3, [pc, #40]	@ (80020d8 <writecommand+0x34>)
 80020b0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80020b4:	619a      	str	r2, [r3, #24]
	ST7735_nCS_PORT->BSRR = (uint32_t)ST7735_nCS_PIN << 16 ;// nCS = 0
 80020b6:	4b08      	ldr	r3, [pc, #32]	@ (80020d8 <writecommand+0x34>)
 80020b8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80020bc:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(&hspi1, &cmdout, 1, 100); //
 80020be:	1df9      	adds	r1, r7, #7
 80020c0:	2364      	movs	r3, #100	@ 0x64
 80020c2:	2201      	movs	r2, #1
 80020c4:	4805      	ldr	r0, [pc, #20]	@ (80020dc <writecommand+0x38>)
 80020c6:	f7ff fdcc 	bl	8001c62 <HAL_SPI_Transmit>
	ST7735_nCS_PORT->BSRR = (uint32_t)ST7735_nCS_PIN;// nCS = 1
 80020ca:	4b03      	ldr	r3, [pc, #12]	@ (80020d8 <writecommand+0x34>)
 80020cc:	2202      	movs	r2, #2
 80020ce:	619a      	str	r2, [r3, #24]

}
 80020d0:	bf00      	nop
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40020800 	.word	0x40020800
 80020dc:	20000028 	.word	0x20000028

080020e0 <writedata>:
* Input          : data byte to write
* Output         : None
* Return         : None
*******************************************************************************/
void writedata(unsigned char dataout)
{             
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	71fb      	strb	r3, [r7, #7]

	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1); // nCS = 1



	ST7735_D_nC_PORT->BSRR = (uint32_t)ST7735_D_nC_PIN ;// D/nC = 1  data
 80020ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002114 <writedata+0x34>)
 80020ec:	2204      	movs	r2, #4
 80020ee:	619a      	str	r2, [r3, #24]
		ST7735_nCS_PORT->BSRR = (uint32_t)ST7735_nCS_PIN << 16 ;// nCS = 0
 80020f0:	4b08      	ldr	r3, [pc, #32]	@ (8002114 <writedata+0x34>)
 80020f2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80020f6:	619a      	str	r2, [r3, #24]
		HAL_SPI_Transmit(&hspi1, &dataout, 1, 100);  //
 80020f8:	1df9      	adds	r1, r7, #7
 80020fa:	2364      	movs	r3, #100	@ 0x64
 80020fc:	2201      	movs	r2, #1
 80020fe:	4806      	ldr	r0, [pc, #24]	@ (8002118 <writedata+0x38>)
 8002100:	f7ff fdaf 	bl	8001c62 <HAL_SPI_Transmit>
		ST7735_nCS_PORT->BSRR = (uint32_t)ST7735_nCS_PIN;// nCS = 1
 8002104:	4b03      	ldr	r3, [pc, #12]	@ (8002114 <writedata+0x34>)
 8002106:	2202      	movs	r2, #2
 8002108:	619a      	str	r2, [r3, #24]

}
 800210a:	bf00      	nop
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40020800 	.word	0x40020800
 8002118:	20000028 	.word	0x20000028

0800211c <commandList>:
* Input          : addr = pointer on command byte array
* Output         : None
* Return         : None
*******************************************************************************/
void commandList(const uint8_t *addr)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint8_t  numCommands, numArgs;
  uint16_t ms;

  numCommands = pgm_read_byte(addr++);   // Number of commands to follow
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	1c5a      	adds	r2, r3, #1
 8002128:	607a      	str	r2, [r7, #4]
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	73fb      	strb	r3, [r7, #15]
  while(numCommands--) 
 800212e:	e033      	b.n	8002198 <commandList+0x7c>
  {                 // For each command...
    writecommand(pgm_read_byte(addr++)); //   Read, issue command
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	1c5a      	adds	r2, r3, #1
 8002134:	607a      	str	r2, [r7, #4]
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff ffb3 	bl	80020a4 <writecommand>
    numArgs  = pgm_read_byte(addr++);    //   Number of args to follow
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	1c5a      	adds	r2, r3, #1
 8002142:	607a      	str	r2, [r7, #4]
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	73bb      	strb	r3, [r7, #14]
    ms       = numArgs & DELAY;          //   If hibit set, delay follows args
 8002148:	7bbb      	ldrb	r3, [r7, #14]
 800214a:	b29b      	uxth	r3, r3
 800214c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002150:	81bb      	strh	r3, [r7, #12]
    numArgs &= ~DELAY;                   //   Mask out delay bit
 8002152:	7bbb      	ldrb	r3, [r7, #14]
 8002154:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002158:	73bb      	strb	r3, [r7, #14]
    while(numArgs--) {                   //   For each argument...
 800215a:	e006      	b.n	800216a <commandList+0x4e>
      writedata(pgm_read_byte(addr++));  //     Read, issue argument
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	1c5a      	adds	r2, r3, #1
 8002160:	607a      	str	r2, [r7, #4]
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff ffbb 	bl	80020e0 <writedata>
    while(numArgs--) {                   //   For each argument...
 800216a:	7bbb      	ldrb	r3, [r7, #14]
 800216c:	1e5a      	subs	r2, r3, #1
 800216e:	73ba      	strb	r2, [r7, #14]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1f3      	bne.n	800215c <commandList+0x40>
    }

    if(ms) {
 8002174:	89bb      	ldrh	r3, [r7, #12]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00e      	beq.n	8002198 <commandList+0x7c>
      ms = pgm_read_byte(addr++); // Read post-command delay time (ms)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	1c5a      	adds	r2, r3, #1
 800217e:	607a      	str	r2, [r7, #4]
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	81bb      	strh	r3, [r7, #12]
      if(ms == 255) ms = 500;     // If 255, delay for 500 ms
 8002184:	89bb      	ldrh	r3, [r7, #12]
 8002186:	2bff      	cmp	r3, #255	@ 0xff
 8002188:	d102      	bne.n	8002190 <commandList+0x74>
 800218a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800218e:	81bb      	strh	r3, [r7, #12]
  	HAL_Delay(500);
 8002190:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002194:	f7fe fcac 	bl	8000af0 <HAL_Delay>
  while(numCommands--) 
 8002198:	7bfb      	ldrb	r3, [r7, #15]
 800219a:	1e5a      	subs	r2, r3, #1
 800219c:	73fa      	strb	r2, [r7, #15]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1c6      	bne.n	8002130 <commandList+0x14>
    }
  }
}
 80021a2:	bf00      	nop
 80021a4:	bf00      	nop
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <setAddrWindow>:
*          	 : y2 vertical position = y1 to ST7735_TFTHEIGHT-1-y1
* Output         : None
* Return         : None
*******************************************************************************/
void setAddrWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 80021ac:	b590      	push	{r4, r7, lr}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4604      	mov	r4, r0
 80021b4:	4608      	mov	r0, r1
 80021b6:	4611      	mov	r1, r2
 80021b8:	461a      	mov	r2, r3
 80021ba:	4623      	mov	r3, r4
 80021bc:	71fb      	strb	r3, [r7, #7]
 80021be:	4603      	mov	r3, r0
 80021c0:	71bb      	strb	r3, [r7, #6]
 80021c2:	460b      	mov	r3, r1
 80021c4:	717b      	strb	r3, [r7, #5]
 80021c6:	4613      	mov	r3, r2
 80021c8:	713b      	strb	r3, [r7, #4]

  writecommand(ST7735_CASET); // Column addr set
 80021ca:	202a      	movs	r0, #42	@ 0x2a
 80021cc:	f7ff ff6a 	bl	80020a4 <writecommand>
  writedata(0x00);
 80021d0:	2000      	movs	r0, #0
 80021d2:	f7ff ff85 	bl	80020e0 <writedata>
  writedata(x0);     // XSTART 
 80021d6:	79fb      	ldrb	r3, [r7, #7]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff ff81 	bl	80020e0 <writedata>
  writedata(0x00);
 80021de:	2000      	movs	r0, #0
 80021e0:	f7ff ff7e 	bl	80020e0 <writedata>
  writedata(x1);     // XEND
 80021e4:	797b      	ldrb	r3, [r7, #5]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff ff7a 	bl	80020e0 <writedata>

  writecommand(ST7735_RASET); // Row addr set
 80021ec:	202b      	movs	r0, #43	@ 0x2b
 80021ee:	f7ff ff59 	bl	80020a4 <writecommand>
  writedata(0x00);
 80021f2:	2000      	movs	r0, #0
 80021f4:	f7ff ff74 	bl	80020e0 <writedata>
  writedata(y0);     // YSTART
 80021f8:	79bb      	ldrb	r3, [r7, #6]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff ff70 	bl	80020e0 <writedata>
  writedata(0x00);
 8002200:	2000      	movs	r0, #0
 8002202:	f7ff ff6d 	bl	80020e0 <writedata>
  writedata(y1);     // YEND
 8002206:	793b      	ldrb	r3, [r7, #4]
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff ff69 	bl	80020e0 <writedata>

  writecommand(ST7735_RAMWR); // write to RAM
 800220e:	202c      	movs	r0, #44	@ 0x2c
 8002210:	f7ff ff48 	bl	80020a4 <writecommand>
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	bd90      	pop	{r4, r7, pc}

0800221c <init_TFT>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void init_TFT( void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1); // nRESET = 1
	attend_500ms();
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1); // nCS = 1*/

	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1); // DC= 1
	ST7735_D_nC_PORT->BSRR = (uint32_t)ST7735_D_nC_PIN ;// D/nC = 1  data
 8002222:	4b1e      	ldr	r3, [pc, #120]	@ (800229c <init_TFT+0x80>)
 8002224:	2204      	movs	r2, #4
 8002226:	619a      	str	r2, [r3, #24]
	ST7735_RST_PORT->BSRR = (uint32_t)ST7735_RST_PIN;// nRESET = 1
 8002228:	4b1d      	ldr	r3, [pc, #116]	@ (80022a0 <init_TFT+0x84>)
 800222a:	2204      	movs	r2, #4
 800222c:	619a      	str	r2, [r3, #24]
	ST7735_nCS_PORT->BSRR = (uint32_t)ST7735_nCS_PIN<<16;// nCS = 0
 800222e:	4b1b      	ldr	r3, [pc, #108]	@ (800229c <init_TFT+0x80>)
 8002230:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002234:	619a      	str	r2, [r3, #24]
	HAL_Delay(500);
 8002236:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800223a:	f7fe fc59 	bl	8000af0 <HAL_Delay>
	ST7735_RST_PORT->BSRR = (uint32_t)ST7735_RST_PIN<<16;// nRESET = 0
 800223e:	4b18      	ldr	r3, [pc, #96]	@ (80022a0 <init_TFT+0x84>)
 8002240:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002244:	619a      	str	r2, [r3, #24]
	HAL_Delay(500);
 8002246:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800224a:	f7fe fc51 	bl	8000af0 <HAL_Delay>
	ST7735_RST_PORT->BSRR = (uint32_t)ST7735_RST_PIN;// nRESET = 1
 800224e:	4b14      	ldr	r3, [pc, #80]	@ (80022a0 <init_TFT+0x84>)
 8002250:	2204      	movs	r2, #4
 8002252:	619a      	str	r2, [r3, #24]
	HAL_Delay(500);
 8002254:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002258:	f7fe fc4a 	bl	8000af0 <HAL_Delay>
	ST7735_nCS_PORT->BSRR = (uint32_t)ST7735_nCS_PIN;// nCS = 1
 800225c:	4b0f      	ldr	r3, [pc, #60]	@ (800229c <init_TFT+0x80>)
 800225e:	2202      	movs	r2, #2
 8002260:	619a      	str	r2, [r3, #24]
	
	// initialization instruction 
	commandList(Rcmd1);
 8002262:	4810      	ldr	r0, [pc, #64]	@ (80022a4 <init_TFT+0x88>)
 8002264:	f7ff ff5a 	bl	800211c <commandList>
	commandList(Rcmd2red);
 8002268:	480f      	ldr	r0, [pc, #60]	@ (80022a8 <init_TFT+0x8c>)
 800226a:	f7ff ff57 	bl	800211c <commandList>
	commandList(Rcmd3);
 800226e:	480f      	ldr	r0, [pc, #60]	@ (80022ac <init_TFT+0x90>)
 8002270:	f7ff ff54 	bl	800211c <commandList>

 	writecommand(ST7735_MADCTL);
 8002274:	2036      	movs	r0, #54	@ 0x36
 8002276:	f7ff ff15 	bl	80020a4 <writecommand>
	writedata(0xC0);
 800227a:	20c0      	movs	r0, #192	@ 0xc0
 800227c:	f7ff ff30 	bl	80020e0 <writedata>
   
	// all display background is black
	fillRect_TFT(0, 0,  ST7735_TFTWIDTH, ST7735_TFTHEIGHT_18, ST7735_BLACK);
 8002280:	2300      	movs	r3, #0
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	23a0      	movs	r3, #160	@ 0xa0
 8002286:	2280      	movs	r2, #128	@ 0x80
 8002288:	2100      	movs	r1, #0
 800228a:	2000      	movs	r0, #0
 800228c:	f000 f856 	bl	800233c <fillRect_TFT>
	
	// display LOGO
	displayLogo_TFT();
 8002290:	f000 f998 	bl	80025c4 <displayLogo_TFT>
}
 8002294:	bf00      	nop
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40020800 	.word	0x40020800
 80022a0:	40020c00 	.word	0x40020c00
 80022a4:	080027c4 	.word	0x080027c4
 80022a8:	08002800 	.word	0x08002800
 80022ac:	08002810 	.word	0x08002810

080022b0 <drawPixel_TFT>:
*          	 : color = 16bits RGB=(565) soit RRRRRGGGGGGGBBBBB
* Output         : None
* Return         : None
*******************************************************************************/
void drawPixel_TFT(uint16_t x, uint16_t y, uint16_t color) 
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	80fb      	strh	r3, [r7, #6]
 80022ba:	460b      	mov	r3, r1
 80022bc:	80bb      	strh	r3, [r7, #4]
 80022be:	4613      	mov	r3, r2
 80022c0:	807b      	strh	r3, [r7, #2]
	 uint8_t hi, lo;
	
	// rudimentary clipping (drawChar w/big text requires this)
	if((x >= ST7735_TFTWIDTH) || (y >= ST7735_TFTHEIGHT_18)) return;
 80022c2:	88fb      	ldrh	r3, [r7, #6]
 80022c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80022c6:	d831      	bhi.n	800232c <drawPixel_TFT+0x7c>
 80022c8:	88bb      	ldrh	r3, [r7, #4]
 80022ca:	2b9f      	cmp	r3, #159	@ 0x9f
 80022cc:	d82e      	bhi.n	800232c <drawPixel_TFT+0x7c>
	
	setAddrWindow(x, y, x+1, y+1);
 80022ce:	88fb      	ldrh	r3, [r7, #6]
 80022d0:	b2d8      	uxtb	r0, r3
 80022d2:	88bb      	ldrh	r3, [r7, #4]
 80022d4:	b2d9      	uxtb	r1, r3
 80022d6:	88fb      	ldrh	r3, [r7, #6]
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	3301      	adds	r3, #1
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	88bb      	ldrh	r3, [r7, #4]
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	3301      	adds	r3, #1
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	f7ff ff61 	bl	80021ac <setAddrWindow>
	
	hi = color >> 8;
 80022ea:	887b      	ldrh	r3, [r7, #2]
 80022ec:	0a1b      	lsrs	r3, r3, #8
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	73fb      	strb	r3, [r7, #15]
	lo = color ;
 80022f4:	887b      	ldrh	r3, [r7, #2]
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&hspi1, &lo, 1, 100); //

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1); // nCS = 1*/


	ST7735_D_nC_PORT->BSRR = (uint32_t)ST7735_D_nC_PIN ;// D/nC = 1  data
 80022fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002334 <drawPixel_TFT+0x84>)
 80022fc:	2204      	movs	r2, #4
 80022fe:	619a      	str	r2, [r3, #24]
	ST7735_nCS_PORT->BSRR = (uint32_t)ST7735_nCS_PIN<<16;// nCS = 0
 8002300:	4b0c      	ldr	r3, [pc, #48]	@ (8002334 <drawPixel_TFT+0x84>)
 8002302:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002306:	619a      	str	r2, [r3, #24]

	HAL_SPI_Transmit(&hspi1, &hi, 1, 100); //
 8002308:	f107 010f 	add.w	r1, r7, #15
 800230c:	2364      	movs	r3, #100	@ 0x64
 800230e:	2201      	movs	r2, #1
 8002310:	4809      	ldr	r0, [pc, #36]	@ (8002338 <drawPixel_TFT+0x88>)
 8002312:	f7ff fca6 	bl	8001c62 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &lo, 1, 100); //
 8002316:	f107 010e 	add.w	r1, r7, #14
 800231a:	2364      	movs	r3, #100	@ 0x64
 800231c:	2201      	movs	r2, #1
 800231e:	4806      	ldr	r0, [pc, #24]	@ (8002338 <drawPixel_TFT+0x88>)
 8002320:	f7ff fc9f 	bl	8001c62 <HAL_SPI_Transmit>

	ST7735_nCS_PORT->BSRR = (uint32_t)ST7735_nCS_PIN;// nCS = 1
 8002324:	4b03      	ldr	r3, [pc, #12]	@ (8002334 <drawPixel_TFT+0x84>)
 8002326:	2202      	movs	r2, #2
 8002328:	619a      	str	r2, [r3, #24]
 800232a:	e000      	b.n	800232e <drawPixel_TFT+0x7e>
	if((x >= ST7735_TFTWIDTH) || (y >= ST7735_TFTHEIGHT_18)) return;
 800232c:	bf00      	nop
}
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40020800 	.word	0x40020800
 8002338:	20000028 	.word	0x20000028

0800233c <fillRect_TFT>:
*          	 : color = 16bits RGB(565) soit RRRRRGGGGGGGBBBBB
* Output         : None
* Return         : None
*******************************************************************************/
void fillRect_TFT(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) 
{
 800233c:	b590      	push	{r4, r7, lr}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	4604      	mov	r4, r0
 8002344:	4608      	mov	r0, r1
 8002346:	4611      	mov	r1, r2
 8002348:	461a      	mov	r2, r3
 800234a:	4623      	mov	r3, r4
 800234c:	80fb      	strh	r3, [r7, #6]
 800234e:	4603      	mov	r3, r0
 8002350:	80bb      	strh	r3, [r7, #4]
 8002352:	460b      	mov	r3, r1
 8002354:	807b      	strh	r3, [r7, #2]
 8002356:	4613      	mov	r3, r2
 8002358:	803b      	strh	r3, [r7, #0]
	 uint8_t hi, lo;
	
	// rudimentary clipping (drawChar w/big text requires this)
	if((x >= ST7735_TFTWIDTH) || (y >= ST7735_TFTHEIGHT_18)) return;
 800235a:	88fb      	ldrh	r3, [r7, #6]
 800235c:	2b7f      	cmp	r3, #127	@ 0x7f
 800235e:	d85e      	bhi.n	800241e <fillRect_TFT+0xe2>
 8002360:	88bb      	ldrh	r3, [r7, #4]
 8002362:	2b9f      	cmp	r3, #159	@ 0x9f
 8002364:	d85b      	bhi.n	800241e <fillRect_TFT+0xe2>
	
	if((x + w - 1) >= ST7735_TFTWIDTH)  w = ST7735_TFTWIDTH  - x;
 8002366:	88fa      	ldrh	r2, [r7, #6]
 8002368:	887b      	ldrh	r3, [r7, #2]
 800236a:	4413      	add	r3, r2
 800236c:	2b80      	cmp	r3, #128	@ 0x80
 800236e:	dd03      	ble.n	8002378 <fillRect_TFT+0x3c>
 8002370:	88fb      	ldrh	r3, [r7, #6]
 8002372:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8002376:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_TFTHEIGHT_18) h = ST7735_TFTHEIGHT_18 - y;
 8002378:	88ba      	ldrh	r2, [r7, #4]
 800237a:	883b      	ldrh	r3, [r7, #0]
 800237c:	4413      	add	r3, r2
 800237e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002380:	dd03      	ble.n	800238a <fillRect_TFT+0x4e>
 8002382:	88bb      	ldrh	r3, [r7, #4]
 8002384:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 8002388:	803b      	strh	r3, [r7, #0]
	
	// select window  
	setAddrWindow(x, y, x+w-1, y+h-1);
 800238a:	88fb      	ldrh	r3, [r7, #6]
 800238c:	b2d8      	uxtb	r0, r3
 800238e:	88bb      	ldrh	r3, [r7, #4]
 8002390:	b2d9      	uxtb	r1, r3
 8002392:	88fb      	ldrh	r3, [r7, #6]
 8002394:	b2da      	uxtb	r2, r3
 8002396:	887b      	ldrh	r3, [r7, #2]
 8002398:	b2db      	uxtb	r3, r3
 800239a:	4413      	add	r3, r2
 800239c:	b2db      	uxtb	r3, r3
 800239e:	3b01      	subs	r3, #1
 80023a0:	b2dc      	uxtb	r4, r3
 80023a2:	88bb      	ldrh	r3, [r7, #4]
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	883b      	ldrh	r3, [r7, #0]
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	4413      	add	r3, r2
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	3b01      	subs	r3, #1
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	4622      	mov	r2, r4
 80023b4:	f7ff fefa 	bl	80021ac <setAddrWindow>
	
	hi = color >> 8;
 80023b8:	8c3b      	ldrh	r3, [r7, #32]
 80023ba:	0a1b      	lsrs	r3, r3, #8
 80023bc:	b29b      	uxth	r3, r3
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	73fb      	strb	r3, [r7, #15]
	lo = color ;
 80023c2:	8c3b      	ldrh	r3, [r7, #32]
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	73bb      	strb	r3, [r7, #14]
	*/

	/*HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1); // D/nC = 1  data
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0); // nCS = 0*/

	ST7735_D_nC_PORT->BSRR = (uint32_t)ST7735_D_nC_PIN ;// D/nC = 1  data
 80023c8:	4b17      	ldr	r3, [pc, #92]	@ (8002428 <fillRect_TFT+0xec>)
 80023ca:	2204      	movs	r2, #4
 80023cc:	619a      	str	r2, [r3, #24]
	ST7735_nCS_PORT->BSRR = (uint32_t)ST7735_nCS_PIN<<16;// nCS = 0
 80023ce:	4b16      	ldr	r3, [pc, #88]	@ (8002428 <fillRect_TFT+0xec>)
 80023d0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80023d4:	619a      	str	r2, [r3, #24]

	for(y=h; y>0; y--)
 80023d6:	883b      	ldrh	r3, [r7, #0]
 80023d8:	80bb      	strh	r3, [r7, #4]
 80023da:	e019      	b.n	8002410 <fillRect_TFT+0xd4>
	{
		for(x=w; x>0; x--)
 80023dc:	887b      	ldrh	r3, [r7, #2]
 80023de:	80fb      	strh	r3, [r7, #6]
 80023e0:	e010      	b.n	8002404 <fillRect_TFT+0xc8>
		{

			HAL_SPI_Transmit(&hspi1, &hi, 1, 100); //
 80023e2:	f107 010f 	add.w	r1, r7, #15
 80023e6:	2364      	movs	r3, #100	@ 0x64
 80023e8:	2201      	movs	r2, #1
 80023ea:	4810      	ldr	r0, [pc, #64]	@ (800242c <fillRect_TFT+0xf0>)
 80023ec:	f7ff fc39 	bl	8001c62 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi1, &lo, 1, 100); //
 80023f0:	f107 010e 	add.w	r1, r7, #14
 80023f4:	2364      	movs	r3, #100	@ 0x64
 80023f6:	2201      	movs	r2, #1
 80023f8:	480c      	ldr	r0, [pc, #48]	@ (800242c <fillRect_TFT+0xf0>)
 80023fa:	f7ff fc32 	bl	8001c62 <HAL_SPI_Transmit>
		for(x=w; x>0; x--)
 80023fe:	88fb      	ldrh	r3, [r7, #6]
 8002400:	3b01      	subs	r3, #1
 8002402:	80fb      	strh	r3, [r7, #6]
 8002404:	88fb      	ldrh	r3, [r7, #6]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1eb      	bne.n	80023e2 <fillRect_TFT+0xa6>
	for(y=h; y>0; y--)
 800240a:	88bb      	ldrh	r3, [r7, #4]
 800240c:	3b01      	subs	r3, #1
 800240e:	80bb      	strh	r3, [r7, #4]
 8002410:	88bb      	ldrh	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1e2      	bne.n	80023dc <fillRect_TFT+0xa0>

		 }
	}

	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1); // nCS = 1
	ST7735_nCS_PORT->BSRR = (uint32_t)ST7735_nCS_PIN;// nCS = 1
 8002416:	4b04      	ldr	r3, [pc, #16]	@ (8002428 <fillRect_TFT+0xec>)
 8002418:	2202      	movs	r2, #2
 800241a:	619a      	str	r2, [r3, #24]
 800241c:	e000      	b.n	8002420 <fillRect_TFT+0xe4>
	if((x >= ST7735_TFTWIDTH) || (y >= ST7735_TFTHEIGHT_18)) return;
 800241e:	bf00      	nop
	
}
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	bd90      	pop	{r4, r7, pc}
 8002426:	bf00      	nop
 8002428:	40020800 	.word	0x40020800
 800242c:	20000028 	.word	0x20000028

08002430 <displayChar_TFT>:
*          	 : size = 1 to 10
* Output         : None
* Return         : None
*******************************************************************************/
void displayChar_TFT(uint16_t x, uint16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 8002430:	b590      	push	{r4, r7, lr}
 8002432:	b087      	sub	sp, #28
 8002434:	af02      	add	r7, sp, #8
 8002436:	4604      	mov	r4, r0
 8002438:	4608      	mov	r0, r1
 800243a:	4611      	mov	r1, r2
 800243c:	461a      	mov	r2, r3
 800243e:	4623      	mov	r3, r4
 8002440:	80fb      	strh	r3, [r7, #6]
 8002442:	4603      	mov	r3, r0
 8002444:	80bb      	strh	r3, [r7, #4]
 8002446:	460b      	mov	r3, r1
 8002448:	70fb      	strb	r3, [r7, #3]
 800244a:	4613      	mov	r3, r2
 800244c:	803b      	strh	r3, [r7, #0]
	uint8_t i,j,line;


  if((x >= ST7735_TFTWIDTH) || // Clip right
 800244e:	88fb      	ldrh	r3, [r7, #6]
 8002450:	2b7f      	cmp	r3, #127	@ 0x7f
 8002452:	f200 80b1 	bhi.w	80025b8 <displayChar_TFT+0x188>
 8002456:	88bb      	ldrh	r3, [r7, #4]
 8002458:	2b9f      	cmp	r3, #159	@ 0x9f
 800245a:	f200 80ad 	bhi.w	80025b8 <displayChar_TFT+0x188>
     (y >= ST7735_TFTHEIGHT_18) || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
 800245e:	88f9      	ldrh	r1, [r7, #6]
 8002460:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002464:	4613      	mov	r3, r2
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	4413      	add	r3, r2
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	440b      	add	r3, r1
     (y >= ST7735_TFTHEIGHT_18) || // Clip bottom
 800246e:	2b00      	cmp	r3, #0
 8002470:	f340 80a2 	ble.w	80025b8 <displayChar_TFT+0x188>
     ((y + 8 * size - 1) < 0))   // Clip top
 8002474:	88ba      	ldrh	r2, [r7, #4]
 8002476:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	4413      	add	r3, r2
     ((x + 6 * size - 1) < 0) || // Clip left
 800247e:	2b00      	cmp	r3, #0
 8002480:	f340 809a 	ble.w	80025b8 <displayChar_TFT+0x188>
    return;

  for (i=0; i<6; i++ )
 8002484:	2300      	movs	r3, #0
 8002486:	73fb      	strb	r3, [r7, #15]
 8002488:	e091      	b.n	80025ae <displayChar_TFT+0x17e>
  {
    if (i == 5) 
 800248a:	7bfb      	ldrb	r3, [r7, #15]
 800248c:	2b05      	cmp	r3, #5
 800248e:	d102      	bne.n	8002496 <displayChar_TFT+0x66>
      line = 0x0;
 8002490:	2300      	movs	r3, #0
 8002492:	737b      	strb	r3, [r7, #13]
 8002494:	e00a      	b.n	80024ac <displayChar_TFT+0x7c>
    else 
      line = pgm_read_byte(tab_font + (c*5) + i);
 8002496:	78fa      	ldrb	r2, [r7, #3]
 8002498:	4613      	mov	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4413      	add	r3, r2
 800249e:	461a      	mov	r2, r3
 80024a0:	7bfb      	ldrb	r3, [r7, #15]
 80024a2:	4413      	add	r3, r2
 80024a4:	4a46      	ldr	r2, [pc, #280]	@ (80025c0 <displayChar_TFT+0x190>)
 80024a6:	4413      	add	r3, r2
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	737b      	strb	r3, [r7, #13]
    
	for ( j = 0; j<8; j++)
 80024ac:	2300      	movs	r3, #0
 80024ae:	73bb      	strb	r3, [r7, #14]
 80024b0:	e077      	b.n	80025a2 <displayChar_TFT+0x172>
	{
		if (line & 0x1)
 80024b2:	7b7b      	ldrb	r3, [r7, #13]
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d034      	beq.n	8002526 <displayChar_TFT+0xf6>
		{
			if (size == 1) // default size
 80024bc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d10e      	bne.n	80024e2 <displayChar_TFT+0xb2>
			    drawPixel_TFT(x+i, y+j, color);
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	88fb      	ldrh	r3, [r7, #6]
 80024ca:	4413      	add	r3, r2
 80024cc:	b298      	uxth	r0, r3
 80024ce:	7bbb      	ldrb	r3, [r7, #14]
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	88bb      	ldrh	r3, [r7, #4]
 80024d4:	4413      	add	r3, r2
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	883a      	ldrh	r2, [r7, #0]
 80024da:	4619      	mov	r1, r3
 80024dc:	f7ff fee8 	bl	80022b0 <drawPixel_TFT>
 80024e0:	e059      	b.n	8002596 <displayChar_TFT+0x166>
			else 
			{  // big size
			    fillRect_TFT(x+(i*size), y+(j*size), size, size, color);
 80024e2:	7bfb      	ldrb	r3, [r7, #15]
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80024ea:	b292      	uxth	r2, r2
 80024ec:	fb02 f303 	mul.w	r3, r2, r3
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	88fb      	ldrh	r3, [r7, #6]
 80024f4:	4413      	add	r3, r2
 80024f6:	b298      	uxth	r0, r3
 80024f8:	7bbb      	ldrb	r3, [r7, #14]
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002500:	b292      	uxth	r2, r2
 8002502:	fb02 f303 	mul.w	r3, r2, r3
 8002506:	b29a      	uxth	r2, r3
 8002508:	88bb      	ldrh	r3, [r7, #4]
 800250a:	4413      	add	r3, r2
 800250c:	b299      	uxth	r1, r3
 800250e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002512:	b29a      	uxth	r2, r3
 8002514:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002518:	b29c      	uxth	r4, r3
 800251a:	883b      	ldrh	r3, [r7, #0]
 800251c:	9300      	str	r3, [sp, #0]
 800251e:	4623      	mov	r3, r4
 8002520:	f7ff ff0c 	bl	800233c <fillRect_TFT>
 8002524:	e037      	b.n	8002596 <displayChar_TFT+0x166>
			} 
		} 
		else if (bg != color)
 8002526:	8c3a      	ldrh	r2, [r7, #32]
 8002528:	883b      	ldrh	r3, [r7, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d033      	beq.n	8002596 <displayChar_TFT+0x166>
		{
		  if (size == 1) // default size
 800252e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002532:	2b01      	cmp	r3, #1
 8002534:	d10e      	bne.n	8002554 <displayChar_TFT+0x124>
		    drawPixel_TFT(x+i, y+j, bg);
 8002536:	7bfb      	ldrb	r3, [r7, #15]
 8002538:	b29a      	uxth	r2, r3
 800253a:	88fb      	ldrh	r3, [r7, #6]
 800253c:	4413      	add	r3, r2
 800253e:	b298      	uxth	r0, r3
 8002540:	7bbb      	ldrb	r3, [r7, #14]
 8002542:	b29a      	uxth	r2, r3
 8002544:	88bb      	ldrh	r3, [r7, #4]
 8002546:	4413      	add	r3, r2
 8002548:	b29b      	uxth	r3, r3
 800254a:	8c3a      	ldrh	r2, [r7, #32]
 800254c:	4619      	mov	r1, r3
 800254e:	f7ff feaf 	bl	80022b0 <drawPixel_TFT>
 8002552:	e020      	b.n	8002596 <displayChar_TFT+0x166>
		  else 
		  {  // big size
		    fillRect_TFT(x+i*size, y+j*size, size, size, bg);
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	b29b      	uxth	r3, r3
 8002558:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800255c:	b292      	uxth	r2, r2
 800255e:	fb02 f303 	mul.w	r3, r2, r3
 8002562:	b29a      	uxth	r2, r3
 8002564:	88fb      	ldrh	r3, [r7, #6]
 8002566:	4413      	add	r3, r2
 8002568:	b298      	uxth	r0, r3
 800256a:	7bbb      	ldrb	r3, [r7, #14]
 800256c:	b29b      	uxth	r3, r3
 800256e:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002572:	b292      	uxth	r2, r2
 8002574:	fb02 f303 	mul.w	r3, r2, r3
 8002578:	b29a      	uxth	r2, r3
 800257a:	88bb      	ldrh	r3, [r7, #4]
 800257c:	4413      	add	r3, r2
 800257e:	b299      	uxth	r1, r3
 8002580:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002584:	b29a      	uxth	r2, r3
 8002586:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800258a:	b29c      	uxth	r4, r3
 800258c:	8c3b      	ldrh	r3, [r7, #32]
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	4623      	mov	r3, r4
 8002592:	f7ff fed3 	bl	800233c <fillRect_TFT>
		  }
		}
		line = line >> 1;
 8002596:	7b7b      	ldrb	r3, [r7, #13]
 8002598:	085b      	lsrs	r3, r3, #1
 800259a:	737b      	strb	r3, [r7, #13]
	for ( j = 0; j<8; j++)
 800259c:	7bbb      	ldrb	r3, [r7, #14]
 800259e:	3301      	adds	r3, #1
 80025a0:	73bb      	strb	r3, [r7, #14]
 80025a2:	7bbb      	ldrb	r3, [r7, #14]
 80025a4:	2b07      	cmp	r3, #7
 80025a6:	d984      	bls.n	80024b2 <displayChar_TFT+0x82>
  for (i=0; i<6; i++ )
 80025a8:	7bfb      	ldrb	r3, [r7, #15]
 80025aa:	3301      	adds	r3, #1
 80025ac:	73fb      	strb	r3, [r7, #15]
 80025ae:	7bfb      	ldrb	r3, [r7, #15]
 80025b0:	2b05      	cmp	r3, #5
 80025b2:	f67f af6a 	bls.w	800248a <displayChar_TFT+0x5a>
 80025b6:	e000      	b.n	80025ba <displayChar_TFT+0x18a>
    return;
 80025b8:	bf00      	nop
	}
  }
}
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd90      	pop	{r4, r7, pc}
 80025c0:	0800283c 	.word	0x0800283c

080025c4 <displayLogo_TFT>:
* Input          : 
* Output         : None
* Return         : None
*******************************************************************************/
void displayLogo_TFT( void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
	uint8_t i,j,k,line;
	uint16_t color=ST7735_WHITE;
 80025ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80025ce:	807b      	strh	r3, [r7, #2]


                                                                    
  for(i=0;i<=120;i++)
 80025d0:	2300      	movs	r3, #0
 80025d2:	71fb      	strb	r3, [r7, #7]
 80025d4:	e09e      	b.n	8002714 <displayLogo_TFT+0x150>
  {

  for(j=0;j<= 1;j++)
 80025d6:	2300      	movs	r3, #0
 80025d8:	71bb      	strb	r3, [r7, #6]
 80025da:	e02b      	b.n	8002634 <displayLogo_TFT+0x70>
  {
	line=(ALL_IS_mono_120[i+120*j]);
 80025dc:	79f9      	ldrb	r1, [r7, #7]
 80025de:	79ba      	ldrb	r2, [r7, #6]
 80025e0:	4613      	mov	r3, r2
 80025e2:	011b      	lsls	r3, r3, #4
 80025e4:	1a9b      	subs	r3, r3, r2
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	440b      	add	r3, r1
 80025ea:	4a4f      	ldr	r2, [pc, #316]	@ (8002728 <displayLogo_TFT+0x164>)
 80025ec:	5cd3      	ldrb	r3, [r2, r3]
 80025ee:	713b      	strb	r3, [r7, #4]
	for ( k = 0; k<8; k++)
 80025f0:	2300      	movs	r3, #0
 80025f2:	717b      	strb	r3, [r7, #5]
 80025f4:	e018      	b.n	8002628 <displayLogo_TFT+0x64>
	{
		if (line & 0x1)                                                                                                                            
 80025f6:	793b      	ldrb	r3, [r7, #4]
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00d      	beq.n	800261c <displayLogo_TFT+0x58>
		{
			
			drawPixel_TFT(i, j*8+k, color);
 8002600:	79fb      	ldrb	r3, [r7, #7]
 8002602:	b298      	uxth	r0, r3
 8002604:	79bb      	ldrb	r3, [r7, #6]
 8002606:	b29b      	uxth	r3, r3
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	b29a      	uxth	r2, r3
 800260c:	797b      	ldrb	r3, [r7, #5]
 800260e:	b29b      	uxth	r3, r3
 8002610:	4413      	add	r3, r2
 8002612:	b29b      	uxth	r3, r3
 8002614:	887a      	ldrh	r2, [r7, #2]
 8002616:	4619      	mov	r1, r3
 8002618:	f7ff fe4a 	bl	80022b0 <drawPixel_TFT>
		}
		line = line >> 1;
 800261c:	793b      	ldrb	r3, [r7, #4]
 800261e:	085b      	lsrs	r3, r3, #1
 8002620:	713b      	strb	r3, [r7, #4]
	for ( k = 0; k<8; k++)
 8002622:	797b      	ldrb	r3, [r7, #5]
 8002624:	3301      	adds	r3, #1
 8002626:	717b      	strb	r3, [r7, #5]
 8002628:	797b      	ldrb	r3, [r7, #5]
 800262a:	2b07      	cmp	r3, #7
 800262c:	d9e3      	bls.n	80025f6 <displayLogo_TFT+0x32>
  for(j=0;j<= 1;j++)
 800262e:	79bb      	ldrb	r3, [r7, #6]
 8002630:	3301      	adds	r3, #1
 8002632:	71bb      	strb	r3, [r7, #6]
 8002634:	79bb      	ldrb	r3, [r7, #6]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d9d0      	bls.n	80025dc <displayLogo_TFT+0x18>
	}
  }
  
  color=ST7735_RED;                    
 800263a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800263e:	807b      	strh	r3, [r7, #2]
  for(j=2;j<= 3;j++)
 8002640:	2302      	movs	r3, #2
 8002642:	71bb      	strb	r3, [r7, #6]
 8002644:	e02b      	b.n	800269e <displayLogo_TFT+0xda>
  {
	line=(ALL_IS_mono_120[i+120*j]);
 8002646:	79f9      	ldrb	r1, [r7, #7]
 8002648:	79ba      	ldrb	r2, [r7, #6]
 800264a:	4613      	mov	r3, r2
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	1a9b      	subs	r3, r3, r2
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	440b      	add	r3, r1
 8002654:	4a34      	ldr	r2, [pc, #208]	@ (8002728 <displayLogo_TFT+0x164>)
 8002656:	5cd3      	ldrb	r3, [r2, r3]
 8002658:	713b      	strb	r3, [r7, #4]
	for ( k = 0; k<8; k++)
 800265a:	2300      	movs	r3, #0
 800265c:	717b      	strb	r3, [r7, #5]
 800265e:	e018      	b.n	8002692 <displayLogo_TFT+0xce>
	{
		if (line & 0x1)                                                                                                                            
 8002660:	793b      	ldrb	r3, [r7, #4]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00d      	beq.n	8002686 <displayLogo_TFT+0xc2>
		{
			
		    drawPixel_TFT(i, j*8+k, color);
 800266a:	79fb      	ldrb	r3, [r7, #7]
 800266c:	b298      	uxth	r0, r3
 800266e:	79bb      	ldrb	r3, [r7, #6]
 8002670:	b29b      	uxth	r3, r3
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	b29a      	uxth	r2, r3
 8002676:	797b      	ldrb	r3, [r7, #5]
 8002678:	b29b      	uxth	r3, r3
 800267a:	4413      	add	r3, r2
 800267c:	b29b      	uxth	r3, r3
 800267e:	887a      	ldrh	r2, [r7, #2]
 8002680:	4619      	mov	r1, r3
 8002682:	f7ff fe15 	bl	80022b0 <drawPixel_TFT>
		}
		line = line >> 1;
 8002686:	793b      	ldrb	r3, [r7, #4]
 8002688:	085b      	lsrs	r3, r3, #1
 800268a:	713b      	strb	r3, [r7, #4]
	for ( k = 0; k<8; k++)
 800268c:	797b      	ldrb	r3, [r7, #5]
 800268e:	3301      	adds	r3, #1
 8002690:	717b      	strb	r3, [r7, #5]
 8002692:	797b      	ldrb	r3, [r7, #5]
 8002694:	2b07      	cmp	r3, #7
 8002696:	d9e3      	bls.n	8002660 <displayLogo_TFT+0x9c>
  for(j=2;j<= 3;j++)
 8002698:	79bb      	ldrb	r3, [r7, #6]
 800269a:	3301      	adds	r3, #1
 800269c:	71bb      	strb	r3, [r7, #6]
 800269e:	79bb      	ldrb	r3, [r7, #6]
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d9d0      	bls.n	8002646 <displayLogo_TFT+0x82>
	}
  }

  color=ST7735_WHITE;
 80026a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80026a8:	807b      	strh	r3, [r7, #2]
  for(j=4;j<= 5;j++)
 80026aa:	2304      	movs	r3, #4
 80026ac:	71bb      	strb	r3, [r7, #6]
 80026ae:	e02b      	b.n	8002708 <displayLogo_TFT+0x144>
  {
	line=(ALL_IS_mono_120[i+120*j]);
 80026b0:	79f9      	ldrb	r1, [r7, #7]
 80026b2:	79ba      	ldrb	r2, [r7, #6]
 80026b4:	4613      	mov	r3, r2
 80026b6:	011b      	lsls	r3, r3, #4
 80026b8:	1a9b      	subs	r3, r3, r2
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	440b      	add	r3, r1
 80026be:	4a1a      	ldr	r2, [pc, #104]	@ (8002728 <displayLogo_TFT+0x164>)
 80026c0:	5cd3      	ldrb	r3, [r2, r3]
 80026c2:	713b      	strb	r3, [r7, #4]
	for ( k = 0; k<8; k++)
 80026c4:	2300      	movs	r3, #0
 80026c6:	717b      	strb	r3, [r7, #5]
 80026c8:	e018      	b.n	80026fc <displayLogo_TFT+0x138>
	{
		if (line & 0x1)                                                                                                                            
 80026ca:	793b      	ldrb	r3, [r7, #4]
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00d      	beq.n	80026f0 <displayLogo_TFT+0x12c>
		{
			
		    drawPixel_TFT(i, j*8+k, color);
 80026d4:	79fb      	ldrb	r3, [r7, #7]
 80026d6:	b298      	uxth	r0, r3
 80026d8:	79bb      	ldrb	r3, [r7, #6]
 80026da:	b29b      	uxth	r3, r3
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	b29a      	uxth	r2, r3
 80026e0:	797b      	ldrb	r3, [r7, #5]
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	4413      	add	r3, r2
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	887a      	ldrh	r2, [r7, #2]
 80026ea:	4619      	mov	r1, r3
 80026ec:	f7ff fde0 	bl	80022b0 <drawPixel_TFT>
		}
		line = line >> 1;
 80026f0:	793b      	ldrb	r3, [r7, #4]
 80026f2:	085b      	lsrs	r3, r3, #1
 80026f4:	713b      	strb	r3, [r7, #4]
	for ( k = 0; k<8; k++)
 80026f6:	797b      	ldrb	r3, [r7, #5]
 80026f8:	3301      	adds	r3, #1
 80026fa:	717b      	strb	r3, [r7, #5]
 80026fc:	797b      	ldrb	r3, [r7, #5]
 80026fe:	2b07      	cmp	r3, #7
 8002700:	d9e3      	bls.n	80026ca <displayLogo_TFT+0x106>
  for(j=4;j<= 5;j++)
 8002702:	79bb      	ldrb	r3, [r7, #6]
 8002704:	3301      	adds	r3, #1
 8002706:	71bb      	strb	r3, [r7, #6]
 8002708:	79bb      	ldrb	r3, [r7, #6]
 800270a:	2b05      	cmp	r3, #5
 800270c:	d9d0      	bls.n	80026b0 <displayLogo_TFT+0xec>
  for(i=0;i<=120;i++)
 800270e:	79fb      	ldrb	r3, [r7, #7]
 8002710:	3301      	adds	r3, #1
 8002712:	71fb      	strb	r3, [r7, #7]
 8002714:	79fb      	ldrb	r3, [r7, #7]
 8002716:	2b78      	cmp	r3, #120	@ 0x78
 8002718:	f67f af5d 	bls.w	80025d6 <displayLogo_TFT+0x12>
	}
  }

  }
}
 800271c:	bf00      	nop
 800271e:	bf00      	nop
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	08002d38 	.word	0x08002d38

0800272c <memset>:
 800272c:	4603      	mov	r3, r0
 800272e:	4402      	add	r2, r0
 8002730:	4293      	cmp	r3, r2
 8002732:	d100      	bne.n	8002736 <memset+0xa>
 8002734:	4770      	bx	lr
 8002736:	f803 1b01 	strb.w	r1, [r3], #1
 800273a:	e7f9      	b.n	8002730 <memset+0x4>

0800273c <__libc_init_array>:
 800273c:	b570      	push	{r4, r5, r6, lr}
 800273e:	2600      	movs	r6, #0
 8002740:	4d0c      	ldr	r5, [pc, #48]	@ (8002774 <__libc_init_array+0x38>)
 8002742:	4c0d      	ldr	r4, [pc, #52]	@ (8002778 <__libc_init_array+0x3c>)
 8002744:	1b64      	subs	r4, r4, r5
 8002746:	10a4      	asrs	r4, r4, #2
 8002748:	42a6      	cmp	r6, r4
 800274a:	d109      	bne.n	8002760 <__libc_init_array+0x24>
 800274c:	f000 f81a 	bl	8002784 <_init>
 8002750:	2600      	movs	r6, #0
 8002752:	4d0a      	ldr	r5, [pc, #40]	@ (800277c <__libc_init_array+0x40>)
 8002754:	4c0a      	ldr	r4, [pc, #40]	@ (8002780 <__libc_init_array+0x44>)
 8002756:	1b64      	subs	r4, r4, r5
 8002758:	10a4      	asrs	r4, r4, #2
 800275a:	42a6      	cmp	r6, r4
 800275c:	d105      	bne.n	800276a <__libc_init_array+0x2e>
 800275e:	bd70      	pop	{r4, r5, r6, pc}
 8002760:	f855 3b04 	ldr.w	r3, [r5], #4
 8002764:	4798      	blx	r3
 8002766:	3601      	adds	r6, #1
 8002768:	e7ee      	b.n	8002748 <__libc_init_array+0xc>
 800276a:	f855 3b04 	ldr.w	r3, [r5], #4
 800276e:	4798      	blx	r3
 8002770:	3601      	adds	r6, #1
 8002772:	e7f2      	b.n	800275a <__libc_init_array+0x1e>
 8002774:	08003010 	.word	0x08003010
 8002778:	08003010 	.word	0x08003010
 800277c:	08003010 	.word	0x08003010
 8002780:	08003014 	.word	0x08003014

08002784 <_init>:
 8002784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002786:	bf00      	nop
 8002788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800278a:	bc08      	pop	{r3}
 800278c:	469e      	mov	lr, r3
 800278e:	4770      	bx	lr

08002790 <_fini>:
 8002790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002792:	bf00      	nop
 8002794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002796:	bc08      	pop	{r3}
 8002798:	469e      	mov	lr, r3
 800279a:	4770      	bx	lr
