
TP5_VOLT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033f0  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000860  0800352c  0800352c  0000452c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d8c  08003d8c  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003d8c  08003d8c  00004d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d94  08003d94  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d94  08003d94  00004d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d98  08003d98  00004d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003d9c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  2000000c  08003da8  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08003da8  000050d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008800  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cef  00000000  00000000  0000d835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000840  00000000  00000000  0000f528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000062c  00000000  00000000  0000fd68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015968  00000000  00000000  00010394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000097c5  00000000  00000000  00025cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000884fb  00000000  00000000  0002f4c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b79bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002054  00000000  00000000  000b7a00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000b9a54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	08003514 	.word	0x08003514

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	08003514 	.word	0x08003514

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800018c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000190:	f000 b98c 	b.w	80004ac <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9d08      	ldr	r5, [sp, #32]
 80001b2:	468e      	mov	lr, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14a      	bne.n	8000252 <__udivmoddi4+0xa6>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4617      	mov	r7, r2
 80001c0:	d962      	bls.n	8000288 <__udivmoddi4+0xdc>
 80001c2:	fab2 f682 	clz	r6, r2
 80001c6:	b14e      	cbz	r6, 80001dc <__udivmoddi4+0x30>
 80001c8:	f1c6 0320 	rsb	r3, r6, #32
 80001cc:	fa01 f806 	lsl.w	r8, r1, r6
 80001d0:	fa20 f303 	lsr.w	r3, r0, r3
 80001d4:	40b7      	lsls	r7, r6
 80001d6:	ea43 0808 	orr.w	r8, r3, r8
 80001da:	40b4      	lsls	r4, r6
 80001dc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80001e0:	fbb8 f1fe 	udiv	r1, r8, lr
 80001e4:	fa1f fc87 	uxth.w	ip, r7
 80001e8:	fb0e 8811 	mls	r8, lr, r1, r8
 80001ec:	fb01 f20c 	mul.w	r2, r1, ip
 80001f0:	0c23      	lsrs	r3, r4, #16
 80001f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f6:	429a      	cmp	r2, r3
 80001f8:	d909      	bls.n	800020e <__udivmoddi4+0x62>
 80001fa:	18fb      	adds	r3, r7, r3
 80001fc:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000200:	f080 80eb 	bcs.w	80003da <__udivmoddi4+0x22e>
 8000204:	429a      	cmp	r2, r3
 8000206:	f240 80e8 	bls.w	80003da <__udivmoddi4+0x22e>
 800020a:	3902      	subs	r1, #2
 800020c:	443b      	add	r3, r7
 800020e:	1a9a      	subs	r2, r3, r2
 8000210:	fbb2 f0fe 	udiv	r0, r2, lr
 8000214:	fb0e 2210 	mls	r2, lr, r0, r2
 8000218:	fb00 fc0c 	mul.w	ip, r0, ip
 800021c:	b2a3      	uxth	r3, r4
 800021e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000222:	459c      	cmp	ip, r3
 8000224:	d909      	bls.n	800023a <__udivmoddi4+0x8e>
 8000226:	18fb      	adds	r3, r7, r3
 8000228:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 800022c:	f080 80d7 	bcs.w	80003de <__udivmoddi4+0x232>
 8000230:	459c      	cmp	ip, r3
 8000232:	f240 80d4 	bls.w	80003de <__udivmoddi4+0x232>
 8000236:	443b      	add	r3, r7
 8000238:	3802      	subs	r0, #2
 800023a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800023e:	2100      	movs	r1, #0
 8000240:	eba3 030c 	sub.w	r3, r3, ip
 8000244:	b11d      	cbz	r5, 800024e <__udivmoddi4+0xa2>
 8000246:	2200      	movs	r2, #0
 8000248:	40f3      	lsrs	r3, r6
 800024a:	e9c5 3200 	strd	r3, r2, [r5]
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	428b      	cmp	r3, r1
 8000254:	d905      	bls.n	8000262 <__udivmoddi4+0xb6>
 8000256:	b10d      	cbz	r5, 800025c <__udivmoddi4+0xb0>
 8000258:	e9c5 0100 	strd	r0, r1, [r5]
 800025c:	2100      	movs	r1, #0
 800025e:	4608      	mov	r0, r1
 8000260:	e7f5      	b.n	800024e <__udivmoddi4+0xa2>
 8000262:	fab3 f183 	clz	r1, r3
 8000266:	2900      	cmp	r1, #0
 8000268:	d146      	bne.n	80002f8 <__udivmoddi4+0x14c>
 800026a:	4573      	cmp	r3, lr
 800026c:	d302      	bcc.n	8000274 <__udivmoddi4+0xc8>
 800026e:	4282      	cmp	r2, r0
 8000270:	f200 8108 	bhi.w	8000484 <__udivmoddi4+0x2d8>
 8000274:	1a84      	subs	r4, r0, r2
 8000276:	eb6e 0203 	sbc.w	r2, lr, r3
 800027a:	2001      	movs	r0, #1
 800027c:	4690      	mov	r8, r2
 800027e:	2d00      	cmp	r5, #0
 8000280:	d0e5      	beq.n	800024e <__udivmoddi4+0xa2>
 8000282:	e9c5 4800 	strd	r4, r8, [r5]
 8000286:	e7e2      	b.n	800024e <__udivmoddi4+0xa2>
 8000288:	2a00      	cmp	r2, #0
 800028a:	f000 8091 	beq.w	80003b0 <__udivmoddi4+0x204>
 800028e:	fab2 f682 	clz	r6, r2
 8000292:	2e00      	cmp	r6, #0
 8000294:	f040 80a5 	bne.w	80003e2 <__udivmoddi4+0x236>
 8000298:	1a8a      	subs	r2, r1, r2
 800029a:	2101      	movs	r1, #1
 800029c:	0c03      	lsrs	r3, r0, #16
 800029e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002a2:	b280      	uxth	r0, r0
 80002a4:	b2bc      	uxth	r4, r7
 80002a6:	fbb2 fcfe 	udiv	ip, r2, lr
 80002aa:	fb0e 221c 	mls	r2, lr, ip, r2
 80002ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b2:	fb04 f20c 	mul.w	r2, r4, ip
 80002b6:	429a      	cmp	r2, r3
 80002b8:	d907      	bls.n	80002ca <__udivmoddi4+0x11e>
 80002ba:	18fb      	adds	r3, r7, r3
 80002bc:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80002c0:	d202      	bcs.n	80002c8 <__udivmoddi4+0x11c>
 80002c2:	429a      	cmp	r2, r3
 80002c4:	f200 80e3 	bhi.w	800048e <__udivmoddi4+0x2e2>
 80002c8:	46c4      	mov	ip, r8
 80002ca:	1a9b      	subs	r3, r3, r2
 80002cc:	fbb3 f2fe 	udiv	r2, r3, lr
 80002d0:	fb0e 3312 	mls	r3, lr, r2, r3
 80002d4:	fb02 f404 	mul.w	r4, r2, r4
 80002d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80002dc:	429c      	cmp	r4, r3
 80002de:	d907      	bls.n	80002f0 <__udivmoddi4+0x144>
 80002e0:	18fb      	adds	r3, r7, r3
 80002e2:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80002e6:	d202      	bcs.n	80002ee <__udivmoddi4+0x142>
 80002e8:	429c      	cmp	r4, r3
 80002ea:	f200 80cd 	bhi.w	8000488 <__udivmoddi4+0x2dc>
 80002ee:	4602      	mov	r2, r0
 80002f0:	1b1b      	subs	r3, r3, r4
 80002f2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80002f6:	e7a5      	b.n	8000244 <__udivmoddi4+0x98>
 80002f8:	f1c1 0620 	rsb	r6, r1, #32
 80002fc:	408b      	lsls	r3, r1
 80002fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000302:	431f      	orrs	r7, r3
 8000304:	fa2e fa06 	lsr.w	sl, lr, r6
 8000308:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800030c:	fbba f8f9 	udiv	r8, sl, r9
 8000310:	fa0e fe01 	lsl.w	lr, lr, r1
 8000314:	fa20 f306 	lsr.w	r3, r0, r6
 8000318:	fb09 aa18 	mls	sl, r9, r8, sl
 800031c:	fa1f fc87 	uxth.w	ip, r7
 8000320:	ea43 030e 	orr.w	r3, r3, lr
 8000324:	fa00 fe01 	lsl.w	lr, r0, r1
 8000328:	fb08 f00c 	mul.w	r0, r8, ip
 800032c:	0c1c      	lsrs	r4, r3, #16
 800032e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000332:	42a0      	cmp	r0, r4
 8000334:	fa02 f201 	lsl.w	r2, r2, r1
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x1a4>
 800033a:	193c      	adds	r4, r7, r4
 800033c:	f108 3aff 	add.w	sl, r8, #4294967295	@ 0xffffffff
 8000340:	f080 809e 	bcs.w	8000480 <__udivmoddi4+0x2d4>
 8000344:	42a0      	cmp	r0, r4
 8000346:	f240 809b 	bls.w	8000480 <__udivmoddi4+0x2d4>
 800034a:	f1a8 0802 	sub.w	r8, r8, #2
 800034e:	443c      	add	r4, r7
 8000350:	1a24      	subs	r4, r4, r0
 8000352:	b298      	uxth	r0, r3
 8000354:	fbb4 f3f9 	udiv	r3, r4, r9
 8000358:	fb09 4413 	mls	r4, r9, r3, r4
 800035c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000360:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x1d0>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 800036e:	f080 8085 	bcs.w	800047c <__udivmoddi4+0x2d0>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8082 	bls.w	800047c <__udivmoddi4+0x2d0>
 8000378:	3b02      	subs	r3, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	fba0 8c02 	umull	r8, ip, r0, r2
 8000388:	4564      	cmp	r4, ip
 800038a:	4643      	mov	r3, r8
 800038c:	46e1      	mov	r9, ip
 800038e:	d364      	bcc.n	800045a <__udivmoddi4+0x2ae>
 8000390:	d061      	beq.n	8000456 <__udivmoddi4+0x2aa>
 8000392:	b15d      	cbz	r5, 80003ac <__udivmoddi4+0x200>
 8000394:	ebbe 0203 	subs.w	r2, lr, r3
 8000398:	eb64 0409 	sbc.w	r4, r4, r9
 800039c:	fa04 f606 	lsl.w	r6, r4, r6
 80003a0:	fa22 f301 	lsr.w	r3, r2, r1
 80003a4:	431e      	orrs	r6, r3
 80003a6:	40cc      	lsrs	r4, r1
 80003a8:	e9c5 6400 	strd	r6, r4, [r5]
 80003ac:	2100      	movs	r1, #0
 80003ae:	e74e      	b.n	800024e <__udivmoddi4+0xa2>
 80003b0:	fbb1 fcf2 	udiv	ip, r1, r2
 80003b4:	0c01      	lsrs	r1, r0, #16
 80003b6:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80003ba:	b280      	uxth	r0, r0
 80003bc:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80003c0:	463b      	mov	r3, r7
 80003c2:	fbb1 f1f7 	udiv	r1, r1, r7
 80003c6:	4638      	mov	r0, r7
 80003c8:	463c      	mov	r4, r7
 80003ca:	46b8      	mov	r8, r7
 80003cc:	46be      	mov	lr, r7
 80003ce:	2620      	movs	r6, #32
 80003d0:	eba2 0208 	sub.w	r2, r2, r8
 80003d4:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80003d8:	e765      	b.n	80002a6 <__udivmoddi4+0xfa>
 80003da:	4601      	mov	r1, r0
 80003dc:	e717      	b.n	800020e <__udivmoddi4+0x62>
 80003de:	4610      	mov	r0, r2
 80003e0:	e72b      	b.n	800023a <__udivmoddi4+0x8e>
 80003e2:	f1c6 0120 	rsb	r1, r6, #32
 80003e6:	fa2e fc01 	lsr.w	ip, lr, r1
 80003ea:	40b7      	lsls	r7, r6
 80003ec:	fa0e fe06 	lsl.w	lr, lr, r6
 80003f0:	fa20 f101 	lsr.w	r1, r0, r1
 80003f4:	ea41 010e 	orr.w	r1, r1, lr
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	fbbc f8fe 	udiv	r8, ip, lr
 8000400:	b2bc      	uxth	r4, r7
 8000402:	fb0e cc18 	mls	ip, lr, r8, ip
 8000406:	fb08 f904 	mul.w	r9, r8, r4
 800040a:	0c0a      	lsrs	r2, r1, #16
 800040c:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000410:	40b0      	lsls	r0, r6
 8000412:	4591      	cmp	r9, r2
 8000414:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000418:	b280      	uxth	r0, r0
 800041a:	d93e      	bls.n	800049a <__udivmoddi4+0x2ee>
 800041c:	18ba      	adds	r2, r7, r2
 800041e:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000422:	d201      	bcs.n	8000428 <__udivmoddi4+0x27c>
 8000424:	4591      	cmp	r9, r2
 8000426:	d81f      	bhi.n	8000468 <__udivmoddi4+0x2bc>
 8000428:	eba2 0209 	sub.w	r2, r2, r9
 800042c:	fbb2 f9fe 	udiv	r9, r2, lr
 8000430:	fb09 f804 	mul.w	r8, r9, r4
 8000434:	fb0e 2a19 	mls	sl, lr, r9, r2
 8000438:	b28a      	uxth	r2, r1
 800043a:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 800043e:	4542      	cmp	r2, r8
 8000440:	d229      	bcs.n	8000496 <__udivmoddi4+0x2ea>
 8000442:	18ba      	adds	r2, r7, r2
 8000444:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000448:	d2c2      	bcs.n	80003d0 <__udivmoddi4+0x224>
 800044a:	4542      	cmp	r2, r8
 800044c:	d2c0      	bcs.n	80003d0 <__udivmoddi4+0x224>
 800044e:	f1a9 0102 	sub.w	r1, r9, #2
 8000452:	443a      	add	r2, r7
 8000454:	e7bc      	b.n	80003d0 <__udivmoddi4+0x224>
 8000456:	45c6      	cmp	lr, r8
 8000458:	d29b      	bcs.n	8000392 <__udivmoddi4+0x1e6>
 800045a:	ebb8 0302 	subs.w	r3, r8, r2
 800045e:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000462:	3801      	subs	r0, #1
 8000464:	46e1      	mov	r9, ip
 8000466:	e794      	b.n	8000392 <__udivmoddi4+0x1e6>
 8000468:	eba7 0909 	sub.w	r9, r7, r9
 800046c:	444a      	add	r2, r9
 800046e:	fbb2 f9fe 	udiv	r9, r2, lr
 8000472:	f1a8 0c02 	sub.w	ip, r8, #2
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	e7db      	b.n	8000434 <__udivmoddi4+0x288>
 800047c:	4603      	mov	r3, r0
 800047e:	e77d      	b.n	800037c <__udivmoddi4+0x1d0>
 8000480:	46d0      	mov	r8, sl
 8000482:	e765      	b.n	8000350 <__udivmoddi4+0x1a4>
 8000484:	4608      	mov	r0, r1
 8000486:	e6fa      	b.n	800027e <__udivmoddi4+0xd2>
 8000488:	443b      	add	r3, r7
 800048a:	3a02      	subs	r2, #2
 800048c:	e730      	b.n	80002f0 <__udivmoddi4+0x144>
 800048e:	f1ac 0c02 	sub.w	ip, ip, #2
 8000492:	443b      	add	r3, r7
 8000494:	e719      	b.n	80002ca <__udivmoddi4+0x11e>
 8000496:	4649      	mov	r1, r9
 8000498:	e79a      	b.n	80003d0 <__udivmoddi4+0x224>
 800049a:	eba2 0209 	sub.w	r2, r2, r9
 800049e:	fbb2 f9fe 	udiv	r9, r2, lr
 80004a2:	46c4      	mov	ip, r8
 80004a4:	fb09 f804 	mul.w	r8, r9, r4
 80004a8:	e7c4      	b.n	8000434 <__udivmoddi4+0x288>
 80004aa:	bf00      	nop

080004ac <__aeabi_idiv0>:
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop

080004b0 <affiche_nombre>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void affiche_nombre(uint32_t nombre, uint8_t col, uint8_t ligne) {
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b086      	sub	sp, #24
 80004b4:	af02      	add	r7, sp, #8
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	460b      	mov	r3, r1
 80004ba:	70fb      	strb	r3, [r7, #3]
 80004bc:	4613      	mov	r3, r2
 80004be:	70bb      	strb	r3, [r7, #2]
    if (nombre < 0 || nombre > 9999) {
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80004c6:	4293      	cmp	r3, r2
 80004c8:	d874      	bhi.n	80005b4 <affiche_nombre+0x104>
        return;
    }

    uint8_t mil = nombre / 1000;
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4a3b      	ldr	r2, [pc, #236]	@ (80005bc <affiche_nombre+0x10c>)
 80004ce:	fba2 2303 	umull	r2, r3, r2, r3
 80004d2:	099b      	lsrs	r3, r3, #6
 80004d4:	73fb      	strb	r3, [r7, #15]
    uint8_t cen = (nombre / 100) % 10;
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	4a39      	ldr	r2, [pc, #228]	@ (80005c0 <affiche_nombre+0x110>)
 80004da:	fba2 2303 	umull	r2, r3, r2, r3
 80004de:	0959      	lsrs	r1, r3, #5
 80004e0:	4b38      	ldr	r3, [pc, #224]	@ (80005c4 <affiche_nombre+0x114>)
 80004e2:	fba3 2301 	umull	r2, r3, r3, r1
 80004e6:	08da      	lsrs	r2, r3, #3
 80004e8:	4613      	mov	r3, r2
 80004ea:	009b      	lsls	r3, r3, #2
 80004ec:	4413      	add	r3, r2
 80004ee:	005b      	lsls	r3, r3, #1
 80004f0:	1aca      	subs	r2, r1, r3
 80004f2:	4613      	mov	r3, r2
 80004f4:	73bb      	strb	r3, [r7, #14]
    uint8_t diz = (nombre / 10) % 10;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4a32      	ldr	r2, [pc, #200]	@ (80005c4 <affiche_nombre+0x114>)
 80004fa:	fba2 2303 	umull	r2, r3, r2, r3
 80004fe:	08d9      	lsrs	r1, r3, #3
 8000500:	4b30      	ldr	r3, [pc, #192]	@ (80005c4 <affiche_nombre+0x114>)
 8000502:	fba3 2301 	umull	r2, r3, r3, r1
 8000506:	08da      	lsrs	r2, r3, #3
 8000508:	4613      	mov	r3, r2
 800050a:	009b      	lsls	r3, r3, #2
 800050c:	4413      	add	r3, r2
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	1aca      	subs	r2, r1, r3
 8000512:	4613      	mov	r3, r2
 8000514:	737b      	strb	r3, [r7, #13]
    uint8_t uni = nombre % 10;
 8000516:	6879      	ldr	r1, [r7, #4]
 8000518:	4b2a      	ldr	r3, [pc, #168]	@ (80005c4 <affiche_nombre+0x114>)
 800051a:	fba3 2301 	umull	r2, r3, r3, r1
 800051e:	08da      	lsrs	r2, r3, #3
 8000520:	4613      	mov	r3, r2
 8000522:	009b      	lsls	r3, r3, #2
 8000524:	4413      	add	r3, r2
 8000526:	005b      	lsls	r3, r3, #1
 8000528:	1aca      	subs	r2, r1, r3
 800052a:	4613      	mov	r3, r2
 800052c:	733b      	strb	r3, [r7, #12]

    displayChar_TFT(col, ligne, mil + 0x30, ST7735_YELLOW, ST7735_BLACK, 2);
 800052e:	78fb      	ldrb	r3, [r7, #3]
 8000530:	b298      	uxth	r0, r3
 8000532:	78bb      	ldrb	r3, [r7, #2]
 8000534:	b299      	uxth	r1, r3
 8000536:	7bfb      	ldrb	r3, [r7, #15]
 8000538:	3330      	adds	r3, #48	@ 0x30
 800053a:	b2da      	uxtb	r2, r3
 800053c:	2302      	movs	r3, #2
 800053e:	9301      	str	r3, [sp, #4]
 8000540:	2300      	movs	r3, #0
 8000542:	9300      	str	r3, [sp, #0]
 8000544:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000548:	f002 fe3a 	bl	80031c0 <displayChar_TFT>
    displayChar_TFT(col + 12, ligne, cen + 0x30, ST7735_YELLOW, ST7735_BLACK, 2);
 800054c:	78fb      	ldrb	r3, [r7, #3]
 800054e:	b29b      	uxth	r3, r3
 8000550:	330c      	adds	r3, #12
 8000552:	b298      	uxth	r0, r3
 8000554:	78bb      	ldrb	r3, [r7, #2]
 8000556:	b299      	uxth	r1, r3
 8000558:	7bbb      	ldrb	r3, [r7, #14]
 800055a:	3330      	adds	r3, #48	@ 0x30
 800055c:	b2da      	uxtb	r2, r3
 800055e:	2302      	movs	r3, #2
 8000560:	9301      	str	r3, [sp, #4]
 8000562:	2300      	movs	r3, #0
 8000564:	9300      	str	r3, [sp, #0]
 8000566:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800056a:	f002 fe29 	bl	80031c0 <displayChar_TFT>
    displayChar_TFT(col + 24, ligne, diz + 0x30, ST7735_YELLOW, ST7735_BLACK, 2);
 800056e:	78fb      	ldrb	r3, [r7, #3]
 8000570:	b29b      	uxth	r3, r3
 8000572:	3318      	adds	r3, #24
 8000574:	b298      	uxth	r0, r3
 8000576:	78bb      	ldrb	r3, [r7, #2]
 8000578:	b299      	uxth	r1, r3
 800057a:	7b7b      	ldrb	r3, [r7, #13]
 800057c:	3330      	adds	r3, #48	@ 0x30
 800057e:	b2da      	uxtb	r2, r3
 8000580:	2302      	movs	r3, #2
 8000582:	9301      	str	r3, [sp, #4]
 8000584:	2300      	movs	r3, #0
 8000586:	9300      	str	r3, [sp, #0]
 8000588:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800058c:	f002 fe18 	bl	80031c0 <displayChar_TFT>
    displayChar_TFT(col + 36, ligne, uni + 0x30, ST7735_YELLOW, ST7735_BLACK, 2);
 8000590:	78fb      	ldrb	r3, [r7, #3]
 8000592:	b29b      	uxth	r3, r3
 8000594:	3324      	adds	r3, #36	@ 0x24
 8000596:	b298      	uxth	r0, r3
 8000598:	78bb      	ldrb	r3, [r7, #2]
 800059a:	b299      	uxth	r1, r3
 800059c:	7b3b      	ldrb	r3, [r7, #12]
 800059e:	3330      	adds	r3, #48	@ 0x30
 80005a0:	b2da      	uxtb	r2, r3
 80005a2:	2302      	movs	r3, #2
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	2300      	movs	r3, #0
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80005ae:	f002 fe07 	bl	80031c0 <displayChar_TFT>
 80005b2:	e000      	b.n	80005b6 <affiche_nombre+0x106>
        return;
 80005b4:	bf00      	nop
}
 80005b6:	3710      	adds	r7, #16
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	10624dd3 	.word	0x10624dd3
 80005c0:	51eb851f 	.word	0x51eb851f
 80005c4:	cccccccd 	.word	0xcccccccd

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ce:	f000 fb2d 	bl	8000c2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d2:	f000 f825 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d6:	f000 f8f7 	bl	80007c8 <MX_GPIO_Init>
  MX_SPI1_Init();
 80005da:	f000 f8bf 	bl	800075c <MX_SPI1_Init>
  MX_ADC_Init();
 80005de:	f000 f865 	bl	80006ac <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  MAX7219_Init();
 80005e2:	f000 faa6 	bl	8000b32 <MAX7219_Init>
  init_TFT();
 80005e6:	f002 fce1 	bl	8002fac <init_TFT>
  MAX7219_Clear();
 80005ea:	f000 fad9 	bl	8000ba0 <MAX7219_Clear>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc);
 80005ee:	480b      	ldr	r0, [pc, #44]	@ (800061c <main+0x54>)
 80005f0:	f000 fcf2 	bl	8000fd8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc, 1000);
 80005f4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80005f8:	4808      	ldr	r0, [pc, #32]	@ (800061c <main+0x54>)
 80005fa:	f000 fd79 	bl	80010f0 <HAL_ADC_PollForConversion>
	  uint32_t value = HAL_ADC_GetValue(&hadc);
 80005fe:	4807      	ldr	r0, [pc, #28]	@ (800061c <main+0x54>)
 8000600:	f000 fe06 	bl	8001210 <HAL_ADC_GetValue>
 8000604:	6078      	str	r0, [r7, #4]
	  HAL_ADC_Stop(&hadc);
 8000606:	4805      	ldr	r0, [pc, #20]	@ (800061c <main+0x54>)
 8000608:	f000 fd46 	bl	8001098 <HAL_ADC_Stop>
	affiche_nombre(value, 10, 80);
 800060c:	2250      	movs	r2, #80	@ 0x50
 800060e:	210a      	movs	r1, #10
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f7ff ff4d 	bl	80004b0 <affiche_nombre>
  {
 8000616:	bf00      	nop
 8000618:	e7e9      	b.n	80005ee <main+0x26>
 800061a:	bf00      	nop
 800061c:	20000028 	.word	0x20000028

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b092      	sub	sp, #72	@ 0x48
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	2234      	movs	r2, #52	@ 0x34
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f002 ff44 	bl	80034bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	463b      	mov	r3, r7
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000642:	4b19      	ldr	r3, [pc, #100]	@ (80006a8 <SystemClock_Config+0x88>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 800064a:	4a17      	ldr	r2, [pc, #92]	@ (80006a8 <SystemClock_Config+0x88>)
 800064c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000650:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000652:	2302      	movs	r3, #2
 8000654:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000656:	2301      	movs	r3, #1
 8000658:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800065a:	2310      	movs	r3, #16
 800065c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800065e:	2300      	movs	r3, #0
 8000660:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	4618      	mov	r0, r3
 8000668:	f001 fbb8 	bl	8001ddc <HAL_RCC_OscConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000672:	f000 f93d 	bl	80008f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000676:	230f      	movs	r3, #15
 8000678:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800067a:	2301      	movs	r3, #1
 800067c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800068a:	463b      	mov	r3, r7
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f001 fed4 	bl	800243c <HAL_RCC_ClockConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800069a:	f000 f929 	bl	80008f0 <Error_Handler>
  }
}
 800069e:	bf00      	nop
 80006a0:	3748      	adds	r7, #72	@ 0x48
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40007000 	.word	0x40007000

080006ac <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80006bc:	4b25      	ldr	r3, [pc, #148]	@ (8000754 <MX_ADC_Init+0xa8>)
 80006be:	4a26      	ldr	r2, [pc, #152]	@ (8000758 <MX_ADC_Init+0xac>)
 80006c0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006c2:	4b24      	ldr	r3, [pc, #144]	@ (8000754 <MX_ADC_Init+0xa8>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80006c8:	4b22      	ldr	r3, [pc, #136]	@ (8000754 <MX_ADC_Init+0xa8>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ce:	4b21      	ldr	r3, [pc, #132]	@ (8000754 <MX_ADC_Init+0xa8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000754 <MX_ADC_Init+0xa8>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80006da:	4b1e      	ldr	r3, [pc, #120]	@ (8000754 <MX_ADC_Init+0xa8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80006e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000754 <MX_ADC_Init+0xa8>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 80006e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000754 <MX_ADC_Init+0xa8>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80006ec:	4b19      	ldr	r3, [pc, #100]	@ (8000754 <MX_ADC_Init+0xa8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 80006f2:	4b18      	ldr	r3, [pc, #96]	@ (8000754 <MX_ADC_Init+0xa8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc.Init.NbrOfConversion = 1;
 80006fa:	4b16      	ldr	r3, [pc, #88]	@ (8000754 <MX_ADC_Init+0xa8>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000700:	4b14      	ldr	r3, [pc, #80]	@ (8000754 <MX_ADC_Init+0xa8>)
 8000702:	2200      	movs	r2, #0
 8000704:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000708:	4b12      	ldr	r3, [pc, #72]	@ (8000754 <MX_ADC_Init+0xa8>)
 800070a:	2210      	movs	r2, #16
 800070c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800070e:	4b11      	ldr	r3, [pc, #68]	@ (8000754 <MX_ADC_Init+0xa8>)
 8000710:	2200      	movs	r2, #0
 8000712:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000714:	4b0f      	ldr	r3, [pc, #60]	@ (8000754 <MX_ADC_Init+0xa8>)
 8000716:	2200      	movs	r2, #0
 8000718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800071c:	480d      	ldr	r0, [pc, #52]	@ (8000754 <MX_ADC_Init+0xa8>)
 800071e:	f000 fb15 	bl	8000d4c <HAL_ADC_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8000728:	f000 f8e2 	bl	80008f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800072c:	2300      	movs	r3, #0
 800072e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000730:	2301      	movs	r3, #1
 8000732:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8000734:	2300      	movs	r3, #0
 8000736:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	4619      	mov	r1, r3
 800073c:	4805      	ldr	r0, [pc, #20]	@ (8000754 <MX_ADC_Init+0xa8>)
 800073e:	f000 fe85 	bl	800144c <HAL_ADC_ConfigChannel>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8000748:	f000 f8d2 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000028 	.word	0x20000028
 8000758:	40012400 	.word	0x40012400

0800075c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000760:	4b17      	ldr	r3, [pc, #92]	@ (80007c0 <MX_SPI1_Init+0x64>)
 8000762:	4a18      	ldr	r2, [pc, #96]	@ (80007c4 <MX_SPI1_Init+0x68>)
 8000764:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000766:	4b16      	ldr	r3, [pc, #88]	@ (80007c0 <MX_SPI1_Init+0x64>)
 8000768:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800076c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800076e:	4b14      	ldr	r3, [pc, #80]	@ (80007c0 <MX_SPI1_Init+0x64>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000774:	4b12      	ldr	r3, [pc, #72]	@ (80007c0 <MX_SPI1_Init+0x64>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800077a:	4b11      	ldr	r3, [pc, #68]	@ (80007c0 <MX_SPI1_Init+0x64>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000780:	4b0f      	ldr	r3, [pc, #60]	@ (80007c0 <MX_SPI1_Init+0x64>)
 8000782:	2200      	movs	r2, #0
 8000784:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000786:	4b0e      	ldr	r3, [pc, #56]	@ (80007c0 <MX_SPI1_Init+0x64>)
 8000788:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800078c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800078e:	4b0c      	ldr	r3, [pc, #48]	@ (80007c0 <MX_SPI1_Init+0x64>)
 8000790:	2200      	movs	r2, #0
 8000792:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000794:	4b0a      	ldr	r3, [pc, #40]	@ (80007c0 <MX_SPI1_Init+0x64>)
 8000796:	2200      	movs	r2, #0
 8000798:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800079a:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <MX_SPI1_Init+0x64>)
 800079c:	2200      	movs	r2, #0
 800079e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007a0:	4b07      	ldr	r3, [pc, #28]	@ (80007c0 <MX_SPI1_Init+0x64>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007a6:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <MX_SPI1_Init+0x64>)
 80007a8:	220a      	movs	r2, #10
 80007aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007ac:	4804      	ldr	r0, [pc, #16]	@ (80007c0 <MX_SPI1_Init+0x64>)
 80007ae:	f002 f897 	bl	80028e0 <HAL_SPI_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007b8:	f000 f89a 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	2000007c 	.word	0x2000007c
 80007c4:	40013000 	.word	0x40013000

080007c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08a      	sub	sp, #40	@ 0x28
 80007cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007de:	4b40      	ldr	r3, [pc, #256]	@ (80008e0 <MX_GPIO_Init+0x118>)
 80007e0:	69db      	ldr	r3, [r3, #28]
 80007e2:	4a3f      	ldr	r2, [pc, #252]	@ (80008e0 <MX_GPIO_Init+0x118>)
 80007e4:	f043 0304 	orr.w	r3, r3, #4
 80007e8:	61d3      	str	r3, [r2, #28]
 80007ea:	4b3d      	ldr	r3, [pc, #244]	@ (80008e0 <MX_GPIO_Init+0x118>)
 80007ec:	69db      	ldr	r3, [r3, #28]
 80007ee:	f003 0304 	and.w	r3, r3, #4
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	4b3a      	ldr	r3, [pc, #232]	@ (80008e0 <MX_GPIO_Init+0x118>)
 80007f8:	69db      	ldr	r3, [r3, #28]
 80007fa:	4a39      	ldr	r2, [pc, #228]	@ (80008e0 <MX_GPIO_Init+0x118>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	61d3      	str	r3, [r2, #28]
 8000802:	4b37      	ldr	r3, [pc, #220]	@ (80008e0 <MX_GPIO_Init+0x118>)
 8000804:	69db      	ldr	r3, [r3, #28]
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	4b34      	ldr	r3, [pc, #208]	@ (80008e0 <MX_GPIO_Init+0x118>)
 8000810:	69db      	ldr	r3, [r3, #28]
 8000812:	4a33      	ldr	r2, [pc, #204]	@ (80008e0 <MX_GPIO_Init+0x118>)
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	61d3      	str	r3, [r2, #28]
 800081a:	4b31      	ldr	r3, [pc, #196]	@ (80008e0 <MX_GPIO_Init+0x118>)
 800081c:	69db      	ldr	r3, [r3, #28]
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000826:	4b2e      	ldr	r3, [pc, #184]	@ (80008e0 <MX_GPIO_Init+0x118>)
 8000828:	69db      	ldr	r3, [r3, #28]
 800082a:	4a2d      	ldr	r2, [pc, #180]	@ (80008e0 <MX_GPIO_Init+0x118>)
 800082c:	f043 0308 	orr.w	r3, r3, #8
 8000830:	61d3      	str	r3, [r2, #28]
 8000832:	4b2b      	ldr	r3, [pc, #172]	@ (80008e0 <MX_GPIO_Init+0x118>)
 8000834:	69db      	ldr	r3, [r3, #28]
 8000836:	f003 0308 	and.w	r3, r3, #8
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	2101      	movs	r1, #1
 8000842:	4828      	ldr	r0, [pc, #160]	@ (80008e4 <MX_GPIO_Init+0x11c>)
 8000844:	f001 fab2 	bl	8001dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_SET);
 8000848:	2201      	movs	r2, #1
 800084a:	210e      	movs	r1, #14
 800084c:	4825      	ldr	r0, [pc, #148]	@ (80008e4 <MX_GPIO_Init+0x11c>)
 800084e:	f001 faad 	bl	8001dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8000852:	2201      	movs	r2, #1
 8000854:	2104      	movs	r1, #4
 8000856:	4824      	ldr	r0, [pc, #144]	@ (80008e8 <MX_GPIO_Init+0x120>)
 8000858:	f001 faa8 	bl	8001dac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800085c:	230f      	movs	r3, #15
 800085e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000860:	2301      	movs	r3, #1
 8000862:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4619      	mov	r1, r3
 8000872:	481c      	ldr	r0, [pc, #112]	@ (80008e4 <MX_GPIO_Init+0x11c>)
 8000874:	f001 f90a 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000878:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800087c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087e:	2302      	movs	r3, #2
 8000880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800088a:	2303      	movs	r3, #3
 800088c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800088e:	f107 0314 	add.w	r3, r7, #20
 8000892:	4619      	mov	r1, r3
 8000894:	4815      	ldr	r0, [pc, #84]	@ (80008ec <MX_GPIO_Init+0x124>)
 8000896:	f001 f8f9 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800089a:	2304      	movs	r3, #4
 800089c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089e:	2301      	movs	r3, #1
 80008a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	4619      	mov	r1, r3
 80008b0:	480d      	ldr	r0, [pc, #52]	@ (80008e8 <MX_GPIO_Init+0x120>)
 80008b2:	f001 f8eb 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80008b6:	2380      	movs	r3, #128	@ 0x80
 80008b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ba:	2302      	movs	r3, #2
 80008bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80008c6:	2302      	movs	r3, #2
 80008c8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	4619      	mov	r1, r3
 80008d0:	4806      	ldr	r0, [pc, #24]	@ (80008ec <MX_GPIO_Init+0x124>)
 80008d2:	f001 f8db 	bl	8001a8c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008d6:	bf00      	nop
 80008d8:	3728      	adds	r7, #40	@ 0x28
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40020800 	.word	0x40020800
 80008e8:	40020c00 	.word	0x40020c00
 80008ec:	40020400 	.word	0x40020400

080008f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f4:	b672      	cpsid	i
}
 80008f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <Error_Handler+0x8>

080008fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b085      	sub	sp, #20
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000902:	4b14      	ldr	r3, [pc, #80]	@ (8000954 <HAL_MspInit+0x58>)
 8000904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000906:	4a13      	ldr	r2, [pc, #76]	@ (8000954 <HAL_MspInit+0x58>)
 8000908:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800090c:	6253      	str	r3, [r2, #36]	@ 0x24
 800090e:	4b11      	ldr	r3, [pc, #68]	@ (8000954 <HAL_MspInit+0x58>)
 8000910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000912:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091a:	4b0e      	ldr	r3, [pc, #56]	@ (8000954 <HAL_MspInit+0x58>)
 800091c:	6a1b      	ldr	r3, [r3, #32]
 800091e:	4a0d      	ldr	r2, [pc, #52]	@ (8000954 <HAL_MspInit+0x58>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	6213      	str	r3, [r2, #32]
 8000926:	4b0b      	ldr	r3, [pc, #44]	@ (8000954 <HAL_MspInit+0x58>)
 8000928:	6a1b      	ldr	r3, [r3, #32]
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000932:	4b08      	ldr	r3, [pc, #32]	@ (8000954 <HAL_MspInit+0x58>)
 8000934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000936:	4a07      	ldr	r2, [pc, #28]	@ (8000954 <HAL_MspInit+0x58>)
 8000938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800093c:	6253      	str	r3, [r2, #36]	@ 0x24
 800093e:	4b05      	ldr	r3, [pc, #20]	@ (8000954 <HAL_MspInit+0x58>)
 8000940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094a:	bf00      	nop
 800094c:	3714      	adds	r7, #20
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr
 8000954:	40023800 	.word	0x40023800

08000958 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	@ 0x28
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a19      	ldr	r2, [pc, #100]	@ (80009dc <HAL_ADC_MspInit+0x84>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d12b      	bne.n	80009d2 <HAL_ADC_MspInit+0x7a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800097a:	4b19      	ldr	r3, [pc, #100]	@ (80009e0 <HAL_ADC_MspInit+0x88>)
 800097c:	6a1b      	ldr	r3, [r3, #32]
 800097e:	4a18      	ldr	r2, [pc, #96]	@ (80009e0 <HAL_ADC_MspInit+0x88>)
 8000980:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000984:	6213      	str	r3, [r2, #32]
 8000986:	4b16      	ldr	r3, [pc, #88]	@ (80009e0 <HAL_ADC_MspInit+0x88>)
 8000988:	6a1b      	ldr	r3, [r3, #32]
 800098a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800098e:	613b      	str	r3, [r7, #16]
 8000990:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000992:	4b13      	ldr	r3, [pc, #76]	@ (80009e0 <HAL_ADC_MspInit+0x88>)
 8000994:	69db      	ldr	r3, [r3, #28]
 8000996:	4a12      	ldr	r2, [pc, #72]	@ (80009e0 <HAL_ADC_MspInit+0x88>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	61d3      	str	r3, [r2, #28]
 800099e:	4b10      	ldr	r3, [pc, #64]	@ (80009e0 <HAL_ADC_MspInit+0x88>)
 80009a0:	69db      	ldr	r3, [r3, #28]
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009aa:	2301      	movs	r3, #1
 80009ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ae:	2303      	movs	r3, #3
 80009b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	4619      	mov	r1, r3
 80009bc:	4809      	ldr	r0, [pc, #36]	@ (80009e4 <HAL_ADC_MspInit+0x8c>)
 80009be:	f001 f865 	bl	8001a8c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2100      	movs	r1, #0
 80009c6:	2012      	movs	r0, #18
 80009c8:	f001 f829 	bl	8001a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80009cc:	2012      	movs	r0, #18
 80009ce:	f001 f842 	bl	8001a56 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80009d2:	bf00      	nop
 80009d4:	3728      	adds	r7, #40	@ 0x28
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40012400 	.word	0x40012400
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40020000 	.word	0x40020000

080009e8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	@ 0x28
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a17      	ldr	r2, [pc, #92]	@ (8000a64 <HAL_SPI_MspInit+0x7c>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d127      	bne.n	8000a5a <HAL_SPI_MspInit+0x72>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a0a:	4b17      	ldr	r3, [pc, #92]	@ (8000a68 <HAL_SPI_MspInit+0x80>)
 8000a0c:	6a1b      	ldr	r3, [r3, #32]
 8000a0e:	4a16      	ldr	r2, [pc, #88]	@ (8000a68 <HAL_SPI_MspInit+0x80>)
 8000a10:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a14:	6213      	str	r3, [r2, #32]
 8000a16:	4b14      	ldr	r3, [pc, #80]	@ (8000a68 <HAL_SPI_MspInit+0x80>)
 8000a18:	6a1b      	ldr	r3, [r3, #32]
 8000a1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	4b11      	ldr	r3, [pc, #68]	@ (8000a68 <HAL_SPI_MspInit+0x80>)
 8000a24:	69db      	ldr	r3, [r3, #28]
 8000a26:	4a10      	ldr	r2, [pc, #64]	@ (8000a68 <HAL_SPI_MspInit+0x80>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	61d3      	str	r3, [r2, #28]
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a68 <HAL_SPI_MspInit+0x80>)
 8000a30:	69db      	ldr	r3, [r3, #28]
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a3a:	23e0      	movs	r3, #224	@ 0xe0
 8000a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a46:	2303      	movs	r3, #3
 8000a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a4a:	2305      	movs	r3, #5
 8000a4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4619      	mov	r1, r3
 8000a54:	4805      	ldr	r0, [pc, #20]	@ (8000a6c <HAL_SPI_MspInit+0x84>)
 8000a56:	f001 f819 	bl	8001a8c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000a5a:	bf00      	nop
 8000a5c:	3728      	adds	r7, #40	@ 0x28
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40013000 	.word	0x40013000
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40020000 	.word	0x40020000

08000a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a74:	bf00      	nop
 8000a76:	e7fd      	b.n	8000a74 <NMI_Handler+0x4>

08000a78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <HardFault_Handler+0x4>

08000a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <MemManage_Handler+0x4>

08000a88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <BusFault_Handler+0x4>

08000a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <UsageFault_Handler+0x4>

08000a98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr

08000aa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr

08000ab0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr

08000abc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac0:	f000 f906 	bl	8000cd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8000acc:	4802      	ldr	r0, [pc, #8]	@ (8000ad8 <ADC1_IRQHandler+0x10>)
 8000ace:	f000 fbab 	bl	8001228 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000028 	.word	0x20000028

08000adc <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr

08000ae8 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ae8:	f7ff fff8 	bl	8000adc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aec:	480b      	ldr	r0, [pc, #44]	@ (8000b1c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000aee:	490c      	ldr	r1, [pc, #48]	@ (8000b20 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000af0:	4a0c      	ldr	r2, [pc, #48]	@ (8000b24 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af4:	e002      	b.n	8000afc <LoopCopyDataInit>

08000af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afa:	3304      	adds	r3, #4

08000afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b00:	d3f9      	bcc.n	8000af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b02:	4a09      	ldr	r2, [pc, #36]	@ (8000b28 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b04:	4c09      	ldr	r4, [pc, #36]	@ (8000b2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b08:	e001      	b.n	8000b0e <LoopFillZerobss>

08000b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b0c:	3204      	adds	r2, #4

08000b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b10:	d3fb      	bcc.n	8000b0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b12:	f002 fcdb 	bl	80034cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b16:	f7ff fd57 	bl	80005c8 <main>
  bx lr
 8000b1a:	4770      	bx	lr
  ldr r0, =_sdata
 8000b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b20:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b24:	08003d9c 	.word	0x08003d9c
  ldr r2, =_sbss
 8000b28:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b2c:	200000d8 	.word	0x200000d8

08000b30 <COMP_ACQ_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b30:	e7fe      	b.n	8000b30 <COMP_ACQ_IRQHandler>

08000b32 <MAX7219_Init>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Init (void)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	af00      	add	r7, sp, #0
                               // configure "LOAD" as output

  MAX7219_Write(REG_SCAN_LIMIT, 7);                   // set up to scan all eight digits
 8000b36:	2107      	movs	r1, #7
 8000b38:	200b      	movs	r0, #11
 8000b3a:	f000 f847 	bl	8000bcc <MAX7219_Write>
  MAX7219_Write(REG_DECODE, 0x00);                    // set to "no decode" for all digits
 8000b3e:	2100      	movs	r1, #0
 8000b40:	2009      	movs	r0, #9
 8000b42:	f000 f843 	bl	8000bcc <MAX7219_Write>
  MAX7219_ShutdownStop();                             // select normal operation (i.e. not shutdown)
 8000b46:	f000 f809 	bl	8000b5c <MAX7219_ShutdownStop>
  MAX7219_DisplayTestStop();                          // select normal operation (i.e. not test mode)
 8000b4a:	f000 f80f 	bl	8000b6c <MAX7219_DisplayTestStop>
  MAX7219_Clear();                                    // clear all digits
 8000b4e:	f000 f827 	bl	8000ba0 <MAX7219_Clear>
  MAX7219_SetBrightness(INTENSITY_MAX);               // set to maximum intensity
 8000b52:	200f      	movs	r0, #15
 8000b54:	f000 f812 	bl	8000b7c <MAX7219_SetBrightness>
}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <MAX7219_ShutdownStop>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_ShutdownStop (void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_SHUTDOWN, 1);                     // put MAX7219 into "normal" mode
 8000b60:	2101      	movs	r1, #1
 8000b62:	200c      	movs	r0, #12
 8000b64:	f000 f832 	bl	8000bcc <MAX7219_Write>
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <MAX7219_DisplayTestStop>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_DisplayTestStop (void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_DISPLAY_TEST, 0);                 // put MAX7219 into "normal" mode
 8000b70:	2100      	movs	r1, #0
 8000b72:	200f      	movs	r0, #15
 8000b74:	f000 f82a 	bl	8000bcc <MAX7219_Write>
}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <MAX7219_SetBrightness>:
* Arguments  : brightness (0-15)
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_SetBrightness (char brightness)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
  brightness &= 0x0f;                                 // mask off extra bits
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	f003 030f 	and.w	r3, r3, #15
 8000b8c:	71fb      	strb	r3, [r7, #7]
  MAX7219_Write(REG_INTENSITY, brightness);           // set brightness
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	4619      	mov	r1, r3
 8000b92:	200a      	movs	r0, #10
 8000b94:	f000 f81a 	bl	8000bcc <MAX7219_Write>
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <MAX7219_Clear>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Clear (void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
  char i;
  for (i=0; i < 8; i++)
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	71fb      	strb	r3, [r7, #7]
 8000baa:	e007      	b.n	8000bbc <MAX7219_Clear+0x1c>
    MAX7219_Write(i, 0x00);                           // turn all segments off
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f000 f80b 	bl	8000bcc <MAX7219_Write>
  for (i=0; i < 8; i++)
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	71fb      	strb	r3, [r7, #7]
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	2b07      	cmp	r3, #7
 8000bc0:	d9f4      	bls.n	8000bac <MAX7219_Clear+0xc>
}
 8000bc2:	bf00      	nop
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <MAX7219_Write>:
*              dataout = data to write to MAX7219
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Write (unsigned char reg_number, unsigned char dataout)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	460a      	mov	r2, r1
 8000bd6:	71fb      	strb	r3, [r7, #7]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	71bb      	strb	r3, [r7, #6]
 MAX7219_nCS_PORT->BSRR = (uint32_t)MAX7219_nCS_PIN<<16;// nCS = 0                                          // take LOAD high to begin
 8000bdc:	4b09      	ldr	r3, [pc, #36]	@ (8000c04 <MAX7219_Write+0x38>)
 8000bde:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000be2:	619a      	str	r2, [r3, #24]
  MAX7219_SendByte(reg_number);                       // write register number to MAX7219
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 f80e 	bl	8000c08 <MAX7219_SendByte>
  MAX7219_SendByte(dataout);                          // write data to MAX7219
 8000bec:	79bb      	ldrb	r3, [r7, #6]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 f80a 	bl	8000c08 <MAX7219_SendByte>
  MAX7219_nCS_PORT->BSRR = (uint32_t)MAX7219_nCS_PIN;// nCS = 1                                       // take LOAD low to latch in data
 8000bf4:	4b03      	ldr	r3, [pc, #12]	@ (8000c04 <MAX7219_Write+0x38>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	619a      	str	r2, [r3, #24]
 }
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40020800 	.word	0x40020800

08000c08 <MAX7219_SendByte>:
* Returns    : none
*********************************************************************************************************
*/

static void MAX7219_SendByte (unsigned char dataout)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]

	HAL_SPI_Transmit(&hspi1, &dataout, 1, 1000);
 8000c12:	1df9      	adds	r1, r7, #7
 8000c14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c18:	2201      	movs	r2, #1
 8000c1a:	4803      	ldr	r0, [pc, #12]	@ (8000c28 <MAX7219_SendByte+0x20>)
 8000c1c:	f001 fee9 	bl	80029f2 <HAL_SPI_Transmit>

}
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	2000007c 	.word	0x2000007c

08000c2c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c32:	2300      	movs	r3, #0
 8000c34:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c36:	2003      	movs	r0, #3
 8000c38:	f000 fee6 	bl	8001a08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c3c:	200f      	movs	r0, #15
 8000c3e:	f000 f80d 	bl	8000c5c <HAL_InitTick>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d002      	beq.n	8000c4e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	71fb      	strb	r3, [r7, #7]
 8000c4c:	e001      	b.n	8000c52 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c4e:	f7ff fe55 	bl	80008fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c52:	79fb      	ldrb	r3, [r7, #7]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c64:	2300      	movs	r3, #0
 8000c66:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c68:	4b16      	ldr	r3, [pc, #88]	@ (8000cc4 <HAL_InitTick+0x68>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d022      	beq.n	8000cb6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c70:	4b15      	ldr	r3, [pc, #84]	@ (8000cc8 <HAL_InitTick+0x6c>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4b13      	ldr	r3, [pc, #76]	@ (8000cc4 <HAL_InitTick+0x68>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000c7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c84:	4618      	mov	r0, r3
 8000c86:	f000 fef4 	bl	8001a72 <HAL_SYSTICK_Config>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d10f      	bne.n	8000cb0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2b0f      	cmp	r3, #15
 8000c94:	d809      	bhi.n	8000caa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c96:	2200      	movs	r2, #0
 8000c98:	6879      	ldr	r1, [r7, #4]
 8000c9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c9e:	f000 febe 	bl	8001a1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ccc <HAL_InitTick+0x70>)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6013      	str	r3, [r2, #0]
 8000ca8:	e007      	b.n	8000cba <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	73fb      	strb	r3, [r7, #15]
 8000cae:	e004      	b.n	8000cba <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	73fb      	strb	r3, [r7, #15]
 8000cb4:	e001      	b.n	8000cba <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3710      	adds	r7, #16
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000008 	.word	0x20000008
 8000cc8:	20000000 	.word	0x20000000
 8000ccc:	20000004 	.word	0x20000004

08000cd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd4:	4b05      	ldr	r3, [pc, #20]	@ (8000cec <HAL_IncTick+0x1c>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b05      	ldr	r3, [pc, #20]	@ (8000cf0 <HAL_IncTick+0x20>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4413      	add	r3, r2
 8000cde:	4a03      	ldr	r2, [pc, #12]	@ (8000cec <HAL_IncTick+0x1c>)
 8000ce0:	6013      	str	r3, [r2, #0]
}
 8000ce2:	bf00      	nop
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bc80      	pop	{r7}
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	200000d4 	.word	0x200000d4
 8000cf0:	20000008 	.word	0x20000008

08000cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf8:	4b02      	ldr	r3, [pc, #8]	@ (8000d04 <HAL_GetTick+0x10>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr
 8000d04:	200000d4 	.word	0x200000d4

08000d08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d10:	f7ff fff0 	bl	8000cf4 <HAL_GetTick>
 8000d14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000d20:	d004      	beq.n	8000d2c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d22:	4b09      	ldr	r3, [pc, #36]	@ (8000d48 <HAL_Delay+0x40>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	4413      	add	r3, r2
 8000d2a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d2c:	bf00      	nop
 8000d2e:	f7ff ffe1 	bl	8000cf4 <HAL_GetTick>
 8000d32:	4602      	mov	r2, r0
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	1ad3      	subs	r3, r2, r3
 8000d38:	68fa      	ldr	r2, [r7, #12]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d8f7      	bhi.n	8000d2e <HAL_Delay+0x26>
  {
  }
}
 8000d3e:	bf00      	nop
 8000d40:	bf00      	nop
 8000d42:	3710      	adds	r7, #16
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20000008 	.word	0x20000008

08000d4c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08e      	sub	sp, #56	@ 0x38
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d54:	2300      	movs	r3, #0
 8000d56:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t tmp_cr1 = 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t tmp_cr2 = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d101      	bne.n	8000d6c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	e127      	b.n	8000fbc <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	691b      	ldr	r3, [r3, #16]
 8000d70:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d115      	bne.n	8000da6 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	651a      	str	r2, [r3, #80]	@ 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2200      	movs	r2, #0
 8000d84:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d88:	4b8e      	ldr	r3, [pc, #568]	@ (8000fc4 <HAL_ADC_Init+0x278>)
 8000d8a:	6a1b      	ldr	r3, [r3, #32]
 8000d8c:	4a8d      	ldr	r2, [pc, #564]	@ (8000fc4 <HAL_ADC_Init+0x278>)
 8000d8e:	f043 0301 	orr.w	r3, r3, #1
 8000d92:	6213      	str	r3, [r2, #32]
 8000d94:	4b8b      	ldr	r3, [pc, #556]	@ (8000fc4 <HAL_ADC_Init+0x278>)
 8000d96:	6a1b      	ldr	r3, [r3, #32]
 8000d98:	f003 0301 	and.w	r3, r3, #1
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f7ff fdd9 	bl	8000958 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000daa:	f003 0310 	and.w	r3, r3, #16
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f040 80ff 	bne.w	8000fb2 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000dbc:	f023 0302 	bic.w	r3, r3, #2
 8000dc0:	f043 0202 	orr.w	r2, r3, #2
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8000dc8:	4b7f      	ldr	r3, [pc, #508]	@ (8000fc8 <HAL_ADC_Init+0x27c>)
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	497c      	ldr	r1, [pc, #496]	@ (8000fc8 <HAL_ADC_Init+0x27c>)
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000de2:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000dea:	4619      	mov	r1, r3
 8000dec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000df0:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000df2:	6a3b      	ldr	r3, [r7, #32]
 8000df4:	fa93 f3a3 	rbit	r3, r3
 8000df8:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	fab3 f383 	clz	r3, r3
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8000e06:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000e0c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000e14:	4619      	mov	r1, r3
 8000e16:	2302      	movs	r3, #2
 8000e18:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e1c:	fa93 f3a3 	rbit	r3, r3
 8000e20:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8000e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e24:	fab3 f383 	clz	r3, r3
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8000e2e:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000e30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e32:	4313      	orrs	r3, r2
 8000e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e3a:	2b10      	cmp	r3, #16
 8000e3c:	d007      	beq.n	8000e4e <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000e46:	4313      	orrs	r3, r2
 8000e48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e58:	2b40      	cmp	r3, #64	@ 0x40
 8000e5a:	d04f      	beq.n	8000efc <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e62:	4313      	orrs	r3, r2
 8000e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000e6e:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	6912      	ldr	r2, [r2, #16]
 8000e74:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8000e78:	d003      	beq.n	8000e82 <HAL_ADC_Init+0x136>
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	6912      	ldr	r2, [r2, #16]
 8000e7e:	2a01      	cmp	r2, #1
 8000e80:	d102      	bne.n	8000e88 <HAL_ADC_Init+0x13c>
 8000e82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e86:	e000      	b.n	8000e8a <HAL_ADC_Init+0x13e>
 8000e88:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8000e8a:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000e8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d125      	bne.n	8000ee8 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d114      	bne.n	8000ed0 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8000eb0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	fa92 f2a2 	rbit	r2, r2
 8000eb8:	617a      	str	r2, [r7, #20]
  return result;
 8000eba:	697a      	ldr	r2, [r7, #20]
 8000ebc:	fab2 f282 	clz	r2, r2
 8000ec0:	b2d2      	uxtb	r2, r2
 8000ec2:	4093      	lsls	r3, r2
 8000ec4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ec8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	633b      	str	r3, [r7, #48]	@ 0x30
 8000ece:	e00b      	b.n	8000ee8 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed4:	f043 0220 	orr.w	r2, r3, #32
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	64da      	str	r2, [r3, #76]	@ 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000ee0:	f043 0201 	orr.w	r2, r3, #1
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	651a      	str	r2, [r3, #80]	@ 0x50
      else
      {
        /* do nothing */
      }
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	685a      	ldr	r2, [r3, #4]
 8000eee:	4b37      	ldr	r3, [pc, #220]	@ (8000fcc <HAL_ADC_Init+0x280>)
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	6812      	ldr	r2, [r2, #0]
 8000ef6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000ef8:	430b      	orrs	r3, r1
 8000efa:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	689a      	ldr	r2, [r3, #8]
 8000f02:	4b33      	ldr	r3, [pc, #204]	@ (8000fd0 <HAL_ADC_Init+0x284>)
 8000f04:	4013      	ands	r3, r2
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	6812      	ldr	r2, [r2, #0]
 8000f0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000f0c:	430b      	orrs	r3, r1
 8000f0e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	691b      	ldr	r3, [r3, #16]
 8000f14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000f18:	d003      	beq.n	8000f22 <HAL_ADC_Init+0x1d6>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	691b      	ldr	r3, [r3, #16]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d119      	bne.n	8000f56 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f28:	f023 71f8 	bic.w	r1, r3, #32505856	@ 0x1f00000
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f30:	3b01      	subs	r3, #1
 8000f32:	f04f 72f8 	mov.w	r2, #32505856	@ 0x1f00000
 8000f36:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	fa92 f2a2 	rbit	r2, r2
 8000f3e:	60fa      	str	r2, [r7, #12]
  return result;
 8000f40:	68fa      	ldr	r2, [r7, #12]
 8000f42:	fab2 f282 	clz	r2, r2
 8000f46:	b2d2      	uxtb	r2, r2
 8000f48:	fa03 f202 	lsl.w	r2, r3, r2
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	430a      	orrs	r2, r1
 8000f52:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f54:	e007      	b.n	8000f66 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f022 72f8 	bic.w	r2, r2, #32505856	@ 0x1f00000
 8000f64:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	689a      	ldr	r2, [r3, #8]
 8000f6c:	4b19      	ldr	r3, [pc, #100]	@ (8000fd4 <HAL_ADC_Init+0x288>)
 8000f6e:	4013      	ands	r3, r2
 8000f70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d10b      	bne.n	8000f8e <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	651a      	str	r2, [r3, #80]	@ 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f80:	f023 0303 	bic.w	r3, r3, #3
 8000f84:	f043 0201 	orr.w	r2, r3, #1
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000f8c:	e014      	b.n	8000fb8 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f92:	f023 0312 	bic.w	r3, r3, #18
 8000f96:	f043 0210 	orr.w	r2, r3, #16
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	64da      	str	r2, [r3, #76]	@ 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000fa2:	f043 0201 	orr.w	r2, r3, #1
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	651a      	str	r2, [r3, #80]	@ 0x50
      
      tmp_hal_status = HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000fb0:	e002      	b.n	8000fb8 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000fb8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3738      	adds	r7, #56	@ 0x38
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40012700 	.word	0x40012700
 8000fcc:	fcfc16ff 	.word	0xfcfc16ff
 8000fd0:	c0fff189 	.word	0xc0fff189
 8000fd4:	bf80fffe 	.word	0xbf80fffe

08000fd8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d101      	bne.n	8000ff2 <HAL_ADC_Start+0x1a>
 8000fee:	2302      	movs	r3, #2
 8000ff0:	e04e      	b.n	8001090 <HAL_ADC_Start+0xb8>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f000 fb92 	bl	8001724 <ADC_Enable>
 8001000:	4603      	mov	r3, r0
 8001002:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d141      	bne.n	800108e <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001012:	f023 0301 	bic.w	r3, r3, #1
 8001016:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001028:	2b00      	cmp	r3, #0
 800102a:	d007      	beq.n	800103c <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001030:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001034:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001040:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001044:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001048:	d106      	bne.n	8001058 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800104e:	f023 0206 	bic.w	r2, r3, #6
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	651a      	str	r2, [r3, #80]	@ 0x50
 8001056:	e002      	b.n	800105e <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800106e:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d107      	bne.n	800108e <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	689a      	ldr	r2, [r3, #8]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800108c:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 800108e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010a0:	2300      	movs	r3, #0
 80010a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d101      	bne.n	80010b2 <HAL_ADC_Stop+0x1a>
 80010ae:	2302      	movs	r3, #2
 80010b0:	e01a      	b.n	80010e8 <HAL_ADC_Stop+0x50>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2201      	movs	r2, #1
 80010b6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f000 fb8e 	bl	80017dc <ADC_ConversionStop_Disable>
 80010c0:	4603      	mov	r3, r0
 80010c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d109      	bne.n	80010de <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ce:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80010d2:	f023 0301 	bic.w	r3, r3, #1
 80010d6:	f043 0201 	orr.w	r2, r3, #1
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001108:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800110c:	d113      	bne.n	8001136 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001118:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800111c:	d10b      	bne.n	8001136 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001122:	f043 0220 	orr.w	r2, r3, #32
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e068      	b.n	8001208 <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001136:	f7ff fddd 	bl	8000cf4 <HAL_GetTick>
 800113a:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800113c:	e021      	b.n	8001182 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001144:	d01d      	beq.n	8001182 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d007      	beq.n	800115c <HAL_ADC_PollForConversion+0x6c>
 800114c:	f7ff fdd2 	bl	8000cf4 <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	429a      	cmp	r2, r3
 800115a:	d212      	bcs.n	8001182 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d10b      	bne.n	8001182 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116e:	f043 0204 	orr.w	r2, r3, #4
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

          return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e042      	b.n	8001208 <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 0302 	and.w	r3, r3, #2
 800118c:	2b00      	cmp	r3, #0
 800118e:	d0d6      	beq.n	800113e <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d104      	bne.n	80011a2 <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f06f 0212 	mvn.w	r2, #18
 80011a0:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d124      	bne.n	8001206 <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d11f      	bne.n	8001206 <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011cc:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d006      	beq.n	80011e2 <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d111      	bne.n	8001206 <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d105      	bne.n	8001206 <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fe:	f043 0201 	orr.w	r2, r3, #1
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800121e:	4618      	mov	r0, r3
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr

08001228 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	f003 0320 	and.w	r3, r3, #32
 8001246:	2b00      	cmp	r3, #0
 8001248:	d04c      	beq.n	80012e4 <HAL_ADC_IRQHandler+0xbc>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	f003 0302 	and.w	r3, r3, #2
 8001250:	2b00      	cmp	r3, #0
 8001252:	d047      	beq.n	80012e4 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001258:	f003 0310 	and.w	r3, r3, #16
 800125c:	2b00      	cmp	r3, #0
 800125e:	d105      	bne.n	800126c <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001264:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32L1, there is no independent flag of end of sequence.   */
      /*       The test of scan sequence on going is done either with scan    */
      /*       sequence disabled or with end of conversion flag set to        */
      /*       of end of sequence.                                            */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d12c      	bne.n	80012d4 <HAL_ADC_IRQHandler+0xac>
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001280:	2b00      	cmp	r3, #0
 8001282:	d127      	bne.n	80012d4 <HAL_ADC_IRQHandler+0xac>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800128e:	2b00      	cmp	r3, #0
 8001290:	d006      	beq.n	80012a0 <HAL_ADC_IRQHandler+0x78>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800129c:	2b00      	cmp	r3, #0
 800129e:	d119      	bne.n	80012d4 <HAL_ADC_IRQHandler+0xac>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f022 0220 	bic.w	r2, r2, #32
 80012ae:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	64da      	str	r2, [r3, #76]	@ 0x4c
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d105      	bne.n	80012d4 <HAL_ADC_IRQHandler+0xac>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012cc:	f043 0201 	orr.w	r2, r3, #1
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	64da      	str	r2, [r3, #76]	@ 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f000 f89e 	bl	8001416 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f06f 0212 	mvn.w	r2, #18
 80012e2:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d05a      	beq.n	80013a4 <HAL_ADC_IRQHandler+0x17c>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	f003 0304 	and.w	r3, r3, #4
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d055      	beq.n	80013a4 <HAL_ADC_IRQHandler+0x17c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fc:	f003 0310 	and.w	r3, r3, #16
 8001300:	2b00      	cmp	r3, #0
 8001302:	d105      	bne.n	8001310 <HAL_ADC_IRQHandler+0xe8>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001308:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Determine whether any further conversion upcoming on group injected  */
      /* by external trigger, scan sequence on going or by automatic injected */
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d13a      	bne.n	8001394 <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001324:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001328:	2b00      	cmp	r3, #0
 800132a:	d006      	beq.n	800133a <HAL_ADC_IRQHandler+0x112>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001336:	2b00      	cmp	r3, #0
 8001338:	d12c      	bne.n	8001394 <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001344:	2b00      	cmp	r3, #0
 8001346:	d125      	bne.n	8001394 <HAL_ADC_IRQHandler+0x16c>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001352:	2b00      	cmp	r3, #0
 8001354:	d11e      	bne.n	8001394 <HAL_ADC_IRQHandler+0x16c>
          (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800135c:	2b00      	cmp	r3, #0
 800135e:	d119      	bne.n	8001394 <HAL_ADC_IRQHandler+0x16c>
      {
        /* Disable ADC end of single conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	685a      	ldr	r2, [r3, #4]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800136e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001374:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	64da      	str	r2, [r3, #76]	@ 0x4c

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001384:	2b00      	cmp	r3, #0
 8001386:	d105      	bne.n	8001394 <HAL_ADC_IRQHandler+0x16c>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138c:	f043 0201 	orr.w	r2, r3, #1
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	64da      	str	r2, [r3, #76]	@ 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f000 fa62 	bl	800185e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f06f 020c 	mvn.w	r2, #12
 80013a2:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d012      	beq.n	80013d4 <HAL_ADC_IRQHandler+0x1ac>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d00d      	beq.n	80013d4 <HAL_ADC_IRQHandler+0x1ac>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013bc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	64da      	str	r2, [r3, #76]	@ 0x4c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f000 f82f 	bl	8001428 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f06f 0201 	mvn.w	r2, #1
 80013d2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check Overrun flag ========== */
  if((tmp_cr1 & ADC_IT_OVR) == ADC_IT_OVR)
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d017      	beq.n	800140e <HAL_ADC_IRQHandler+0x1e6>
  {
    if((tmp_sr & ADC_FLAG_OVR) == ADC_FLAG_OVR)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f003 0320 	and.w	r3, r3, #32
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d012      	beq.n	800140e <HAL_ADC_IRQHandler+0x1e6>
      /* Note: On STM32L1, ADC overrun can be set through other parameters    */
      /*       refer to description of parameter "EOCSelection" for more      */
      /*       details.                                                       */
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013ec:	f043 0202 	orr.w	r2, r3, #2
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	651a      	str	r2, [r3, #80]	@ 0x50
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f06f 0220 	mvn.w	r2, #32
 80013fc:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f000 f81b 	bl	800143a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the Overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f06f 0220 	mvn.w	r2, #32
 800140c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800140e:	bf00      	nop
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001416:	b480      	push	{r7}
 8001418:	b083      	sub	sp, #12
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr

08001428 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr

0800143a <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800143a:	b480      	push	{r7}
 800143c:	b083      	sub	sp, #12
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr

0800144c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001456:	2300      	movs	r3, #0
 8001458:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8001464:	2b01      	cmp	r3, #1
 8001466:	d101      	bne.n	800146c <HAL_ADC_ConfigChannel+0x20>
 8001468:	2302      	movs	r3, #2
 800146a:	e14f      	b.n	800170c <HAL_ADC_ConfigChannel+0x2c0>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2201      	movs	r2, #1
 8001470:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b06      	cmp	r3, #6
 800147a:	d81c      	bhi.n	80014b6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	4613      	mov	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	3b05      	subs	r3, #5
 800148e:	221f      	movs	r2, #31
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	4019      	ands	r1, r3
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	6818      	ldr	r0, [r3, #0]
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685a      	ldr	r2, [r3, #4]
 80014a0:	4613      	mov	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	4413      	add	r3, r2
 80014a6:	3b05      	subs	r3, #5
 80014a8:	fa00 f203 	lsl.w	r2, r0, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	430a      	orrs	r2, r1
 80014b2:	641a      	str	r2, [r3, #64]	@ 0x40
 80014b4:	e07e      	b.n	80015b4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b0c      	cmp	r3, #12
 80014bc:	d81c      	bhi.n	80014f8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	4613      	mov	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	3b23      	subs	r3, #35	@ 0x23
 80014d0:	221f      	movs	r2, #31
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	43db      	mvns	r3, r3
 80014d8:	4019      	ands	r1, r3
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	6818      	ldr	r0, [r3, #0]
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685a      	ldr	r2, [r3, #4]
 80014e2:	4613      	mov	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	4413      	add	r3, r2
 80014e8:	3b23      	subs	r3, #35	@ 0x23
 80014ea:	fa00 f203 	lsl.w	r2, r0, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	430a      	orrs	r2, r1
 80014f4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80014f6:	e05d      	b.n	80015b4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2b12      	cmp	r3, #18
 80014fe:	d81c      	bhi.n	800153a <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685a      	ldr	r2, [r3, #4]
 800150a:	4613      	mov	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	3b41      	subs	r3, #65	@ 0x41
 8001512:	221f      	movs	r2, #31
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	4019      	ands	r1, r3
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	6818      	ldr	r0, [r3, #0]
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685a      	ldr	r2, [r3, #4]
 8001524:	4613      	mov	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	3b41      	subs	r3, #65	@ 0x41
 800152c:	fa00 f203 	lsl.w	r2, r0, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	430a      	orrs	r2, r1
 8001536:	639a      	str	r2, [r3, #56]	@ 0x38
 8001538:	e03c      	b.n	80015b4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	2b18      	cmp	r3, #24
 8001540:	d81c      	bhi.n	800157c <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685a      	ldr	r2, [r3, #4]
 800154c:	4613      	mov	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4413      	add	r3, r2
 8001552:	3b5f      	subs	r3, #95	@ 0x5f
 8001554:	221f      	movs	r2, #31
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43db      	mvns	r3, r3
 800155c:	4019      	ands	r1, r3
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	6818      	ldr	r0, [r3, #0]
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685a      	ldr	r2, [r3, #4]
 8001566:	4613      	mov	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	4413      	add	r3, r2
 800156c:	3b5f      	subs	r3, #95	@ 0x5f
 800156e:	fa00 f203 	lsl.w	r2, r0, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	430a      	orrs	r2, r1
 8001578:	635a      	str	r2, [r3, #52]	@ 0x34
 800157a:	e01b      	b.n	80015b4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685a      	ldr	r2, [r3, #4]
 8001586:	4613      	mov	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	4413      	add	r3, r2
 800158c:	3b7d      	subs	r3, #125	@ 0x7d
 800158e:	221f      	movs	r2, #31
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	4019      	ands	r1, r3
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	6818      	ldr	r0, [r3, #0]
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	4613      	mov	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4413      	add	r3, r2
 80015a6:	3b7d      	subs	r3, #125	@ 0x7d
 80015a8:	fa00 f203 	lsl.w	r2, r0, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	430a      	orrs	r2, r1
 80015b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2b09      	cmp	r3, #9
 80015ba:	d81a      	bhi.n	80015f2 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6959      	ldr	r1, [r3, #20]
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	4613      	mov	r3, r2
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	4413      	add	r3, r2
 80015cc:	2207      	movs	r2, #7
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43db      	mvns	r3, r3
 80015d4:	4019      	ands	r1, r3
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	6898      	ldr	r0, [r3, #8]
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	4613      	mov	r3, r2
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	4413      	add	r3, r2
 80015e4:	fa00 f203 	lsl.w	r2, r0, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	430a      	orrs	r2, r1
 80015ee:	615a      	str	r2, [r3, #20]
 80015f0:	e05d      	b.n	80016ae <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2b13      	cmp	r3, #19
 80015f8:	d81c      	bhi.n	8001634 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6919      	ldr	r1, [r3, #16]
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4613      	mov	r3, r2
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	4413      	add	r3, r2
 800160a:	3b1e      	subs	r3, #30
 800160c:	2207      	movs	r2, #7
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43db      	mvns	r3, r3
 8001614:	4019      	ands	r1, r3
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	6898      	ldr	r0, [r3, #8]
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	4613      	mov	r3, r2
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	4413      	add	r3, r2
 8001624:	3b1e      	subs	r3, #30
 8001626:	fa00 f203 	lsl.w	r2, r0, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	430a      	orrs	r2, r1
 8001630:	611a      	str	r2, [r3, #16]
 8001632:	e03c      	b.n	80016ae <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b1d      	cmp	r3, #29
 800163a:	d81c      	bhi.n	8001676 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	68d9      	ldr	r1, [r3, #12]
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	4613      	mov	r3, r2
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	4413      	add	r3, r2
 800164c:	3b3c      	subs	r3, #60	@ 0x3c
 800164e:	2207      	movs	r2, #7
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	4019      	ands	r1, r3
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	6898      	ldr	r0, [r3, #8]
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4613      	mov	r3, r2
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	4413      	add	r3, r2
 8001666:	3b3c      	subs	r3, #60	@ 0x3c
 8001668:	fa00 f203 	lsl.w	r2, r0, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	430a      	orrs	r2, r1
 8001672:	60da      	str	r2, [r3, #12]
 8001674:	e01b      	b.n	80016ae <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	4613      	mov	r3, r2
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	4413      	add	r3, r2
 8001686:	3b5a      	subs	r3, #90	@ 0x5a
 8001688:	2207      	movs	r2, #7
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43db      	mvns	r3, r3
 8001690:	4019      	ands	r1, r3
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	6898      	ldr	r0, [r3, #8]
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	4613      	mov	r3, r2
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	4413      	add	r3, r2
 80016a0:	3b5a      	subs	r3, #90	@ 0x5a
 80016a2:	fa00 f203 	lsl.w	r2, r0, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2b10      	cmp	r3, #16
 80016b4:	d003      	beq.n	80016be <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80016ba:	2b11      	cmp	r3, #17
 80016bc:	d121      	bne.n	8001702 <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 80016be:	4b16      	ldr	r3, [pc, #88]	@ (8001718 <HAL_ADC_ConfigChannel+0x2cc>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d11b      	bne.n	8001702 <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80016ca:	4b13      	ldr	r3, [pc, #76]	@ (8001718 <HAL_ADC_ConfigChannel+0x2cc>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	4a12      	ldr	r2, [pc, #72]	@ (8001718 <HAL_ADC_ConfigChannel+0x2cc>)
 80016d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80016d4:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2b10      	cmp	r3, #16
 80016dc:	d111      	bne.n	8001702 <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80016de:	4b0f      	ldr	r3, [pc, #60]	@ (800171c <HAL_ADC_ConfigChannel+0x2d0>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001720 <HAL_ADC_ConfigChannel+0x2d4>)
 80016e4:	fba2 2303 	umull	r2, r3, r2, r3
 80016e8:	0c9a      	lsrs	r2, r3, #18
 80016ea:	4613      	mov	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80016f4:	e002      	b.n	80016fc <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	3b01      	subs	r3, #1
 80016fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1f9      	bne.n	80016f6 <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800170a:	7bfb      	ldrb	r3, [r7, #15]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	40012700 	.word	0x40012700
 800171c:	20000000 	.word	0x20000000
 8001720:	431bde83 	.word	0x431bde83

08001724 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800173e:	2b40      	cmp	r3, #64	@ 0x40
 8001740:	d043      	beq.n	80017ca <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f042 0201 	orr.w	r2, r2, #1
 8001750:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001752:	4b20      	ldr	r3, [pc, #128]	@ (80017d4 <ADC_Enable+0xb0>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a20      	ldr	r2, [pc, #128]	@ (80017d8 <ADC_Enable+0xb4>)
 8001758:	fba2 2303 	umull	r2, r3, r2, r3
 800175c:	0c9a      	lsrs	r2, r3, #18
 800175e:	4613      	mov	r3, r2
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	4413      	add	r3, r2
 8001764:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8001766:	e002      	b.n	800176e <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	3b01      	subs	r3, #1
 800176c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1f9      	bne.n	8001768 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8001774:	f7ff fabe 	bl	8000cf4 <HAL_GetTick>
 8001778:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800177a:	e01f      	b.n	80017bc <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 800177c:	f7ff faba 	bl	8000cf4 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d918      	bls.n	80017bc <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001794:	2b40      	cmp	r3, #64	@ 0x40
 8001796:	d011      	beq.n	80017bc <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800179c:	f043 0210 	orr.w	r2, r3, #16
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017a8:	f043 0201 	orr.w	r2, r3, #1
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

          return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e007      	b.n	80017cc <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017c6:	2b40      	cmp	r3, #64	@ 0x40
 80017c8:	d1d8      	bne.n	800177c <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3710      	adds	r7, #16
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20000000 	.word	0x20000000
 80017d8:	431bde83 	.word	0x431bde83

080017dc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017f2:	2b40      	cmp	r3, #64	@ 0x40
 80017f4:	d12e      	bne.n	8001854 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f022 0201 	bic.w	r2, r2, #1
 8001804:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001806:	f7ff fa75 	bl	8000cf4 <HAL_GetTick>
 800180a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 800180c:	e01b      	b.n	8001846 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 800180e:	f7ff fa71 	bl	8000cf4 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d914      	bls.n	8001846 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001826:	2b40      	cmp	r3, #64	@ 0x40
 8001828:	d10d      	bne.n	8001846 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800182e:	f043 0210 	orr.w	r2, r3, #16
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800183a:	f043 0201 	orr.w	r2, r3, #1
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	651a      	str	r2, [r3, #80]	@ 0x50

          return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e007      	b.n	8001856 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001850:	2b40      	cmp	r3, #64	@ 0x40
 8001852:	d0dc      	beq.n	800180e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr

08001870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001880:	4b0c      	ldr	r3, [pc, #48]	@ (80018b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001886:	68ba      	ldr	r2, [r7, #8]
 8001888:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800188c:	4013      	ands	r3, r2
 800188e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001898:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800189c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018a2:	4a04      	ldr	r2, [pc, #16]	@ (80018b4 <__NVIC_SetPriorityGrouping+0x44>)
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	60d3      	str	r3, [r2, #12]
}
 80018a8:	bf00      	nop
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018bc:	4b04      	ldr	r3, [pc, #16]	@ (80018d0 <__NVIC_GetPriorityGrouping+0x18>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	0a1b      	lsrs	r3, r3, #8
 80018c2:	f003 0307 	and.w	r3, r3, #7
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	db0b      	blt.n	80018fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	f003 021f 	and.w	r2, r3, #31
 80018ec:	4906      	ldr	r1, [pc, #24]	@ (8001908 <__NVIC_EnableIRQ+0x34>)
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	095b      	lsrs	r3, r3, #5
 80018f4:	2001      	movs	r0, #1
 80018f6:	fa00 f202 	lsl.w	r2, r0, r2
 80018fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr
 8001908:	e000e100 	.word	0xe000e100

0800190c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	6039      	str	r1, [r7, #0]
 8001916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191c:	2b00      	cmp	r3, #0
 800191e:	db0a      	blt.n	8001936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	b2da      	uxtb	r2, r3
 8001924:	490c      	ldr	r1, [pc, #48]	@ (8001958 <__NVIC_SetPriority+0x4c>)
 8001926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192a:	0112      	lsls	r2, r2, #4
 800192c:	b2d2      	uxtb	r2, r2
 800192e:	440b      	add	r3, r1
 8001930:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001934:	e00a      	b.n	800194c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	b2da      	uxtb	r2, r3
 800193a:	4908      	ldr	r1, [pc, #32]	@ (800195c <__NVIC_SetPriority+0x50>)
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	3b04      	subs	r3, #4
 8001944:	0112      	lsls	r2, r2, #4
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	440b      	add	r3, r1
 800194a:	761a      	strb	r2, [r3, #24]
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000e100 	.word	0xe000e100
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001960:	b480      	push	{r7}
 8001962:	b089      	sub	sp, #36	@ 0x24
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	f1c3 0307 	rsb	r3, r3, #7
 800197a:	2b04      	cmp	r3, #4
 800197c:	bf28      	it	cs
 800197e:	2304      	movcs	r3, #4
 8001980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	3304      	adds	r3, #4
 8001986:	2b06      	cmp	r3, #6
 8001988:	d902      	bls.n	8001990 <NVIC_EncodePriority+0x30>
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3b03      	subs	r3, #3
 800198e:	e000      	b.n	8001992 <NVIC_EncodePriority+0x32>
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001994:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43da      	mvns	r2, r3
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	401a      	ands	r2, r3
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	fa01 f303 	lsl.w	r3, r1, r3
 80019b2:	43d9      	mvns	r1, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b8:	4313      	orrs	r3, r2
         );
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3724      	adds	r7, #36	@ 0x24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr

080019c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019d4:	d301      	bcc.n	80019da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019d6:	2301      	movs	r3, #1
 80019d8:	e00f      	b.n	80019fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019da:	4a0a      	ldr	r2, [pc, #40]	@ (8001a04 <SysTick_Config+0x40>)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3b01      	subs	r3, #1
 80019e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019e2:	210f      	movs	r1, #15
 80019e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019e8:	f7ff ff90 	bl	800190c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019ec:	4b05      	ldr	r3, [pc, #20]	@ (8001a04 <SysTick_Config+0x40>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019f2:	4b04      	ldr	r3, [pc, #16]	@ (8001a04 <SysTick_Config+0x40>)
 80019f4:	2207      	movs	r2, #7
 80019f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	e000e010 	.word	0xe000e010

08001a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff ff2d 	bl	8001870 <__NVIC_SetPriorityGrouping>
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b086      	sub	sp, #24
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	4603      	mov	r3, r0
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
 8001a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a30:	f7ff ff42 	bl	80018b8 <__NVIC_GetPriorityGrouping>
 8001a34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	68b9      	ldr	r1, [r7, #8]
 8001a3a:	6978      	ldr	r0, [r7, #20]
 8001a3c:	f7ff ff90 	bl	8001960 <NVIC_EncodePriority>
 8001a40:	4602      	mov	r2, r0
 8001a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a46:	4611      	mov	r1, r2
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff5f 	bl	800190c <__NVIC_SetPriority>
}
 8001a4e:	bf00      	nop
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff ff35 	bl	80018d4 <__NVIC_EnableIRQ>
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff ffa2 	bl	80019c4 <SysTick_Config>
 8001a80:	4603      	mov	r3, r0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b087      	sub	sp, #28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001aa2:	e160      	b.n	8001d66 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f000 8152 	beq.w	8001d60 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f003 0303 	and.w	r3, r3, #3
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d005      	beq.n	8001ad4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d130      	bne.n	8001b36 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	2203      	movs	r2, #3
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	68da      	ldr	r2, [r3, #12]
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43db      	mvns	r3, r3
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	4013      	ands	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	091b      	lsrs	r3, r3, #4
 8001b20:	f003 0201 	and.w	r2, r3, #1
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f003 0303 	and.w	r3, r3, #3
 8001b3e:	2b03      	cmp	r3, #3
 8001b40:	d017      	beq.n	8001b72 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	2203      	movs	r2, #3
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43db      	mvns	r3, r3
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	4013      	ands	r3, r2
 8001b58:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f003 0303 	and.w	r3, r3, #3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d123      	bne.n	8001bc6 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	08da      	lsrs	r2, r3, #3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	3208      	adds	r2, #8
 8001b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b8a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	220f      	movs	r2, #15
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	691a      	ldr	r2, [r3, #16]
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	08da      	lsrs	r2, r3, #3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3208      	adds	r2, #8
 8001bc0:	6939      	ldr	r1, [r7, #16]
 8001bc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	2203      	movs	r2, #3
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f003 0203 	and.w	r2, r3, #3
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 80ac 	beq.w	8001d60 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c08:	4b5e      	ldr	r3, [pc, #376]	@ (8001d84 <HAL_GPIO_Init+0x2f8>)
 8001c0a:	6a1b      	ldr	r3, [r3, #32]
 8001c0c:	4a5d      	ldr	r2, [pc, #372]	@ (8001d84 <HAL_GPIO_Init+0x2f8>)
 8001c0e:	f043 0301 	orr.w	r3, r3, #1
 8001c12:	6213      	str	r3, [r2, #32]
 8001c14:	4b5b      	ldr	r3, [pc, #364]	@ (8001d84 <HAL_GPIO_Init+0x2f8>)
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c20:	4a59      	ldr	r2, [pc, #356]	@ (8001d88 <HAL_GPIO_Init+0x2fc>)
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	089b      	lsrs	r3, r3, #2
 8001c26:	3302      	adds	r3, #2
 8001c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	f003 0303 	and.w	r3, r3, #3
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	220f      	movs	r2, #15
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	4013      	ands	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a51      	ldr	r2, [pc, #324]	@ (8001d8c <HAL_GPIO_Init+0x300>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d025      	beq.n	8001c98 <HAL_GPIO_Init+0x20c>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a50      	ldr	r2, [pc, #320]	@ (8001d90 <HAL_GPIO_Init+0x304>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d01f      	beq.n	8001c94 <HAL_GPIO_Init+0x208>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4a4f      	ldr	r2, [pc, #316]	@ (8001d94 <HAL_GPIO_Init+0x308>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d019      	beq.n	8001c90 <HAL_GPIO_Init+0x204>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a4e      	ldr	r2, [pc, #312]	@ (8001d98 <HAL_GPIO_Init+0x30c>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d013      	beq.n	8001c8c <HAL_GPIO_Init+0x200>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a4d      	ldr	r2, [pc, #308]	@ (8001d9c <HAL_GPIO_Init+0x310>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d00d      	beq.n	8001c88 <HAL_GPIO_Init+0x1fc>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4a4c      	ldr	r2, [pc, #304]	@ (8001da0 <HAL_GPIO_Init+0x314>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d007      	beq.n	8001c84 <HAL_GPIO_Init+0x1f8>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4a4b      	ldr	r2, [pc, #300]	@ (8001da4 <HAL_GPIO_Init+0x318>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d101      	bne.n	8001c80 <HAL_GPIO_Init+0x1f4>
 8001c7c:	2306      	movs	r3, #6
 8001c7e:	e00c      	b.n	8001c9a <HAL_GPIO_Init+0x20e>
 8001c80:	2307      	movs	r3, #7
 8001c82:	e00a      	b.n	8001c9a <HAL_GPIO_Init+0x20e>
 8001c84:	2305      	movs	r3, #5
 8001c86:	e008      	b.n	8001c9a <HAL_GPIO_Init+0x20e>
 8001c88:	2304      	movs	r3, #4
 8001c8a:	e006      	b.n	8001c9a <HAL_GPIO_Init+0x20e>
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e004      	b.n	8001c9a <HAL_GPIO_Init+0x20e>
 8001c90:	2302      	movs	r3, #2
 8001c92:	e002      	b.n	8001c9a <HAL_GPIO_Init+0x20e>
 8001c94:	2301      	movs	r3, #1
 8001c96:	e000      	b.n	8001c9a <HAL_GPIO_Init+0x20e>
 8001c98:	2300      	movs	r3, #0
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	f002 0203 	and.w	r2, r2, #3
 8001ca0:	0092      	lsls	r2, r2, #2
 8001ca2:	4093      	lsls	r3, r2
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001caa:	4937      	ldr	r1, [pc, #220]	@ (8001d88 <HAL_GPIO_Init+0x2fc>)
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	089b      	lsrs	r3, r3, #2
 8001cb0:	3302      	adds	r3, #2
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cb8:	4b3b      	ldr	r3, [pc, #236]	@ (8001da8 <HAL_GPIO_Init+0x31c>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d003      	beq.n	8001cdc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001cdc:	4a32      	ldr	r2, [pc, #200]	@ (8001da8 <HAL_GPIO_Init+0x31c>)
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ce2:	4b31      	ldr	r3, [pc, #196]	@ (8001da8 <HAL_GPIO_Init+0x31c>)
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	43db      	mvns	r3, r3
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d06:	4a28      	ldr	r2, [pc, #160]	@ (8001da8 <HAL_GPIO_Init+0x31c>)
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d0c:	4b26      	ldr	r3, [pc, #152]	@ (8001da8 <HAL_GPIO_Init+0x31c>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	43db      	mvns	r3, r3
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d003      	beq.n	8001d30 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d30:	4a1d      	ldr	r2, [pc, #116]	@ (8001da8 <HAL_GPIO_Init+0x31c>)
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d36:	4b1c      	ldr	r3, [pc, #112]	@ (8001da8 <HAL_GPIO_Init+0x31c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	4013      	ands	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d5a:	4a13      	ldr	r2, [pc, #76]	@ (8001da8 <HAL_GPIO_Init+0x31c>)
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	3301      	adds	r3, #1
 8001d64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f47f ae97 	bne.w	8001aa4 <HAL_GPIO_Init+0x18>
  }
}
 8001d76:	bf00      	nop
 8001d78:	bf00      	nop
 8001d7a:	371c      	adds	r7, #28
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bc80      	pop	{r7}
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40010000 	.word	0x40010000
 8001d8c:	40020000 	.word	0x40020000
 8001d90:	40020400 	.word	0x40020400
 8001d94:	40020800 	.word	0x40020800
 8001d98:	40020c00 	.word	0x40020c00
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40021400 	.word	0x40021400
 8001da4:	40021800 	.word	0x40021800
 8001da8:	40010400 	.word	0x40010400

08001dac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	460b      	mov	r3, r1
 8001db6:	807b      	strh	r3, [r7, #2]
 8001db8:	4613      	mov	r3, r2
 8001dba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dbc:	787b      	ldrb	r3, [r7, #1]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dc2:	887a      	ldrh	r2, [r7, #2]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001dc8:	e003      	b.n	8001dd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001dca:	887b      	ldrh	r3, [r7, #2]
 8001dcc:	041a      	lsls	r2, r3, #16
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	619a      	str	r2, [r3, #24]
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr

08001ddc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b088      	sub	sp, #32
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e31d      	b.n	800242a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dee:	4b94      	ldr	r3, [pc, #592]	@ (8002040 <HAL_RCC_OscConfig+0x264>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 030c 	and.w	r3, r3, #12
 8001df6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001df8:	4b91      	ldr	r3, [pc, #580]	@ (8002040 <HAL_RCC_OscConfig+0x264>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e00:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d07b      	beq.n	8001f06 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d006      	beq.n	8001e22 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	2b0c      	cmp	r3, #12
 8001e18:	d10f      	bne.n	8001e3a <HAL_RCC_OscConfig+0x5e>
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e20:	d10b      	bne.n	8001e3a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e22:	4b87      	ldr	r3, [pc, #540]	@ (8002040 <HAL_RCC_OscConfig+0x264>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d06a      	beq.n	8001f04 <HAL_RCC_OscConfig+0x128>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d166      	bne.n	8001f04 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e2f7      	b.n	800242a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d106      	bne.n	8001e50 <HAL_RCC_OscConfig+0x74>
 8001e42:	4b7f      	ldr	r3, [pc, #508]	@ (8002040 <HAL_RCC_OscConfig+0x264>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a7e      	ldr	r2, [pc, #504]	@ (8002040 <HAL_RCC_OscConfig+0x264>)
 8001e48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e4c:	6013      	str	r3, [r2, #0]
 8001e4e:	e02d      	b.n	8001eac <HAL_RCC_OscConfig+0xd0>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10c      	bne.n	8001e72 <HAL_RCC_OscConfig+0x96>
 8001e58:	4b79      	ldr	r3, [pc, #484]	@ (8002040 <HAL_RCC_OscConfig+0x264>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a78      	ldr	r2, [pc, #480]	@ (8002040 <HAL_RCC_OscConfig+0x264>)
 8001e5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e62:	6013      	str	r3, [r2, #0]
 8001e64:	4b76      	ldr	r3, [pc, #472]	@ (8002040 <HAL_RCC_OscConfig+0x264>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a75      	ldr	r2, [pc, #468]	@ (8002040 <HAL_RCC_OscConfig+0x264>)
 8001e6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e6e:	6013      	str	r3, [r2, #0]
 8001e70:	e01c      	b.n	8001eac <HAL_RCC_OscConfig+0xd0>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b05      	cmp	r3, #5
 8001e78:	d10c      	bne.n	8001e94 <HAL_RCC_OscConfig+0xb8>
 8001e7a:	4b71      	ldr	r3, [pc, #452]	@ (8002040 <HAL_RCC_OscConfig+0x264>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a70      	ldr	r2, [pc, #448]	@ (8002040 <HAL_RCC_OscConfig+0x264>)
 8001e80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e84:	6013      	str	r3, [r2, #0]
 8001e86:	4b6e      	ldr	r3, [pc, #440]	@ (8002040 <HAL_RCC_OscConfig+0x264>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a6d      	ldr	r2, [pc, #436]	@ (8002040 <HAL_RCC_OscConfig+0x264>)
 8001e8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	e00b      	b.n	8001eac <HAL_RCC_OscConfig+0xd0>
 8001e94:	4b6a      	ldr	r3, [pc, #424]	@ (8002040 <HAL_RCC_OscConfig+0x264>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a69      	ldr	r2, [pc, #420]	@ (8002040 <HAL_RCC_OscConfig+0x264>)
 8001e9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e9e:	6013      	str	r3, [r2, #0]
 8001ea0:	4b67      	ldr	r3, [pc, #412]	@ (8002040 <HAL_RCC_OscConfig+0x264>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a66      	ldr	r2, [pc, #408]	@ (8002040 <HAL_RCC_OscConfig+0x264>)
 8001ea6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001eaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d013      	beq.n	8001edc <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb4:	f7fe ff1e 	bl	8000cf4 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ebc:	f7fe ff1a 	bl	8000cf4 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b64      	cmp	r3, #100	@ 0x64
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e2ad      	b.n	800242a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ece:	4b5c      	ldr	r3, [pc, #368]	@ (8002040 <HAL_RCC_OscConfig+0x264>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0f0      	beq.n	8001ebc <HAL_RCC_OscConfig+0xe0>
 8001eda:	e014      	b.n	8001f06 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001edc:	f7fe ff0a 	bl	8000cf4 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ee4:	f7fe ff06 	bl	8000cf4 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b64      	cmp	r3, #100	@ 0x64
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e299      	b.n	800242a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ef6:	4b52      	ldr	r3, [pc, #328]	@ (8002040 <HAL_RCC_OscConfig+0x264>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f0      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x108>
 8001f02:	e000      	b.n	8001f06 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d05a      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	2b04      	cmp	r3, #4
 8001f16:	d005      	beq.n	8001f24 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	2b0c      	cmp	r3, #12
 8001f1c:	d119      	bne.n	8001f52 <HAL_RCC_OscConfig+0x176>
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d116      	bne.n	8001f52 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f24:	4b46      	ldr	r3, [pc, #280]	@ (8002040 <HAL_RCC_OscConfig+0x264>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d005      	beq.n	8001f3c <HAL_RCC_OscConfig+0x160>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d001      	beq.n	8001f3c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e276      	b.n	800242a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f3c:	4b40      	ldr	r3, [pc, #256]	@ (8002040 <HAL_RCC_OscConfig+0x264>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	021b      	lsls	r3, r3, #8
 8001f4a:	493d      	ldr	r1, [pc, #244]	@ (8002040 <HAL_RCC_OscConfig+0x264>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f50:	e03a      	b.n	8001fc8 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d020      	beq.n	8001f9c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f5a:	4b3a      	ldr	r3, [pc, #232]	@ (8002044 <HAL_RCC_OscConfig+0x268>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f60:	f7fe fec8 	bl	8000cf4 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f68:	f7fe fec4 	bl	8000cf4 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e257      	b.n	800242a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f7a:	4b31      	ldr	r3, [pc, #196]	@ (8002040 <HAL_RCC_OscConfig+0x264>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0f0      	beq.n	8001f68 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f86:	4b2e      	ldr	r3, [pc, #184]	@ (8002040 <HAL_RCC_OscConfig+0x264>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	021b      	lsls	r3, r3, #8
 8001f94:	492a      	ldr	r1, [pc, #168]	@ (8002040 <HAL_RCC_OscConfig+0x264>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	604b      	str	r3, [r1, #4]
 8001f9a:	e015      	b.n	8001fc8 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f9c:	4b29      	ldr	r3, [pc, #164]	@ (8002044 <HAL_RCC_OscConfig+0x268>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa2:	f7fe fea7 	bl	8000cf4 <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001faa:	f7fe fea3 	bl	8000cf4 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e236      	b.n	800242a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001fbc:	4b20      	ldr	r3, [pc, #128]	@ (8002040 <HAL_RCC_OscConfig+0x264>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1f0      	bne.n	8001faa <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0310 	and.w	r3, r3, #16
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f000 80b8 	beq.w	8002146 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d170      	bne.n	80020be <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fdc:	4b18      	ldr	r3, [pc, #96]	@ (8002040 <HAL_RCC_OscConfig+0x264>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d005      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x218>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e21a      	b.n	800242a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a1a      	ldr	r2, [r3, #32]
 8001ff8:	4b11      	ldr	r3, [pc, #68]	@ (8002040 <HAL_RCC_OscConfig+0x264>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8002000:	429a      	cmp	r2, r3
 8002002:	d921      	bls.n	8002048 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	4618      	mov	r0, r3
 800200a:	f000 fc09 	bl	8002820 <RCC_SetFlashLatencyFromMSIRange>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e208      	b.n	800242a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002018:	4b09      	ldr	r3, [pc, #36]	@ (8002040 <HAL_RCC_OscConfig+0x264>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a1b      	ldr	r3, [r3, #32]
 8002024:	4906      	ldr	r1, [pc, #24]	@ (8002040 <HAL_RCC_OscConfig+0x264>)
 8002026:	4313      	orrs	r3, r2
 8002028:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800202a:	4b05      	ldr	r3, [pc, #20]	@ (8002040 <HAL_RCC_OscConfig+0x264>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	061b      	lsls	r3, r3, #24
 8002038:	4901      	ldr	r1, [pc, #4]	@ (8002040 <HAL_RCC_OscConfig+0x264>)
 800203a:	4313      	orrs	r3, r2
 800203c:	604b      	str	r3, [r1, #4]
 800203e:	e020      	b.n	8002082 <HAL_RCC_OscConfig+0x2a6>
 8002040:	40023800 	.word	0x40023800
 8002044:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002048:	4b99      	ldr	r3, [pc, #612]	@ (80022b0 <HAL_RCC_OscConfig+0x4d4>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	4996      	ldr	r1, [pc, #600]	@ (80022b0 <HAL_RCC_OscConfig+0x4d4>)
 8002056:	4313      	orrs	r3, r2
 8002058:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800205a:	4b95      	ldr	r3, [pc, #596]	@ (80022b0 <HAL_RCC_OscConfig+0x4d4>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	061b      	lsls	r3, r3, #24
 8002068:	4991      	ldr	r1, [pc, #580]	@ (80022b0 <HAL_RCC_OscConfig+0x4d4>)
 800206a:	4313      	orrs	r3, r2
 800206c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	4618      	mov	r0, r3
 8002074:	f000 fbd4 	bl	8002820 <RCC_SetFlashLatencyFromMSIRange>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e1d3      	b.n	800242a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	0b5b      	lsrs	r3, r3, #13
 8002088:	3301      	adds	r3, #1
 800208a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002092:	4a87      	ldr	r2, [pc, #540]	@ (80022b0 <HAL_RCC_OscConfig+0x4d4>)
 8002094:	6892      	ldr	r2, [r2, #8]
 8002096:	0912      	lsrs	r2, r2, #4
 8002098:	f002 020f 	and.w	r2, r2, #15
 800209c:	4985      	ldr	r1, [pc, #532]	@ (80022b4 <HAL_RCC_OscConfig+0x4d8>)
 800209e:	5c8a      	ldrb	r2, [r1, r2]
 80020a0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80020a2:	4a85      	ldr	r2, [pc, #532]	@ (80022b8 <HAL_RCC_OscConfig+0x4dc>)
 80020a4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80020a6:	4b85      	ldr	r3, [pc, #532]	@ (80022bc <HAL_RCC_OscConfig+0x4e0>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7fe fdd6 	bl	8000c5c <HAL_InitTick>
 80020b0:	4603      	mov	r3, r0
 80020b2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d045      	beq.n	8002146 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80020ba:	7bfb      	ldrb	r3, [r7, #15]
 80020bc:	e1b5      	b.n	800242a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d029      	beq.n	800211a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80020c6:	4b7e      	ldr	r3, [pc, #504]	@ (80022c0 <HAL_RCC_OscConfig+0x4e4>)
 80020c8:	2201      	movs	r2, #1
 80020ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020cc:	f7fe fe12 	bl	8000cf4 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020d4:	f7fe fe0e 	bl	8000cf4 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e1a1      	b.n	800242a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80020e6:	4b72      	ldr	r3, [pc, #456]	@ (80022b0 <HAL_RCC_OscConfig+0x4d4>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d0f0      	beq.n	80020d4 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020f2:	4b6f      	ldr	r3, [pc, #444]	@ (80022b0 <HAL_RCC_OscConfig+0x4d4>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a1b      	ldr	r3, [r3, #32]
 80020fe:	496c      	ldr	r1, [pc, #432]	@ (80022b0 <HAL_RCC_OscConfig+0x4d4>)
 8002100:	4313      	orrs	r3, r2
 8002102:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002104:	4b6a      	ldr	r3, [pc, #424]	@ (80022b0 <HAL_RCC_OscConfig+0x4d4>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	061b      	lsls	r3, r3, #24
 8002112:	4967      	ldr	r1, [pc, #412]	@ (80022b0 <HAL_RCC_OscConfig+0x4d4>)
 8002114:	4313      	orrs	r3, r2
 8002116:	604b      	str	r3, [r1, #4]
 8002118:	e015      	b.n	8002146 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800211a:	4b69      	ldr	r3, [pc, #420]	@ (80022c0 <HAL_RCC_OscConfig+0x4e4>)
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002120:	f7fe fde8 	bl	8000cf4 <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002128:	f7fe fde4 	bl	8000cf4 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e177      	b.n	800242a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800213a:	4b5d      	ldr	r3, [pc, #372]	@ (80022b0 <HAL_RCC_OscConfig+0x4d4>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1f0      	bne.n	8002128 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b00      	cmp	r3, #0
 8002150:	d030      	beq.n	80021b4 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d016      	beq.n	8002188 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800215a:	4b5a      	ldr	r3, [pc, #360]	@ (80022c4 <HAL_RCC_OscConfig+0x4e8>)
 800215c:	2201      	movs	r2, #1
 800215e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002160:	f7fe fdc8 	bl	8000cf4 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002168:	f7fe fdc4 	bl	8000cf4 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e157      	b.n	800242a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800217a:	4b4d      	ldr	r3, [pc, #308]	@ (80022b0 <HAL_RCC_OscConfig+0x4d4>)
 800217c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0f0      	beq.n	8002168 <HAL_RCC_OscConfig+0x38c>
 8002186:	e015      	b.n	80021b4 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002188:	4b4e      	ldr	r3, [pc, #312]	@ (80022c4 <HAL_RCC_OscConfig+0x4e8>)
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800218e:	f7fe fdb1 	bl	8000cf4 <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002196:	f7fe fdad 	bl	8000cf4 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e140      	b.n	800242a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80021a8:	4b41      	ldr	r3, [pc, #260]	@ (80022b0 <HAL_RCC_OscConfig+0x4d4>)
 80021aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1f0      	bne.n	8002196 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 80b5 	beq.w	800232c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021c2:	2300      	movs	r3, #0
 80021c4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021c6:	4b3a      	ldr	r3, [pc, #232]	@ (80022b0 <HAL_RCC_OscConfig+0x4d4>)
 80021c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10d      	bne.n	80021ee <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021d2:	4b37      	ldr	r3, [pc, #220]	@ (80022b0 <HAL_RCC_OscConfig+0x4d4>)
 80021d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d6:	4a36      	ldr	r2, [pc, #216]	@ (80022b0 <HAL_RCC_OscConfig+0x4d4>)
 80021d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021dc:	6253      	str	r3, [r2, #36]	@ 0x24
 80021de:	4b34      	ldr	r3, [pc, #208]	@ (80022b0 <HAL_RCC_OscConfig+0x4d4>)
 80021e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021e6:	60bb      	str	r3, [r7, #8]
 80021e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ea:	2301      	movs	r3, #1
 80021ec:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ee:	4b36      	ldr	r3, [pc, #216]	@ (80022c8 <HAL_RCC_OscConfig+0x4ec>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d118      	bne.n	800222c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021fa:	4b33      	ldr	r3, [pc, #204]	@ (80022c8 <HAL_RCC_OscConfig+0x4ec>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a32      	ldr	r2, [pc, #200]	@ (80022c8 <HAL_RCC_OscConfig+0x4ec>)
 8002200:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002204:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002206:	f7fe fd75 	bl	8000cf4 <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800220c:	e008      	b.n	8002220 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800220e:	f7fe fd71 	bl	8000cf4 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b64      	cmp	r3, #100	@ 0x64
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e104      	b.n	800242a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002220:	4b29      	ldr	r3, [pc, #164]	@ (80022c8 <HAL_RCC_OscConfig+0x4ec>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002228:	2b00      	cmp	r3, #0
 800222a:	d0f0      	beq.n	800220e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d106      	bne.n	8002242 <HAL_RCC_OscConfig+0x466>
 8002234:	4b1e      	ldr	r3, [pc, #120]	@ (80022b0 <HAL_RCC_OscConfig+0x4d4>)
 8002236:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002238:	4a1d      	ldr	r2, [pc, #116]	@ (80022b0 <HAL_RCC_OscConfig+0x4d4>)
 800223a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800223e:	6353      	str	r3, [r2, #52]	@ 0x34
 8002240:	e02d      	b.n	800229e <HAL_RCC_OscConfig+0x4c2>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10c      	bne.n	8002264 <HAL_RCC_OscConfig+0x488>
 800224a:	4b19      	ldr	r3, [pc, #100]	@ (80022b0 <HAL_RCC_OscConfig+0x4d4>)
 800224c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800224e:	4a18      	ldr	r2, [pc, #96]	@ (80022b0 <HAL_RCC_OscConfig+0x4d4>)
 8002250:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002254:	6353      	str	r3, [r2, #52]	@ 0x34
 8002256:	4b16      	ldr	r3, [pc, #88]	@ (80022b0 <HAL_RCC_OscConfig+0x4d4>)
 8002258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800225a:	4a15      	ldr	r2, [pc, #84]	@ (80022b0 <HAL_RCC_OscConfig+0x4d4>)
 800225c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002260:	6353      	str	r3, [r2, #52]	@ 0x34
 8002262:	e01c      	b.n	800229e <HAL_RCC_OscConfig+0x4c2>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	2b05      	cmp	r3, #5
 800226a:	d10c      	bne.n	8002286 <HAL_RCC_OscConfig+0x4aa>
 800226c:	4b10      	ldr	r3, [pc, #64]	@ (80022b0 <HAL_RCC_OscConfig+0x4d4>)
 800226e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002270:	4a0f      	ldr	r2, [pc, #60]	@ (80022b0 <HAL_RCC_OscConfig+0x4d4>)
 8002272:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002276:	6353      	str	r3, [r2, #52]	@ 0x34
 8002278:	4b0d      	ldr	r3, [pc, #52]	@ (80022b0 <HAL_RCC_OscConfig+0x4d4>)
 800227a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800227c:	4a0c      	ldr	r2, [pc, #48]	@ (80022b0 <HAL_RCC_OscConfig+0x4d4>)
 800227e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002282:	6353      	str	r3, [r2, #52]	@ 0x34
 8002284:	e00b      	b.n	800229e <HAL_RCC_OscConfig+0x4c2>
 8002286:	4b0a      	ldr	r3, [pc, #40]	@ (80022b0 <HAL_RCC_OscConfig+0x4d4>)
 8002288:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800228a:	4a09      	ldr	r2, [pc, #36]	@ (80022b0 <HAL_RCC_OscConfig+0x4d4>)
 800228c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002290:	6353      	str	r3, [r2, #52]	@ 0x34
 8002292:	4b07      	ldr	r3, [pc, #28]	@ (80022b0 <HAL_RCC_OscConfig+0x4d4>)
 8002294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002296:	4a06      	ldr	r2, [pc, #24]	@ (80022b0 <HAL_RCC_OscConfig+0x4d4>)
 8002298:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800229c:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d024      	beq.n	80022f0 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a6:	f7fe fd25 	bl	8000cf4 <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022ac:	e019      	b.n	80022e2 <HAL_RCC_OscConfig+0x506>
 80022ae:	bf00      	nop
 80022b0:	40023800 	.word	0x40023800
 80022b4:	08003538 	.word	0x08003538
 80022b8:	20000000 	.word	0x20000000
 80022bc:	20000004 	.word	0x20000004
 80022c0:	42470020 	.word	0x42470020
 80022c4:	42470680 	.word	0x42470680
 80022c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022cc:	f7fe fd12 	bl	8000cf4 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022da:	4293      	cmp	r3, r2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e0a3      	b.n	800242a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022e2:	4b54      	ldr	r3, [pc, #336]	@ (8002434 <HAL_RCC_OscConfig+0x658>)
 80022e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d0ee      	beq.n	80022cc <HAL_RCC_OscConfig+0x4f0>
 80022ee:	e014      	b.n	800231a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f0:	f7fe fd00 	bl	8000cf4 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80022f6:	e00a      	b.n	800230e <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022f8:	f7fe fcfc 	bl	8000cf4 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002306:	4293      	cmp	r3, r2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e08d      	b.n	800242a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800230e:	4b49      	ldr	r3, [pc, #292]	@ (8002434 <HAL_RCC_OscConfig+0x658>)
 8002310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002312:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1ee      	bne.n	80022f8 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800231a:	7ffb      	ldrb	r3, [r7, #31]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d105      	bne.n	800232c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002320:	4b44      	ldr	r3, [pc, #272]	@ (8002434 <HAL_RCC_OscConfig+0x658>)
 8002322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002324:	4a43      	ldr	r2, [pc, #268]	@ (8002434 <HAL_RCC_OscConfig+0x658>)
 8002326:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800232a:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002330:	2b00      	cmp	r3, #0
 8002332:	d079      	beq.n	8002428 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	2b0c      	cmp	r3, #12
 8002338:	d056      	beq.n	80023e8 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233e:	2b02      	cmp	r3, #2
 8002340:	d13b      	bne.n	80023ba <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002342:	4b3d      	ldr	r3, [pc, #244]	@ (8002438 <HAL_RCC_OscConfig+0x65c>)
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002348:	f7fe fcd4 	bl	8000cf4 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002350:	f7fe fcd0 	bl	8000cf4 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e063      	b.n	800242a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002362:	4b34      	ldr	r3, [pc, #208]	@ (8002434 <HAL_RCC_OscConfig+0x658>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f0      	bne.n	8002350 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800236e:	4b31      	ldr	r3, [pc, #196]	@ (8002434 <HAL_RCC_OscConfig+0x658>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800237e:	4319      	orrs	r1, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002384:	430b      	orrs	r3, r1
 8002386:	492b      	ldr	r1, [pc, #172]	@ (8002434 <HAL_RCC_OscConfig+0x658>)
 8002388:	4313      	orrs	r3, r2
 800238a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800238c:	4b2a      	ldr	r3, [pc, #168]	@ (8002438 <HAL_RCC_OscConfig+0x65c>)
 800238e:	2201      	movs	r2, #1
 8002390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002392:	f7fe fcaf 	bl	8000cf4 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800239a:	f7fe fcab 	bl	8000cf4 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e03e      	b.n	800242a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023ac:	4b21      	ldr	r3, [pc, #132]	@ (8002434 <HAL_RCC_OscConfig+0x658>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0f0      	beq.n	800239a <HAL_RCC_OscConfig+0x5be>
 80023b8:	e036      	b.n	8002428 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ba:	4b1f      	ldr	r3, [pc, #124]	@ (8002438 <HAL_RCC_OscConfig+0x65c>)
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c0:	f7fe fc98 	bl	8000cf4 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023c8:	f7fe fc94 	bl	8000cf4 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e027      	b.n	800242a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023da:	4b16      	ldr	r3, [pc, #88]	@ (8002434 <HAL_RCC_OscConfig+0x658>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f0      	bne.n	80023c8 <HAL_RCC_OscConfig+0x5ec>
 80023e6:	e01f      	b.n	8002428 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d101      	bne.n	80023f4 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e01a      	b.n	800242a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002434 <HAL_RCC_OscConfig+0x658>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002404:	429a      	cmp	r2, r3
 8002406:	d10d      	bne.n	8002424 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002412:	429a      	cmp	r2, r3
 8002414:	d106      	bne.n	8002424 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002420:	429a      	cmp	r2, r3
 8002422:	d001      	beq.n	8002428 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e000      	b.n	800242a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3720      	adds	r7, #32
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40023800 	.word	0x40023800
 8002438:	42470060 	.word	0x42470060

0800243c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d101      	bne.n	8002450 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e11a      	b.n	8002686 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002450:	4b8f      	ldr	r3, [pc, #572]	@ (8002690 <HAL_RCC_ClockConfig+0x254>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	429a      	cmp	r2, r3
 800245c:	d919      	bls.n	8002492 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d105      	bne.n	8002470 <HAL_RCC_ClockConfig+0x34>
 8002464:	4b8a      	ldr	r3, [pc, #552]	@ (8002690 <HAL_RCC_ClockConfig+0x254>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a89      	ldr	r2, [pc, #548]	@ (8002690 <HAL_RCC_ClockConfig+0x254>)
 800246a:	f043 0304 	orr.w	r3, r3, #4
 800246e:	6013      	str	r3, [r2, #0]
 8002470:	4b87      	ldr	r3, [pc, #540]	@ (8002690 <HAL_RCC_ClockConfig+0x254>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f023 0201 	bic.w	r2, r3, #1
 8002478:	4985      	ldr	r1, [pc, #532]	@ (8002690 <HAL_RCC_ClockConfig+0x254>)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	4313      	orrs	r3, r2
 800247e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002480:	4b83      	ldr	r3, [pc, #524]	@ (8002690 <HAL_RCC_ClockConfig+0x254>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	d001      	beq.n	8002492 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e0f9      	b.n	8002686 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d008      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800249e:	4b7d      	ldr	r3, [pc, #500]	@ (8002694 <HAL_RCC_ClockConfig+0x258>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	497a      	ldr	r1, [pc, #488]	@ (8002694 <HAL_RCC_ClockConfig+0x258>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 808e 	beq.w	80025da <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d107      	bne.n	80024d6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024c6:	4b73      	ldr	r3, [pc, #460]	@ (8002694 <HAL_RCC_ClockConfig+0x258>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d121      	bne.n	8002516 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e0d7      	b.n	8002686 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b03      	cmp	r3, #3
 80024dc:	d107      	bne.n	80024ee <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024de:	4b6d      	ldr	r3, [pc, #436]	@ (8002694 <HAL_RCC_ClockConfig+0x258>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d115      	bne.n	8002516 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e0cb      	b.n	8002686 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d107      	bne.n	8002506 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024f6:	4b67      	ldr	r3, [pc, #412]	@ (8002694 <HAL_RCC_ClockConfig+0x258>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d109      	bne.n	8002516 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e0bf      	b.n	8002686 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002506:	4b63      	ldr	r3, [pc, #396]	@ (8002694 <HAL_RCC_ClockConfig+0x258>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e0b7      	b.n	8002686 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002516:	4b5f      	ldr	r3, [pc, #380]	@ (8002694 <HAL_RCC_ClockConfig+0x258>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f023 0203 	bic.w	r2, r3, #3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	495c      	ldr	r1, [pc, #368]	@ (8002694 <HAL_RCC_ClockConfig+0x258>)
 8002524:	4313      	orrs	r3, r2
 8002526:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002528:	f7fe fbe4 	bl	8000cf4 <HAL_GetTick>
 800252c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b02      	cmp	r3, #2
 8002534:	d112      	bne.n	800255c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002536:	e00a      	b.n	800254e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002538:	f7fe fbdc 	bl	8000cf4 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002546:	4293      	cmp	r3, r2
 8002548:	d901      	bls.n	800254e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e09b      	b.n	8002686 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800254e:	4b51      	ldr	r3, [pc, #324]	@ (8002694 <HAL_RCC_ClockConfig+0x258>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 030c 	and.w	r3, r3, #12
 8002556:	2b08      	cmp	r3, #8
 8002558:	d1ee      	bne.n	8002538 <HAL_RCC_ClockConfig+0xfc>
 800255a:	e03e      	b.n	80025da <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	2b03      	cmp	r3, #3
 8002562:	d112      	bne.n	800258a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002564:	e00a      	b.n	800257c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002566:	f7fe fbc5 	bl	8000cf4 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002574:	4293      	cmp	r3, r2
 8002576:	d901      	bls.n	800257c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e084      	b.n	8002686 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800257c:	4b45      	ldr	r3, [pc, #276]	@ (8002694 <HAL_RCC_ClockConfig+0x258>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 030c 	and.w	r3, r3, #12
 8002584:	2b0c      	cmp	r3, #12
 8002586:	d1ee      	bne.n	8002566 <HAL_RCC_ClockConfig+0x12a>
 8002588:	e027      	b.n	80025da <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d11d      	bne.n	80025ce <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002592:	e00a      	b.n	80025aa <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002594:	f7fe fbae 	bl	8000cf4 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e06d      	b.n	8002686 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80025aa:	4b3a      	ldr	r3, [pc, #232]	@ (8002694 <HAL_RCC_ClockConfig+0x258>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 030c 	and.w	r3, r3, #12
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	d1ee      	bne.n	8002594 <HAL_RCC_ClockConfig+0x158>
 80025b6:	e010      	b.n	80025da <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025b8:	f7fe fb9c 	bl	8000cf4 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e05b      	b.n	8002686 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80025ce:	4b31      	ldr	r3, [pc, #196]	@ (8002694 <HAL_RCC_ClockConfig+0x258>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 030c 	and.w	r3, r3, #12
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1ee      	bne.n	80025b8 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025da:	4b2d      	ldr	r3, [pc, #180]	@ (8002690 <HAL_RCC_ClockConfig+0x254>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d219      	bcs.n	800261c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d105      	bne.n	80025fa <HAL_RCC_ClockConfig+0x1be>
 80025ee:	4b28      	ldr	r3, [pc, #160]	@ (8002690 <HAL_RCC_ClockConfig+0x254>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a27      	ldr	r2, [pc, #156]	@ (8002690 <HAL_RCC_ClockConfig+0x254>)
 80025f4:	f043 0304 	orr.w	r3, r3, #4
 80025f8:	6013      	str	r3, [r2, #0]
 80025fa:	4b25      	ldr	r3, [pc, #148]	@ (8002690 <HAL_RCC_ClockConfig+0x254>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f023 0201 	bic.w	r2, r3, #1
 8002602:	4923      	ldr	r1, [pc, #140]	@ (8002690 <HAL_RCC_ClockConfig+0x254>)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	4313      	orrs	r3, r2
 8002608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800260a:	4b21      	ldr	r3, [pc, #132]	@ (8002690 <HAL_RCC_ClockConfig+0x254>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	429a      	cmp	r2, r3
 8002616:	d001      	beq.n	800261c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e034      	b.n	8002686 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	2b00      	cmp	r3, #0
 8002626:	d008      	beq.n	800263a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002628:	4b1a      	ldr	r3, [pc, #104]	@ (8002694 <HAL_RCC_ClockConfig+0x258>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	4917      	ldr	r1, [pc, #92]	@ (8002694 <HAL_RCC_ClockConfig+0x258>)
 8002636:	4313      	orrs	r3, r2
 8002638:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0308 	and.w	r3, r3, #8
 8002642:	2b00      	cmp	r3, #0
 8002644:	d009      	beq.n	800265a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002646:	4b13      	ldr	r3, [pc, #76]	@ (8002694 <HAL_RCC_ClockConfig+0x258>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	490f      	ldr	r1, [pc, #60]	@ (8002694 <HAL_RCC_ClockConfig+0x258>)
 8002656:	4313      	orrs	r3, r2
 8002658:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800265a:	f000 f823 	bl	80026a4 <HAL_RCC_GetSysClockFreq>
 800265e:	4602      	mov	r2, r0
 8002660:	4b0c      	ldr	r3, [pc, #48]	@ (8002694 <HAL_RCC_ClockConfig+0x258>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	091b      	lsrs	r3, r3, #4
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	490b      	ldr	r1, [pc, #44]	@ (8002698 <HAL_RCC_ClockConfig+0x25c>)
 800266c:	5ccb      	ldrb	r3, [r1, r3]
 800266e:	fa22 f303 	lsr.w	r3, r2, r3
 8002672:	4a0a      	ldr	r2, [pc, #40]	@ (800269c <HAL_RCC_ClockConfig+0x260>)
 8002674:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002676:	4b0a      	ldr	r3, [pc, #40]	@ (80026a0 <HAL_RCC_ClockConfig+0x264>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f7fe faee 	bl	8000c5c <HAL_InitTick>
 8002680:	4603      	mov	r3, r0
 8002682:	72fb      	strb	r3, [r7, #11]

  return status;
 8002684:	7afb      	ldrb	r3, [r7, #11]
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40023c00 	.word	0x40023c00
 8002694:	40023800 	.word	0x40023800
 8002698:	08003538 	.word	0x08003538
 800269c:	20000000 	.word	0x20000000
 80026a0:	20000004 	.word	0x20000004

080026a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026a8:	b08e      	sub	sp, #56	@ 0x38
 80026aa:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80026ac:	4b58      	ldr	r3, [pc, #352]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x16c>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026b4:	f003 030c 	and.w	r3, r3, #12
 80026b8:	2b0c      	cmp	r3, #12
 80026ba:	d00d      	beq.n	80026d8 <HAL_RCC_GetSysClockFreq+0x34>
 80026bc:	2b0c      	cmp	r3, #12
 80026be:	f200 8092 	bhi.w	80027e6 <HAL_RCC_GetSysClockFreq+0x142>
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d002      	beq.n	80026cc <HAL_RCC_GetSysClockFreq+0x28>
 80026c6:	2b08      	cmp	r3, #8
 80026c8:	d003      	beq.n	80026d2 <HAL_RCC_GetSysClockFreq+0x2e>
 80026ca:	e08c      	b.n	80027e6 <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026cc:	4b51      	ldr	r3, [pc, #324]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x170>)
 80026ce:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80026d0:	e097      	b.n	8002802 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026d2:	4b51      	ldr	r3, [pc, #324]	@ (8002818 <HAL_RCC_GetSysClockFreq+0x174>)
 80026d4:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80026d6:	e094      	b.n	8002802 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80026d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026da:	0c9b      	lsrs	r3, r3, #18
 80026dc:	f003 020f 	and.w	r2, r3, #15
 80026e0:	4b4e      	ldr	r3, [pc, #312]	@ (800281c <HAL_RCC_GetSysClockFreq+0x178>)
 80026e2:	5c9b      	ldrb	r3, [r3, r2]
 80026e4:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80026e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026e8:	0d9b      	lsrs	r3, r3, #22
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	3301      	adds	r3, #1
 80026f0:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026f2:	4b47      	ldr	r3, [pc, #284]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x16c>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d021      	beq.n	8002742 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80026fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002700:	2200      	movs	r2, #0
 8002702:	61bb      	str	r3, [r7, #24]
 8002704:	61fa      	str	r2, [r7, #28]
 8002706:	4b44      	ldr	r3, [pc, #272]	@ (8002818 <HAL_RCC_GetSysClockFreq+0x174>)
 8002708:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800270c:	464a      	mov	r2, r9
 800270e:	fb03 f202 	mul.w	r2, r3, r2
 8002712:	2300      	movs	r3, #0
 8002714:	4644      	mov	r4, r8
 8002716:	fb04 f303 	mul.w	r3, r4, r3
 800271a:	4413      	add	r3, r2
 800271c:	4a3e      	ldr	r2, [pc, #248]	@ (8002818 <HAL_RCC_GetSysClockFreq+0x174>)
 800271e:	4644      	mov	r4, r8
 8002720:	fba4 0102 	umull	r0, r1, r4, r2
 8002724:	440b      	add	r3, r1
 8002726:	4619      	mov	r1, r3
 8002728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272a:	2200      	movs	r2, #0
 800272c:	613b      	str	r3, [r7, #16]
 800272e:	617a      	str	r2, [r7, #20]
 8002730:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002734:	f7fd fd22 	bl	800017c <__aeabi_uldivmod>
 8002738:	4602      	mov	r2, r0
 800273a:	460b      	mov	r3, r1
 800273c:	4613      	mov	r3, r2
 800273e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002740:	e04e      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002744:	2200      	movs	r2, #0
 8002746:	469a      	mov	sl, r3
 8002748:	4693      	mov	fp, r2
 800274a:	4652      	mov	r2, sl
 800274c:	465b      	mov	r3, fp
 800274e:	f04f 0000 	mov.w	r0, #0
 8002752:	f04f 0100 	mov.w	r1, #0
 8002756:	0159      	lsls	r1, r3, #5
 8002758:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800275c:	0150      	lsls	r0, r2, #5
 800275e:	4602      	mov	r2, r0
 8002760:	460b      	mov	r3, r1
 8002762:	ebb2 080a 	subs.w	r8, r2, sl
 8002766:	eb63 090b 	sbc.w	r9, r3, fp
 800276a:	f04f 0200 	mov.w	r2, #0
 800276e:	f04f 0300 	mov.w	r3, #0
 8002772:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002776:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800277a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800277e:	ebb2 0408 	subs.w	r4, r2, r8
 8002782:	eb63 0509 	sbc.w	r5, r3, r9
 8002786:	f04f 0200 	mov.w	r2, #0
 800278a:	f04f 0300 	mov.w	r3, #0
 800278e:	00eb      	lsls	r3, r5, #3
 8002790:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002794:	00e2      	lsls	r2, r4, #3
 8002796:	4614      	mov	r4, r2
 8002798:	461d      	mov	r5, r3
 800279a:	eb14 030a 	adds.w	r3, r4, sl
 800279e:	603b      	str	r3, [r7, #0]
 80027a0:	eb45 030b 	adc.w	r3, r5, fp
 80027a4:	607b      	str	r3, [r7, #4]
 80027a6:	f04f 0200 	mov.w	r2, #0
 80027aa:	f04f 0300 	mov.w	r3, #0
 80027ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027b2:	4629      	mov	r1, r5
 80027b4:	028b      	lsls	r3, r1, #10
 80027b6:	4620      	mov	r0, r4
 80027b8:	4629      	mov	r1, r5
 80027ba:	4604      	mov	r4, r0
 80027bc:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80027c0:	4601      	mov	r1, r0
 80027c2:	028a      	lsls	r2, r1, #10
 80027c4:	4610      	mov	r0, r2
 80027c6:	4619      	mov	r1, r3
 80027c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ca:	2200      	movs	r2, #0
 80027cc:	60bb      	str	r3, [r7, #8]
 80027ce:	60fa      	str	r2, [r7, #12]
 80027d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027d4:	f7fd fcd2 	bl	800017c <__aeabi_uldivmod>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	4613      	mov	r3, r2
 80027de:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      sysclockfreq = pllvco;
 80027e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027e2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80027e4:	e00d      	b.n	8002802 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80027e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x16c>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	0b5b      	lsrs	r3, r3, #13
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	3301      	adds	r3, #1
 80027f6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002800:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8002804:	4618      	mov	r0, r3
 8002806:	3738      	adds	r7, #56	@ 0x38
 8002808:	46bd      	mov	sp, r7
 800280a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800280e:	bf00      	nop
 8002810:	40023800 	.word	0x40023800
 8002814:	00f42400 	.word	0x00f42400
 8002818:	016e3600 	.word	0x016e3600
 800281c:	0800352c 	.word	0x0800352c

08002820 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002820:	b480      	push	{r7}
 8002822:	b087      	sub	sp, #28
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002828:	2300      	movs	r3, #0
 800282a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800282c:	4b29      	ldr	r3, [pc, #164]	@ (80028d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d12c      	bne.n	8002892 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002838:	4b26      	ldr	r3, [pc, #152]	@ (80028d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800283a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d005      	beq.n	8002850 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002844:	4b24      	ldr	r3, [pc, #144]	@ (80028d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 800284c:	617b      	str	r3, [r7, #20]
 800284e:	e016      	b.n	800287e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002850:	4b20      	ldr	r3, [pc, #128]	@ (80028d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002854:	4a1f      	ldr	r2, [pc, #124]	@ (80028d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002856:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800285a:	6253      	str	r3, [r2, #36]	@ 0x24
 800285c:	4b1d      	ldr	r3, [pc, #116]	@ (80028d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800285e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002860:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002868:	4b1b      	ldr	r3, [pc, #108]	@ (80028d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8002870:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002872:	4b18      	ldr	r3, [pc, #96]	@ (80028d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002876:	4a17      	ldr	r2, [pc, #92]	@ (80028d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002878:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800287c:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8002884:	d105      	bne.n	8002892 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800288c:	d101      	bne.n	8002892 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800288e:	2301      	movs	r3, #1
 8002890:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d105      	bne.n	80028a4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002898:	4b10      	ldr	r3, [pc, #64]	@ (80028dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a0f      	ldr	r2, [pc, #60]	@ (80028dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800289e:	f043 0304 	orr.w	r3, r3, #4
 80028a2:	6013      	str	r3, [r2, #0]
 80028a4:	4b0d      	ldr	r3, [pc, #52]	@ (80028dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f023 0201 	bic.w	r2, r3, #1
 80028ac:	490b      	ldr	r1, [pc, #44]	@ (80028dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80028b4:	4b09      	ldr	r3, [pc, #36]	@ (80028dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d001      	beq.n	80028c6 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e000      	b.n	80028c8 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	371c      	adds	r7, #28
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	40023800 	.word	0x40023800
 80028d8:	40007000 	.word	0x40007000
 80028dc:	40023c00 	.word	0x40023c00

080028e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e07b      	b.n	80029ea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d108      	bne.n	800290c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002902:	d009      	beq.n	8002918 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	61da      	str	r2, [r3, #28]
 800290a:	e005      	b.n	8002918 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d106      	bne.n	8002938 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7fe f858 	bl	80009e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2202      	movs	r2, #2
 800293c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800294e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002960:	431a      	orrs	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800296a:	431a      	orrs	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	431a      	orrs	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	431a      	orrs	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002988:	431a      	orrs	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002992:	431a      	orrs	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800299c:	ea42 0103 	orr.w	r1, r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	0c1b      	lsrs	r3, r3, #16
 80029b6:	f003 0104 	and.w	r1, r3, #4
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029be:	f003 0210 	and.w	r2, r3, #16
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	430a      	orrs	r2, r1
 80029c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	69da      	ldr	r2, [r3, #28]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b088      	sub	sp, #32
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	60f8      	str	r0, [r7, #12]
 80029fa:	60b9      	str	r1, [r7, #8]
 80029fc:	603b      	str	r3, [r7, #0]
 80029fe:	4613      	mov	r3, r2
 8002a00:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a02:	f7fe f977 	bl	8000cf4 <HAL_GetTick>
 8002a06:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002a08:	88fb      	ldrh	r3, [r7, #6]
 8002a0a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d001      	beq.n	8002a1c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e12a      	b.n	8002c72 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d002      	beq.n	8002a28 <HAL_SPI_Transmit+0x36>
 8002a22:	88fb      	ldrh	r3, [r7, #6]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e122      	b.n	8002c72 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d101      	bne.n	8002a3a <HAL_SPI_Transmit+0x48>
 8002a36:	2302      	movs	r3, #2
 8002a38:	e11b      	b.n	8002c72 <HAL_SPI_Transmit+0x280>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2203      	movs	r2, #3
 8002a46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	88fa      	ldrh	r2, [r7, #6]
 8002a5a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	88fa      	ldrh	r2, [r7, #6]
 8002a60:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a88:	d10f      	bne.n	8002aaa <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a98:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002aa8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ab4:	2b40      	cmp	r3, #64	@ 0x40
 8002ab6:	d007      	beq.n	8002ac8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ac6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ad0:	d152      	bne.n	8002b78 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d002      	beq.n	8002ae0 <HAL_SPI_Transmit+0xee>
 8002ada:	8b7b      	ldrh	r3, [r7, #26]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d145      	bne.n	8002b6c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae4:	881a      	ldrh	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af0:	1c9a      	adds	r2, r3, #2
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	3b01      	subs	r3, #1
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b04:	e032      	b.n	8002b6c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d112      	bne.n	8002b3a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b18:	881a      	ldrh	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b24:	1c9a      	adds	r2, r3, #2
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	3b01      	subs	r3, #1
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002b38:	e018      	b.n	8002b6c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b3a:	f7fe f8db 	bl	8000cf4 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d803      	bhi.n	8002b52 <HAL_SPI_Transmit+0x160>
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b50:	d102      	bne.n	8002b58 <HAL_SPI_Transmit+0x166>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d109      	bne.n	8002b6c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e082      	b.n	8002c72 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1c7      	bne.n	8002b06 <HAL_SPI_Transmit+0x114>
 8002b76:	e053      	b.n	8002c20 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d002      	beq.n	8002b86 <HAL_SPI_Transmit+0x194>
 8002b80:	8b7b      	ldrh	r3, [r7, #26]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d147      	bne.n	8002c16 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	330c      	adds	r3, #12
 8002b90:	7812      	ldrb	r2, [r2, #0]
 8002b92:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b98:	1c5a      	adds	r2, r3, #1
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002bac:	e033      	b.n	8002c16 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d113      	bne.n	8002be4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	330c      	adds	r3, #12
 8002bc6:	7812      	ldrb	r2, [r2, #0]
 8002bc8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bce:	1c5a      	adds	r2, r3, #1
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002be2:	e018      	b.n	8002c16 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002be4:	f7fe f886 	bl	8000cf4 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d803      	bhi.n	8002bfc <HAL_SPI_Transmit+0x20a>
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002bfa:	d102      	bne.n	8002c02 <HAL_SPI_Transmit+0x210>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d109      	bne.n	8002c16 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e02d      	b.n	8002c72 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1c6      	bne.n	8002bae <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c20:	69fa      	ldr	r2, [r7, #28]
 8002c22:	6839      	ldr	r1, [r7, #0]
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f000 f8b1 	bl	8002d8c <SPI_EndRxTxTransaction>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d002      	beq.n	8002c36 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2220      	movs	r2, #32
 8002c34:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10a      	bne.n	8002c54 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c3e:	2300      	movs	r3, #0
 8002c40:	617b      	str	r3, [r7, #20]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	617b      	str	r3, [r7, #20]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	617b      	str	r3, [r7, #20]
 8002c52:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e000      	b.n	8002c72 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002c70:	2300      	movs	r3, #0
  }
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3720      	adds	r7, #32
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
	...

08002c7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b088      	sub	sp, #32
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	603b      	str	r3, [r7, #0]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c8c:	f7fe f832 	bl	8000cf4 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c94:	1a9b      	subs	r3, r3, r2
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	4413      	add	r3, r2
 8002c9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c9c:	f7fe f82a 	bl	8000cf4 <HAL_GetTick>
 8002ca0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ca2:	4b39      	ldr	r3, [pc, #228]	@ (8002d88 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	015b      	lsls	r3, r3, #5
 8002ca8:	0d1b      	lsrs	r3, r3, #20
 8002caa:	69fa      	ldr	r2, [r7, #28]
 8002cac:	fb02 f303 	mul.w	r3, r2, r3
 8002cb0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002cb2:	e054      	b.n	8002d5e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002cba:	d050      	beq.n	8002d5e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002cbc:	f7fe f81a 	bl	8000cf4 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	69fa      	ldr	r2, [r7, #28]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d902      	bls.n	8002cd2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d13d      	bne.n	8002d4e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002ce0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002cea:	d111      	bne.n	8002d10 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cf4:	d004      	beq.n	8002d00 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cfe:	d107      	bne.n	8002d10 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d18:	d10f      	bne.n	8002d3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e017      	b.n	8002d7e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002d54:	2300      	movs	r3, #0
 8002d56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	4013      	ands	r3, r2
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	bf0c      	ite	eq
 8002d6e:	2301      	moveq	r3, #1
 8002d70:	2300      	movne	r3, #0
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	461a      	mov	r2, r3
 8002d76:	79fb      	ldrb	r3, [r7, #7]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d19b      	bne.n	8002cb4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3720      	adds	r7, #32
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	20000000 	.word	0x20000000

08002d8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b088      	sub	sp, #32
 8002d90:	af02      	add	r7, sp, #8
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	2102      	movs	r1, #2
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f7ff ff6a 	bl	8002c7c <SPI_WaitFlagStateUntilTimeout>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d007      	beq.n	8002dbe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002db2:	f043 0220 	orr.w	r2, r3, #32
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e032      	b.n	8002e24 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002dbe:	4b1b      	ldr	r3, [pc, #108]	@ (8002e2c <SPI_EndRxTxTransaction+0xa0>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a1b      	ldr	r2, [pc, #108]	@ (8002e30 <SPI_EndRxTxTransaction+0xa4>)
 8002dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc8:	0d5b      	lsrs	r3, r3, #21
 8002dca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002dce:	fb02 f303 	mul.w	r3, r2, r3
 8002dd2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ddc:	d112      	bne.n	8002e04 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	2200      	movs	r2, #0
 8002de6:	2180      	movs	r1, #128	@ 0x80
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f7ff ff47 	bl	8002c7c <SPI_WaitFlagStateUntilTimeout>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d016      	beq.n	8002e22 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df8:	f043 0220 	orr.w	r2, r3, #32
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e00f      	b.n	8002e24 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00a      	beq.n	8002e20 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e1a:	2b80      	cmp	r3, #128	@ 0x80
 8002e1c:	d0f2      	beq.n	8002e04 <SPI_EndRxTxTransaction+0x78>
 8002e1e:	e000      	b.n	8002e22 <SPI_EndRxTxTransaction+0x96>
        break;
 8002e20:	bf00      	nop
  }

  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	20000000 	.word	0x20000000
 8002e30:	165e9f81 	.word	0x165e9f81

08002e34 <writecommand>:
* Input          : command byte to write
* Output         : None
* Return         : None
*******************************************************************************/
void writecommand(unsigned char cmdout)           
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	71fb      	strb	r3, [r7, #7]

	//HAL_SPI_Transmit(&hspi1, &cmdout, 1, 100); // HAL_ERROR

	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1); // nCS = 1

	ST7735_D_nC_PORT->BSRR = (uint32_t)ST7735_D_nC_PIN << 16 ;// D/nC = 0  commande
 8002e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e68 <writecommand+0x34>)
 8002e40:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002e44:	619a      	str	r2, [r3, #24]
	ST7735_nCS_PORT->BSRR = (uint32_t)ST7735_nCS_PIN << 16 ;// nCS = 0
 8002e46:	4b08      	ldr	r3, [pc, #32]	@ (8002e68 <writecommand+0x34>)
 8002e48:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002e4c:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(&hspi1, &cmdout, 1, 100); //
 8002e4e:	1df9      	adds	r1, r7, #7
 8002e50:	2364      	movs	r3, #100	@ 0x64
 8002e52:	2201      	movs	r2, #1
 8002e54:	4805      	ldr	r0, [pc, #20]	@ (8002e6c <writecommand+0x38>)
 8002e56:	f7ff fdcc 	bl	80029f2 <HAL_SPI_Transmit>
	ST7735_nCS_PORT->BSRR = (uint32_t)ST7735_nCS_PIN;// nCS = 1
 8002e5a:	4b03      	ldr	r3, [pc, #12]	@ (8002e68 <writecommand+0x34>)
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	619a      	str	r2, [r3, #24]

}
 8002e60:	bf00      	nop
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40020800 	.word	0x40020800
 8002e6c:	2000007c 	.word	0x2000007c

08002e70 <writedata>:
* Input          : data byte to write
* Output         : None
* Return         : None
*******************************************************************************/
void writedata(unsigned char dataout)
{             
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	4603      	mov	r3, r0
 8002e78:	71fb      	strb	r3, [r7, #7]

	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1); // nCS = 1



	ST7735_D_nC_PORT->BSRR = (uint32_t)ST7735_D_nC_PIN ;// D/nC = 1  data
 8002e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002ea4 <writedata+0x34>)
 8002e7c:	2204      	movs	r2, #4
 8002e7e:	619a      	str	r2, [r3, #24]
		ST7735_nCS_PORT->BSRR = (uint32_t)ST7735_nCS_PIN << 16 ;// nCS = 0
 8002e80:	4b08      	ldr	r3, [pc, #32]	@ (8002ea4 <writedata+0x34>)
 8002e82:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002e86:	619a      	str	r2, [r3, #24]
		HAL_SPI_Transmit(&hspi1, &dataout, 1, 100);  //
 8002e88:	1df9      	adds	r1, r7, #7
 8002e8a:	2364      	movs	r3, #100	@ 0x64
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	4806      	ldr	r0, [pc, #24]	@ (8002ea8 <writedata+0x38>)
 8002e90:	f7ff fdaf 	bl	80029f2 <HAL_SPI_Transmit>
		ST7735_nCS_PORT->BSRR = (uint32_t)ST7735_nCS_PIN;// nCS = 1
 8002e94:	4b03      	ldr	r3, [pc, #12]	@ (8002ea4 <writedata+0x34>)
 8002e96:	2202      	movs	r2, #2
 8002e98:	619a      	str	r2, [r3, #24]

}
 8002e9a:	bf00      	nop
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40020800 	.word	0x40020800
 8002ea8:	2000007c 	.word	0x2000007c

08002eac <commandList>:
* Input          : addr = pointer on command byte array
* Output         : None
* Return         : None
*******************************************************************************/
void commandList(const uint8_t *addr)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint8_t  numCommands, numArgs;
  uint16_t ms;

  numCommands = pgm_read_byte(addr++);   // Number of commands to follow
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	1c5a      	adds	r2, r3, #1
 8002eb8:	607a      	str	r2, [r7, #4]
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	73fb      	strb	r3, [r7, #15]
  while(numCommands--) 
 8002ebe:	e033      	b.n	8002f28 <commandList+0x7c>
  {                 // For each command...
    writecommand(pgm_read_byte(addr++)); //   Read, issue command
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	1c5a      	adds	r2, r3, #1
 8002ec4:	607a      	str	r2, [r7, #4]
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff ffb3 	bl	8002e34 <writecommand>
    numArgs  = pgm_read_byte(addr++);    //   Number of args to follow
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	1c5a      	adds	r2, r3, #1
 8002ed2:	607a      	str	r2, [r7, #4]
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	73bb      	strb	r3, [r7, #14]
    ms       = numArgs & DELAY;          //   If hibit set, delay follows args
 8002ed8:	7bbb      	ldrb	r3, [r7, #14]
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ee0:	81bb      	strh	r3, [r7, #12]
    numArgs &= ~DELAY;                   //   Mask out delay bit
 8002ee2:	7bbb      	ldrb	r3, [r7, #14]
 8002ee4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ee8:	73bb      	strb	r3, [r7, #14]
    while(numArgs--) {                   //   For each argument...
 8002eea:	e006      	b.n	8002efa <commandList+0x4e>
      writedata(pgm_read_byte(addr++));  //     Read, issue argument
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	1c5a      	adds	r2, r3, #1
 8002ef0:	607a      	str	r2, [r7, #4]
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff ffbb 	bl	8002e70 <writedata>
    while(numArgs--) {                   //   For each argument...
 8002efa:	7bbb      	ldrb	r3, [r7, #14]
 8002efc:	1e5a      	subs	r2, r3, #1
 8002efe:	73ba      	strb	r2, [r7, #14]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1f3      	bne.n	8002eec <commandList+0x40>
    }

    if(ms) {
 8002f04:	89bb      	ldrh	r3, [r7, #12]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00e      	beq.n	8002f28 <commandList+0x7c>
      ms = pgm_read_byte(addr++); // Read post-command delay time (ms)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	1c5a      	adds	r2, r3, #1
 8002f0e:	607a      	str	r2, [r7, #4]
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	81bb      	strh	r3, [r7, #12]
      if(ms == 255) ms = 500;     // If 255, delay for 500 ms
 8002f14:	89bb      	ldrh	r3, [r7, #12]
 8002f16:	2bff      	cmp	r3, #255	@ 0xff
 8002f18:	d102      	bne.n	8002f20 <commandList+0x74>
 8002f1a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002f1e:	81bb      	strh	r3, [r7, #12]
  	HAL_Delay(500);
 8002f20:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002f24:	f7fd fef0 	bl	8000d08 <HAL_Delay>
  while(numCommands--) 
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
 8002f2a:	1e5a      	subs	r2, r3, #1
 8002f2c:	73fa      	strb	r2, [r7, #15]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1c6      	bne.n	8002ec0 <commandList+0x14>
    }
  }
}
 8002f32:	bf00      	nop
 8002f34:	bf00      	nop
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <setAddrWindow>:
*          	 : y2 vertical position = y1 to ST7735_TFTHEIGHT-1-y1
* Output         : None
* Return         : None
*******************************************************************************/
void setAddrWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8002f3c:	b590      	push	{r4, r7, lr}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	4604      	mov	r4, r0
 8002f44:	4608      	mov	r0, r1
 8002f46:	4611      	mov	r1, r2
 8002f48:	461a      	mov	r2, r3
 8002f4a:	4623      	mov	r3, r4
 8002f4c:	71fb      	strb	r3, [r7, #7]
 8002f4e:	4603      	mov	r3, r0
 8002f50:	71bb      	strb	r3, [r7, #6]
 8002f52:	460b      	mov	r3, r1
 8002f54:	717b      	strb	r3, [r7, #5]
 8002f56:	4613      	mov	r3, r2
 8002f58:	713b      	strb	r3, [r7, #4]

  writecommand(ST7735_CASET); // Column addr set
 8002f5a:	202a      	movs	r0, #42	@ 0x2a
 8002f5c:	f7ff ff6a 	bl	8002e34 <writecommand>
  writedata(0x00);
 8002f60:	2000      	movs	r0, #0
 8002f62:	f7ff ff85 	bl	8002e70 <writedata>
  writedata(x0);     // XSTART 
 8002f66:	79fb      	ldrb	r3, [r7, #7]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff ff81 	bl	8002e70 <writedata>
  writedata(0x00);
 8002f6e:	2000      	movs	r0, #0
 8002f70:	f7ff ff7e 	bl	8002e70 <writedata>
  writedata(x1);     // XEND
 8002f74:	797b      	ldrb	r3, [r7, #5]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7ff ff7a 	bl	8002e70 <writedata>

  writecommand(ST7735_RASET); // Row addr set
 8002f7c:	202b      	movs	r0, #43	@ 0x2b
 8002f7e:	f7ff ff59 	bl	8002e34 <writecommand>
  writedata(0x00);
 8002f82:	2000      	movs	r0, #0
 8002f84:	f7ff ff74 	bl	8002e70 <writedata>
  writedata(y0);     // YSTART
 8002f88:	79bb      	ldrb	r3, [r7, #6]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff ff70 	bl	8002e70 <writedata>
  writedata(0x00);
 8002f90:	2000      	movs	r0, #0
 8002f92:	f7ff ff6d 	bl	8002e70 <writedata>
  writedata(y1);     // YEND
 8002f96:	793b      	ldrb	r3, [r7, #4]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff ff69 	bl	8002e70 <writedata>

  writecommand(ST7735_RAMWR); // write to RAM
 8002f9e:	202c      	movs	r0, #44	@ 0x2c
 8002fa0:	f7ff ff48 	bl	8002e34 <writecommand>
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd90      	pop	{r4, r7, pc}

08002fac <init_TFT>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void init_TFT( void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1); // nRESET = 1
	attend_500ms();
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1); // nCS = 1*/

	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1); // DC= 1
	ST7735_D_nC_PORT->BSRR = (uint32_t)ST7735_D_nC_PIN ;// D/nC = 1  data
 8002fb2:	4b1e      	ldr	r3, [pc, #120]	@ (800302c <init_TFT+0x80>)
 8002fb4:	2204      	movs	r2, #4
 8002fb6:	619a      	str	r2, [r3, #24]
	ST7735_RST_PORT->BSRR = (uint32_t)ST7735_RST_PIN;// nRESET = 1
 8002fb8:	4b1d      	ldr	r3, [pc, #116]	@ (8003030 <init_TFT+0x84>)
 8002fba:	2204      	movs	r2, #4
 8002fbc:	619a      	str	r2, [r3, #24]
	ST7735_nCS_PORT->BSRR = (uint32_t)ST7735_nCS_PIN<<16;// nCS = 0
 8002fbe:	4b1b      	ldr	r3, [pc, #108]	@ (800302c <init_TFT+0x80>)
 8002fc0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002fc4:	619a      	str	r2, [r3, #24]
	HAL_Delay(500);
 8002fc6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002fca:	f7fd fe9d 	bl	8000d08 <HAL_Delay>
	ST7735_RST_PORT->BSRR = (uint32_t)ST7735_RST_PIN<<16;// nRESET = 0
 8002fce:	4b18      	ldr	r3, [pc, #96]	@ (8003030 <init_TFT+0x84>)
 8002fd0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002fd4:	619a      	str	r2, [r3, #24]
	HAL_Delay(500);
 8002fd6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002fda:	f7fd fe95 	bl	8000d08 <HAL_Delay>
	ST7735_RST_PORT->BSRR = (uint32_t)ST7735_RST_PIN;// nRESET = 1
 8002fde:	4b14      	ldr	r3, [pc, #80]	@ (8003030 <init_TFT+0x84>)
 8002fe0:	2204      	movs	r2, #4
 8002fe2:	619a      	str	r2, [r3, #24]
	HAL_Delay(500);
 8002fe4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002fe8:	f7fd fe8e 	bl	8000d08 <HAL_Delay>
	ST7735_nCS_PORT->BSRR = (uint32_t)ST7735_nCS_PIN;// nCS = 1
 8002fec:	4b0f      	ldr	r3, [pc, #60]	@ (800302c <init_TFT+0x80>)
 8002fee:	2202      	movs	r2, #2
 8002ff0:	619a      	str	r2, [r3, #24]
	
	// initialization instruction 
	commandList(Rcmd1);
 8002ff2:	4810      	ldr	r0, [pc, #64]	@ (8003034 <init_TFT+0x88>)
 8002ff4:	f7ff ff5a 	bl	8002eac <commandList>
	commandList(Rcmd2red);
 8002ff8:	480f      	ldr	r0, [pc, #60]	@ (8003038 <init_TFT+0x8c>)
 8002ffa:	f7ff ff57 	bl	8002eac <commandList>
	commandList(Rcmd3);
 8002ffe:	480f      	ldr	r0, [pc, #60]	@ (800303c <init_TFT+0x90>)
 8003000:	f7ff ff54 	bl	8002eac <commandList>

 	writecommand(ST7735_MADCTL);
 8003004:	2036      	movs	r0, #54	@ 0x36
 8003006:	f7ff ff15 	bl	8002e34 <writecommand>
	writedata(0xC0);
 800300a:	20c0      	movs	r0, #192	@ 0xc0
 800300c:	f7ff ff30 	bl	8002e70 <writedata>
   
	// all display background is black
	fillRect_TFT(0, 0,  ST7735_TFTWIDTH, ST7735_TFTHEIGHT_18, ST7735_BLACK);
 8003010:	2300      	movs	r3, #0
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	23a0      	movs	r3, #160	@ 0xa0
 8003016:	2280      	movs	r2, #128	@ 0x80
 8003018:	2100      	movs	r1, #0
 800301a:	2000      	movs	r0, #0
 800301c:	f000 f856 	bl	80030cc <fillRect_TFT>
	
	// display LOGO
	displayLogo_TFT();
 8003020:	f000 f998 	bl	8003354 <displayLogo_TFT>
}
 8003024:	bf00      	nop
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40020800 	.word	0x40020800
 8003030:	40020c00 	.word	0x40020c00
 8003034:	08003548 	.word	0x08003548
 8003038:	08003584 	.word	0x08003584
 800303c:	08003594 	.word	0x08003594

08003040 <drawPixel_TFT>:
*          	 : color = 16bits RGB=(565) soit RRRRRGGGGGGGBBBBB
* Output         : None
* Return         : None
*******************************************************************************/
void drawPixel_TFT(uint16_t x, uint16_t y, uint16_t color) 
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	4603      	mov	r3, r0
 8003048:	80fb      	strh	r3, [r7, #6]
 800304a:	460b      	mov	r3, r1
 800304c:	80bb      	strh	r3, [r7, #4]
 800304e:	4613      	mov	r3, r2
 8003050:	807b      	strh	r3, [r7, #2]
	 uint8_t hi, lo;
	
	// rudimentary clipping (drawChar w/big text requires this)
	if((x >= ST7735_TFTWIDTH) || (y >= ST7735_TFTHEIGHT_18)) return;
 8003052:	88fb      	ldrh	r3, [r7, #6]
 8003054:	2b7f      	cmp	r3, #127	@ 0x7f
 8003056:	d831      	bhi.n	80030bc <drawPixel_TFT+0x7c>
 8003058:	88bb      	ldrh	r3, [r7, #4]
 800305a:	2b9f      	cmp	r3, #159	@ 0x9f
 800305c:	d82e      	bhi.n	80030bc <drawPixel_TFT+0x7c>
	
	setAddrWindow(x, y, x+1, y+1);
 800305e:	88fb      	ldrh	r3, [r7, #6]
 8003060:	b2d8      	uxtb	r0, r3
 8003062:	88bb      	ldrh	r3, [r7, #4]
 8003064:	b2d9      	uxtb	r1, r3
 8003066:	88fb      	ldrh	r3, [r7, #6]
 8003068:	b2db      	uxtb	r3, r3
 800306a:	3301      	adds	r3, #1
 800306c:	b2da      	uxtb	r2, r3
 800306e:	88bb      	ldrh	r3, [r7, #4]
 8003070:	b2db      	uxtb	r3, r3
 8003072:	3301      	adds	r3, #1
 8003074:	b2db      	uxtb	r3, r3
 8003076:	f7ff ff61 	bl	8002f3c <setAddrWindow>
	
	hi = color >> 8;
 800307a:	887b      	ldrh	r3, [r7, #2]
 800307c:	0a1b      	lsrs	r3, r3, #8
 800307e:	b29b      	uxth	r3, r3
 8003080:	b2db      	uxtb	r3, r3
 8003082:	73fb      	strb	r3, [r7, #15]
	lo = color ;
 8003084:	887b      	ldrh	r3, [r7, #2]
 8003086:	b2db      	uxtb	r3, r3
 8003088:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&hspi1, &lo, 1, 100); //

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1); // nCS = 1*/


	ST7735_D_nC_PORT->BSRR = (uint32_t)ST7735_D_nC_PIN ;// D/nC = 1  data
 800308a:	4b0e      	ldr	r3, [pc, #56]	@ (80030c4 <drawPixel_TFT+0x84>)
 800308c:	2204      	movs	r2, #4
 800308e:	619a      	str	r2, [r3, #24]
	ST7735_nCS_PORT->BSRR = (uint32_t)ST7735_nCS_PIN<<16;// nCS = 0
 8003090:	4b0c      	ldr	r3, [pc, #48]	@ (80030c4 <drawPixel_TFT+0x84>)
 8003092:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003096:	619a      	str	r2, [r3, #24]

	HAL_SPI_Transmit(&hspi1, &hi, 1, 100); //
 8003098:	f107 010f 	add.w	r1, r7, #15
 800309c:	2364      	movs	r3, #100	@ 0x64
 800309e:	2201      	movs	r2, #1
 80030a0:	4809      	ldr	r0, [pc, #36]	@ (80030c8 <drawPixel_TFT+0x88>)
 80030a2:	f7ff fca6 	bl	80029f2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &lo, 1, 100); //
 80030a6:	f107 010e 	add.w	r1, r7, #14
 80030aa:	2364      	movs	r3, #100	@ 0x64
 80030ac:	2201      	movs	r2, #1
 80030ae:	4806      	ldr	r0, [pc, #24]	@ (80030c8 <drawPixel_TFT+0x88>)
 80030b0:	f7ff fc9f 	bl	80029f2 <HAL_SPI_Transmit>

	ST7735_nCS_PORT->BSRR = (uint32_t)ST7735_nCS_PIN;// nCS = 1
 80030b4:	4b03      	ldr	r3, [pc, #12]	@ (80030c4 <drawPixel_TFT+0x84>)
 80030b6:	2202      	movs	r2, #2
 80030b8:	619a      	str	r2, [r3, #24]
 80030ba:	e000      	b.n	80030be <drawPixel_TFT+0x7e>
	if((x >= ST7735_TFTWIDTH) || (y >= ST7735_TFTHEIGHT_18)) return;
 80030bc:	bf00      	nop
}
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	40020800 	.word	0x40020800
 80030c8:	2000007c 	.word	0x2000007c

080030cc <fillRect_TFT>:
*          	 : color = 16bits RGB(565) soit RRRRRGGGGGGGBBBBB
* Output         : None
* Return         : None
*******************************************************************************/
void fillRect_TFT(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) 
{
 80030cc:	b590      	push	{r4, r7, lr}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4604      	mov	r4, r0
 80030d4:	4608      	mov	r0, r1
 80030d6:	4611      	mov	r1, r2
 80030d8:	461a      	mov	r2, r3
 80030da:	4623      	mov	r3, r4
 80030dc:	80fb      	strh	r3, [r7, #6]
 80030de:	4603      	mov	r3, r0
 80030e0:	80bb      	strh	r3, [r7, #4]
 80030e2:	460b      	mov	r3, r1
 80030e4:	807b      	strh	r3, [r7, #2]
 80030e6:	4613      	mov	r3, r2
 80030e8:	803b      	strh	r3, [r7, #0]
	 uint8_t hi, lo;
	
	// rudimentary clipping (drawChar w/big text requires this)
	if((x >= ST7735_TFTWIDTH) || (y >= ST7735_TFTHEIGHT_18)) return;
 80030ea:	88fb      	ldrh	r3, [r7, #6]
 80030ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80030ee:	d85e      	bhi.n	80031ae <fillRect_TFT+0xe2>
 80030f0:	88bb      	ldrh	r3, [r7, #4]
 80030f2:	2b9f      	cmp	r3, #159	@ 0x9f
 80030f4:	d85b      	bhi.n	80031ae <fillRect_TFT+0xe2>
	
	if((x + w - 1) >= ST7735_TFTWIDTH)  w = ST7735_TFTWIDTH  - x;
 80030f6:	88fa      	ldrh	r2, [r7, #6]
 80030f8:	887b      	ldrh	r3, [r7, #2]
 80030fa:	4413      	add	r3, r2
 80030fc:	2b80      	cmp	r3, #128	@ 0x80
 80030fe:	dd03      	ble.n	8003108 <fillRect_TFT+0x3c>
 8003100:	88fb      	ldrh	r3, [r7, #6]
 8003102:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8003106:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_TFTHEIGHT_18) h = ST7735_TFTHEIGHT_18 - y;
 8003108:	88ba      	ldrh	r2, [r7, #4]
 800310a:	883b      	ldrh	r3, [r7, #0]
 800310c:	4413      	add	r3, r2
 800310e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003110:	dd03      	ble.n	800311a <fillRect_TFT+0x4e>
 8003112:	88bb      	ldrh	r3, [r7, #4]
 8003114:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 8003118:	803b      	strh	r3, [r7, #0]
	
	// select window  
	setAddrWindow(x, y, x+w-1, y+h-1);
 800311a:	88fb      	ldrh	r3, [r7, #6]
 800311c:	b2d8      	uxtb	r0, r3
 800311e:	88bb      	ldrh	r3, [r7, #4]
 8003120:	b2d9      	uxtb	r1, r3
 8003122:	88fb      	ldrh	r3, [r7, #6]
 8003124:	b2da      	uxtb	r2, r3
 8003126:	887b      	ldrh	r3, [r7, #2]
 8003128:	b2db      	uxtb	r3, r3
 800312a:	4413      	add	r3, r2
 800312c:	b2db      	uxtb	r3, r3
 800312e:	3b01      	subs	r3, #1
 8003130:	b2dc      	uxtb	r4, r3
 8003132:	88bb      	ldrh	r3, [r7, #4]
 8003134:	b2da      	uxtb	r2, r3
 8003136:	883b      	ldrh	r3, [r7, #0]
 8003138:	b2db      	uxtb	r3, r3
 800313a:	4413      	add	r3, r2
 800313c:	b2db      	uxtb	r3, r3
 800313e:	3b01      	subs	r3, #1
 8003140:	b2db      	uxtb	r3, r3
 8003142:	4622      	mov	r2, r4
 8003144:	f7ff fefa 	bl	8002f3c <setAddrWindow>
	
	hi = color >> 8;
 8003148:	8c3b      	ldrh	r3, [r7, #32]
 800314a:	0a1b      	lsrs	r3, r3, #8
 800314c:	b29b      	uxth	r3, r3
 800314e:	b2db      	uxtb	r3, r3
 8003150:	73fb      	strb	r3, [r7, #15]
	lo = color ;
 8003152:	8c3b      	ldrh	r3, [r7, #32]
 8003154:	b2db      	uxtb	r3, r3
 8003156:	73bb      	strb	r3, [r7, #14]
	*/

	/*HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1); // D/nC = 1  data
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0); // nCS = 0*/

	ST7735_D_nC_PORT->BSRR = (uint32_t)ST7735_D_nC_PIN ;// D/nC = 1  data
 8003158:	4b17      	ldr	r3, [pc, #92]	@ (80031b8 <fillRect_TFT+0xec>)
 800315a:	2204      	movs	r2, #4
 800315c:	619a      	str	r2, [r3, #24]
	ST7735_nCS_PORT->BSRR = (uint32_t)ST7735_nCS_PIN<<16;// nCS = 0
 800315e:	4b16      	ldr	r3, [pc, #88]	@ (80031b8 <fillRect_TFT+0xec>)
 8003160:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003164:	619a      	str	r2, [r3, #24]

	for(y=h; y>0; y--)
 8003166:	883b      	ldrh	r3, [r7, #0]
 8003168:	80bb      	strh	r3, [r7, #4]
 800316a:	e019      	b.n	80031a0 <fillRect_TFT+0xd4>
	{
		for(x=w; x>0; x--)
 800316c:	887b      	ldrh	r3, [r7, #2]
 800316e:	80fb      	strh	r3, [r7, #6]
 8003170:	e010      	b.n	8003194 <fillRect_TFT+0xc8>
		{

			HAL_SPI_Transmit(&hspi1, &hi, 1, 100); //
 8003172:	f107 010f 	add.w	r1, r7, #15
 8003176:	2364      	movs	r3, #100	@ 0x64
 8003178:	2201      	movs	r2, #1
 800317a:	4810      	ldr	r0, [pc, #64]	@ (80031bc <fillRect_TFT+0xf0>)
 800317c:	f7ff fc39 	bl	80029f2 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi1, &lo, 1, 100); //
 8003180:	f107 010e 	add.w	r1, r7, #14
 8003184:	2364      	movs	r3, #100	@ 0x64
 8003186:	2201      	movs	r2, #1
 8003188:	480c      	ldr	r0, [pc, #48]	@ (80031bc <fillRect_TFT+0xf0>)
 800318a:	f7ff fc32 	bl	80029f2 <HAL_SPI_Transmit>
		for(x=w; x>0; x--)
 800318e:	88fb      	ldrh	r3, [r7, #6]
 8003190:	3b01      	subs	r3, #1
 8003192:	80fb      	strh	r3, [r7, #6]
 8003194:	88fb      	ldrh	r3, [r7, #6]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1eb      	bne.n	8003172 <fillRect_TFT+0xa6>
	for(y=h; y>0; y--)
 800319a:	88bb      	ldrh	r3, [r7, #4]
 800319c:	3b01      	subs	r3, #1
 800319e:	80bb      	strh	r3, [r7, #4]
 80031a0:	88bb      	ldrh	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1e2      	bne.n	800316c <fillRect_TFT+0xa0>

		 }
	}

	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1); // nCS = 1
	ST7735_nCS_PORT->BSRR = (uint32_t)ST7735_nCS_PIN;// nCS = 1
 80031a6:	4b04      	ldr	r3, [pc, #16]	@ (80031b8 <fillRect_TFT+0xec>)
 80031a8:	2202      	movs	r2, #2
 80031aa:	619a      	str	r2, [r3, #24]
 80031ac:	e000      	b.n	80031b0 <fillRect_TFT+0xe4>
	if((x >= ST7735_TFTWIDTH) || (y >= ST7735_TFTHEIGHT_18)) return;
 80031ae:	bf00      	nop
	
}
 80031b0:	3714      	adds	r7, #20
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd90      	pop	{r4, r7, pc}
 80031b6:	bf00      	nop
 80031b8:	40020800 	.word	0x40020800
 80031bc:	2000007c 	.word	0x2000007c

080031c0 <displayChar_TFT>:
*          	 : size = 1 to 10
* Output         : None
* Return         : None
*******************************************************************************/
void displayChar_TFT(uint16_t x, uint16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 80031c0:	b590      	push	{r4, r7, lr}
 80031c2:	b087      	sub	sp, #28
 80031c4:	af02      	add	r7, sp, #8
 80031c6:	4604      	mov	r4, r0
 80031c8:	4608      	mov	r0, r1
 80031ca:	4611      	mov	r1, r2
 80031cc:	461a      	mov	r2, r3
 80031ce:	4623      	mov	r3, r4
 80031d0:	80fb      	strh	r3, [r7, #6]
 80031d2:	4603      	mov	r3, r0
 80031d4:	80bb      	strh	r3, [r7, #4]
 80031d6:	460b      	mov	r3, r1
 80031d8:	70fb      	strb	r3, [r7, #3]
 80031da:	4613      	mov	r3, r2
 80031dc:	803b      	strh	r3, [r7, #0]
	uint8_t i,j,line;


  if((x >= ST7735_TFTWIDTH) || // Clip right
 80031de:	88fb      	ldrh	r3, [r7, #6]
 80031e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80031e2:	f200 80b1 	bhi.w	8003348 <displayChar_TFT+0x188>
 80031e6:	88bb      	ldrh	r3, [r7, #4]
 80031e8:	2b9f      	cmp	r3, #159	@ 0x9f
 80031ea:	f200 80ad 	bhi.w	8003348 <displayChar_TFT+0x188>
     (y >= ST7735_TFTHEIGHT_18) || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
 80031ee:	88f9      	ldrh	r1, [r7, #6]
 80031f0:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80031f4:	4613      	mov	r3, r2
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	4413      	add	r3, r2
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	440b      	add	r3, r1
     (y >= ST7735_TFTHEIGHT_18) || // Clip bottom
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f340 80a2 	ble.w	8003348 <displayChar_TFT+0x188>
     ((y + 8 * size - 1) < 0))   // Clip top
 8003204:	88ba      	ldrh	r2, [r7, #4]
 8003206:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	4413      	add	r3, r2
     ((x + 6 * size - 1) < 0) || // Clip left
 800320e:	2b00      	cmp	r3, #0
 8003210:	f340 809a 	ble.w	8003348 <displayChar_TFT+0x188>
    return;

  for (i=0; i<6; i++ )
 8003214:	2300      	movs	r3, #0
 8003216:	73fb      	strb	r3, [r7, #15]
 8003218:	e091      	b.n	800333e <displayChar_TFT+0x17e>
  {
    if (i == 5) 
 800321a:	7bfb      	ldrb	r3, [r7, #15]
 800321c:	2b05      	cmp	r3, #5
 800321e:	d102      	bne.n	8003226 <displayChar_TFT+0x66>
      line = 0x0;
 8003220:	2300      	movs	r3, #0
 8003222:	737b      	strb	r3, [r7, #13]
 8003224:	e00a      	b.n	800323c <displayChar_TFT+0x7c>
    else 
      line = pgm_read_byte(tab_font + (c*5) + i);
 8003226:	78fa      	ldrb	r2, [r7, #3]
 8003228:	4613      	mov	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4413      	add	r3, r2
 800322e:	461a      	mov	r2, r3
 8003230:	7bfb      	ldrb	r3, [r7, #15]
 8003232:	4413      	add	r3, r2
 8003234:	4a46      	ldr	r2, [pc, #280]	@ (8003350 <displayChar_TFT+0x190>)
 8003236:	4413      	add	r3, r2
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	737b      	strb	r3, [r7, #13]
    
	for ( j = 0; j<8; j++)
 800323c:	2300      	movs	r3, #0
 800323e:	73bb      	strb	r3, [r7, #14]
 8003240:	e077      	b.n	8003332 <displayChar_TFT+0x172>
	{
		if (line & 0x1)
 8003242:	7b7b      	ldrb	r3, [r7, #13]
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b00      	cmp	r3, #0
 800324a:	d034      	beq.n	80032b6 <displayChar_TFT+0xf6>
		{
			if (size == 1) // default size
 800324c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003250:	2b01      	cmp	r3, #1
 8003252:	d10e      	bne.n	8003272 <displayChar_TFT+0xb2>
			    drawPixel_TFT(x+i, y+j, color);
 8003254:	7bfb      	ldrb	r3, [r7, #15]
 8003256:	b29a      	uxth	r2, r3
 8003258:	88fb      	ldrh	r3, [r7, #6]
 800325a:	4413      	add	r3, r2
 800325c:	b298      	uxth	r0, r3
 800325e:	7bbb      	ldrb	r3, [r7, #14]
 8003260:	b29a      	uxth	r2, r3
 8003262:	88bb      	ldrh	r3, [r7, #4]
 8003264:	4413      	add	r3, r2
 8003266:	b29b      	uxth	r3, r3
 8003268:	883a      	ldrh	r2, [r7, #0]
 800326a:	4619      	mov	r1, r3
 800326c:	f7ff fee8 	bl	8003040 <drawPixel_TFT>
 8003270:	e059      	b.n	8003326 <displayChar_TFT+0x166>
			else 
			{  // big size
			    fillRect_TFT(x+(i*size), y+(j*size), size, size, color);
 8003272:	7bfb      	ldrb	r3, [r7, #15]
 8003274:	b29b      	uxth	r3, r3
 8003276:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800327a:	b292      	uxth	r2, r2
 800327c:	fb02 f303 	mul.w	r3, r2, r3
 8003280:	b29a      	uxth	r2, r3
 8003282:	88fb      	ldrh	r3, [r7, #6]
 8003284:	4413      	add	r3, r2
 8003286:	b298      	uxth	r0, r3
 8003288:	7bbb      	ldrb	r3, [r7, #14]
 800328a:	b29b      	uxth	r3, r3
 800328c:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8003290:	b292      	uxth	r2, r2
 8003292:	fb02 f303 	mul.w	r3, r2, r3
 8003296:	b29a      	uxth	r2, r3
 8003298:	88bb      	ldrh	r3, [r7, #4]
 800329a:	4413      	add	r3, r2
 800329c:	b299      	uxth	r1, r3
 800329e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80032a8:	b29c      	uxth	r4, r3
 80032aa:	883b      	ldrh	r3, [r7, #0]
 80032ac:	9300      	str	r3, [sp, #0]
 80032ae:	4623      	mov	r3, r4
 80032b0:	f7ff ff0c 	bl	80030cc <fillRect_TFT>
 80032b4:	e037      	b.n	8003326 <displayChar_TFT+0x166>
			} 
		} 
		else if (bg != color)
 80032b6:	8c3a      	ldrh	r2, [r7, #32]
 80032b8:	883b      	ldrh	r3, [r7, #0]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d033      	beq.n	8003326 <displayChar_TFT+0x166>
		{
		  if (size == 1) // default size
 80032be:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d10e      	bne.n	80032e4 <displayChar_TFT+0x124>
		    drawPixel_TFT(x+i, y+j, bg);
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	88fb      	ldrh	r3, [r7, #6]
 80032cc:	4413      	add	r3, r2
 80032ce:	b298      	uxth	r0, r3
 80032d0:	7bbb      	ldrb	r3, [r7, #14]
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	88bb      	ldrh	r3, [r7, #4]
 80032d6:	4413      	add	r3, r2
 80032d8:	b29b      	uxth	r3, r3
 80032da:	8c3a      	ldrh	r2, [r7, #32]
 80032dc:	4619      	mov	r1, r3
 80032de:	f7ff feaf 	bl	8003040 <drawPixel_TFT>
 80032e2:	e020      	b.n	8003326 <displayChar_TFT+0x166>
		  else 
		  {  // big size
		    fillRect_TFT(x+i*size, y+j*size, size, size, bg);
 80032e4:	7bfb      	ldrb	r3, [r7, #15]
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80032ec:	b292      	uxth	r2, r2
 80032ee:	fb02 f303 	mul.w	r3, r2, r3
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	88fb      	ldrh	r3, [r7, #6]
 80032f6:	4413      	add	r3, r2
 80032f8:	b298      	uxth	r0, r3
 80032fa:	7bbb      	ldrb	r3, [r7, #14]
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8003302:	b292      	uxth	r2, r2
 8003304:	fb02 f303 	mul.w	r3, r2, r3
 8003308:	b29a      	uxth	r2, r3
 800330a:	88bb      	ldrh	r3, [r7, #4]
 800330c:	4413      	add	r3, r2
 800330e:	b299      	uxth	r1, r3
 8003310:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003314:	b29a      	uxth	r2, r3
 8003316:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800331a:	b29c      	uxth	r4, r3
 800331c:	8c3b      	ldrh	r3, [r7, #32]
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	4623      	mov	r3, r4
 8003322:	f7ff fed3 	bl	80030cc <fillRect_TFT>
		  }
		}
		line = line >> 1;
 8003326:	7b7b      	ldrb	r3, [r7, #13]
 8003328:	085b      	lsrs	r3, r3, #1
 800332a:	737b      	strb	r3, [r7, #13]
	for ( j = 0; j<8; j++)
 800332c:	7bbb      	ldrb	r3, [r7, #14]
 800332e:	3301      	adds	r3, #1
 8003330:	73bb      	strb	r3, [r7, #14]
 8003332:	7bbb      	ldrb	r3, [r7, #14]
 8003334:	2b07      	cmp	r3, #7
 8003336:	d984      	bls.n	8003242 <displayChar_TFT+0x82>
  for (i=0; i<6; i++ )
 8003338:	7bfb      	ldrb	r3, [r7, #15]
 800333a:	3301      	adds	r3, #1
 800333c:	73fb      	strb	r3, [r7, #15]
 800333e:	7bfb      	ldrb	r3, [r7, #15]
 8003340:	2b05      	cmp	r3, #5
 8003342:	f67f af6a 	bls.w	800321a <displayChar_TFT+0x5a>
 8003346:	e000      	b.n	800334a <displayChar_TFT+0x18a>
    return;
 8003348:	bf00      	nop
	}
  }
}
 800334a:	3714      	adds	r7, #20
 800334c:	46bd      	mov	sp, r7
 800334e:	bd90      	pop	{r4, r7, pc}
 8003350:	080035c0 	.word	0x080035c0

08003354 <displayLogo_TFT>:
* Input          : 
* Output         : None
* Return         : None
*******************************************************************************/
void displayLogo_TFT( void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
	uint8_t i,j,k,line;
	uint16_t color=ST7735_WHITE;
 800335a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800335e:	807b      	strh	r3, [r7, #2]


                                                                    
  for(i=0;i<=120;i++)
 8003360:	2300      	movs	r3, #0
 8003362:	71fb      	strb	r3, [r7, #7]
 8003364:	e09e      	b.n	80034a4 <displayLogo_TFT+0x150>
  {

  for(j=0;j<= 1;j++)
 8003366:	2300      	movs	r3, #0
 8003368:	71bb      	strb	r3, [r7, #6]
 800336a:	e02b      	b.n	80033c4 <displayLogo_TFT+0x70>
  {
	line=(ALL_IS_mono_120[i+120*j]);
 800336c:	79f9      	ldrb	r1, [r7, #7]
 800336e:	79ba      	ldrb	r2, [r7, #6]
 8003370:	4613      	mov	r3, r2
 8003372:	011b      	lsls	r3, r3, #4
 8003374:	1a9b      	subs	r3, r3, r2
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	440b      	add	r3, r1
 800337a:	4a4f      	ldr	r2, [pc, #316]	@ (80034b8 <displayLogo_TFT+0x164>)
 800337c:	5cd3      	ldrb	r3, [r2, r3]
 800337e:	713b      	strb	r3, [r7, #4]
	for ( k = 0; k<8; k++)
 8003380:	2300      	movs	r3, #0
 8003382:	717b      	strb	r3, [r7, #5]
 8003384:	e018      	b.n	80033b8 <displayLogo_TFT+0x64>
	{
		if (line & 0x1)                                                                                                                            
 8003386:	793b      	ldrb	r3, [r7, #4]
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00d      	beq.n	80033ac <displayLogo_TFT+0x58>
		{
			
			drawPixel_TFT(i, j*8+k, color);
 8003390:	79fb      	ldrb	r3, [r7, #7]
 8003392:	b298      	uxth	r0, r3
 8003394:	79bb      	ldrb	r3, [r7, #6]
 8003396:	b29b      	uxth	r3, r3
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	b29a      	uxth	r2, r3
 800339c:	797b      	ldrb	r3, [r7, #5]
 800339e:	b29b      	uxth	r3, r3
 80033a0:	4413      	add	r3, r2
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	887a      	ldrh	r2, [r7, #2]
 80033a6:	4619      	mov	r1, r3
 80033a8:	f7ff fe4a 	bl	8003040 <drawPixel_TFT>
		}
		line = line >> 1;
 80033ac:	793b      	ldrb	r3, [r7, #4]
 80033ae:	085b      	lsrs	r3, r3, #1
 80033b0:	713b      	strb	r3, [r7, #4]
	for ( k = 0; k<8; k++)
 80033b2:	797b      	ldrb	r3, [r7, #5]
 80033b4:	3301      	adds	r3, #1
 80033b6:	717b      	strb	r3, [r7, #5]
 80033b8:	797b      	ldrb	r3, [r7, #5]
 80033ba:	2b07      	cmp	r3, #7
 80033bc:	d9e3      	bls.n	8003386 <displayLogo_TFT+0x32>
  for(j=0;j<= 1;j++)
 80033be:	79bb      	ldrb	r3, [r7, #6]
 80033c0:	3301      	adds	r3, #1
 80033c2:	71bb      	strb	r3, [r7, #6]
 80033c4:	79bb      	ldrb	r3, [r7, #6]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d9d0      	bls.n	800336c <displayLogo_TFT+0x18>
	}
  }
  
  color=ST7735_RED;                    
 80033ca:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80033ce:	807b      	strh	r3, [r7, #2]
  for(j=2;j<= 3;j++)
 80033d0:	2302      	movs	r3, #2
 80033d2:	71bb      	strb	r3, [r7, #6]
 80033d4:	e02b      	b.n	800342e <displayLogo_TFT+0xda>
  {
	line=(ALL_IS_mono_120[i+120*j]);
 80033d6:	79f9      	ldrb	r1, [r7, #7]
 80033d8:	79ba      	ldrb	r2, [r7, #6]
 80033da:	4613      	mov	r3, r2
 80033dc:	011b      	lsls	r3, r3, #4
 80033de:	1a9b      	subs	r3, r3, r2
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	440b      	add	r3, r1
 80033e4:	4a34      	ldr	r2, [pc, #208]	@ (80034b8 <displayLogo_TFT+0x164>)
 80033e6:	5cd3      	ldrb	r3, [r2, r3]
 80033e8:	713b      	strb	r3, [r7, #4]
	for ( k = 0; k<8; k++)
 80033ea:	2300      	movs	r3, #0
 80033ec:	717b      	strb	r3, [r7, #5]
 80033ee:	e018      	b.n	8003422 <displayLogo_TFT+0xce>
	{
		if (line & 0x1)                                                                                                                            
 80033f0:	793b      	ldrb	r3, [r7, #4]
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00d      	beq.n	8003416 <displayLogo_TFT+0xc2>
		{
			
		    drawPixel_TFT(i, j*8+k, color);
 80033fa:	79fb      	ldrb	r3, [r7, #7]
 80033fc:	b298      	uxth	r0, r3
 80033fe:	79bb      	ldrb	r3, [r7, #6]
 8003400:	b29b      	uxth	r3, r3
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	b29a      	uxth	r2, r3
 8003406:	797b      	ldrb	r3, [r7, #5]
 8003408:	b29b      	uxth	r3, r3
 800340a:	4413      	add	r3, r2
 800340c:	b29b      	uxth	r3, r3
 800340e:	887a      	ldrh	r2, [r7, #2]
 8003410:	4619      	mov	r1, r3
 8003412:	f7ff fe15 	bl	8003040 <drawPixel_TFT>
		}
		line = line >> 1;
 8003416:	793b      	ldrb	r3, [r7, #4]
 8003418:	085b      	lsrs	r3, r3, #1
 800341a:	713b      	strb	r3, [r7, #4]
	for ( k = 0; k<8; k++)
 800341c:	797b      	ldrb	r3, [r7, #5]
 800341e:	3301      	adds	r3, #1
 8003420:	717b      	strb	r3, [r7, #5]
 8003422:	797b      	ldrb	r3, [r7, #5]
 8003424:	2b07      	cmp	r3, #7
 8003426:	d9e3      	bls.n	80033f0 <displayLogo_TFT+0x9c>
  for(j=2;j<= 3;j++)
 8003428:	79bb      	ldrb	r3, [r7, #6]
 800342a:	3301      	adds	r3, #1
 800342c:	71bb      	strb	r3, [r7, #6]
 800342e:	79bb      	ldrb	r3, [r7, #6]
 8003430:	2b03      	cmp	r3, #3
 8003432:	d9d0      	bls.n	80033d6 <displayLogo_TFT+0x82>
	}
  }

  color=ST7735_WHITE;
 8003434:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003438:	807b      	strh	r3, [r7, #2]
  for(j=4;j<= 5;j++)
 800343a:	2304      	movs	r3, #4
 800343c:	71bb      	strb	r3, [r7, #6]
 800343e:	e02b      	b.n	8003498 <displayLogo_TFT+0x144>
  {
	line=(ALL_IS_mono_120[i+120*j]);
 8003440:	79f9      	ldrb	r1, [r7, #7]
 8003442:	79ba      	ldrb	r2, [r7, #6]
 8003444:	4613      	mov	r3, r2
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	1a9b      	subs	r3, r3, r2
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	440b      	add	r3, r1
 800344e:	4a1a      	ldr	r2, [pc, #104]	@ (80034b8 <displayLogo_TFT+0x164>)
 8003450:	5cd3      	ldrb	r3, [r2, r3]
 8003452:	713b      	strb	r3, [r7, #4]
	for ( k = 0; k<8; k++)
 8003454:	2300      	movs	r3, #0
 8003456:	717b      	strb	r3, [r7, #5]
 8003458:	e018      	b.n	800348c <displayLogo_TFT+0x138>
	{
		if (line & 0x1)                                                                                                                            
 800345a:	793b      	ldrb	r3, [r7, #4]
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00d      	beq.n	8003480 <displayLogo_TFT+0x12c>
		{
			
		    drawPixel_TFT(i, j*8+k, color);
 8003464:	79fb      	ldrb	r3, [r7, #7]
 8003466:	b298      	uxth	r0, r3
 8003468:	79bb      	ldrb	r3, [r7, #6]
 800346a:	b29b      	uxth	r3, r3
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	b29a      	uxth	r2, r3
 8003470:	797b      	ldrb	r3, [r7, #5]
 8003472:	b29b      	uxth	r3, r3
 8003474:	4413      	add	r3, r2
 8003476:	b29b      	uxth	r3, r3
 8003478:	887a      	ldrh	r2, [r7, #2]
 800347a:	4619      	mov	r1, r3
 800347c:	f7ff fde0 	bl	8003040 <drawPixel_TFT>
		}
		line = line >> 1;
 8003480:	793b      	ldrb	r3, [r7, #4]
 8003482:	085b      	lsrs	r3, r3, #1
 8003484:	713b      	strb	r3, [r7, #4]
	for ( k = 0; k<8; k++)
 8003486:	797b      	ldrb	r3, [r7, #5]
 8003488:	3301      	adds	r3, #1
 800348a:	717b      	strb	r3, [r7, #5]
 800348c:	797b      	ldrb	r3, [r7, #5]
 800348e:	2b07      	cmp	r3, #7
 8003490:	d9e3      	bls.n	800345a <displayLogo_TFT+0x106>
  for(j=4;j<= 5;j++)
 8003492:	79bb      	ldrb	r3, [r7, #6]
 8003494:	3301      	adds	r3, #1
 8003496:	71bb      	strb	r3, [r7, #6]
 8003498:	79bb      	ldrb	r3, [r7, #6]
 800349a:	2b05      	cmp	r3, #5
 800349c:	d9d0      	bls.n	8003440 <displayLogo_TFT+0xec>
  for(i=0;i<=120;i++)
 800349e:	79fb      	ldrb	r3, [r7, #7]
 80034a0:	3301      	adds	r3, #1
 80034a2:	71fb      	strb	r3, [r7, #7]
 80034a4:	79fb      	ldrb	r3, [r7, #7]
 80034a6:	2b78      	cmp	r3, #120	@ 0x78
 80034a8:	f67f af5d 	bls.w	8003366 <displayLogo_TFT+0x12>
	}
  }

  }
}
 80034ac:	bf00      	nop
 80034ae:	bf00      	nop
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	08003abc 	.word	0x08003abc

080034bc <memset>:
 80034bc:	4603      	mov	r3, r0
 80034be:	4402      	add	r2, r0
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d100      	bne.n	80034c6 <memset+0xa>
 80034c4:	4770      	bx	lr
 80034c6:	f803 1b01 	strb.w	r1, [r3], #1
 80034ca:	e7f9      	b.n	80034c0 <memset+0x4>

080034cc <__libc_init_array>:
 80034cc:	b570      	push	{r4, r5, r6, lr}
 80034ce:	2600      	movs	r6, #0
 80034d0:	4d0c      	ldr	r5, [pc, #48]	@ (8003504 <__libc_init_array+0x38>)
 80034d2:	4c0d      	ldr	r4, [pc, #52]	@ (8003508 <__libc_init_array+0x3c>)
 80034d4:	1b64      	subs	r4, r4, r5
 80034d6:	10a4      	asrs	r4, r4, #2
 80034d8:	42a6      	cmp	r6, r4
 80034da:	d109      	bne.n	80034f0 <__libc_init_array+0x24>
 80034dc:	f000 f81a 	bl	8003514 <_init>
 80034e0:	2600      	movs	r6, #0
 80034e2:	4d0a      	ldr	r5, [pc, #40]	@ (800350c <__libc_init_array+0x40>)
 80034e4:	4c0a      	ldr	r4, [pc, #40]	@ (8003510 <__libc_init_array+0x44>)
 80034e6:	1b64      	subs	r4, r4, r5
 80034e8:	10a4      	asrs	r4, r4, #2
 80034ea:	42a6      	cmp	r6, r4
 80034ec:	d105      	bne.n	80034fa <__libc_init_array+0x2e>
 80034ee:	bd70      	pop	{r4, r5, r6, pc}
 80034f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80034f4:	4798      	blx	r3
 80034f6:	3601      	adds	r6, #1
 80034f8:	e7ee      	b.n	80034d8 <__libc_init_array+0xc>
 80034fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80034fe:	4798      	blx	r3
 8003500:	3601      	adds	r6, #1
 8003502:	e7f2      	b.n	80034ea <__libc_init_array+0x1e>
 8003504:	08003d94 	.word	0x08003d94
 8003508:	08003d94 	.word	0x08003d94
 800350c:	08003d94 	.word	0x08003d94
 8003510:	08003d98 	.word	0x08003d98

08003514 <_init>:
 8003514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003516:	bf00      	nop
 8003518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800351a:	bc08      	pop	{r3}
 800351c:	469e      	mov	lr, r3
 800351e:	4770      	bx	lr

08003520 <_fini>:
 8003520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003522:	bf00      	nop
 8003524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003526:	bc08      	pop	{r3}
 8003528:	469e      	mov	lr, r3
 800352a:	4770      	bx	lr
