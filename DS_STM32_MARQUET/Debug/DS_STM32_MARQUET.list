
DS_STM32_MARQUET.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ca0  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08003ddc  08003ddc  00004ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003df8  08003df8  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003df8  08003df8  00004df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e00  08003e00  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e00  08003e00  00004e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003e04  08003e04  00004e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003e08  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  2000000c  08003e14  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  08003e14  00005158  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a611  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a9f  00000000  00000000  0000f646  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b20  00000000  00000000  000110e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000087e  00000000  00000000  00011c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015f3e  00000000  00000000  00012486  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b504  00000000  00000000  000283c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ef86  00000000  00000000  000338c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c284e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fa8  00000000  00000000  000c2894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000c583c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	08003dc4 	.word	0x08003dc4

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	08003dc4 	.word	0x08003dc4

0800017c <__aeabi_drsub>:
 800017c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000180:	e002      	b.n	8000188 <__adddf3>
 8000182:	bf00      	nop

08000184 <__aeabi_dsub>:
 8000184:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000188 <__adddf3>:
 8000188:	b530      	push	{r4, r5, lr}
 800018a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800018e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000192:	ea94 0f05 	teq	r4, r5
 8000196:	bf08      	it	eq
 8000198:	ea90 0f02 	teqeq	r0, r2
 800019c:	bf1f      	itttt	ne
 800019e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ae:	f000 80e2 	beq.w	8000376 <__adddf3+0x1ee>
 80001b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ba:	bfb8      	it	lt
 80001bc:	426d      	neglt	r5, r5
 80001be:	dd0c      	ble.n	80001da <__adddf3+0x52>
 80001c0:	442c      	add	r4, r5
 80001c2:	ea80 0202 	eor.w	r2, r0, r2
 80001c6:	ea81 0303 	eor.w	r3, r1, r3
 80001ca:	ea82 0000 	eor.w	r0, r2, r0
 80001ce:	ea83 0101 	eor.w	r1, r3, r1
 80001d2:	ea80 0202 	eor.w	r2, r0, r2
 80001d6:	ea81 0303 	eor.w	r3, r1, r3
 80001da:	2d36      	cmp	r5, #54	@ 0x36
 80001dc:	bf88      	it	hi
 80001de:	bd30      	pophi	{r4, r5, pc}
 80001e0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f0:	d002      	beq.n	80001f8 <__adddf3+0x70>
 80001f2:	4240      	negs	r0, r0
 80001f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000200:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x84>
 8000206:	4252      	negs	r2, r2
 8000208:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800020c:	ea94 0f05 	teq	r4, r5
 8000210:	f000 80a7 	beq.w	8000362 <__adddf3+0x1da>
 8000214:	f1a4 0401 	sub.w	r4, r4, #1
 8000218:	f1d5 0e20 	rsbs	lr, r5, #32
 800021c:	db0d      	blt.n	800023a <__adddf3+0xb2>
 800021e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000222:	fa22 f205 	lsr.w	r2, r2, r5
 8000226:	1880      	adds	r0, r0, r2
 8000228:	f141 0100 	adc.w	r1, r1, #0
 800022c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000230:	1880      	adds	r0, r0, r2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	4159      	adcs	r1, r3
 8000238:	e00e      	b.n	8000258 <__adddf3+0xd0>
 800023a:	f1a5 0520 	sub.w	r5, r5, #32
 800023e:	f10e 0e20 	add.w	lr, lr, #32
 8000242:	2a01      	cmp	r2, #1
 8000244:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000248:	bf28      	it	cs
 800024a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800024e:	fa43 f305 	asr.w	r3, r3, r5
 8000252:	18c0      	adds	r0, r0, r3
 8000254:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000258:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800025c:	d507      	bpl.n	800026e <__adddf3+0xe6>
 800025e:	f04f 0e00 	mov.w	lr, #0
 8000262:	f1dc 0c00 	rsbs	ip, ip, #0
 8000266:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026a:	eb6e 0101 	sbc.w	r1, lr, r1
 800026e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000272:	d31b      	bcc.n	80002ac <__adddf3+0x124>
 8000274:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000278:	d30c      	bcc.n	8000294 <__adddf3+0x10c>
 800027a:	0849      	lsrs	r1, r1, #1
 800027c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000280:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000284:	f104 0401 	add.w	r4, r4, #1
 8000288:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800028c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000290:	f080 809a 	bcs.w	80003c8 <__adddf3+0x240>
 8000294:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000298:	bf08      	it	eq
 800029a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800029e:	f150 0000 	adcs.w	r0, r0, #0
 80002a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002a6:	ea41 0105 	orr.w	r1, r1, r5
 80002aa:	bd30      	pop	{r4, r5, pc}
 80002ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b0:	4140      	adcs	r0, r0
 80002b2:	eb41 0101 	adc.w	r1, r1, r1
 80002b6:	3c01      	subs	r4, #1
 80002b8:	bf28      	it	cs
 80002ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002be:	d2e9      	bcs.n	8000294 <__adddf3+0x10c>
 80002c0:	f091 0f00 	teq	r1, #0
 80002c4:	bf04      	itt	eq
 80002c6:	4601      	moveq	r1, r0
 80002c8:	2000      	moveq	r0, #0
 80002ca:	fab1 f381 	clz	r3, r1
 80002ce:	bf08      	it	eq
 80002d0:	3320      	addeq	r3, #32
 80002d2:	f1a3 030b 	sub.w	r3, r3, #11
 80002d6:	f1b3 0220 	subs.w	r2, r3, #32
 80002da:	da0c      	bge.n	80002f6 <__adddf3+0x16e>
 80002dc:	320c      	adds	r2, #12
 80002de:	dd08      	ble.n	80002f2 <__adddf3+0x16a>
 80002e0:	f102 0c14 	add.w	ip, r2, #20
 80002e4:	f1c2 020c 	rsb	r2, r2, #12
 80002e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002ec:	fa21 f102 	lsr.w	r1, r1, r2
 80002f0:	e00c      	b.n	800030c <__adddf3+0x184>
 80002f2:	f102 0214 	add.w	r2, r2, #20
 80002f6:	bfd8      	it	le
 80002f8:	f1c2 0c20 	rsble	ip, r2, #32
 80002fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000300:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000304:	bfdc      	itt	le
 8000306:	ea41 010c 	orrle.w	r1, r1, ip
 800030a:	4090      	lslle	r0, r2
 800030c:	1ae4      	subs	r4, r4, r3
 800030e:	bfa2      	ittt	ge
 8000310:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000314:	4329      	orrge	r1, r5
 8000316:	bd30      	popge	{r4, r5, pc}
 8000318:	ea6f 0404 	mvn.w	r4, r4
 800031c:	3c1f      	subs	r4, #31
 800031e:	da1c      	bge.n	800035a <__adddf3+0x1d2>
 8000320:	340c      	adds	r4, #12
 8000322:	dc0e      	bgt.n	8000342 <__adddf3+0x1ba>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0220 	rsb	r2, r4, #32
 800032c:	fa20 f004 	lsr.w	r0, r0, r4
 8000330:	fa01 f302 	lsl.w	r3, r1, r2
 8000334:	ea40 0003 	orr.w	r0, r0, r3
 8000338:	fa21 f304 	lsr.w	r3, r1, r4
 800033c:	ea45 0103 	orr.w	r1, r5, r3
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f1c4 040c 	rsb	r4, r4, #12
 8000346:	f1c4 0220 	rsb	r2, r4, #32
 800034a:	fa20 f002 	lsr.w	r0, r0, r2
 800034e:	fa01 f304 	lsl.w	r3, r1, r4
 8000352:	ea40 0003 	orr.w	r0, r0, r3
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	fa21 f004 	lsr.w	r0, r1, r4
 800035e:	4629      	mov	r1, r5
 8000360:	bd30      	pop	{r4, r5, pc}
 8000362:	f094 0f00 	teq	r4, #0
 8000366:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800036a:	bf06      	itte	eq
 800036c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000370:	3401      	addeq	r4, #1
 8000372:	3d01      	subne	r5, #1
 8000374:	e74e      	b.n	8000214 <__adddf3+0x8c>
 8000376:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037a:	bf18      	it	ne
 800037c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000380:	d029      	beq.n	80003d6 <__adddf3+0x24e>
 8000382:	ea94 0f05 	teq	r4, r5
 8000386:	bf08      	it	eq
 8000388:	ea90 0f02 	teqeq	r0, r2
 800038c:	d005      	beq.n	800039a <__adddf3+0x212>
 800038e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000392:	bf04      	itt	eq
 8000394:	4619      	moveq	r1, r3
 8000396:	4610      	moveq	r0, r2
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	ea91 0f03 	teq	r1, r3
 800039e:	bf1e      	ittt	ne
 80003a0:	2100      	movne	r1, #0
 80003a2:	2000      	movne	r0, #0
 80003a4:	bd30      	popne	{r4, r5, pc}
 80003a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003aa:	d105      	bne.n	80003b8 <__adddf3+0x230>
 80003ac:	0040      	lsls	r0, r0, #1
 80003ae:	4149      	adcs	r1, r1
 80003b0:	bf28      	it	cs
 80003b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003bc:	bf3c      	itt	cc
 80003be:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003c2:	bd30      	popcc	{r4, r5, pc}
 80003c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003cc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003da:	bf1a      	itte	ne
 80003dc:	4619      	movne	r1, r3
 80003de:	4610      	movne	r0, r2
 80003e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e4:	bf1c      	itt	ne
 80003e6:	460b      	movne	r3, r1
 80003e8:	4602      	movne	r2, r0
 80003ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ee:	bf06      	itte	eq
 80003f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f4:	ea91 0f03 	teqeq	r1, r3
 80003f8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	bf00      	nop

08000400 <__aeabi_ui2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000414:	f04f 0500 	mov.w	r5, #0
 8000418:	f04f 0100 	mov.w	r1, #0
 800041c:	e750      	b.n	80002c0 <__adddf3+0x138>
 800041e:	bf00      	nop

08000420 <__aeabi_i2d>:
 8000420:	f090 0f00 	teq	r0, #0
 8000424:	bf04      	itt	eq
 8000426:	2100      	moveq	r1, #0
 8000428:	4770      	bxeq	lr
 800042a:	b530      	push	{r4, r5, lr}
 800042c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000430:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000434:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000438:	bf48      	it	mi
 800043a:	4240      	negmi	r0, r0
 800043c:	f04f 0100 	mov.w	r1, #0
 8000440:	e73e      	b.n	80002c0 <__adddf3+0x138>
 8000442:	bf00      	nop

08000444 <__aeabi_f2d>:
 8000444:	0042      	lsls	r2, r0, #1
 8000446:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044a:	ea4f 0131 	mov.w	r1, r1, rrx
 800044e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000452:	bf1f      	itttt	ne
 8000454:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000458:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800045c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000460:	4770      	bxne	lr
 8000462:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000466:	bf08      	it	eq
 8000468:	4770      	bxeq	lr
 800046a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800046e:	bf04      	itt	eq
 8000470:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000480:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000484:	e71c      	b.n	80002c0 <__adddf3+0x138>
 8000486:	bf00      	nop

08000488 <__aeabi_ul2d>:
 8000488:	ea50 0201 	orrs.w	r2, r0, r1
 800048c:	bf08      	it	eq
 800048e:	4770      	bxeq	lr
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	f04f 0500 	mov.w	r5, #0
 8000496:	e00a      	b.n	80004ae <__aeabi_l2d+0x16>

08000498 <__aeabi_l2d>:
 8000498:	ea50 0201 	orrs.w	r2, r0, r1
 800049c:	bf08      	it	eq
 800049e:	4770      	bxeq	lr
 80004a0:	b530      	push	{r4, r5, lr}
 80004a2:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004a6:	d502      	bpl.n	80004ae <__aeabi_l2d+0x16>
 80004a8:	4240      	negs	r0, r0
 80004aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ae:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ba:	f43f aed8 	beq.w	800026e <__adddf3+0xe6>
 80004be:	f04f 0203 	mov.w	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ce:	bf18      	it	ne
 80004d0:	3203      	addne	r2, #3
 80004d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004d6:	f1c2 0320 	rsb	r3, r2, #32
 80004da:	fa00 fc03 	lsl.w	ip, r0, r3
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004e6:	ea40 000e 	orr.w	r0, r0, lr
 80004ea:	fa21 f102 	lsr.w	r1, r1, r2
 80004ee:	4414      	add	r4, r2
 80004f0:	e6bd      	b.n	800026e <__adddf3+0xe6>
 80004f2:	bf00      	nop

080004f4 <__aeabi_dmul>:
 80004f4:	b570      	push	{r4, r5, r6, lr}
 80004f6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004fa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000502:	bf1d      	ittte	ne
 8000504:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000508:	ea94 0f0c 	teqne	r4, ip
 800050c:	ea95 0f0c 	teqne	r5, ip
 8000510:	f000 f8de 	bleq	80006d0 <__aeabi_dmul+0x1dc>
 8000514:	442c      	add	r4, r5
 8000516:	ea81 0603 	eor.w	r6, r1, r3
 800051a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800051e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000522:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000526:	bf18      	it	ne
 8000528:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800052c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000530:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000534:	d038      	beq.n	80005a8 <__aeabi_dmul+0xb4>
 8000536:	fba0 ce02 	umull	ip, lr, r0, r2
 800053a:	f04f 0500 	mov.w	r5, #0
 800053e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000542:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000546:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054a:	f04f 0600 	mov.w	r6, #0
 800054e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000552:	f09c 0f00 	teq	ip, #0
 8000556:	bf18      	it	ne
 8000558:	f04e 0e01 	orrne.w	lr, lr, #1
 800055c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000560:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000564:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000568:	d204      	bcs.n	8000574 <__aeabi_dmul+0x80>
 800056a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800056e:	416d      	adcs	r5, r5
 8000570:	eb46 0606 	adc.w	r6, r6, r6
 8000574:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000578:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800057c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000580:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000584:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000588:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800058c:	bf88      	it	hi
 800058e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000592:	d81e      	bhi.n	80005d2 <__aeabi_dmul+0xde>
 8000594:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000598:	bf08      	it	eq
 800059a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800059e:	f150 0000 	adcs.w	r0, r0, #0
 80005a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
 80005a8:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005ac:	ea46 0101 	orr.w	r1, r6, r1
 80005b0:	ea40 0002 	orr.w	r0, r0, r2
 80005b4:	ea81 0103 	eor.w	r1, r1, r3
 80005b8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005bc:	bfc2      	ittt	gt
 80005be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005c6:	bd70      	popgt	{r4, r5, r6, pc}
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f04f 0e00 	mov.w	lr, #0
 80005d0:	3c01      	subs	r4, #1
 80005d2:	f300 80ab 	bgt.w	800072c <__aeabi_dmul+0x238>
 80005d6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005da:	bfde      	ittt	le
 80005dc:	2000      	movle	r0, #0
 80005de:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005e2:	bd70      	pople	{r4, r5, r6, pc}
 80005e4:	f1c4 0400 	rsb	r4, r4, #0
 80005e8:	3c20      	subs	r4, #32
 80005ea:	da35      	bge.n	8000658 <__aeabi_dmul+0x164>
 80005ec:	340c      	adds	r4, #12
 80005ee:	dc1b      	bgt.n	8000628 <__aeabi_dmul+0x134>
 80005f0:	f104 0414 	add.w	r4, r4, #20
 80005f4:	f1c4 0520 	rsb	r5, r4, #32
 80005f8:	fa00 f305 	lsl.w	r3, r0, r5
 80005fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000600:	fa01 f205 	lsl.w	r2, r1, r5
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800060c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	fa21 f604 	lsr.w	r6, r1, r4
 8000618:	eb42 0106 	adc.w	r1, r2, r6
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 040c 	rsb	r4, r4, #12
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f304 	lsl.w	r3, r0, r4
 8000634:	fa20 f005 	lsr.w	r0, r0, r5
 8000638:	fa01 f204 	lsl.w	r2, r1, r4
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000644:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000648:	f141 0100 	adc.w	r1, r1, #0
 800064c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000650:	bf08      	it	eq
 8000652:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000656:	bd70      	pop	{r4, r5, r6, pc}
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f205 	lsl.w	r2, r0, r5
 8000660:	ea4e 0e02 	orr.w	lr, lr, r2
 8000664:	fa20 f304 	lsr.w	r3, r0, r4
 8000668:	fa01 f205 	lsl.w	r2, r1, r5
 800066c:	ea43 0302 	orr.w	r3, r3, r2
 8000670:	fa21 f004 	lsr.w	r0, r1, r4
 8000674:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000678:	fa21 f204 	lsr.w	r2, r1, r4
 800067c:	ea20 0002 	bic.w	r0, r0, r2
 8000680:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000684:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000688:	bf08      	it	eq
 800068a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f094 0f00 	teq	r4, #0
 8000694:	d10f      	bne.n	80006b6 <__aeabi_dmul+0x1c2>
 8000696:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800069a:	0040      	lsls	r0, r0, #1
 800069c:	eb41 0101 	adc.w	r1, r1, r1
 80006a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006a4:	bf08      	it	eq
 80006a6:	3c01      	subeq	r4, #1
 80006a8:	d0f7      	beq.n	800069a <__aeabi_dmul+0x1a6>
 80006aa:	ea41 0106 	orr.w	r1, r1, r6
 80006ae:	f095 0f00 	teq	r5, #0
 80006b2:	bf18      	it	ne
 80006b4:	4770      	bxne	lr
 80006b6:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006ba:	0052      	lsls	r2, r2, #1
 80006bc:	eb43 0303 	adc.w	r3, r3, r3
 80006c0:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006c4:	bf08      	it	eq
 80006c6:	3d01      	subeq	r5, #1
 80006c8:	d0f7      	beq.n	80006ba <__aeabi_dmul+0x1c6>
 80006ca:	ea43 0306 	orr.w	r3, r3, r6
 80006ce:	4770      	bx	lr
 80006d0:	ea94 0f0c 	teq	r4, ip
 80006d4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d8:	bf18      	it	ne
 80006da:	ea95 0f0c 	teqne	r5, ip
 80006de:	d00c      	beq.n	80006fa <__aeabi_dmul+0x206>
 80006e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e4:	bf18      	it	ne
 80006e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ea:	d1d1      	bne.n	8000690 <__aeabi_dmul+0x19c>
 80006ec:	ea81 0103 	eor.w	r1, r1, r3
 80006f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f4:	f04f 0000 	mov.w	r0, #0
 80006f8:	bd70      	pop	{r4, r5, r6, pc}
 80006fa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fe:	bf06      	itte	eq
 8000700:	4610      	moveq	r0, r2
 8000702:	4619      	moveq	r1, r3
 8000704:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000708:	d019      	beq.n	800073e <__aeabi_dmul+0x24a>
 800070a:	ea94 0f0c 	teq	r4, ip
 800070e:	d102      	bne.n	8000716 <__aeabi_dmul+0x222>
 8000710:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000714:	d113      	bne.n	800073e <__aeabi_dmul+0x24a>
 8000716:	ea95 0f0c 	teq	r5, ip
 800071a:	d105      	bne.n	8000728 <__aeabi_dmul+0x234>
 800071c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000720:	bf1c      	itt	ne
 8000722:	4610      	movne	r0, r2
 8000724:	4619      	movne	r1, r3
 8000726:	d10a      	bne.n	800073e <__aeabi_dmul+0x24a>
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000730:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000742:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000746:	bd70      	pop	{r4, r5, r6, pc}

08000748 <__aeabi_ddiv>:
 8000748:	b570      	push	{r4, r5, r6, lr}
 800074a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800074e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000752:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000756:	bf1d      	ittte	ne
 8000758:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800075c:	ea94 0f0c 	teqne	r4, ip
 8000760:	ea95 0f0c 	teqne	r5, ip
 8000764:	f000 f8a7 	bleq	80008b6 <__aeabi_ddiv+0x16e>
 8000768:	eba4 0405 	sub.w	r4, r4, r5
 800076c:	ea81 0e03 	eor.w	lr, r1, r3
 8000770:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000774:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000778:	f000 8088 	beq.w	800088c <__aeabi_ddiv+0x144>
 800077c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000780:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000784:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000788:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800078c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000790:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000794:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000798:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800079c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007a0:	429d      	cmp	r5, r3
 80007a2:	bf08      	it	eq
 80007a4:	4296      	cmpeq	r6, r2
 80007a6:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007aa:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007ae:	d202      	bcs.n	80007b6 <__aeabi_ddiv+0x6e>
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	1ab6      	subs	r6, r6, r2
 80007b8:	eb65 0503 	sbc.w	r5, r5, r3
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007c6:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	ebb6 0e02 	subs.w	lr, r6, r2
 8000816:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081a:	bf22      	ittt	cs
 800081c:	1ab6      	subcs	r6, r6, r2
 800081e:	4675      	movcs	r5, lr
 8000820:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000824:	ea55 0e06 	orrs.w	lr, r5, r6
 8000828:	d018      	beq.n	800085c <__aeabi_ddiv+0x114>
 800082a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800082e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000832:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000836:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800083e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000842:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000846:	d1c0      	bne.n	80007ca <__aeabi_ddiv+0x82>
 8000848:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800084c:	d10b      	bne.n	8000866 <__aeabi_ddiv+0x11e>
 800084e:	ea41 0100 	orr.w	r1, r1, r0
 8000852:	f04f 0000 	mov.w	r0, #0
 8000856:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800085a:	e7b6      	b.n	80007ca <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000860:	bf04      	itt	eq
 8000862:	4301      	orreq	r1, r0
 8000864:	2000      	moveq	r0, #0
 8000866:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800086a:	bf88      	it	hi
 800086c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000870:	f63f aeaf 	bhi.w	80005d2 <__aeabi_dmul+0xde>
 8000874:	ebb5 0c03 	subs.w	ip, r5, r3
 8000878:	bf04      	itt	eq
 800087a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800087e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000882:	f150 0000 	adcs.w	r0, r0, #0
 8000886:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088a:	bd70      	pop	{r4, r5, r6, pc}
 800088c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000890:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000894:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000898:	bfc2      	ittt	gt
 800089a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800089e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a2:	bd70      	popgt	{r4, r5, r6, pc}
 80008a4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a8:	f04f 0e00 	mov.w	lr, #0
 80008ac:	3c01      	subs	r4, #1
 80008ae:	e690      	b.n	80005d2 <__aeabi_dmul+0xde>
 80008b0:	ea45 0e06 	orr.w	lr, r5, r6
 80008b4:	e68d      	b.n	80005d2 <__aeabi_dmul+0xde>
 80008b6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ba:	ea94 0f0c 	teq	r4, ip
 80008be:	bf08      	it	eq
 80008c0:	ea95 0f0c 	teqeq	r5, ip
 80008c4:	f43f af3b 	beq.w	800073e <__aeabi_dmul+0x24a>
 80008c8:	ea94 0f0c 	teq	r4, ip
 80008cc:	d10a      	bne.n	80008e4 <__aeabi_ddiv+0x19c>
 80008ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d2:	f47f af34 	bne.w	800073e <__aeabi_dmul+0x24a>
 80008d6:	ea95 0f0c 	teq	r5, ip
 80008da:	f47f af25 	bne.w	8000728 <__aeabi_dmul+0x234>
 80008de:	4610      	mov	r0, r2
 80008e0:	4619      	mov	r1, r3
 80008e2:	e72c      	b.n	800073e <__aeabi_dmul+0x24a>
 80008e4:	ea95 0f0c 	teq	r5, ip
 80008e8:	d106      	bne.n	80008f8 <__aeabi_ddiv+0x1b0>
 80008ea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ee:	f43f aefd 	beq.w	80006ec <__aeabi_dmul+0x1f8>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e722      	b.n	800073e <__aeabi_dmul+0x24a>
 80008f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008fc:	bf18      	it	ne
 80008fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000902:	f47f aec5 	bne.w	8000690 <__aeabi_dmul+0x19c>
 8000906:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090a:	f47f af0d 	bne.w	8000728 <__aeabi_dmul+0x234>
 800090e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000912:	f47f aeeb 	bne.w	80006ec <__aeabi_dmul+0x1f8>
 8000916:	e712      	b.n	800073e <__aeabi_dmul+0x24a>

08000918 <__aeabi_d2uiz>:
 8000918:	004a      	lsls	r2, r1, #1
 800091a:	d211      	bcs.n	8000940 <__aeabi_d2uiz+0x28>
 800091c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000920:	d211      	bcs.n	8000946 <__aeabi_d2uiz+0x2e>
 8000922:	d50d      	bpl.n	8000940 <__aeabi_d2uiz+0x28>
 8000924:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000928:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800092c:	d40e      	bmi.n	800094c <__aeabi_d2uiz+0x34>
 800092e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000932:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000936:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800093a:	fa23 f002 	lsr.w	r0, r3, r2
 800093e:	4770      	bx	lr
 8000940:	f04f 0000 	mov.w	r0, #0
 8000944:	4770      	bx	lr
 8000946:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800094a:	d102      	bne.n	8000952 <__aeabi_d2uiz+0x3a>
 800094c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000950:	4770      	bx	lr
 8000952:	f04f 0000 	mov.w	r0, #0
 8000956:	4770      	bx	lr

08000958 <__aeabi_uldivmod>:
 8000958:	b953      	cbnz	r3, 8000970 <__aeabi_uldivmod+0x18>
 800095a:	b94a      	cbnz	r2, 8000970 <__aeabi_uldivmod+0x18>
 800095c:	2900      	cmp	r1, #0
 800095e:	bf08      	it	eq
 8000960:	2800      	cmpeq	r0, #0
 8000962:	bf1c      	itt	ne
 8000964:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000968:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800096c:	f000 b98c 	b.w	8000c88 <__aeabi_idiv0>
 8000970:	f1ad 0c08 	sub.w	ip, sp, #8
 8000974:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000978:	f000 f806 	bl	8000988 <__udivmoddi4>
 800097c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000980:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000984:	b004      	add	sp, #16
 8000986:	4770      	bx	lr

08000988 <__udivmoddi4>:
 8000988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800098c:	9d08      	ldr	r5, [sp, #32]
 800098e:	468e      	mov	lr, r1
 8000990:	4604      	mov	r4, r0
 8000992:	4688      	mov	r8, r1
 8000994:	2b00      	cmp	r3, #0
 8000996:	d14a      	bne.n	8000a2e <__udivmoddi4+0xa6>
 8000998:	428a      	cmp	r2, r1
 800099a:	4617      	mov	r7, r2
 800099c:	d962      	bls.n	8000a64 <__udivmoddi4+0xdc>
 800099e:	fab2 f682 	clz	r6, r2
 80009a2:	b14e      	cbz	r6, 80009b8 <__udivmoddi4+0x30>
 80009a4:	f1c6 0320 	rsb	r3, r6, #32
 80009a8:	fa01 f806 	lsl.w	r8, r1, r6
 80009ac:	fa20 f303 	lsr.w	r3, r0, r3
 80009b0:	40b7      	lsls	r7, r6
 80009b2:	ea43 0808 	orr.w	r8, r3, r8
 80009b6:	40b4      	lsls	r4, r6
 80009b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009bc:	fbb8 f1fe 	udiv	r1, r8, lr
 80009c0:	fa1f fc87 	uxth.w	ip, r7
 80009c4:	fb0e 8811 	mls	r8, lr, r1, r8
 80009c8:	fb01 f20c 	mul.w	r2, r1, ip
 80009cc:	0c23      	lsrs	r3, r4, #16
 80009ce:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009d2:	429a      	cmp	r2, r3
 80009d4:	d909      	bls.n	80009ea <__udivmoddi4+0x62>
 80009d6:	18fb      	adds	r3, r7, r3
 80009d8:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80009dc:	f080 80eb 	bcs.w	8000bb6 <__udivmoddi4+0x22e>
 80009e0:	429a      	cmp	r2, r3
 80009e2:	f240 80e8 	bls.w	8000bb6 <__udivmoddi4+0x22e>
 80009e6:	3902      	subs	r1, #2
 80009e8:	443b      	add	r3, r7
 80009ea:	1a9a      	subs	r2, r3, r2
 80009ec:	fbb2 f0fe 	udiv	r0, r2, lr
 80009f0:	fb0e 2210 	mls	r2, lr, r0, r2
 80009f4:	fb00 fc0c 	mul.w	ip, r0, ip
 80009f8:	b2a3      	uxth	r3, r4
 80009fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80009fe:	459c      	cmp	ip, r3
 8000a00:	d909      	bls.n	8000a16 <__udivmoddi4+0x8e>
 8000a02:	18fb      	adds	r3, r7, r3
 8000a04:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000a08:	f080 80d7 	bcs.w	8000bba <__udivmoddi4+0x232>
 8000a0c:	459c      	cmp	ip, r3
 8000a0e:	f240 80d4 	bls.w	8000bba <__udivmoddi4+0x232>
 8000a12:	443b      	add	r3, r7
 8000a14:	3802      	subs	r0, #2
 8000a16:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	eba3 030c 	sub.w	r3, r3, ip
 8000a20:	b11d      	cbz	r5, 8000a2a <__udivmoddi4+0xa2>
 8000a22:	2200      	movs	r2, #0
 8000a24:	40f3      	lsrs	r3, r6
 8000a26:	e9c5 3200 	strd	r3, r2, [r5]
 8000a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a2e:	428b      	cmp	r3, r1
 8000a30:	d905      	bls.n	8000a3e <__udivmoddi4+0xb6>
 8000a32:	b10d      	cbz	r5, 8000a38 <__udivmoddi4+0xb0>
 8000a34:	e9c5 0100 	strd	r0, r1, [r5]
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4608      	mov	r0, r1
 8000a3c:	e7f5      	b.n	8000a2a <__udivmoddi4+0xa2>
 8000a3e:	fab3 f183 	clz	r1, r3
 8000a42:	2900      	cmp	r1, #0
 8000a44:	d146      	bne.n	8000ad4 <__udivmoddi4+0x14c>
 8000a46:	4573      	cmp	r3, lr
 8000a48:	d302      	bcc.n	8000a50 <__udivmoddi4+0xc8>
 8000a4a:	4282      	cmp	r2, r0
 8000a4c:	f200 8108 	bhi.w	8000c60 <__udivmoddi4+0x2d8>
 8000a50:	1a84      	subs	r4, r0, r2
 8000a52:	eb6e 0203 	sbc.w	r2, lr, r3
 8000a56:	2001      	movs	r0, #1
 8000a58:	4690      	mov	r8, r2
 8000a5a:	2d00      	cmp	r5, #0
 8000a5c:	d0e5      	beq.n	8000a2a <__udivmoddi4+0xa2>
 8000a5e:	e9c5 4800 	strd	r4, r8, [r5]
 8000a62:	e7e2      	b.n	8000a2a <__udivmoddi4+0xa2>
 8000a64:	2a00      	cmp	r2, #0
 8000a66:	f000 8091 	beq.w	8000b8c <__udivmoddi4+0x204>
 8000a6a:	fab2 f682 	clz	r6, r2
 8000a6e:	2e00      	cmp	r6, #0
 8000a70:	f040 80a5 	bne.w	8000bbe <__udivmoddi4+0x236>
 8000a74:	1a8a      	subs	r2, r1, r2
 8000a76:	2101      	movs	r1, #1
 8000a78:	0c03      	lsrs	r3, r0, #16
 8000a7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a7e:	b280      	uxth	r0, r0
 8000a80:	b2bc      	uxth	r4, r7
 8000a82:	fbb2 fcfe 	udiv	ip, r2, lr
 8000a86:	fb0e 221c 	mls	r2, lr, ip, r2
 8000a8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a8e:	fb04 f20c 	mul.w	r2, r4, ip
 8000a92:	429a      	cmp	r2, r3
 8000a94:	d907      	bls.n	8000aa6 <__udivmoddi4+0x11e>
 8000a96:	18fb      	adds	r3, r7, r3
 8000a98:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000a9c:	d202      	bcs.n	8000aa4 <__udivmoddi4+0x11c>
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	f200 80e3 	bhi.w	8000c6a <__udivmoddi4+0x2e2>
 8000aa4:	46c4      	mov	ip, r8
 8000aa6:	1a9b      	subs	r3, r3, r2
 8000aa8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000aac:	fb0e 3312 	mls	r3, lr, r2, r3
 8000ab0:	fb02 f404 	mul.w	r4, r2, r4
 8000ab4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ab8:	429c      	cmp	r4, r3
 8000aba:	d907      	bls.n	8000acc <__udivmoddi4+0x144>
 8000abc:	18fb      	adds	r3, r7, r3
 8000abe:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000ac2:	d202      	bcs.n	8000aca <__udivmoddi4+0x142>
 8000ac4:	429c      	cmp	r4, r3
 8000ac6:	f200 80cd 	bhi.w	8000c64 <__udivmoddi4+0x2dc>
 8000aca:	4602      	mov	r2, r0
 8000acc:	1b1b      	subs	r3, r3, r4
 8000ace:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ad2:	e7a5      	b.n	8000a20 <__udivmoddi4+0x98>
 8000ad4:	f1c1 0620 	rsb	r6, r1, #32
 8000ad8:	408b      	lsls	r3, r1
 8000ada:	fa22 f706 	lsr.w	r7, r2, r6
 8000ade:	431f      	orrs	r7, r3
 8000ae0:	fa2e fa06 	lsr.w	sl, lr, r6
 8000ae4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ae8:	fbba f8f9 	udiv	r8, sl, r9
 8000aec:	fa0e fe01 	lsl.w	lr, lr, r1
 8000af0:	fa20 f306 	lsr.w	r3, r0, r6
 8000af4:	fb09 aa18 	mls	sl, r9, r8, sl
 8000af8:	fa1f fc87 	uxth.w	ip, r7
 8000afc:	ea43 030e 	orr.w	r3, r3, lr
 8000b00:	fa00 fe01 	lsl.w	lr, r0, r1
 8000b04:	fb08 f00c 	mul.w	r0, r8, ip
 8000b08:	0c1c      	lsrs	r4, r3, #16
 8000b0a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000b0e:	42a0      	cmp	r0, r4
 8000b10:	fa02 f201 	lsl.w	r2, r2, r1
 8000b14:	d90a      	bls.n	8000b2c <__udivmoddi4+0x1a4>
 8000b16:	193c      	adds	r4, r7, r4
 8000b18:	f108 3aff 	add.w	sl, r8, #4294967295	@ 0xffffffff
 8000b1c:	f080 809e 	bcs.w	8000c5c <__udivmoddi4+0x2d4>
 8000b20:	42a0      	cmp	r0, r4
 8000b22:	f240 809b 	bls.w	8000c5c <__udivmoddi4+0x2d4>
 8000b26:	f1a8 0802 	sub.w	r8, r8, #2
 8000b2a:	443c      	add	r4, r7
 8000b2c:	1a24      	subs	r4, r4, r0
 8000b2e:	b298      	uxth	r0, r3
 8000b30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b34:	fb09 4413 	mls	r4, r9, r3, r4
 8000b38:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b3c:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000b40:	45a4      	cmp	ip, r4
 8000b42:	d909      	bls.n	8000b58 <__udivmoddi4+0x1d0>
 8000b44:	193c      	adds	r4, r7, r4
 8000b46:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000b4a:	f080 8085 	bcs.w	8000c58 <__udivmoddi4+0x2d0>
 8000b4e:	45a4      	cmp	ip, r4
 8000b50:	f240 8082 	bls.w	8000c58 <__udivmoddi4+0x2d0>
 8000b54:	3b02      	subs	r3, #2
 8000b56:	443c      	add	r4, r7
 8000b58:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000b5c:	eba4 040c 	sub.w	r4, r4, ip
 8000b60:	fba0 8c02 	umull	r8, ip, r0, r2
 8000b64:	4564      	cmp	r4, ip
 8000b66:	4643      	mov	r3, r8
 8000b68:	46e1      	mov	r9, ip
 8000b6a:	d364      	bcc.n	8000c36 <__udivmoddi4+0x2ae>
 8000b6c:	d061      	beq.n	8000c32 <__udivmoddi4+0x2aa>
 8000b6e:	b15d      	cbz	r5, 8000b88 <__udivmoddi4+0x200>
 8000b70:	ebbe 0203 	subs.w	r2, lr, r3
 8000b74:	eb64 0409 	sbc.w	r4, r4, r9
 8000b78:	fa04 f606 	lsl.w	r6, r4, r6
 8000b7c:	fa22 f301 	lsr.w	r3, r2, r1
 8000b80:	431e      	orrs	r6, r3
 8000b82:	40cc      	lsrs	r4, r1
 8000b84:	e9c5 6400 	strd	r6, r4, [r5]
 8000b88:	2100      	movs	r1, #0
 8000b8a:	e74e      	b.n	8000a2a <__udivmoddi4+0xa2>
 8000b8c:	fbb1 fcf2 	udiv	ip, r1, r2
 8000b90:	0c01      	lsrs	r1, r0, #16
 8000b92:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000b96:	b280      	uxth	r0, r0
 8000b98:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000b9c:	463b      	mov	r3, r7
 8000b9e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ba2:	4638      	mov	r0, r7
 8000ba4:	463c      	mov	r4, r7
 8000ba6:	46b8      	mov	r8, r7
 8000ba8:	46be      	mov	lr, r7
 8000baa:	2620      	movs	r6, #32
 8000bac:	eba2 0208 	sub.w	r2, r2, r8
 8000bb0:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000bb4:	e765      	b.n	8000a82 <__udivmoddi4+0xfa>
 8000bb6:	4601      	mov	r1, r0
 8000bb8:	e717      	b.n	80009ea <__udivmoddi4+0x62>
 8000bba:	4610      	mov	r0, r2
 8000bbc:	e72b      	b.n	8000a16 <__udivmoddi4+0x8e>
 8000bbe:	f1c6 0120 	rsb	r1, r6, #32
 8000bc2:	fa2e fc01 	lsr.w	ip, lr, r1
 8000bc6:	40b7      	lsls	r7, r6
 8000bc8:	fa0e fe06 	lsl.w	lr, lr, r6
 8000bcc:	fa20 f101 	lsr.w	r1, r0, r1
 8000bd0:	ea41 010e 	orr.w	r1, r1, lr
 8000bd4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bd8:	fbbc f8fe 	udiv	r8, ip, lr
 8000bdc:	b2bc      	uxth	r4, r7
 8000bde:	fb0e cc18 	mls	ip, lr, r8, ip
 8000be2:	fb08 f904 	mul.w	r9, r8, r4
 8000be6:	0c0a      	lsrs	r2, r1, #16
 8000be8:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000bec:	40b0      	lsls	r0, r6
 8000bee:	4591      	cmp	r9, r2
 8000bf0:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000bf4:	b280      	uxth	r0, r0
 8000bf6:	d93e      	bls.n	8000c76 <__udivmoddi4+0x2ee>
 8000bf8:	18ba      	adds	r2, r7, r2
 8000bfa:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000bfe:	d201      	bcs.n	8000c04 <__udivmoddi4+0x27c>
 8000c00:	4591      	cmp	r9, r2
 8000c02:	d81f      	bhi.n	8000c44 <__udivmoddi4+0x2bc>
 8000c04:	eba2 0209 	sub.w	r2, r2, r9
 8000c08:	fbb2 f9fe 	udiv	r9, r2, lr
 8000c0c:	fb09 f804 	mul.w	r8, r9, r4
 8000c10:	fb0e 2a19 	mls	sl, lr, r9, r2
 8000c14:	b28a      	uxth	r2, r1
 8000c16:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 8000c1a:	4542      	cmp	r2, r8
 8000c1c:	d229      	bcs.n	8000c72 <__udivmoddi4+0x2ea>
 8000c1e:	18ba      	adds	r2, r7, r2
 8000c20:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000c24:	d2c2      	bcs.n	8000bac <__udivmoddi4+0x224>
 8000c26:	4542      	cmp	r2, r8
 8000c28:	d2c0      	bcs.n	8000bac <__udivmoddi4+0x224>
 8000c2a:	f1a9 0102 	sub.w	r1, r9, #2
 8000c2e:	443a      	add	r2, r7
 8000c30:	e7bc      	b.n	8000bac <__udivmoddi4+0x224>
 8000c32:	45c6      	cmp	lr, r8
 8000c34:	d29b      	bcs.n	8000b6e <__udivmoddi4+0x1e6>
 8000c36:	ebb8 0302 	subs.w	r3, r8, r2
 8000c3a:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000c3e:	3801      	subs	r0, #1
 8000c40:	46e1      	mov	r9, ip
 8000c42:	e794      	b.n	8000b6e <__udivmoddi4+0x1e6>
 8000c44:	eba7 0909 	sub.w	r9, r7, r9
 8000c48:	444a      	add	r2, r9
 8000c4a:	fbb2 f9fe 	udiv	r9, r2, lr
 8000c4e:	f1a8 0c02 	sub.w	ip, r8, #2
 8000c52:	fb09 f804 	mul.w	r8, r9, r4
 8000c56:	e7db      	b.n	8000c10 <__udivmoddi4+0x288>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	e77d      	b.n	8000b58 <__udivmoddi4+0x1d0>
 8000c5c:	46d0      	mov	r8, sl
 8000c5e:	e765      	b.n	8000b2c <__udivmoddi4+0x1a4>
 8000c60:	4608      	mov	r0, r1
 8000c62:	e6fa      	b.n	8000a5a <__udivmoddi4+0xd2>
 8000c64:	443b      	add	r3, r7
 8000c66:	3a02      	subs	r2, #2
 8000c68:	e730      	b.n	8000acc <__udivmoddi4+0x144>
 8000c6a:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c6e:	443b      	add	r3, r7
 8000c70:	e719      	b.n	8000aa6 <__udivmoddi4+0x11e>
 8000c72:	4649      	mov	r1, r9
 8000c74:	e79a      	b.n	8000bac <__udivmoddi4+0x224>
 8000c76:	eba2 0209 	sub.w	r2, r2, r9
 8000c7a:	fbb2 f9fe 	udiv	r9, r2, lr
 8000c7e:	46c4      	mov	ip, r8
 8000c80:	fb09 f804 	mul.w	r8, r9, r4
 8000c84:	e7c4      	b.n	8000c10 <__udivmoddi4+0x288>
 8000c86:	bf00      	nop

08000c88 <__aeabi_idiv0>:
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop

08000c8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c90:	f000 fc35 	bl	80014fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c94:	f000 f818 	bl	8000cc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c98:	f000 f994 	bl	8000fc4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000c9c:	f000 f8b2 	bl	8000e04 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000ca0:	f000 f8e6 	bl	8000e70 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000ca4:	f000 f958 	bl	8000f58 <MX_TIM6_Init>
  MX_ADC_Init();
 8000ca8:	f000 f854 	bl	8000d54 <MX_ADC_Init>
#ifdef Section5
  HAL_TIM_Base_Start_IT(&htim6);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
#endif
#ifdef Section6
  HAL_TIM_Base_Start_IT(&htim6);
 8000cac:	4804      	ldr	r0, [pc, #16]	@ (8000cc0 <main+0x34>)
 8000cae:	f002 fa2f 	bl	8003110 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000cb2:	210c      	movs	r1, #12
 8000cb4:	4803      	ldr	r0, [pc, #12]	@ (8000cc4 <main+0x38>)
 8000cb6:	f002 fac5 	bl	8003244 <HAL_TIM_PWM_Start>
#endif
  while (1)
 8000cba:	bf00      	nop
 8000cbc:	e7fd      	b.n	8000cba <main+0x2e>
 8000cbe:	bf00      	nop
 8000cc0:	20000114 	.word	0x20000114
 8000cc4:	200000d4 	.word	0x200000d4

08000cc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b092      	sub	sp, #72	@ 0x48
 8000ccc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	2234      	movs	r2, #52	@ 0x34
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f003 f848 	bl	8003d6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cdc:	463b      	mov	r3, r7
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]
 8000ce8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cea:	4b19      	ldr	r3, [pc, #100]	@ (8000d50 <SystemClock_Config+0x88>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8000cf2:	4a17      	ldr	r2, [pc, #92]	@ (8000d50 <SystemClock_Config+0x88>)
 8000cf4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000cf8:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d02:	2310      	movs	r3, #16
 8000d04:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f001 fbb4 	bl	800247c <HAL_RCC_OscConfig>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000d1a:	f000 fa5d 	bl	80011d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d1e:	230f      	movs	r3, #15
 8000d20:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d22:	2301      	movs	r3, #1
 8000d24:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d26:	2300      	movs	r3, #0
 8000d28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d32:	463b      	mov	r3, r7
 8000d34:	2100      	movs	r1, #0
 8000d36:	4618      	mov	r0, r3
 8000d38:	f001 fed0 	bl	8002adc <HAL_RCC_ClockConfig>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000d42:	f000 fa49 	bl	80011d8 <Error_Handler>
  }
}
 8000d46:	bf00      	nop
 8000d48:	3748      	adds	r7, #72	@ 0x48
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40007000 	.word	0x40007000

08000d54 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000d64:	4b25      	ldr	r3, [pc, #148]	@ (8000dfc <MX_ADC_Init+0xa8>)
 8000d66:	4a26      	ldr	r2, [pc, #152]	@ (8000e00 <MX_ADC_Init+0xac>)
 8000d68:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d6a:	4b24      	ldr	r3, [pc, #144]	@ (8000dfc <MX_ADC_Init+0xa8>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000d70:	4b22      	ldr	r3, [pc, #136]	@ (8000dfc <MX_ADC_Init+0xa8>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d76:	4b21      	ldr	r3, [pc, #132]	@ (8000dfc <MX_ADC_Init+0xa8>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dfc <MX_ADC_Init+0xa8>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000d82:	4b1e      	ldr	r3, [pc, #120]	@ (8000dfc <MX_ADC_Init+0xa8>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000d88:	4b1c      	ldr	r3, [pc, #112]	@ (8000dfc <MX_ADC_Init+0xa8>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000d8e:	4b1b      	ldr	r3, [pc, #108]	@ (8000dfc <MX_ADC_Init+0xa8>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000d94:	4b19      	ldr	r3, [pc, #100]	@ (8000dfc <MX_ADC_Init+0xa8>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000d9a:	4b18      	ldr	r3, [pc, #96]	@ (8000dfc <MX_ADC_Init+0xa8>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc.Init.NbrOfConversion = 1;
 8000da2:	4b16      	ldr	r3, [pc, #88]	@ (8000dfc <MX_ADC_Init+0xa8>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000da8:	4b14      	ldr	r3, [pc, #80]	@ (8000dfc <MX_ADC_Init+0xa8>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000db0:	4b12      	ldr	r3, [pc, #72]	@ (8000dfc <MX_ADC_Init+0xa8>)
 8000db2:	2210      	movs	r2, #16
 8000db4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000db6:	4b11      	ldr	r3, [pc, #68]	@ (8000dfc <MX_ADC_Init+0xa8>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000dfc <MX_ADC_Init+0xa8>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000dc4:	480d      	ldr	r0, [pc, #52]	@ (8000dfc <MX_ADC_Init+0xa8>)
 8000dc6:	f000 fc09 	bl	80015dc <HAL_ADC_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8000dd0:	f000 fa02 	bl	80011d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	4619      	mov	r1, r3
 8000de4:	4805      	ldr	r0, [pc, #20]	@ (8000dfc <MX_ADC_Init+0xa8>)
 8000de6:	f000 fe67 	bl	8001ab8 <HAL_ADC_ConfigChannel>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8000df0:	f000 f9f2 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000df4:	bf00      	nop
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20000028 	.word	0x20000028
 8000e00:	40012400 	.word	0x40012400

08000e04 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e08:	4b17      	ldr	r3, [pc, #92]	@ (8000e68 <MX_SPI1_Init+0x64>)
 8000e0a:	4a18      	ldr	r2, [pc, #96]	@ (8000e6c <MX_SPI1_Init+0x68>)
 8000e0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e0e:	4b16      	ldr	r3, [pc, #88]	@ (8000e68 <MX_SPI1_Init+0x64>)
 8000e10:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e16:	4b14      	ldr	r3, [pc, #80]	@ (8000e68 <MX_SPI1_Init+0x64>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e1c:	4b12      	ldr	r3, [pc, #72]	@ (8000e68 <MX_SPI1_Init+0x64>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e22:	4b11      	ldr	r3, [pc, #68]	@ (8000e68 <MX_SPI1_Init+0x64>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e28:	4b0f      	ldr	r3, [pc, #60]	@ (8000e68 <MX_SPI1_Init+0x64>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e68 <MX_SPI1_Init+0x64>)
 8000e30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e34:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e36:	4b0c      	ldr	r3, [pc, #48]	@ (8000e68 <MX_SPI1_Init+0x64>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e68 <MX_SPI1_Init+0x64>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e42:	4b09      	ldr	r3, [pc, #36]	@ (8000e68 <MX_SPI1_Init+0x64>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e48:	4b07      	ldr	r3, [pc, #28]	@ (8000e68 <MX_SPI1_Init+0x64>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e4e:	4b06      	ldr	r3, [pc, #24]	@ (8000e68 <MX_SPI1_Init+0x64>)
 8000e50:	220a      	movs	r2, #10
 8000e52:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e54:	4804      	ldr	r0, [pc, #16]	@ (8000e68 <MX_SPI1_Init+0x64>)
 8000e56:	f002 f893 	bl	8002f80 <HAL_SPI_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e60:	f000 f9ba 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	2000007c 	.word	0x2000007c
 8000e6c:	40013000 	.word	0x40013000

08000e70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	@ 0x28
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e76:	f107 0318 	add.w	r3, r7, #24
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e84:	f107 0310 	add.w	r3, r7, #16
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e8e:	463b      	mov	r3, r7
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e9a:	4b2d      	ldr	r3, [pc, #180]	@ (8000f50 <MX_TIM3_Init+0xe0>)
 8000e9c:	4a2d      	ldr	r2, [pc, #180]	@ (8000f54 <MX_TIM3_Init+0xe4>)
 8000e9e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 20-1;
 8000ea0:	4b2b      	ldr	r3, [pc, #172]	@ (8000f50 <MX_TIM3_Init+0xe0>)
 8000ea2:	2213      	movs	r2, #19
 8000ea4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea6:	4b2a      	ldr	r3, [pc, #168]	@ (8000f50 <MX_TIM3_Init+0xe0>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16000-1;
 8000eac:	4b28      	ldr	r3, [pc, #160]	@ (8000f50 <MX_TIM3_Init+0xe0>)
 8000eae:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000eb2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb4:	4b26      	ldr	r3, [pc, #152]	@ (8000f50 <MX_TIM3_Init+0xe0>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000eba:	4b25      	ldr	r3, [pc, #148]	@ (8000f50 <MX_TIM3_Init+0xe0>)
 8000ebc:	2280      	movs	r2, #128	@ 0x80
 8000ebe:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ec0:	4823      	ldr	r0, [pc, #140]	@ (8000f50 <MX_TIM3_Init+0xe0>)
 8000ec2:	f002 f8e6 	bl	8003092 <HAL_TIM_Base_Init>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8000ecc:	f000 f984 	bl	80011d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ed0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ed4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ed6:	f107 0318 	add.w	r3, r7, #24
 8000eda:	4619      	mov	r1, r3
 8000edc:	481c      	ldr	r0, [pc, #112]	@ (8000f50 <MX_TIM3_Init+0xe0>)
 8000ede:	f002 fbd5 	bl	800368c <HAL_TIM_ConfigClockSource>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000ee8:	f000 f976 	bl	80011d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000eec:	4818      	ldr	r0, [pc, #96]	@ (8000f50 <MX_TIM3_Init+0xe0>)
 8000eee:	f002 f961 	bl	80031b4 <HAL_TIM_PWM_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000ef8:	f000 f96e 	bl	80011d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000efc:	2300      	movs	r3, #0
 8000efe:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f04:	f107 0310 	add.w	r3, r7, #16
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4811      	ldr	r0, [pc, #68]	@ (8000f50 <MX_TIM3_Init+0xe0>)
 8000f0c:	f002 fed0 	bl	8003cb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8000f16:	f000 f95f 	bl	80011d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f1a:	2360      	movs	r3, #96	@ 0x60
 8000f1c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 16000;
 8000f1e:	f44f 537a 	mov.w	r3, #16000	@ 0x3e80
 8000f22:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f24:	2300      	movs	r3, #0
 8000f26:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f2c:	463b      	mov	r3, r7
 8000f2e:	220c      	movs	r2, #12
 8000f30:	4619      	mov	r1, r3
 8000f32:	4807      	ldr	r0, [pc, #28]	@ (8000f50 <MX_TIM3_Init+0xe0>)
 8000f34:	f002 fae8 	bl	8003508 <HAL_TIM_PWM_ConfigChannel>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8000f3e:	f000 f94b 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f42:	4803      	ldr	r0, [pc, #12]	@ (8000f50 <MX_TIM3_Init+0xe0>)
 8000f44:	f000 fa3a 	bl	80013bc <HAL_TIM_MspPostInit>

}
 8000f48:	bf00      	nop
 8000f4a:	3728      	adds	r7, #40	@ 0x28
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	200000d4 	.word	0x200000d4
 8000f54:	40000400 	.word	0x40000400

08000f58 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f5e:	463b      	mov	r3, r7
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000f66:	4b15      	ldr	r3, [pc, #84]	@ (8000fbc <MX_TIM6_Init+0x64>)
 8000f68:	4a15      	ldr	r2, [pc, #84]	@ (8000fc0 <MX_TIM6_Init+0x68>)
 8000f6a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 100-1;
 8000f6c:	4b13      	ldr	r3, [pc, #76]	@ (8000fbc <MX_TIM6_Init+0x64>)
 8000f6e:	2263      	movs	r2, #99	@ 0x63
 8000f70:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f72:	4b12      	ldr	r3, [pc, #72]	@ (8000fbc <MX_TIM6_Init+0x64>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 16000-1;
 8000f78:	4b10      	ldr	r3, [pc, #64]	@ (8000fbc <MX_TIM6_Init+0x64>)
 8000f7a:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000f7e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f80:	4b0e      	ldr	r3, [pc, #56]	@ (8000fbc <MX_TIM6_Init+0x64>)
 8000f82:	2280      	movs	r2, #128	@ 0x80
 8000f84:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f86:	480d      	ldr	r0, [pc, #52]	@ (8000fbc <MX_TIM6_Init+0x64>)
 8000f88:	f002 f883 	bl	8003092 <HAL_TIM_Base_Init>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000f92:	f000 f921 	bl	80011d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f96:	2300      	movs	r3, #0
 8000f98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f9e:	463b      	mov	r3, r7
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4806      	ldr	r0, [pc, #24]	@ (8000fbc <MX_TIM6_Init+0x64>)
 8000fa4:	f002 fe84 	bl	8003cb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000fae:	f000 f913 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000114 	.word	0x20000114
 8000fc0:	40001000 	.word	0x40001000

08000fc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08a      	sub	sp, #40	@ 0x28
 8000fc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
 8000fd8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fda:	4b54      	ldr	r3, [pc, #336]	@ (800112c <MX_GPIO_Init+0x168>)
 8000fdc:	69db      	ldr	r3, [r3, #28]
 8000fde:	4a53      	ldr	r2, [pc, #332]	@ (800112c <MX_GPIO_Init+0x168>)
 8000fe0:	f043 0304 	orr.w	r3, r3, #4
 8000fe4:	61d3      	str	r3, [r2, #28]
 8000fe6:	4b51      	ldr	r3, [pc, #324]	@ (800112c <MX_GPIO_Init+0x168>)
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	f003 0304 	and.w	r3, r3, #4
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff2:	4b4e      	ldr	r3, [pc, #312]	@ (800112c <MX_GPIO_Init+0x168>)
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	4a4d      	ldr	r2, [pc, #308]	@ (800112c <MX_GPIO_Init+0x168>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	61d3      	str	r3, [r2, #28]
 8000ffe:	4b4b      	ldr	r3, [pc, #300]	@ (800112c <MX_GPIO_Init+0x168>)
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800100a:	4b48      	ldr	r3, [pc, #288]	@ (800112c <MX_GPIO_Init+0x168>)
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	4a47      	ldr	r2, [pc, #284]	@ (800112c <MX_GPIO_Init+0x168>)
 8001010:	f043 0302 	orr.w	r3, r3, #2
 8001014:	61d3      	str	r3, [r2, #28]
 8001016:	4b45      	ldr	r3, [pc, #276]	@ (800112c <MX_GPIO_Init+0x168>)
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001022:	4b42      	ldr	r3, [pc, #264]	@ (800112c <MX_GPIO_Init+0x168>)
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	4a41      	ldr	r2, [pc, #260]	@ (800112c <MX_GPIO_Init+0x168>)
 8001028:	f043 0308 	orr.w	r3, r3, #8
 800102c:	61d3      	str	r3, [r2, #28]
 800102e:	4b3f      	ldr	r3, [pc, #252]	@ (800112c <MX_GPIO_Init+0x168>)
 8001030:	69db      	ldr	r3, [r3, #28]
 8001032:	f003 0308 	and.w	r3, r3, #8
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800103a:	2200      	movs	r2, #0
 800103c:	2101      	movs	r1, #1
 800103e:	483c      	ldr	r0, [pc, #240]	@ (8001130 <MX_GPIO_Init+0x16c>)
 8001040:	f001 f9e2 	bl	8002408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_SET);
 8001044:	2201      	movs	r2, #1
 8001046:	210e      	movs	r1, #14
 8001048:	4839      	ldr	r0, [pc, #228]	@ (8001130 <MX_GPIO_Init+0x16c>)
 800104a:	f001 f9dd 	bl	8002408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001054:	4837      	ldr	r0, [pc, #220]	@ (8001134 <MX_GPIO_Init+0x170>)
 8001056:	f001 f9d7 	bl	8002408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 800105a:	2201      	movs	r2, #1
 800105c:	2104      	movs	r1, #4
 800105e:	4836      	ldr	r0, [pc, #216]	@ (8001138 <MX_GPIO_Init+0x174>)
 8001060:	f001 f9d2 	bl	8002408 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001064:	230f      	movs	r3, #15
 8001066:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001068:	2301      	movs	r3, #1
 800106a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001070:	2300      	movs	r3, #0
 8001072:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	4619      	mov	r1, r3
 800107a:	482d      	ldr	r0, [pc, #180]	@ (8001130 <MX_GPIO_Init+0x16c>)
 800107c:	f001 f834 	bl	80020e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001080:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001084:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001086:	2301      	movs	r3, #1
 8001088:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108e:	2300      	movs	r3, #0
 8001090:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	4619      	mov	r1, r3
 8001098:	4826      	ldr	r0, [pc, #152]	@ (8001134 <MX_GPIO_Init+0x170>)
 800109a:	f001 f825 	bl	80020e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800109e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010a4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	4619      	mov	r1, r3
 80010b4:	481e      	ldr	r0, [pc, #120]	@ (8001130 <MX_GPIO_Init+0x16c>)
 80010b6:	f001 f817 	bl	80020e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80010ba:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80010be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c0:	2300      	movs	r3, #0
 80010c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	4619      	mov	r1, r3
 80010ce:	481b      	ldr	r0, [pc, #108]	@ (800113c <MX_GPIO_Init+0x178>)
 80010d0:	f001 f80a 	bl	80020e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010d4:	2304      	movs	r3, #4
 80010d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d8:	2301      	movs	r3, #1
 80010da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e0:	2300      	movs	r3, #0
 80010e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	4619      	mov	r1, r3
 80010ea:	4813      	ldr	r0, [pc, #76]	@ (8001138 <MX_GPIO_Init+0x174>)
 80010ec:	f000 fffc 	bl	80020e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010f6:	2312      	movs	r3, #18
 80010f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fe:	2303      	movs	r3, #3
 8001100:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001102:	2304      	movs	r3, #4
 8001104:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001106:	f107 0314 	add.w	r3, r7, #20
 800110a:	4619      	mov	r1, r3
 800110c:	4809      	ldr	r0, [pc, #36]	@ (8001134 <MX_GPIO_Init+0x170>)
 800110e:	f000 ffeb 	bl	80020e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001112:	2200      	movs	r2, #0
 8001114:	2100      	movs	r1, #0
 8001116:	2017      	movs	r0, #23
 8001118:	f000 ffaf 	bl	800207a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800111c:	2017      	movs	r0, #23
 800111e:	f000 ffc8 	bl	80020b2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001122:	bf00      	nop
 8001124:	3728      	adds	r7, #40	@ 0x28
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40023800 	.word	0x40023800
 8001130:	40020800 	.word	0x40020800
 8001134:	40020400 	.word	0x40020400
 8001138:	40020c00 	.word	0x40020c00
 800113c:	40020000 	.word	0x40020000

08001140 <HAL_TIM_PeriodElapsedCallback>:
	    }
	}
}
#endif
#ifdef Section6
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a1d      	ldr	r2, [pc, #116]	@ (80011c4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d134      	bne.n	80011bc <HAL_TIM_PeriodElapsedCallback+0x7c>
		HAL_ADC_Start(&hadc);
 8001152:	481d      	ldr	r0, [pc, #116]	@ (80011c8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001154:	f000 fb88 	bl	8001868 <HAL_ADC_Start>
		HAL_StatusTypeDef status = HAL_ADC_PollForConversion(&hadc, 1000);
 8001158:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800115c:	481a      	ldr	r0, [pc, #104]	@ (80011c8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800115e:	f000 fc0f 	bl	8001980 <HAL_ADC_PollForConversion>
 8001162:	4603      	mov	r3, r0
 8001164:	75fb      	strb	r3, [r7, #23]
		if (status == HAL_OK) {
 8001166:	7dfb      	ldrb	r3, [r7, #23]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d127      	bne.n	80011bc <HAL_TIM_PeriodElapsedCallback+0x7c>
			uint32_t ADCvalue = HAL_ADC_GetValue(&hadc);
 800116c:	4816      	ldr	r0, [pc, #88]	@ (80011c8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800116e:	f000 fc97 	bl	8001aa0 <HAL_ADC_GetValue>
 8001172:	6138      	str	r0, [r7, #16]
			HAL_ADC_Stop(&hadc);
 8001174:	4814      	ldr	r0, [pc, #80]	@ (80011c8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001176:	f000 fbd7 	bl	8001928 <HAL_ADC_Stop>
			uint8_t ratio = (ADCvalue / 4096.0) * 100;
 800117a:	6938      	ldr	r0, [r7, #16]
 800117c:	f7ff f940 	bl	8000400 <__aeabi_ui2d>
 8001180:	f04f 0200 	mov.w	r2, #0
 8001184:	4b11      	ldr	r3, [pc, #68]	@ (80011cc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001186:	f7ff fadf 	bl	8000748 <__aeabi_ddiv>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	4610      	mov	r0, r2
 8001190:	4619      	mov	r1, r3
 8001192:	f04f 0200 	mov.w	r2, #0
 8001196:	4b0e      	ldr	r3, [pc, #56]	@ (80011d0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001198:	f7ff f9ac 	bl	80004f4 <__aeabi_dmul>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	4610      	mov	r0, r2
 80011a2:	4619      	mov	r1, r3
 80011a4:	f7ff fbb8 	bl	8000918 <__aeabi_d2uiz>
 80011a8:	4603      	mov	r3, r0
 80011aa:	73fb      	strb	r3, [r7, #15]
			TIM3 -> CCR4 = ratio * 160;
 80011ac:	7bfa      	ldrb	r2, [r7, #15]
 80011ae:	4613      	mov	r3, r2
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	4413      	add	r3, r2
 80011b4:	015b      	lsls	r3, r3, #5
 80011b6:	461a      	mov	r2, r3
 80011b8:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80011ba:	641a      	str	r2, [r3, #64]	@ 0x40
		}
	}
}
 80011bc:	bf00      	nop
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40001000 	.word	0x40001000
 80011c8:	20000028 	.word	0x20000028
 80011cc:	40b00000 	.word	0x40b00000
 80011d0:	40590000 	.word	0x40590000
 80011d4:	40000400 	.word	0x40000400

080011d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011dc:	b672      	cpsid	i
}
 80011de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e0:	bf00      	nop
 80011e2:	e7fd      	b.n	80011e0 <Error_Handler+0x8>

080011e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80011ea:	4b14      	ldr	r3, [pc, #80]	@ (800123c <HAL_MspInit+0x58>)
 80011ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ee:	4a13      	ldr	r2, [pc, #76]	@ (800123c <HAL_MspInit+0x58>)
 80011f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80011f4:	6253      	str	r3, [r2, #36]	@ 0x24
 80011f6:	4b11      	ldr	r3, [pc, #68]	@ (800123c <HAL_MspInit+0x58>)
 80011f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001202:	4b0e      	ldr	r3, [pc, #56]	@ (800123c <HAL_MspInit+0x58>)
 8001204:	6a1b      	ldr	r3, [r3, #32]
 8001206:	4a0d      	ldr	r2, [pc, #52]	@ (800123c <HAL_MspInit+0x58>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6213      	str	r3, [r2, #32]
 800120e:	4b0b      	ldr	r3, [pc, #44]	@ (800123c <HAL_MspInit+0x58>)
 8001210:	6a1b      	ldr	r3, [r3, #32]
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800121a:	4b08      	ldr	r3, [pc, #32]	@ (800123c <HAL_MspInit+0x58>)
 800121c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800121e:	4a07      	ldr	r2, [pc, #28]	@ (800123c <HAL_MspInit+0x58>)
 8001220:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001224:	6253      	str	r3, [r2, #36]	@ 0x24
 8001226:	4b05      	ldr	r3, [pc, #20]	@ (800123c <HAL_MspInit+0x58>)
 8001228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800122a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001232:	bf00      	nop
 8001234:	3714      	adds	r7, #20
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr
 800123c:	40023800 	.word	0x40023800

08001240 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08a      	sub	sp, #40	@ 0x28
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a15      	ldr	r2, [pc, #84]	@ (80012b4 <HAL_ADC_MspInit+0x74>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d123      	bne.n	80012aa <HAL_ADC_MspInit+0x6a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001262:	4b15      	ldr	r3, [pc, #84]	@ (80012b8 <HAL_ADC_MspInit+0x78>)
 8001264:	6a1b      	ldr	r3, [r3, #32]
 8001266:	4a14      	ldr	r2, [pc, #80]	@ (80012b8 <HAL_ADC_MspInit+0x78>)
 8001268:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800126c:	6213      	str	r3, [r2, #32]
 800126e:	4b12      	ldr	r3, [pc, #72]	@ (80012b8 <HAL_ADC_MspInit+0x78>)
 8001270:	6a1b      	ldr	r3, [r3, #32]
 8001272:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001276:	613b      	str	r3, [r7, #16]
 8001278:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127a:	4b0f      	ldr	r3, [pc, #60]	@ (80012b8 <HAL_ADC_MspInit+0x78>)
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	4a0e      	ldr	r2, [pc, #56]	@ (80012b8 <HAL_ADC_MspInit+0x78>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	61d3      	str	r3, [r2, #28]
 8001286:	4b0c      	ldr	r3, [pc, #48]	@ (80012b8 <HAL_ADC_MspInit+0x78>)
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001292:	2301      	movs	r3, #1
 8001294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001296:	2303      	movs	r3, #3
 8001298:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	4619      	mov	r1, r3
 80012a4:	4805      	ldr	r0, [pc, #20]	@ (80012bc <HAL_ADC_MspInit+0x7c>)
 80012a6:	f000 ff1f 	bl	80020e8 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80012aa:	bf00      	nop
 80012ac:	3728      	adds	r7, #40	@ 0x28
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40012400 	.word	0x40012400
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40020000 	.word	0x40020000

080012c0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08a      	sub	sp, #40	@ 0x28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a17      	ldr	r2, [pc, #92]	@ (800133c <HAL_SPI_MspInit+0x7c>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d127      	bne.n	8001332 <HAL_SPI_MspInit+0x72>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012e2:	4b17      	ldr	r3, [pc, #92]	@ (8001340 <HAL_SPI_MspInit+0x80>)
 80012e4:	6a1b      	ldr	r3, [r3, #32]
 80012e6:	4a16      	ldr	r2, [pc, #88]	@ (8001340 <HAL_SPI_MspInit+0x80>)
 80012e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012ec:	6213      	str	r3, [r2, #32]
 80012ee:	4b14      	ldr	r3, [pc, #80]	@ (8001340 <HAL_SPI_MspInit+0x80>)
 80012f0:	6a1b      	ldr	r3, [r3, #32]
 80012f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fa:	4b11      	ldr	r3, [pc, #68]	@ (8001340 <HAL_SPI_MspInit+0x80>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	4a10      	ldr	r2, [pc, #64]	@ (8001340 <HAL_SPI_MspInit+0x80>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	61d3      	str	r3, [r2, #28]
 8001306:	4b0e      	ldr	r3, [pc, #56]	@ (8001340 <HAL_SPI_MspInit+0x80>)
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001312:	23e0      	movs	r3, #224	@ 0xe0
 8001314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131e:	2303      	movs	r3, #3
 8001320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001322:	2305      	movs	r3, #5
 8001324:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001326:	f107 0314 	add.w	r3, r7, #20
 800132a:	4619      	mov	r1, r3
 800132c:	4805      	ldr	r0, [pc, #20]	@ (8001344 <HAL_SPI_MspInit+0x84>)
 800132e:	f000 fedb 	bl	80020e8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001332:	bf00      	nop
 8001334:	3728      	adds	r7, #40	@ 0x28
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40013000 	.word	0x40013000
 8001340:	40023800 	.word	0x40023800
 8001344:	40020000 	.word	0x40020000

08001348 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a16      	ldr	r2, [pc, #88]	@ (80013b0 <HAL_TIM_Base_MspInit+0x68>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d10c      	bne.n	8001374 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800135a:	4b16      	ldr	r3, [pc, #88]	@ (80013b4 <HAL_TIM_Base_MspInit+0x6c>)
 800135c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800135e:	4a15      	ldr	r2, [pc, #84]	@ (80013b4 <HAL_TIM_Base_MspInit+0x6c>)
 8001360:	f043 0302 	orr.w	r3, r3, #2
 8001364:	6253      	str	r3, [r2, #36]	@ 0x24
 8001366:	4b13      	ldr	r3, [pc, #76]	@ (80013b4 <HAL_TIM_Base_MspInit+0x6c>)
 8001368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM6_MspInit 1 */

    /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001372:	e018      	b.n	80013a6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM6)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a0f      	ldr	r2, [pc, #60]	@ (80013b8 <HAL_TIM_Base_MspInit+0x70>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d113      	bne.n	80013a6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800137e:	4b0d      	ldr	r3, [pc, #52]	@ (80013b4 <HAL_TIM_Base_MspInit+0x6c>)
 8001380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001382:	4a0c      	ldr	r2, [pc, #48]	@ (80013b4 <HAL_TIM_Base_MspInit+0x6c>)
 8001384:	f043 0310 	orr.w	r3, r3, #16
 8001388:	6253      	str	r3, [r2, #36]	@ 0x24
 800138a:	4b0a      	ldr	r3, [pc, #40]	@ (80013b4 <HAL_TIM_Base_MspInit+0x6c>)
 800138c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800138e:	f003 0310 	and.w	r3, r3, #16
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8001396:	2200      	movs	r2, #0
 8001398:	2100      	movs	r1, #0
 800139a:	202b      	movs	r0, #43	@ 0x2b
 800139c:	f000 fe6d 	bl	800207a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80013a0:	202b      	movs	r0, #43	@ 0x2b
 80013a2:	f000 fe86 	bl	80020b2 <HAL_NVIC_EnableIRQ>
}
 80013a6:	bf00      	nop
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40000400 	.word	0x40000400
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40001000 	.word	0x40001000

080013bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b088      	sub	sp, #32
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c4:	f107 030c 	add.w	r3, r7, #12
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a11      	ldr	r2, [pc, #68]	@ (8001420 <HAL_TIM_MspPostInit+0x64>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d11b      	bne.n	8001416 <HAL_TIM_MspPostInit+0x5a>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013de:	4b11      	ldr	r3, [pc, #68]	@ (8001424 <HAL_TIM_MspPostInit+0x68>)
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	4a10      	ldr	r2, [pc, #64]	@ (8001424 <HAL_TIM_MspPostInit+0x68>)
 80013e4:	f043 0302 	orr.w	r3, r3, #2
 80013e8:	61d3      	str	r3, [r2, #28]
 80013ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001424 <HAL_TIM_MspPostInit+0x68>)
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	60bb      	str	r3, [r7, #8]
 80013f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013f6:	2302      	movs	r3, #2
 80013f8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fa:	2302      	movs	r3, #2
 80013fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001402:	2300      	movs	r3, #0
 8001404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001406:	2302      	movs	r3, #2
 8001408:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140a:	f107 030c 	add.w	r3, r7, #12
 800140e:	4619      	mov	r1, r3
 8001410:	4805      	ldr	r0, [pc, #20]	@ (8001428 <HAL_TIM_MspPostInit+0x6c>)
 8001412:	f000 fe69 	bl	80020e8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001416:	bf00      	nop
 8001418:	3720      	adds	r7, #32
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40000400 	.word	0x40000400
 8001424:	40023800 	.word	0x40023800
 8001428:	40020400 	.word	0x40020400

0800142c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001430:	bf00      	nop
 8001432:	e7fd      	b.n	8001430 <NMI_Handler+0x4>

08001434 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001438:	bf00      	nop
 800143a:	e7fd      	b.n	8001438 <HardFault_Handler+0x4>

0800143c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001440:	bf00      	nop
 8001442:	e7fd      	b.n	8001440 <MemManage_Handler+0x4>

08001444 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001448:	bf00      	nop
 800144a:	e7fd      	b.n	8001448 <BusFault_Handler+0x4>

0800144c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001450:	bf00      	nop
 8001452:	e7fd      	b.n	8001450 <UsageFault_Handler+0x4>

08001454 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr

08001460 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr

0800146c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr

08001478 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800147c:	f000 f892 	bl	80015a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}

08001484 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001488:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800148c:	f000 ffd4 	bl	8002438 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}

08001494 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001498:	4802      	ldr	r0, [pc, #8]	@ (80014a4 <TIM6_IRQHandler+0x10>)
 800149a:	f001 ff69 	bl	8003370 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000114 	.word	0x20000114

080014a8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr

080014b4 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 80014b4:	f7ff fff8 	bl	80014a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014b8:	480b      	ldr	r0, [pc, #44]	@ (80014e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014ba:	490c      	ldr	r1, [pc, #48]	@ (80014ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014bc:	4a0c      	ldr	r2, [pc, #48]	@ (80014f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80014be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c0:	e002      	b.n	80014c8 <LoopCopyDataInit>

080014c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014c6:	3304      	adds	r3, #4

080014c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014cc:	d3f9      	bcc.n	80014c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ce:	4a09      	ldr	r2, [pc, #36]	@ (80014f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014d0:	4c09      	ldr	r4, [pc, #36]	@ (80014f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d4:	e001      	b.n	80014da <LoopFillZerobss>

080014d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d8:	3204      	adds	r2, #4

080014da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014dc:	d3fb      	bcc.n	80014d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014de:	f002 fc4d 	bl	8003d7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014e2:	f7ff fbd3 	bl	8000c8c <main>
  bx lr
 80014e6:	4770      	bx	lr
  ldr r0, =_sdata
 80014e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014ec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80014f0:	08003e08 	.word	0x08003e08
  ldr r2, =_sbss
 80014f4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80014f8:	20000158 	.word	0x20000158

080014fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014fc:	e7fe      	b.n	80014fc <ADC1_IRQHandler>

080014fe <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001504:	2300      	movs	r3, #0
 8001506:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001508:	2003      	movs	r0, #3
 800150a:	f000 fdab 	bl	8002064 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800150e:	200f      	movs	r0, #15
 8001510:	f000 f80e 	bl	8001530 <HAL_InitTick>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d002      	beq.n	8001520 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	71fb      	strb	r3, [r7, #7]
 800151e:	e001      	b.n	8001524 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001520:	f7ff fe60 	bl	80011e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001524:	79fb      	ldrb	r3, [r7, #7]
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001538:	2300      	movs	r3, #0
 800153a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800153c:	4b16      	ldr	r3, [pc, #88]	@ (8001598 <HAL_InitTick+0x68>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d022      	beq.n	800158a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001544:	4b15      	ldr	r3, [pc, #84]	@ (800159c <HAL_InitTick+0x6c>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4b13      	ldr	r3, [pc, #76]	@ (8001598 <HAL_InitTick+0x68>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001550:	fbb1 f3f3 	udiv	r3, r1, r3
 8001554:	fbb2 f3f3 	udiv	r3, r2, r3
 8001558:	4618      	mov	r0, r3
 800155a:	f000 fdb8 	bl	80020ce <HAL_SYSTICK_Config>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d10f      	bne.n	8001584 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b0f      	cmp	r3, #15
 8001568:	d809      	bhi.n	800157e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800156a:	2200      	movs	r2, #0
 800156c:	6879      	ldr	r1, [r7, #4]
 800156e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001572:	f000 fd82 	bl	800207a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001576:	4a0a      	ldr	r2, [pc, #40]	@ (80015a0 <HAL_InitTick+0x70>)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6013      	str	r3, [r2, #0]
 800157c:	e007      	b.n	800158e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	73fb      	strb	r3, [r7, #15]
 8001582:	e004      	b.n	800158e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	73fb      	strb	r3, [r7, #15]
 8001588:	e001      	b.n	800158e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800158e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001590:	4618      	mov	r0, r3
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20000008 	.word	0x20000008
 800159c:	20000000 	.word	0x20000000
 80015a0:	20000004 	.word	0x20000004

080015a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015a8:	4b05      	ldr	r3, [pc, #20]	@ (80015c0 <HAL_IncTick+0x1c>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	4b05      	ldr	r3, [pc, #20]	@ (80015c4 <HAL_IncTick+0x20>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4413      	add	r3, r2
 80015b2:	4a03      	ldr	r2, [pc, #12]	@ (80015c0 <HAL_IncTick+0x1c>)
 80015b4:	6013      	str	r3, [r2, #0]
}
 80015b6:	bf00      	nop
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	20000154 	.word	0x20000154
 80015c4:	20000008 	.word	0x20000008

080015c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  return uwTick;
 80015cc:	4b02      	ldr	r3, [pc, #8]	@ (80015d8 <HAL_GetTick+0x10>)
 80015ce:	681b      	ldr	r3, [r3, #0]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr
 80015d8:	20000154 	.word	0x20000154

080015dc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08e      	sub	sp, #56	@ 0x38
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015e4:	2300      	movs	r3, #0
 80015e6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t tmp_cr1 = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t tmp_cr2 = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d101      	bne.n	80015fc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e127      	b.n	800184c <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	691b      	ldr	r3, [r3, #16]
 8001600:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001606:	2b00      	cmp	r3, #0
 8001608:	d115      	bne.n	8001636 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	651a      	str	r2, [r3, #80]	@ 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001618:	4b8e      	ldr	r3, [pc, #568]	@ (8001854 <HAL_ADC_Init+0x278>)
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	4a8d      	ldr	r2, [pc, #564]	@ (8001854 <HAL_ADC_Init+0x278>)
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	6213      	str	r3, [r2, #32]
 8001624:	4b8b      	ldr	r3, [pc, #556]	@ (8001854 <HAL_ADC_Init+0x278>)
 8001626:	6a1b      	ldr	r3, [r3, #32]
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7ff fe05 	bl	8001240 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800163a:	f003 0310 	and.w	r3, r3, #16
 800163e:	2b00      	cmp	r3, #0
 8001640:	f040 80ff 	bne.w	8001842 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001648:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800164c:	f023 0302 	bic.w	r3, r3, #2
 8001650:	f043 0202 	orr.w	r2, r3, #2
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8001658:	4b7f      	ldr	r3, [pc, #508]	@ (8001858 <HAL_ADC_Init+0x27c>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	497c      	ldr	r1, [pc, #496]	@ (8001858 <HAL_ADC_Init+0x27c>)
 8001666:	4313      	orrs	r3, r2
 8001668:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001672:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800167a:	4619      	mov	r1, r3
 800167c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001680:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001682:	6a3b      	ldr	r3, [r7, #32]
 8001684:	fa93 f3a3 	rbit	r3, r3
 8001688:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	fab3 f383 	clz	r3, r3
 8001690:	b2db      	uxtb	r3, r3
 8001692:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8001696:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800169c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80016a4:	4619      	mov	r1, r3
 80016a6:	2302      	movs	r3, #2
 80016a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016ac:	fa93 f3a3 	rbit	r3, r3
 80016b0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80016b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b4:	fab3 f383 	clz	r3, r3
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 80016be:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80016c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016c2:	4313      	orrs	r3, r2
 80016c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016ca:	2b10      	cmp	r3, #16
 80016cc:	d007      	beq.n	80016de <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
                  hadc->Init.ExternalTrigConvEdge );
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80016d6:	4313      	orrs	r3, r2
 80016d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016da:	4313      	orrs	r3, r2
 80016dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016e8:	2b40      	cmp	r3, #64	@ 0x40
 80016ea:	d04f      	beq.n	800178c <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016f2:	4313      	orrs	r3, r2
 80016f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80016fe:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	6912      	ldr	r2, [r2, #16]
 8001704:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8001708:	d003      	beq.n	8001712 <HAL_ADC_Init+0x136>
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6912      	ldr	r2, [r2, #16]
 800170e:	2a01      	cmp	r2, #1
 8001710:	d102      	bne.n	8001718 <HAL_ADC_Init+0x13c>
 8001712:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001716:	e000      	b.n	800171a <HAL_ADC_Init+0x13e>
 8001718:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 800171a:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800171c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800171e:	4313      	orrs	r3, r2
 8001720:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001728:	2b01      	cmp	r3, #1
 800172a:	d125      	bne.n	8001778 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001732:	2b00      	cmp	r3, #0
 8001734:	d114      	bne.n	8001760 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173a:	3b01      	subs	r3, #1
 800173c:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8001740:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	fa92 f2a2 	rbit	r2, r2
 8001748:	617a      	str	r2, [r7, #20]
  return result;
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	fab2 f282 	clz	r2, r2
 8001750:	b2d2      	uxtb	r2, r2
 8001752:	4093      	lsls	r3, r2
 8001754:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001758:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800175a:	4313      	orrs	r3, r2
 800175c:	633b      	str	r3, [r7, #48]	@ 0x30
 800175e:	e00b      	b.n	8001778 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001764:	f043 0220 	orr.w	r2, r3, #32
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	64da      	str	r2, [r3, #76]	@ 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001770:	f043 0201 	orr.w	r2, r3, #1
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	651a      	str	r2, [r3, #80]	@ 0x50
      else
      {
        /* do nothing */
      }
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	685a      	ldr	r2, [r3, #4]
 800177e:	4b37      	ldr	r3, [pc, #220]	@ (800185c <HAL_ADC_Init+0x280>)
 8001780:	4013      	ands	r3, r2
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	6812      	ldr	r2, [r2, #0]
 8001786:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001788:	430b      	orrs	r3, r1
 800178a:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	689a      	ldr	r2, [r3, #8]
 8001792:	4b33      	ldr	r3, [pc, #204]	@ (8001860 <HAL_ADC_Init+0x284>)
 8001794:	4013      	ands	r3, r2
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	6812      	ldr	r2, [r2, #0]
 800179a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800179c:	430b      	orrs	r3, r1
 800179e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	691b      	ldr	r3, [r3, #16]
 80017a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80017a8:	d003      	beq.n	80017b2 <HAL_ADC_Init+0x1d6>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d119      	bne.n	80017e6 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b8:	f023 71f8 	bic.w	r1, r3, #32505856	@ 0x1f00000
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017c0:	3b01      	subs	r3, #1
 80017c2:	f04f 72f8 	mov.w	r2, #32505856	@ 0x1f00000
 80017c6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	fa92 f2a2 	rbit	r2, r2
 80017ce:	60fa      	str	r2, [r7, #12]
  return result;
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	fab2 f282 	clz	r2, r2
 80017d6:	b2d2      	uxtb	r2, r2
 80017d8:	fa03 f202 	lsl.w	r2, r3, r2
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	430a      	orrs	r2, r1
 80017e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80017e4:	e007      	b.n	80017f6 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f022 72f8 	bic.w	r2, r2, #32505856	@ 0x1f00000
 80017f4:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	4b19      	ldr	r3, [pc, #100]	@ (8001864 <HAL_ADC_Init+0x288>)
 80017fe:	4013      	ands	r3, r2
 8001800:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001802:	429a      	cmp	r2, r3
 8001804:	d10b      	bne.n	800181e <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	651a      	str	r2, [r3, #80]	@ 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001810:	f023 0303 	bic.w	r3, r3, #3
 8001814:	f043 0201 	orr.w	r2, r3, #1
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800181c:	e014      	b.n	8001848 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001822:	f023 0312 	bic.w	r3, r3, #18
 8001826:	f043 0210 	orr.w	r2, r3, #16
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	64da      	str	r2, [r3, #76]	@ 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001832:	f043 0201 	orr.w	r2, r3, #1
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	651a      	str	r2, [r3, #80]	@ 0x50
      
      tmp_hal_status = HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001840:	e002      	b.n	8001848 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001848:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800184c:	4618      	mov	r0, r3
 800184e:	3738      	adds	r7, #56	@ 0x38
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40023800 	.word	0x40023800
 8001858:	40012700 	.word	0x40012700
 800185c:	fcfc16ff 	.word	0xfcfc16ff
 8001860:	c0fff189 	.word	0xc0fff189
 8001864:	bf80fffe 	.word	0xbf80fffe

08001868 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001870:	2300      	movs	r3, #0
 8001872:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800187a:	2b01      	cmp	r3, #1
 800187c:	d101      	bne.n	8001882 <HAL_ADC_Start+0x1a>
 800187e:	2302      	movs	r3, #2
 8001880:	e04e      	b.n	8001920 <HAL_ADC_Start+0xb8>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2201      	movs	r2, #1
 8001886:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 fa80 	bl	8001d90 <ADC_Enable>
 8001890:	4603      	mov	r3, r0
 8001892:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001894:	7bfb      	ldrb	r3, [r7, #15]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d141      	bne.n	800191e <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800189e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80018a2:	f023 0301 	bic.w	r3, r3, #1
 80018a6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d007      	beq.n	80018cc <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80018c4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80018d8:	d106      	bne.n	80018e8 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018de:	f023 0206 	bic.w	r2, r3, #6
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	651a      	str	r2, [r3, #80]	@ 0x50
 80018e6:	e002      	b.n	80018ee <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80018fe:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d107      	bne.n	800191e <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800191c:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 800191e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001930:	2300      	movs	r3, #0
 8001932:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800193a:	2b01      	cmp	r3, #1
 800193c:	d101      	bne.n	8001942 <HAL_ADC_Stop+0x1a>
 800193e:	2302      	movs	r3, #2
 8001940:	e01a      	b.n	8001978 <HAL_ADC_Stop+0x50>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 fa7c 	bl	8001e48 <ADC_ConversionStop_Disable>
 8001950:	4603      	mov	r3, r0
 8001952:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001954:	7bfb      	ldrb	r3, [r7, #15]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d109      	bne.n	800196e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800195e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001962:	f023 0301 	bic.w	r3, r3, #1
 8001966:	f043 0201 	orr.w	r2, r3, #1
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001976:	7bfb      	ldrb	r3, [r7, #15]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001998:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800199c:	d113      	bne.n	80019c6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80019a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80019ac:	d10b      	bne.n	80019c6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019b2:	f043 0220 	orr.w	r2, r3, #32
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e068      	b.n	8001a98 <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80019c6:	f7ff fdff 	bl	80015c8 <HAL_GetTick>
 80019ca:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80019cc:	e021      	b.n	8001a12 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80019d4:	d01d      	beq.n	8001a12 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d007      	beq.n	80019ec <HAL_ADC_PollForConversion+0x6c>
 80019dc:	f7ff fdf4 	bl	80015c8 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d212      	bcs.n	8001a12 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d10b      	bne.n	8001a12 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019fe:	f043 0204 	orr.w	r2, r3, #4
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

          return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e042      	b.n	8001a98 <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0d6      	beq.n	80019ce <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d104      	bne.n	8001a32 <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f06f 0212 	mvn.w	r2, #18
 8001a30:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a36:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d124      	bne.n	8001a96 <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d11f      	bne.n	8001a96 <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5c:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d006      	beq.n	8001a72 <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d111      	bne.n	8001a96 <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a76:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a82:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d105      	bne.n	8001a96 <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a8e:	f043 0201 	orr.w	r2, r3, #1
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3710      	adds	r7, #16
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr

08001ab8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d101      	bne.n	8001ad8 <HAL_ADC_ConfigChannel+0x20>
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	e14f      	b.n	8001d78 <HAL_ADC_ConfigChannel+0x2c0>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b06      	cmp	r3, #6
 8001ae6:	d81c      	bhi.n	8001b22 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	4613      	mov	r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4413      	add	r3, r2
 8001af8:	3b05      	subs	r3, #5
 8001afa:	221f      	movs	r2, #31
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	4019      	ands	r1, r3
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	6818      	ldr	r0, [r3, #0]
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	3b05      	subs	r3, #5
 8001b14:	fa00 f203 	lsl.w	r2, r0, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b20:	e07e      	b.n	8001c20 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b0c      	cmp	r3, #12
 8001b28:	d81c      	bhi.n	8001b64 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	4613      	mov	r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	4413      	add	r3, r2
 8001b3a:	3b23      	subs	r3, #35	@ 0x23
 8001b3c:	221f      	movs	r2, #31
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43db      	mvns	r3, r3
 8001b44:	4019      	ands	r1, r3
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	6818      	ldr	r0, [r3, #0]
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685a      	ldr	r2, [r3, #4]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4413      	add	r3, r2
 8001b54:	3b23      	subs	r3, #35	@ 0x23
 8001b56:	fa00 f203 	lsl.w	r2, r0, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b62:	e05d      	b.n	8001c20 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b12      	cmp	r3, #18
 8001b6a:	d81c      	bhi.n	8001ba6 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	4613      	mov	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4413      	add	r3, r2
 8001b7c:	3b41      	subs	r3, #65	@ 0x41
 8001b7e:	221f      	movs	r2, #31
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	43db      	mvns	r3, r3
 8001b86:	4019      	ands	r1, r3
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	6818      	ldr	r0, [r3, #0]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	4613      	mov	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	3b41      	subs	r3, #65	@ 0x41
 8001b98:	fa00 f203 	lsl.w	r2, r0, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	639a      	str	r2, [r3, #56]	@ 0x38
 8001ba4:	e03c      	b.n	8001c20 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2b18      	cmp	r3, #24
 8001bac:	d81c      	bhi.n	8001be8 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	3b5f      	subs	r3, #95	@ 0x5f
 8001bc0:	221f      	movs	r2, #31
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	4019      	ands	r1, r3
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	6818      	ldr	r0, [r3, #0]
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685a      	ldr	r2, [r3, #4]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	3b5f      	subs	r3, #95	@ 0x5f
 8001bda:	fa00 f203 	lsl.w	r2, r0, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	430a      	orrs	r2, r1
 8001be4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001be6:	e01b      	b.n	8001c20 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	3b7d      	subs	r3, #125	@ 0x7d
 8001bfa:	221f      	movs	r2, #31
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	4019      	ands	r1, r3
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	6818      	ldr	r0, [r3, #0]
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	3b7d      	subs	r3, #125	@ 0x7d
 8001c14:	fa00 f203 	lsl.w	r2, r0, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2b09      	cmp	r3, #9
 8001c26:	d81a      	bhi.n	8001c5e <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6959      	ldr	r1, [r3, #20]
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	4613      	mov	r3, r2
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	4413      	add	r3, r2
 8001c38:	2207      	movs	r2, #7
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	4019      	ands	r1, r3
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	6898      	ldr	r0, [r3, #8]
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	4413      	add	r3, r2
 8001c50:	fa00 f203 	lsl.w	r2, r0, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	615a      	str	r2, [r3, #20]
 8001c5c:	e05d      	b.n	8001d1a <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2b13      	cmp	r3, #19
 8001c64:	d81c      	bhi.n	8001ca0 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6919      	ldr	r1, [r3, #16]
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4613      	mov	r3, r2
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	4413      	add	r3, r2
 8001c76:	3b1e      	subs	r3, #30
 8001c78:	2207      	movs	r2, #7
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	4019      	ands	r1, r3
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	6898      	ldr	r0, [r3, #8]
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	4413      	add	r3, r2
 8001c90:	3b1e      	subs	r3, #30
 8001c92:	fa00 f203 	lsl.w	r2, r0, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	611a      	str	r2, [r3, #16]
 8001c9e:	e03c      	b.n	8001d1a <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2b1d      	cmp	r3, #29
 8001ca6:	d81c      	bhi.n	8001ce2 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68d9      	ldr	r1, [r3, #12]
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3b3c      	subs	r3, #60	@ 0x3c
 8001cba:	2207      	movs	r2, #7
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	4019      	ands	r1, r3
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	6898      	ldr	r0, [r3, #8]
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	4413      	add	r3, r2
 8001cd2:	3b3c      	subs	r3, #60	@ 0x3c
 8001cd4:	fa00 f203 	lsl.w	r2, r0, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	60da      	str	r2, [r3, #12]
 8001ce0:	e01b      	b.n	8001d1a <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	4613      	mov	r3, r2
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	4413      	add	r3, r2
 8001cf2:	3b5a      	subs	r3, #90	@ 0x5a
 8001cf4:	2207      	movs	r2, #7
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	4019      	ands	r1, r3
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	6898      	ldr	r0, [r3, #8]
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	4613      	mov	r3, r2
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	4413      	add	r3, r2
 8001d0c:	3b5a      	subs	r3, #90	@ 0x5a
 8001d0e:	fa00 f203 	lsl.w	r2, r0, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	430a      	orrs	r2, r1
 8001d18:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2b10      	cmp	r3, #16
 8001d20:	d003      	beq.n	8001d2a <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d26:	2b11      	cmp	r3, #17
 8001d28:	d121      	bne.n	8001d6e <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8001d2a:	4b16      	ldr	r3, [pc, #88]	@ (8001d84 <HAL_ADC_ConfigChannel+0x2cc>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d11b      	bne.n	8001d6e <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8001d36:	4b13      	ldr	r3, [pc, #76]	@ (8001d84 <HAL_ADC_ConfigChannel+0x2cc>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	4a12      	ldr	r2, [pc, #72]	@ (8001d84 <HAL_ADC_ConfigChannel+0x2cc>)
 8001d3c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001d40:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2b10      	cmp	r3, #16
 8001d48:	d111      	bne.n	8001d6e <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001d4a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d88 <HAL_ADC_ConfigChannel+0x2d0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a0f      	ldr	r2, [pc, #60]	@ (8001d8c <HAL_ADC_ConfigChannel+0x2d4>)
 8001d50:	fba2 2303 	umull	r2, r3, r2, r3
 8001d54:	0c9a      	lsrs	r2, r3, #18
 8001d56:	4613      	mov	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001d60:	e002      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	3b01      	subs	r3, #1
 8001d66:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1f9      	bne.n	8001d62 <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bc80      	pop	{r7}
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	40012700 	.word	0x40012700
 8001d88:	20000000 	.word	0x20000000
 8001d8c:	431bde83 	.word	0x431bde83

08001d90 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001daa:	2b40      	cmp	r3, #64	@ 0x40
 8001dac:	d043      	beq.n	8001e36 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f042 0201 	orr.w	r2, r2, #1
 8001dbc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001dbe:	4b20      	ldr	r3, [pc, #128]	@ (8001e40 <ADC_Enable+0xb0>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a20      	ldr	r2, [pc, #128]	@ (8001e44 <ADC_Enable+0xb4>)
 8001dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc8:	0c9a      	lsrs	r2, r3, #18
 8001dca:	4613      	mov	r3, r2
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	4413      	add	r3, r2
 8001dd0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8001dd2:	e002      	b.n	8001dda <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1f9      	bne.n	8001dd4 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8001de0:	f7ff fbf2 	bl	80015c8 <HAL_GetTick>
 8001de4:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001de6:	e01f      	b.n	8001e28 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8001de8:	f7ff fbee 	bl	80015c8 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d918      	bls.n	8001e28 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e00:	2b40      	cmp	r3, #64	@ 0x40
 8001e02:	d011      	beq.n	8001e28 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e08:	f043 0210 	orr.w	r2, r3, #16
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e14:	f043 0201 	orr.w	r2, r3, #1
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

          return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e007      	b.n	8001e38 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e32:	2b40      	cmp	r3, #64	@ 0x40
 8001e34:	d1d8      	bne.n	8001de8 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	20000000 	.word	0x20000000
 8001e44:	431bde83 	.word	0x431bde83

08001e48 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e5e:	2b40      	cmp	r3, #64	@ 0x40
 8001e60:	d12e      	bne.n	8001ec0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 0201 	bic.w	r2, r2, #1
 8001e70:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e72:	f7ff fba9 	bl	80015c8 <HAL_GetTick>
 8001e76:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e78:	e01b      	b.n	8001eb2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 8001e7a:	f7ff fba5 	bl	80015c8 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d914      	bls.n	8001eb2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e92:	2b40      	cmp	r3, #64	@ 0x40
 8001e94:	d10d      	bne.n	8001eb2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e9a:	f043 0210 	orr.w	r2, r3, #16
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ea6:	f043 0201 	orr.w	r2, r3, #1
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	651a      	str	r2, [r3, #80]	@ 0x50

          return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e007      	b.n	8001ec2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ebc:	2b40      	cmp	r3, #64	@ 0x40
 8001ebe:	d0dc      	beq.n	8001e7a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001edc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f10 <__NVIC_SetPriorityGrouping+0x44>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ee2:	68ba      	ldr	r2, [r7, #8]
 8001ee4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ee8:	4013      	ands	r3, r2
 8001eea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ef8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001efc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001efe:	4a04      	ldr	r2, [pc, #16]	@ (8001f10 <__NVIC_SetPriorityGrouping+0x44>)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	60d3      	str	r3, [r2, #12]
}
 8001f04:	bf00      	nop
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bc80      	pop	{r7}
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f18:	4b04      	ldr	r3, [pc, #16]	@ (8001f2c <__NVIC_GetPriorityGrouping+0x18>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	0a1b      	lsrs	r3, r3, #8
 8001f1e:	f003 0307 	and.w	r3, r3, #7
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bc80      	pop	{r7}
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	db0b      	blt.n	8001f5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	f003 021f 	and.w	r2, r3, #31
 8001f48:	4906      	ldr	r1, [pc, #24]	@ (8001f64 <__NVIC_EnableIRQ+0x34>)
 8001f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4e:	095b      	lsrs	r3, r3, #5
 8001f50:	2001      	movs	r0, #1
 8001f52:	fa00 f202 	lsl.w	r2, r0, r2
 8001f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr
 8001f64:	e000e100 	.word	0xe000e100

08001f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	6039      	str	r1, [r7, #0]
 8001f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	db0a      	blt.n	8001f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	490c      	ldr	r1, [pc, #48]	@ (8001fb4 <__NVIC_SetPriority+0x4c>)
 8001f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f86:	0112      	lsls	r2, r2, #4
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	440b      	add	r3, r1
 8001f8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f90:	e00a      	b.n	8001fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	4908      	ldr	r1, [pc, #32]	@ (8001fb8 <__NVIC_SetPriority+0x50>)
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	3b04      	subs	r3, #4
 8001fa0:	0112      	lsls	r2, r2, #4
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	761a      	strb	r2, [r3, #24]
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bc80      	pop	{r7}
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	e000e100 	.word	0xe000e100
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b089      	sub	sp, #36	@ 0x24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f1c3 0307 	rsb	r3, r3, #7
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	bf28      	it	cs
 8001fda:	2304      	movcs	r3, #4
 8001fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	2b06      	cmp	r3, #6
 8001fe4:	d902      	bls.n	8001fec <NVIC_EncodePriority+0x30>
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3b03      	subs	r3, #3
 8001fea:	e000      	b.n	8001fee <NVIC_EncodePriority+0x32>
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43da      	mvns	r2, r3
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	401a      	ands	r2, r3
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002004:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	fa01 f303 	lsl.w	r3, r1, r3
 800200e:	43d9      	mvns	r1, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002014:	4313      	orrs	r3, r2
         );
}
 8002016:	4618      	mov	r0, r3
 8002018:	3724      	adds	r7, #36	@ 0x24
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr

08002020 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3b01      	subs	r3, #1
 800202c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002030:	d301      	bcc.n	8002036 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002032:	2301      	movs	r3, #1
 8002034:	e00f      	b.n	8002056 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002036:	4a0a      	ldr	r2, [pc, #40]	@ (8002060 <SysTick_Config+0x40>)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3b01      	subs	r3, #1
 800203c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800203e:	210f      	movs	r1, #15
 8002040:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002044:	f7ff ff90 	bl	8001f68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002048:	4b05      	ldr	r3, [pc, #20]	@ (8002060 <SysTick_Config+0x40>)
 800204a:	2200      	movs	r2, #0
 800204c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800204e:	4b04      	ldr	r3, [pc, #16]	@ (8002060 <SysTick_Config+0x40>)
 8002050:	2207      	movs	r2, #7
 8002052:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	e000e010 	.word	0xe000e010

08002064 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f7ff ff2d 	bl	8001ecc <__NVIC_SetPriorityGrouping>
}
 8002072:	bf00      	nop
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b086      	sub	sp, #24
 800207e:	af00      	add	r7, sp, #0
 8002080:	4603      	mov	r3, r0
 8002082:	60b9      	str	r1, [r7, #8]
 8002084:	607a      	str	r2, [r7, #4]
 8002086:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800208c:	f7ff ff42 	bl	8001f14 <__NVIC_GetPriorityGrouping>
 8002090:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	68b9      	ldr	r1, [r7, #8]
 8002096:	6978      	ldr	r0, [r7, #20]
 8002098:	f7ff ff90 	bl	8001fbc <NVIC_EncodePriority>
 800209c:	4602      	mov	r2, r0
 800209e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020a2:	4611      	mov	r1, r2
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff ff5f 	bl	8001f68 <__NVIC_SetPriority>
}
 80020aa:	bf00      	nop
 80020ac:	3718      	adds	r7, #24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b082      	sub	sp, #8
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	4603      	mov	r3, r0
 80020ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff ff35 	bl	8001f30 <__NVIC_EnableIRQ>
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b082      	sub	sp, #8
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7ff ffa2 	bl	8002020 <SysTick_Config>
 80020dc:	4603      	mov	r3, r0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
	...

080020e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b087      	sub	sp, #28
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80020f2:	2300      	movs	r3, #0
 80020f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80020fa:	2300      	movs	r3, #0
 80020fc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80020fe:	e160      	b.n	80023c2 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	2101      	movs	r1, #1
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	fa01 f303 	lsl.w	r3, r1, r3
 800210c:	4013      	ands	r3, r2
 800210e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 8152 	beq.w	80023bc <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 0303 	and.w	r3, r3, #3
 8002120:	2b01      	cmp	r3, #1
 8002122:	d005      	beq.n	8002130 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800212c:	2b02      	cmp	r3, #2
 800212e:	d130      	bne.n	8002192 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	2203      	movs	r2, #3
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	4013      	ands	r3, r2
 8002146:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	68da      	ldr	r2, [r3, #12]
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	4313      	orrs	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002166:	2201      	movs	r2, #1
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43db      	mvns	r3, r3
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	4013      	ands	r3, r2
 8002174:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	091b      	lsrs	r3, r3, #4
 800217c:	f003 0201 	and.w	r2, r3, #1
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	4313      	orrs	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	2b03      	cmp	r3, #3
 800219c:	d017      	beq.n	80021ce <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	2203      	movs	r2, #3
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43db      	mvns	r3, r3
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	4013      	ands	r3, r2
 80021b4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	689a      	ldr	r2, [r3, #8]
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f003 0303 	and.w	r3, r3, #3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d123      	bne.n	8002222 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	08da      	lsrs	r2, r3, #3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	3208      	adds	r2, #8
 80021e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021e6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	220f      	movs	r2, #15
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43db      	mvns	r3, r3
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	4013      	ands	r3, r2
 80021fc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	691a      	ldr	r2, [r3, #16]
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	4313      	orrs	r3, r2
 8002212:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	08da      	lsrs	r2, r3, #3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3208      	adds	r2, #8
 800221c:	6939      	ldr	r1, [r7, #16]
 800221e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	2203      	movs	r2, #3
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43db      	mvns	r3, r3
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	4013      	ands	r3, r2
 8002238:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f003 0203 	and.w	r2, r3, #3
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	4313      	orrs	r3, r2
 800224e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800225e:	2b00      	cmp	r3, #0
 8002260:	f000 80ac 	beq.w	80023bc <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002264:	4b5e      	ldr	r3, [pc, #376]	@ (80023e0 <HAL_GPIO_Init+0x2f8>)
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	4a5d      	ldr	r2, [pc, #372]	@ (80023e0 <HAL_GPIO_Init+0x2f8>)
 800226a:	f043 0301 	orr.w	r3, r3, #1
 800226e:	6213      	str	r3, [r2, #32]
 8002270:	4b5b      	ldr	r3, [pc, #364]	@ (80023e0 <HAL_GPIO_Init+0x2f8>)
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800227c:	4a59      	ldr	r2, [pc, #356]	@ (80023e4 <HAL_GPIO_Init+0x2fc>)
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	089b      	lsrs	r3, r3, #2
 8002282:	3302      	adds	r3, #2
 8002284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002288:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	f003 0303 	and.w	r3, r3, #3
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	220f      	movs	r2, #15
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	43db      	mvns	r3, r3
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	4013      	ands	r3, r2
 800229e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a51      	ldr	r2, [pc, #324]	@ (80023e8 <HAL_GPIO_Init+0x300>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d025      	beq.n	80022f4 <HAL_GPIO_Init+0x20c>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a50      	ldr	r2, [pc, #320]	@ (80023ec <HAL_GPIO_Init+0x304>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d01f      	beq.n	80022f0 <HAL_GPIO_Init+0x208>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a4f      	ldr	r2, [pc, #316]	@ (80023f0 <HAL_GPIO_Init+0x308>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d019      	beq.n	80022ec <HAL_GPIO_Init+0x204>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a4e      	ldr	r2, [pc, #312]	@ (80023f4 <HAL_GPIO_Init+0x30c>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d013      	beq.n	80022e8 <HAL_GPIO_Init+0x200>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a4d      	ldr	r2, [pc, #308]	@ (80023f8 <HAL_GPIO_Init+0x310>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d00d      	beq.n	80022e4 <HAL_GPIO_Init+0x1fc>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a4c      	ldr	r2, [pc, #304]	@ (80023fc <HAL_GPIO_Init+0x314>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d007      	beq.n	80022e0 <HAL_GPIO_Init+0x1f8>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a4b      	ldr	r2, [pc, #300]	@ (8002400 <HAL_GPIO_Init+0x318>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d101      	bne.n	80022dc <HAL_GPIO_Init+0x1f4>
 80022d8:	2306      	movs	r3, #6
 80022da:	e00c      	b.n	80022f6 <HAL_GPIO_Init+0x20e>
 80022dc:	2307      	movs	r3, #7
 80022de:	e00a      	b.n	80022f6 <HAL_GPIO_Init+0x20e>
 80022e0:	2305      	movs	r3, #5
 80022e2:	e008      	b.n	80022f6 <HAL_GPIO_Init+0x20e>
 80022e4:	2304      	movs	r3, #4
 80022e6:	e006      	b.n	80022f6 <HAL_GPIO_Init+0x20e>
 80022e8:	2303      	movs	r3, #3
 80022ea:	e004      	b.n	80022f6 <HAL_GPIO_Init+0x20e>
 80022ec:	2302      	movs	r3, #2
 80022ee:	e002      	b.n	80022f6 <HAL_GPIO_Init+0x20e>
 80022f0:	2301      	movs	r3, #1
 80022f2:	e000      	b.n	80022f6 <HAL_GPIO_Init+0x20e>
 80022f4:	2300      	movs	r3, #0
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	f002 0203 	and.w	r2, r2, #3
 80022fc:	0092      	lsls	r2, r2, #2
 80022fe:	4093      	lsls	r3, r2
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	4313      	orrs	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002306:	4937      	ldr	r1, [pc, #220]	@ (80023e4 <HAL_GPIO_Init+0x2fc>)
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	089b      	lsrs	r3, r3, #2
 800230c:	3302      	adds	r3, #2
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002314:	4b3b      	ldr	r3, [pc, #236]	@ (8002404 <HAL_GPIO_Init+0x31c>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	43db      	mvns	r3, r3
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	4013      	ands	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d003      	beq.n	8002338 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	4313      	orrs	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002338:	4a32      	ldr	r2, [pc, #200]	@ (8002404 <HAL_GPIO_Init+0x31c>)
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800233e:	4b31      	ldr	r3, [pc, #196]	@ (8002404 <HAL_GPIO_Init+0x31c>)
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	43db      	mvns	r3, r3
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	4013      	ands	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d003      	beq.n	8002362 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	4313      	orrs	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002362:	4a28      	ldr	r2, [pc, #160]	@ (8002404 <HAL_GPIO_Init+0x31c>)
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002368:	4b26      	ldr	r3, [pc, #152]	@ (8002404 <HAL_GPIO_Init+0x31c>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	43db      	mvns	r3, r3
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	4013      	ands	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d003      	beq.n	800238c <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	4313      	orrs	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800238c:	4a1d      	ldr	r2, [pc, #116]	@ (8002404 <HAL_GPIO_Init+0x31c>)
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002392:	4b1c      	ldr	r3, [pc, #112]	@ (8002404 <HAL_GPIO_Init+0x31c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	43db      	mvns	r3, r3
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	4013      	ands	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80023b6:	4a13      	ldr	r2, [pc, #76]	@ (8002404 <HAL_GPIO_Init+0x31c>)
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	3301      	adds	r3, #1
 80023c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	fa22 f303 	lsr.w	r3, r2, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f47f ae97 	bne.w	8002100 <HAL_GPIO_Init+0x18>
  }
}
 80023d2:	bf00      	nop
 80023d4:	bf00      	nop
 80023d6:	371c      	adds	r7, #28
 80023d8:	46bd      	mov	sp, r7
 80023da:	bc80      	pop	{r7}
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	40023800 	.word	0x40023800
 80023e4:	40010000 	.word	0x40010000
 80023e8:	40020000 	.word	0x40020000
 80023ec:	40020400 	.word	0x40020400
 80023f0:	40020800 	.word	0x40020800
 80023f4:	40020c00 	.word	0x40020c00
 80023f8:	40021000 	.word	0x40021000
 80023fc:	40021400 	.word	0x40021400
 8002400:	40021800 	.word	0x40021800
 8002404:	40010400 	.word	0x40010400

08002408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	807b      	strh	r3, [r7, #2]
 8002414:	4613      	mov	r3, r2
 8002416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002418:	787b      	ldrb	r3, [r7, #1]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800241e:	887a      	ldrh	r2, [r7, #2]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002424:	e003      	b.n	800242e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002426:	887b      	ldrh	r3, [r7, #2]
 8002428:	041a      	lsls	r2, r3, #16
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	619a      	str	r2, [r3, #24]
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr

08002438 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002442:	4b08      	ldr	r3, [pc, #32]	@ (8002464 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002444:	695a      	ldr	r2, [r3, #20]
 8002446:	88fb      	ldrh	r3, [r7, #6]
 8002448:	4013      	ands	r3, r2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d006      	beq.n	800245c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800244e:	4a05      	ldr	r2, [pc, #20]	@ (8002464 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002450:	88fb      	ldrh	r3, [r7, #6]
 8002452:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002454:	88fb      	ldrh	r3, [r7, #6]
 8002456:	4618      	mov	r0, r3
 8002458:	f000 f806 	bl	8002468 <HAL_GPIO_EXTI_Callback>
  }
}
 800245c:	bf00      	nop
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40010400 	.word	0x40010400

08002468 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr

0800247c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b088      	sub	sp, #32
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e31d      	b.n	8002aca <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800248e:	4b94      	ldr	r3, [pc, #592]	@ (80026e0 <HAL_RCC_OscConfig+0x264>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 030c 	and.w	r3, r3, #12
 8002496:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002498:	4b91      	ldr	r3, [pc, #580]	@ (80026e0 <HAL_RCC_OscConfig+0x264>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024a0:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d07b      	beq.n	80025a6 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	2b08      	cmp	r3, #8
 80024b2:	d006      	beq.n	80024c2 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	2b0c      	cmp	r3, #12
 80024b8:	d10f      	bne.n	80024da <HAL_RCC_OscConfig+0x5e>
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024c0:	d10b      	bne.n	80024da <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c2:	4b87      	ldr	r3, [pc, #540]	@ (80026e0 <HAL_RCC_OscConfig+0x264>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d06a      	beq.n	80025a4 <HAL_RCC_OscConfig+0x128>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d166      	bne.n	80025a4 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e2f7      	b.n	8002aca <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d106      	bne.n	80024f0 <HAL_RCC_OscConfig+0x74>
 80024e2:	4b7f      	ldr	r3, [pc, #508]	@ (80026e0 <HAL_RCC_OscConfig+0x264>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a7e      	ldr	r2, [pc, #504]	@ (80026e0 <HAL_RCC_OscConfig+0x264>)
 80024e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024ec:	6013      	str	r3, [r2, #0]
 80024ee:	e02d      	b.n	800254c <HAL_RCC_OscConfig+0xd0>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10c      	bne.n	8002512 <HAL_RCC_OscConfig+0x96>
 80024f8:	4b79      	ldr	r3, [pc, #484]	@ (80026e0 <HAL_RCC_OscConfig+0x264>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a78      	ldr	r2, [pc, #480]	@ (80026e0 <HAL_RCC_OscConfig+0x264>)
 80024fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002502:	6013      	str	r3, [r2, #0]
 8002504:	4b76      	ldr	r3, [pc, #472]	@ (80026e0 <HAL_RCC_OscConfig+0x264>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a75      	ldr	r2, [pc, #468]	@ (80026e0 <HAL_RCC_OscConfig+0x264>)
 800250a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800250e:	6013      	str	r3, [r2, #0]
 8002510:	e01c      	b.n	800254c <HAL_RCC_OscConfig+0xd0>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b05      	cmp	r3, #5
 8002518:	d10c      	bne.n	8002534 <HAL_RCC_OscConfig+0xb8>
 800251a:	4b71      	ldr	r3, [pc, #452]	@ (80026e0 <HAL_RCC_OscConfig+0x264>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a70      	ldr	r2, [pc, #448]	@ (80026e0 <HAL_RCC_OscConfig+0x264>)
 8002520:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	4b6e      	ldr	r3, [pc, #440]	@ (80026e0 <HAL_RCC_OscConfig+0x264>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a6d      	ldr	r2, [pc, #436]	@ (80026e0 <HAL_RCC_OscConfig+0x264>)
 800252c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	e00b      	b.n	800254c <HAL_RCC_OscConfig+0xd0>
 8002534:	4b6a      	ldr	r3, [pc, #424]	@ (80026e0 <HAL_RCC_OscConfig+0x264>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a69      	ldr	r2, [pc, #420]	@ (80026e0 <HAL_RCC_OscConfig+0x264>)
 800253a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800253e:	6013      	str	r3, [r2, #0]
 8002540:	4b67      	ldr	r3, [pc, #412]	@ (80026e0 <HAL_RCC_OscConfig+0x264>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a66      	ldr	r2, [pc, #408]	@ (80026e0 <HAL_RCC_OscConfig+0x264>)
 8002546:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800254a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d013      	beq.n	800257c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002554:	f7ff f838 	bl	80015c8 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800255c:	f7ff f834 	bl	80015c8 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b64      	cmp	r3, #100	@ 0x64
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e2ad      	b.n	8002aca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800256e:	4b5c      	ldr	r3, [pc, #368]	@ (80026e0 <HAL_RCC_OscConfig+0x264>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d0f0      	beq.n	800255c <HAL_RCC_OscConfig+0xe0>
 800257a:	e014      	b.n	80025a6 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257c:	f7ff f824 	bl	80015c8 <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002584:	f7ff f820 	bl	80015c8 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b64      	cmp	r3, #100	@ 0x64
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e299      	b.n	8002aca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002596:	4b52      	ldr	r3, [pc, #328]	@ (80026e0 <HAL_RCC_OscConfig+0x264>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f0      	bne.n	8002584 <HAL_RCC_OscConfig+0x108>
 80025a2:	e000      	b.n	80025a6 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d05a      	beq.n	8002668 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	2b04      	cmp	r3, #4
 80025b6:	d005      	beq.n	80025c4 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	2b0c      	cmp	r3, #12
 80025bc:	d119      	bne.n	80025f2 <HAL_RCC_OscConfig+0x176>
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d116      	bne.n	80025f2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025c4:	4b46      	ldr	r3, [pc, #280]	@ (80026e0 <HAL_RCC_OscConfig+0x264>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d005      	beq.n	80025dc <HAL_RCC_OscConfig+0x160>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d001      	beq.n	80025dc <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e276      	b.n	8002aca <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025dc:	4b40      	ldr	r3, [pc, #256]	@ (80026e0 <HAL_RCC_OscConfig+0x264>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	021b      	lsls	r3, r3, #8
 80025ea:	493d      	ldr	r1, [pc, #244]	@ (80026e0 <HAL_RCC_OscConfig+0x264>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025f0:	e03a      	b.n	8002668 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d020      	beq.n	800263c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025fa:	4b3a      	ldr	r3, [pc, #232]	@ (80026e4 <HAL_RCC_OscConfig+0x268>)
 80025fc:	2201      	movs	r2, #1
 80025fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002600:	f7fe ffe2 	bl	80015c8 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002608:	f7fe ffde 	bl	80015c8 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e257      	b.n	8002aca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800261a:	4b31      	ldr	r3, [pc, #196]	@ (80026e0 <HAL_RCC_OscConfig+0x264>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d0f0      	beq.n	8002608 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002626:	4b2e      	ldr	r3, [pc, #184]	@ (80026e0 <HAL_RCC_OscConfig+0x264>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	021b      	lsls	r3, r3, #8
 8002634:	492a      	ldr	r1, [pc, #168]	@ (80026e0 <HAL_RCC_OscConfig+0x264>)
 8002636:	4313      	orrs	r3, r2
 8002638:	604b      	str	r3, [r1, #4]
 800263a:	e015      	b.n	8002668 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800263c:	4b29      	ldr	r3, [pc, #164]	@ (80026e4 <HAL_RCC_OscConfig+0x268>)
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002642:	f7fe ffc1 	bl	80015c8 <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800264a:	f7fe ffbd 	bl	80015c8 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e236      	b.n	8002aca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800265c:	4b20      	ldr	r3, [pc, #128]	@ (80026e0 <HAL_RCC_OscConfig+0x264>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1f0      	bne.n	800264a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0310 	and.w	r3, r3, #16
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 80b8 	beq.w	80027e6 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d170      	bne.n	800275e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800267c:	4b18      	ldr	r3, [pc, #96]	@ (80026e0 <HAL_RCC_OscConfig+0x264>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002684:	2b00      	cmp	r3, #0
 8002686:	d005      	beq.n	8002694 <HAL_RCC_OscConfig+0x218>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e21a      	b.n	8002aca <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a1a      	ldr	r2, [r3, #32]
 8002698:	4b11      	ldr	r3, [pc, #68]	@ (80026e0 <HAL_RCC_OscConfig+0x264>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d921      	bls.n	80026e8 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f000 fc09 	bl	8002ec0 <RCC_SetFlashLatencyFromMSIRange>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e208      	b.n	8002aca <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026b8:	4b09      	ldr	r3, [pc, #36]	@ (80026e0 <HAL_RCC_OscConfig+0x264>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	4906      	ldr	r1, [pc, #24]	@ (80026e0 <HAL_RCC_OscConfig+0x264>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026ca:	4b05      	ldr	r3, [pc, #20]	@ (80026e0 <HAL_RCC_OscConfig+0x264>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	061b      	lsls	r3, r3, #24
 80026d8:	4901      	ldr	r1, [pc, #4]	@ (80026e0 <HAL_RCC_OscConfig+0x264>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	604b      	str	r3, [r1, #4]
 80026de:	e020      	b.n	8002722 <HAL_RCC_OscConfig+0x2a6>
 80026e0:	40023800 	.word	0x40023800
 80026e4:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026e8:	4b99      	ldr	r3, [pc, #612]	@ (8002950 <HAL_RCC_OscConfig+0x4d4>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	4996      	ldr	r1, [pc, #600]	@ (8002950 <HAL_RCC_OscConfig+0x4d4>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026fa:	4b95      	ldr	r3, [pc, #596]	@ (8002950 <HAL_RCC_OscConfig+0x4d4>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	061b      	lsls	r3, r3, #24
 8002708:	4991      	ldr	r1, [pc, #580]	@ (8002950 <HAL_RCC_OscConfig+0x4d4>)
 800270a:	4313      	orrs	r3, r2
 800270c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	4618      	mov	r0, r3
 8002714:	f000 fbd4 	bl	8002ec0 <RCC_SetFlashLatencyFromMSIRange>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e1d3      	b.n	8002aca <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	0b5b      	lsrs	r3, r3, #13
 8002728:	3301      	adds	r3, #1
 800272a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002732:	4a87      	ldr	r2, [pc, #540]	@ (8002950 <HAL_RCC_OscConfig+0x4d4>)
 8002734:	6892      	ldr	r2, [r2, #8]
 8002736:	0912      	lsrs	r2, r2, #4
 8002738:	f002 020f 	and.w	r2, r2, #15
 800273c:	4985      	ldr	r1, [pc, #532]	@ (8002954 <HAL_RCC_OscConfig+0x4d8>)
 800273e:	5c8a      	ldrb	r2, [r1, r2]
 8002740:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002742:	4a85      	ldr	r2, [pc, #532]	@ (8002958 <HAL_RCC_OscConfig+0x4dc>)
 8002744:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002746:	4b85      	ldr	r3, [pc, #532]	@ (800295c <HAL_RCC_OscConfig+0x4e0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f7fe fef0 	bl	8001530 <HAL_InitTick>
 8002750:	4603      	mov	r3, r0
 8002752:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002754:	7bfb      	ldrb	r3, [r7, #15]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d045      	beq.n	80027e6 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800275a:	7bfb      	ldrb	r3, [r7, #15]
 800275c:	e1b5      	b.n	8002aca <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d029      	beq.n	80027ba <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002766:	4b7e      	ldr	r3, [pc, #504]	@ (8002960 <HAL_RCC_OscConfig+0x4e4>)
 8002768:	2201      	movs	r2, #1
 800276a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276c:	f7fe ff2c 	bl	80015c8 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002774:	f7fe ff28 	bl	80015c8 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e1a1      	b.n	8002aca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002786:	4b72      	ldr	r3, [pc, #456]	@ (8002950 <HAL_RCC_OscConfig+0x4d4>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0f0      	beq.n	8002774 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002792:	4b6f      	ldr	r3, [pc, #444]	@ (8002950 <HAL_RCC_OscConfig+0x4d4>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	496c      	ldr	r1, [pc, #432]	@ (8002950 <HAL_RCC_OscConfig+0x4d4>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027a4:	4b6a      	ldr	r3, [pc, #424]	@ (8002950 <HAL_RCC_OscConfig+0x4d4>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	69db      	ldr	r3, [r3, #28]
 80027b0:	061b      	lsls	r3, r3, #24
 80027b2:	4967      	ldr	r1, [pc, #412]	@ (8002950 <HAL_RCC_OscConfig+0x4d4>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	604b      	str	r3, [r1, #4]
 80027b8:	e015      	b.n	80027e6 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027ba:	4b69      	ldr	r3, [pc, #420]	@ (8002960 <HAL_RCC_OscConfig+0x4e4>)
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c0:	f7fe ff02 	bl	80015c8 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027c8:	f7fe fefe 	bl	80015c8 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e177      	b.n	8002aca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80027da:	4b5d      	ldr	r3, [pc, #372]	@ (8002950 <HAL_RCC_OscConfig+0x4d4>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1f0      	bne.n	80027c8 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d030      	beq.n	8002854 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d016      	beq.n	8002828 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027fa:	4b5a      	ldr	r3, [pc, #360]	@ (8002964 <HAL_RCC_OscConfig+0x4e8>)
 80027fc:	2201      	movs	r2, #1
 80027fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002800:	f7fe fee2 	bl	80015c8 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002808:	f7fe fede 	bl	80015c8 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e157      	b.n	8002aca <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800281a:	4b4d      	ldr	r3, [pc, #308]	@ (8002950 <HAL_RCC_OscConfig+0x4d4>)
 800281c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d0f0      	beq.n	8002808 <HAL_RCC_OscConfig+0x38c>
 8002826:	e015      	b.n	8002854 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002828:	4b4e      	ldr	r3, [pc, #312]	@ (8002964 <HAL_RCC_OscConfig+0x4e8>)
 800282a:	2200      	movs	r2, #0
 800282c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800282e:	f7fe fecb 	bl	80015c8 <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002836:	f7fe fec7 	bl	80015c8 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e140      	b.n	8002aca <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002848:	4b41      	ldr	r3, [pc, #260]	@ (8002950 <HAL_RCC_OscConfig+0x4d4>)
 800284a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1f0      	bne.n	8002836 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b00      	cmp	r3, #0
 800285e:	f000 80b5 	beq.w	80029cc <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002862:	2300      	movs	r3, #0
 8002864:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002866:	4b3a      	ldr	r3, [pc, #232]	@ (8002950 <HAL_RCC_OscConfig+0x4d4>)
 8002868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10d      	bne.n	800288e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002872:	4b37      	ldr	r3, [pc, #220]	@ (8002950 <HAL_RCC_OscConfig+0x4d4>)
 8002874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002876:	4a36      	ldr	r2, [pc, #216]	@ (8002950 <HAL_RCC_OscConfig+0x4d4>)
 8002878:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800287c:	6253      	str	r3, [r2, #36]	@ 0x24
 800287e:	4b34      	ldr	r3, [pc, #208]	@ (8002950 <HAL_RCC_OscConfig+0x4d4>)
 8002880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002882:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002886:	60bb      	str	r3, [r7, #8]
 8002888:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800288a:	2301      	movs	r3, #1
 800288c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288e:	4b36      	ldr	r3, [pc, #216]	@ (8002968 <HAL_RCC_OscConfig+0x4ec>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002896:	2b00      	cmp	r3, #0
 8002898:	d118      	bne.n	80028cc <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800289a:	4b33      	ldr	r3, [pc, #204]	@ (8002968 <HAL_RCC_OscConfig+0x4ec>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a32      	ldr	r2, [pc, #200]	@ (8002968 <HAL_RCC_OscConfig+0x4ec>)
 80028a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028a6:	f7fe fe8f 	bl	80015c8 <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ae:	f7fe fe8b 	bl	80015c8 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b64      	cmp	r3, #100	@ 0x64
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e104      	b.n	8002aca <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c0:	4b29      	ldr	r3, [pc, #164]	@ (8002968 <HAL_RCC_OscConfig+0x4ec>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0f0      	beq.n	80028ae <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d106      	bne.n	80028e2 <HAL_RCC_OscConfig+0x466>
 80028d4:	4b1e      	ldr	r3, [pc, #120]	@ (8002950 <HAL_RCC_OscConfig+0x4d4>)
 80028d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028d8:	4a1d      	ldr	r2, [pc, #116]	@ (8002950 <HAL_RCC_OscConfig+0x4d4>)
 80028da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028de:	6353      	str	r3, [r2, #52]	@ 0x34
 80028e0:	e02d      	b.n	800293e <HAL_RCC_OscConfig+0x4c2>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10c      	bne.n	8002904 <HAL_RCC_OscConfig+0x488>
 80028ea:	4b19      	ldr	r3, [pc, #100]	@ (8002950 <HAL_RCC_OscConfig+0x4d4>)
 80028ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ee:	4a18      	ldr	r2, [pc, #96]	@ (8002950 <HAL_RCC_OscConfig+0x4d4>)
 80028f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80028f4:	6353      	str	r3, [r2, #52]	@ 0x34
 80028f6:	4b16      	ldr	r3, [pc, #88]	@ (8002950 <HAL_RCC_OscConfig+0x4d4>)
 80028f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028fa:	4a15      	ldr	r2, [pc, #84]	@ (8002950 <HAL_RCC_OscConfig+0x4d4>)
 80028fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002900:	6353      	str	r3, [r2, #52]	@ 0x34
 8002902:	e01c      	b.n	800293e <HAL_RCC_OscConfig+0x4c2>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	2b05      	cmp	r3, #5
 800290a:	d10c      	bne.n	8002926 <HAL_RCC_OscConfig+0x4aa>
 800290c:	4b10      	ldr	r3, [pc, #64]	@ (8002950 <HAL_RCC_OscConfig+0x4d4>)
 800290e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002910:	4a0f      	ldr	r2, [pc, #60]	@ (8002950 <HAL_RCC_OscConfig+0x4d4>)
 8002912:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002916:	6353      	str	r3, [r2, #52]	@ 0x34
 8002918:	4b0d      	ldr	r3, [pc, #52]	@ (8002950 <HAL_RCC_OscConfig+0x4d4>)
 800291a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800291c:	4a0c      	ldr	r2, [pc, #48]	@ (8002950 <HAL_RCC_OscConfig+0x4d4>)
 800291e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002922:	6353      	str	r3, [r2, #52]	@ 0x34
 8002924:	e00b      	b.n	800293e <HAL_RCC_OscConfig+0x4c2>
 8002926:	4b0a      	ldr	r3, [pc, #40]	@ (8002950 <HAL_RCC_OscConfig+0x4d4>)
 8002928:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800292a:	4a09      	ldr	r2, [pc, #36]	@ (8002950 <HAL_RCC_OscConfig+0x4d4>)
 800292c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002930:	6353      	str	r3, [r2, #52]	@ 0x34
 8002932:	4b07      	ldr	r3, [pc, #28]	@ (8002950 <HAL_RCC_OscConfig+0x4d4>)
 8002934:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002936:	4a06      	ldr	r2, [pc, #24]	@ (8002950 <HAL_RCC_OscConfig+0x4d4>)
 8002938:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800293c:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d024      	beq.n	8002990 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002946:	f7fe fe3f 	bl	80015c8 <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800294c:	e019      	b.n	8002982 <HAL_RCC_OscConfig+0x506>
 800294e:	bf00      	nop
 8002950:	40023800 	.word	0x40023800
 8002954:	08003de8 	.word	0x08003de8
 8002958:	20000000 	.word	0x20000000
 800295c:	20000004 	.word	0x20000004
 8002960:	42470020 	.word	0x42470020
 8002964:	42470680 	.word	0x42470680
 8002968:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800296c:	f7fe fe2c 	bl	80015c8 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	f241 3288 	movw	r2, #5000	@ 0x1388
 800297a:	4293      	cmp	r3, r2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e0a3      	b.n	8002aca <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002982:	4b54      	ldr	r3, [pc, #336]	@ (8002ad4 <HAL_RCC_OscConfig+0x658>)
 8002984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002986:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800298a:	2b00      	cmp	r3, #0
 800298c:	d0ee      	beq.n	800296c <HAL_RCC_OscConfig+0x4f0>
 800298e:	e014      	b.n	80029ba <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002990:	f7fe fe1a 	bl	80015c8 <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002996:	e00a      	b.n	80029ae <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002998:	f7fe fe16 	bl	80015c8 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e08d      	b.n	8002aca <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029ae:	4b49      	ldr	r3, [pc, #292]	@ (8002ad4 <HAL_RCC_OscConfig+0x658>)
 80029b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1ee      	bne.n	8002998 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029ba:	7ffb      	ldrb	r3, [r7, #31]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d105      	bne.n	80029cc <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029c0:	4b44      	ldr	r3, [pc, #272]	@ (8002ad4 <HAL_RCC_OscConfig+0x658>)
 80029c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c4:	4a43      	ldr	r2, [pc, #268]	@ (8002ad4 <HAL_RCC_OscConfig+0x658>)
 80029c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029ca:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d079      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	2b0c      	cmp	r3, #12
 80029d8:	d056      	beq.n	8002a88 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d13b      	bne.n	8002a5a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ad8 <HAL_RCC_OscConfig+0x65c>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e8:	f7fe fdee 	bl	80015c8 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029f0:	f7fe fdea 	bl	80015c8 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e063      	b.n	8002aca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a02:	4b34      	ldr	r3, [pc, #208]	@ (8002ad4 <HAL_RCC_OscConfig+0x658>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a0e:	4b31      	ldr	r3, [pc, #196]	@ (8002ad4 <HAL_RCC_OscConfig+0x658>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a1e:	4319      	orrs	r1, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a24:	430b      	orrs	r3, r1
 8002a26:	492b      	ldr	r1, [pc, #172]	@ (8002ad4 <HAL_RCC_OscConfig+0x658>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a2c:	4b2a      	ldr	r3, [pc, #168]	@ (8002ad8 <HAL_RCC_OscConfig+0x65c>)
 8002a2e:	2201      	movs	r2, #1
 8002a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a32:	f7fe fdc9 	bl	80015c8 <HAL_GetTick>
 8002a36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a38:	e008      	b.n	8002a4c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a3a:	f7fe fdc5 	bl	80015c8 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e03e      	b.n	8002aca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a4c:	4b21      	ldr	r3, [pc, #132]	@ (8002ad4 <HAL_RCC_OscConfig+0x658>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d0f0      	beq.n	8002a3a <HAL_RCC_OscConfig+0x5be>
 8002a58:	e036      	b.n	8002ac8 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a5a:	4b1f      	ldr	r3, [pc, #124]	@ (8002ad8 <HAL_RCC_OscConfig+0x65c>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a60:	f7fe fdb2 	bl	80015c8 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a68:	f7fe fdae 	bl	80015c8 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e027      	b.n	8002aca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a7a:	4b16      	ldr	r3, [pc, #88]	@ (8002ad4 <HAL_RCC_OscConfig+0x658>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1f0      	bne.n	8002a68 <HAL_RCC_OscConfig+0x5ec>
 8002a86:	e01f      	b.n	8002ac8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d101      	bne.n	8002a94 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e01a      	b.n	8002aca <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a94:	4b0f      	ldr	r3, [pc, #60]	@ (8002ad4 <HAL_RCC_OscConfig+0x658>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d10d      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d106      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d001      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e000      	b.n	8002aca <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3720      	adds	r7, #32
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	42470060 	.word	0x42470060

08002adc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e11a      	b.n	8002d26 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002af0:	4b8f      	ldr	r3, [pc, #572]	@ (8002d30 <HAL_RCC_ClockConfig+0x254>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d919      	bls.n	8002b32 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d105      	bne.n	8002b10 <HAL_RCC_ClockConfig+0x34>
 8002b04:	4b8a      	ldr	r3, [pc, #552]	@ (8002d30 <HAL_RCC_ClockConfig+0x254>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a89      	ldr	r2, [pc, #548]	@ (8002d30 <HAL_RCC_ClockConfig+0x254>)
 8002b0a:	f043 0304 	orr.w	r3, r3, #4
 8002b0e:	6013      	str	r3, [r2, #0]
 8002b10:	4b87      	ldr	r3, [pc, #540]	@ (8002d30 <HAL_RCC_ClockConfig+0x254>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f023 0201 	bic.w	r2, r3, #1
 8002b18:	4985      	ldr	r1, [pc, #532]	@ (8002d30 <HAL_RCC_ClockConfig+0x254>)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b20:	4b83      	ldr	r3, [pc, #524]	@ (8002d30 <HAL_RCC_ClockConfig+0x254>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d001      	beq.n	8002b32 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e0f9      	b.n	8002d26 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d008      	beq.n	8002b50 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b3e:	4b7d      	ldr	r3, [pc, #500]	@ (8002d34 <HAL_RCC_ClockConfig+0x258>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	497a      	ldr	r1, [pc, #488]	@ (8002d34 <HAL_RCC_ClockConfig+0x258>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 808e 	beq.w	8002c7a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d107      	bne.n	8002b76 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b66:	4b73      	ldr	r3, [pc, #460]	@ (8002d34 <HAL_RCC_ClockConfig+0x258>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d121      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e0d7      	b.n	8002d26 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2b03      	cmp	r3, #3
 8002b7c:	d107      	bne.n	8002b8e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b7e:	4b6d      	ldr	r3, [pc, #436]	@ (8002d34 <HAL_RCC_ClockConfig+0x258>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d115      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e0cb      	b.n	8002d26 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d107      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b96:	4b67      	ldr	r3, [pc, #412]	@ (8002d34 <HAL_RCC_ClockConfig+0x258>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d109      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e0bf      	b.n	8002d26 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ba6:	4b63      	ldr	r3, [pc, #396]	@ (8002d34 <HAL_RCC_ClockConfig+0x258>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e0b7      	b.n	8002d26 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bb6:	4b5f      	ldr	r3, [pc, #380]	@ (8002d34 <HAL_RCC_ClockConfig+0x258>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f023 0203 	bic.w	r2, r3, #3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	495c      	ldr	r1, [pc, #368]	@ (8002d34 <HAL_RCC_ClockConfig+0x258>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bc8:	f7fe fcfe 	bl	80015c8 <HAL_GetTick>
 8002bcc:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d112      	bne.n	8002bfc <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bd6:	e00a      	b.n	8002bee <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bd8:	f7fe fcf6 	bl	80015c8 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e09b      	b.n	8002d26 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bee:	4b51      	ldr	r3, [pc, #324]	@ (8002d34 <HAL_RCC_ClockConfig+0x258>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 030c 	and.w	r3, r3, #12
 8002bf6:	2b08      	cmp	r3, #8
 8002bf8:	d1ee      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0xfc>
 8002bfa:	e03e      	b.n	8002c7a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	2b03      	cmp	r3, #3
 8002c02:	d112      	bne.n	8002c2a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c04:	e00a      	b.n	8002c1c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c06:	f7fe fcdf 	bl	80015c8 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d901      	bls.n	8002c1c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e084      	b.n	8002d26 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c1c:	4b45      	ldr	r3, [pc, #276]	@ (8002d34 <HAL_RCC_ClockConfig+0x258>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f003 030c 	and.w	r3, r3, #12
 8002c24:	2b0c      	cmp	r3, #12
 8002c26:	d1ee      	bne.n	8002c06 <HAL_RCC_ClockConfig+0x12a>
 8002c28:	e027      	b.n	8002c7a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d11d      	bne.n	8002c6e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c32:	e00a      	b.n	8002c4a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c34:	f7fe fcc8 	bl	80015c8 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e06d      	b.n	8002d26 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c4a:	4b3a      	ldr	r3, [pc, #232]	@ (8002d34 <HAL_RCC_ClockConfig+0x258>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 030c 	and.w	r3, r3, #12
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	d1ee      	bne.n	8002c34 <HAL_RCC_ClockConfig+0x158>
 8002c56:	e010      	b.n	8002c7a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c58:	f7fe fcb6 	bl	80015c8 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e05b      	b.n	8002d26 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002c6e:	4b31      	ldr	r3, [pc, #196]	@ (8002d34 <HAL_RCC_ClockConfig+0x258>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 030c 	and.w	r3, r3, #12
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1ee      	bne.n	8002c58 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c7a:	4b2d      	ldr	r3, [pc, #180]	@ (8002d30 <HAL_RCC_ClockConfig+0x254>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d219      	bcs.n	8002cbc <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d105      	bne.n	8002c9a <HAL_RCC_ClockConfig+0x1be>
 8002c8e:	4b28      	ldr	r3, [pc, #160]	@ (8002d30 <HAL_RCC_ClockConfig+0x254>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a27      	ldr	r2, [pc, #156]	@ (8002d30 <HAL_RCC_ClockConfig+0x254>)
 8002c94:	f043 0304 	orr.w	r3, r3, #4
 8002c98:	6013      	str	r3, [r2, #0]
 8002c9a:	4b25      	ldr	r3, [pc, #148]	@ (8002d30 <HAL_RCC_ClockConfig+0x254>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f023 0201 	bic.w	r2, r3, #1
 8002ca2:	4923      	ldr	r1, [pc, #140]	@ (8002d30 <HAL_RCC_ClockConfig+0x254>)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002caa:	4b21      	ldr	r3, [pc, #132]	@ (8002d30 <HAL_RCC_ClockConfig+0x254>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d001      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e034      	b.n	8002d26 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d008      	beq.n	8002cda <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d34 <HAL_RCC_ClockConfig+0x258>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	4917      	ldr	r1, [pc, #92]	@ (8002d34 <HAL_RCC_ClockConfig+0x258>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d009      	beq.n	8002cfa <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ce6:	4b13      	ldr	r3, [pc, #76]	@ (8002d34 <HAL_RCC_ClockConfig+0x258>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	490f      	ldr	r1, [pc, #60]	@ (8002d34 <HAL_RCC_ClockConfig+0x258>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cfa:	f000 f823 	bl	8002d44 <HAL_RCC_GetSysClockFreq>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	4b0c      	ldr	r3, [pc, #48]	@ (8002d34 <HAL_RCC_ClockConfig+0x258>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	091b      	lsrs	r3, r3, #4
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	490b      	ldr	r1, [pc, #44]	@ (8002d38 <HAL_RCC_ClockConfig+0x25c>)
 8002d0c:	5ccb      	ldrb	r3, [r1, r3]
 8002d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d12:	4a0a      	ldr	r2, [pc, #40]	@ (8002d3c <HAL_RCC_ClockConfig+0x260>)
 8002d14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d16:	4b0a      	ldr	r3, [pc, #40]	@ (8002d40 <HAL_RCC_ClockConfig+0x264>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7fe fc08 	bl	8001530 <HAL_InitTick>
 8002d20:	4603      	mov	r3, r0
 8002d22:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d24:	7afb      	ldrb	r3, [r7, #11]
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	40023c00 	.word	0x40023c00
 8002d34:	40023800 	.word	0x40023800
 8002d38:	08003de8 	.word	0x08003de8
 8002d3c:	20000000 	.word	0x20000000
 8002d40:	20000004 	.word	0x20000004

08002d44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d48:	b08e      	sub	sp, #56	@ 0x38
 8002d4a:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002d4c:	4b58      	ldr	r3, [pc, #352]	@ (8002eb0 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d54:	f003 030c 	and.w	r3, r3, #12
 8002d58:	2b0c      	cmp	r3, #12
 8002d5a:	d00d      	beq.n	8002d78 <HAL_RCC_GetSysClockFreq+0x34>
 8002d5c:	2b0c      	cmp	r3, #12
 8002d5e:	f200 8092 	bhi.w	8002e86 <HAL_RCC_GetSysClockFreq+0x142>
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	d002      	beq.n	8002d6c <HAL_RCC_GetSysClockFreq+0x28>
 8002d66:	2b08      	cmp	r3, #8
 8002d68:	d003      	beq.n	8002d72 <HAL_RCC_GetSysClockFreq+0x2e>
 8002d6a:	e08c      	b.n	8002e86 <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d6c:	4b51      	ldr	r3, [pc, #324]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x170>)
 8002d6e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002d70:	e097      	b.n	8002ea2 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d72:	4b51      	ldr	r3, [pc, #324]	@ (8002eb8 <HAL_RCC_GetSysClockFreq+0x174>)
 8002d74:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002d76:	e094      	b.n	8002ea2 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d7a:	0c9b      	lsrs	r3, r3, #18
 8002d7c:	f003 020f 	and.w	r2, r3, #15
 8002d80:	4b4e      	ldr	r3, [pc, #312]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x178>)
 8002d82:	5c9b      	ldrb	r3, [r3, r2]
 8002d84:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d88:	0d9b      	lsrs	r3, r3, #22
 8002d8a:	f003 0303 	and.w	r3, r3, #3
 8002d8e:	3301      	adds	r3, #1
 8002d90:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d92:	4b47      	ldr	r3, [pc, #284]	@ (8002eb0 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d021      	beq.n	8002de2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002da0:	2200      	movs	r2, #0
 8002da2:	61bb      	str	r3, [r7, #24]
 8002da4:	61fa      	str	r2, [r7, #28]
 8002da6:	4b44      	ldr	r3, [pc, #272]	@ (8002eb8 <HAL_RCC_GetSysClockFreq+0x174>)
 8002da8:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002dac:	464a      	mov	r2, r9
 8002dae:	fb03 f202 	mul.w	r2, r3, r2
 8002db2:	2300      	movs	r3, #0
 8002db4:	4644      	mov	r4, r8
 8002db6:	fb04 f303 	mul.w	r3, r4, r3
 8002dba:	4413      	add	r3, r2
 8002dbc:	4a3e      	ldr	r2, [pc, #248]	@ (8002eb8 <HAL_RCC_GetSysClockFreq+0x174>)
 8002dbe:	4644      	mov	r4, r8
 8002dc0:	fba4 0102 	umull	r0, r1, r4, r2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dca:	2200      	movs	r2, #0
 8002dcc:	613b      	str	r3, [r7, #16]
 8002dce:	617a      	str	r2, [r7, #20]
 8002dd0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002dd4:	f7fd fdc0 	bl	8000958 <__aeabi_uldivmod>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	4613      	mov	r3, r2
 8002dde:	637b      	str	r3, [r7, #52]	@ 0x34
 8002de0:	e04e      	b.n	8002e80 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002de4:	2200      	movs	r2, #0
 8002de6:	469a      	mov	sl, r3
 8002de8:	4693      	mov	fp, r2
 8002dea:	4652      	mov	r2, sl
 8002dec:	465b      	mov	r3, fp
 8002dee:	f04f 0000 	mov.w	r0, #0
 8002df2:	f04f 0100 	mov.w	r1, #0
 8002df6:	0159      	lsls	r1, r3, #5
 8002df8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dfc:	0150      	lsls	r0, r2, #5
 8002dfe:	4602      	mov	r2, r0
 8002e00:	460b      	mov	r3, r1
 8002e02:	ebb2 080a 	subs.w	r8, r2, sl
 8002e06:	eb63 090b 	sbc.w	r9, r3, fp
 8002e0a:	f04f 0200 	mov.w	r2, #0
 8002e0e:	f04f 0300 	mov.w	r3, #0
 8002e12:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e16:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e1a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e1e:	ebb2 0408 	subs.w	r4, r2, r8
 8002e22:	eb63 0509 	sbc.w	r5, r3, r9
 8002e26:	f04f 0200 	mov.w	r2, #0
 8002e2a:	f04f 0300 	mov.w	r3, #0
 8002e2e:	00eb      	lsls	r3, r5, #3
 8002e30:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e34:	00e2      	lsls	r2, r4, #3
 8002e36:	4614      	mov	r4, r2
 8002e38:	461d      	mov	r5, r3
 8002e3a:	eb14 030a 	adds.w	r3, r4, sl
 8002e3e:	603b      	str	r3, [r7, #0]
 8002e40:	eb45 030b 	adc.w	r3, r5, fp
 8002e44:	607b      	str	r3, [r7, #4]
 8002e46:	f04f 0200 	mov.w	r2, #0
 8002e4a:	f04f 0300 	mov.w	r3, #0
 8002e4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e52:	4629      	mov	r1, r5
 8002e54:	028b      	lsls	r3, r1, #10
 8002e56:	4620      	mov	r0, r4
 8002e58:	4629      	mov	r1, r5
 8002e5a:	4604      	mov	r4, r0
 8002e5c:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002e60:	4601      	mov	r1, r0
 8002e62:	028a      	lsls	r2, r1, #10
 8002e64:	4610      	mov	r0, r2
 8002e66:	4619      	mov	r1, r3
 8002e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	60bb      	str	r3, [r7, #8]
 8002e6e:	60fa      	str	r2, [r7, #12]
 8002e70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e74:	f7fd fd70 	bl	8000958 <__aeabi_uldivmod>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      sysclockfreq = pllvco;
 8002e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e82:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002e84:	e00d      	b.n	8002ea2 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002e86:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb0 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	0b5b      	lsrs	r3, r3, #13
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002e92:	6a3b      	ldr	r3, [r7, #32]
 8002e94:	3301      	adds	r3, #1
 8002e96:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002ea0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3738      	adds	r7, #56	@ 0x38
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eae:	bf00      	nop
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	00f42400 	.word	0x00f42400
 8002eb8:	016e3600 	.word	0x016e3600
 8002ebc:	08003ddc 	.word	0x08003ddc

08002ec0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b087      	sub	sp, #28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ec8:	2300      	movs	r3, #0
 8002eca:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002ecc:	4b29      	ldr	r3, [pc, #164]	@ (8002f74 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d12c      	bne.n	8002f32 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ed8:	4b26      	ldr	r3, [pc, #152]	@ (8002f74 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002edc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d005      	beq.n	8002ef0 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002ee4:	4b24      	ldr	r3, [pc, #144]	@ (8002f78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	e016      	b.n	8002f1e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ef0:	4b20      	ldr	r3, [pc, #128]	@ (8002f74 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef4:	4a1f      	ldr	r2, [pc, #124]	@ (8002f74 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002ef6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002efa:	6253      	str	r3, [r2, #36]	@ 0x24
 8002efc:	4b1d      	ldr	r3, [pc, #116]	@ (8002f74 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002f08:	4b1b      	ldr	r3, [pc, #108]	@ (8002f78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8002f10:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f12:	4b18      	ldr	r3, [pc, #96]	@ (8002f74 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f16:	4a17      	ldr	r2, [pc, #92]	@ (8002f74 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002f18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f1c:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8002f24:	d105      	bne.n	8002f32 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002f2c:	d101      	bne.n	8002f32 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8002f2e:	2301      	movs	r3, #1
 8002f30:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d105      	bne.n	8002f44 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002f38:	4b10      	ldr	r3, [pc, #64]	@ (8002f7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a0f      	ldr	r2, [pc, #60]	@ (8002f7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f3e:	f043 0304 	orr.w	r3, r3, #4
 8002f42:	6013      	str	r3, [r2, #0]
 8002f44:	4b0d      	ldr	r3, [pc, #52]	@ (8002f7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f023 0201 	bic.w	r2, r3, #1
 8002f4c:	490b      	ldr	r1, [pc, #44]	@ (8002f7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f54:	4b09      	ldr	r3, [pc, #36]	@ (8002f7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d001      	beq.n	8002f66 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e000      	b.n	8002f68 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	371c      	adds	r7, #28
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bc80      	pop	{r7}
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	40023800 	.word	0x40023800
 8002f78:	40007000 	.word	0x40007000
 8002f7c:	40023c00 	.word	0x40023c00

08002f80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e07b      	b.n	800308a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d108      	bne.n	8002fac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002fa2:	d009      	beq.n	8002fb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	61da      	str	r2, [r3, #28]
 8002faa:	e005      	b.n	8002fb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d106      	bne.n	8002fd8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7fe f974 	bl	80012c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2202      	movs	r2, #2
 8002fdc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003000:	431a      	orrs	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	431a      	orrs	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003028:	431a      	orrs	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003032:	431a      	orrs	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800303c:	ea42 0103 	orr.w	r1, r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003044:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	430a      	orrs	r2, r1
 800304e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	0c1b      	lsrs	r3, r3, #16
 8003056:	f003 0104 	and.w	r1, r3, #4
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305e:	f003 0210 	and.w	r2, r3, #16
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	69da      	ldr	r2, [r3, #28]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003078:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b082      	sub	sp, #8
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d101      	bne.n	80030a4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e031      	b.n	8003108 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d106      	bne.n	80030be <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f7fe f945 	bl	8001348 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2202      	movs	r2, #2
 80030c2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	3304      	adds	r3, #4
 80030ce:	4619      	mov	r1, r3
 80030d0:	4610      	mov	r0, r2
 80030d2:	f000 fbc7 	bl	8003864 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b01      	cmp	r3, #1
 8003122:	d001      	beq.n	8003128 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e03a      	b.n	800319e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2202      	movs	r2, #2
 800312c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68da      	ldr	r2, [r3, #12]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0201 	orr.w	r2, r2, #1
 800313e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003148:	d00e      	beq.n	8003168 <HAL_TIM_Base_Start_IT+0x58>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a16      	ldr	r2, [pc, #88]	@ (80031a8 <HAL_TIM_Base_Start_IT+0x98>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d009      	beq.n	8003168 <HAL_TIM_Base_Start_IT+0x58>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a14      	ldr	r2, [pc, #80]	@ (80031ac <HAL_TIM_Base_Start_IT+0x9c>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d004      	beq.n	8003168 <HAL_TIM_Base_Start_IT+0x58>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a13      	ldr	r2, [pc, #76]	@ (80031b0 <HAL_TIM_Base_Start_IT+0xa0>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d111      	bne.n	800318c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 0307 	and.w	r3, r3, #7
 8003172:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2b06      	cmp	r3, #6
 8003178:	d010      	beq.n	800319c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f042 0201 	orr.w	r2, r2, #1
 8003188:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800318a:	e007      	b.n	800319c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f042 0201 	orr.w	r2, r2, #1
 800319a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3714      	adds	r7, #20
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bc80      	pop	{r7}
 80031a6:	4770      	bx	lr
 80031a8:	40000400 	.word	0x40000400
 80031ac:	40000800 	.word	0x40000800
 80031b0:	40010800 	.word	0x40010800

080031b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e031      	b.n	800322a <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d106      	bne.n	80031e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f829 	bl	8003232 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2202      	movs	r2, #2
 80031e4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3304      	adds	r3, #4
 80031f0:	4619      	mov	r1, r3
 80031f2:	4610      	mov	r0, r2
 80031f4:	f000 fb36 	bl	8003864 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003232:	b480      	push	{r7}
 8003234:	b083      	sub	sp, #12
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800323a:	bf00      	nop
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	bc80      	pop	{r7}
 8003242:	4770      	bx	lr

08003244 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d109      	bne.n	8003268 <HAL_TIM_PWM_Start+0x24>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b01      	cmp	r3, #1
 800325e:	bf14      	ite	ne
 8003260:	2301      	movne	r3, #1
 8003262:	2300      	moveq	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	e022      	b.n	80032ae <HAL_TIM_PWM_Start+0x6a>
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	2b04      	cmp	r3, #4
 800326c:	d109      	bne.n	8003282 <HAL_TIM_PWM_Start+0x3e>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b01      	cmp	r3, #1
 8003278:	bf14      	ite	ne
 800327a:	2301      	movne	r3, #1
 800327c:	2300      	moveq	r3, #0
 800327e:	b2db      	uxtb	r3, r3
 8003280:	e015      	b.n	80032ae <HAL_TIM_PWM_Start+0x6a>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b08      	cmp	r3, #8
 8003286:	d109      	bne.n	800329c <HAL_TIM_PWM_Start+0x58>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b01      	cmp	r3, #1
 8003292:	bf14      	ite	ne
 8003294:	2301      	movne	r3, #1
 8003296:	2300      	moveq	r3, #0
 8003298:	b2db      	uxtb	r3, r3
 800329a:	e008      	b.n	80032ae <HAL_TIM_PWM_Start+0x6a>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	bf14      	ite	ne
 80032a8:	2301      	movne	r3, #1
 80032aa:	2300      	moveq	r3, #0
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e051      	b.n	800335a <HAL_TIM_PWM_Start+0x116>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d104      	bne.n	80032c6 <HAL_TIM_PWM_Start+0x82>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2202      	movs	r2, #2
 80032c0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 80032c4:	e013      	b.n	80032ee <HAL_TIM_PWM_Start+0xaa>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	d104      	bne.n	80032d6 <HAL_TIM_PWM_Start+0x92>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2202      	movs	r2, #2
 80032d0:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 80032d4:	e00b      	b.n	80032ee <HAL_TIM_PWM_Start+0xaa>
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	2b08      	cmp	r3, #8
 80032da:	d104      	bne.n	80032e6 <HAL_TIM_PWM_Start+0xa2>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2202      	movs	r2, #2
 80032e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80032e4:	e003      	b.n	80032ee <HAL_TIM_PWM_Start+0xaa>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2202      	movs	r2, #2
 80032ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2201      	movs	r2, #1
 80032f4:	6839      	ldr	r1, [r7, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 fcb5 	bl	8003c66 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003304:	d00e      	beq.n	8003324 <HAL_TIM_PWM_Start+0xe0>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a16      	ldr	r2, [pc, #88]	@ (8003364 <HAL_TIM_PWM_Start+0x120>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d009      	beq.n	8003324 <HAL_TIM_PWM_Start+0xe0>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a14      	ldr	r2, [pc, #80]	@ (8003368 <HAL_TIM_PWM_Start+0x124>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d004      	beq.n	8003324 <HAL_TIM_PWM_Start+0xe0>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a13      	ldr	r2, [pc, #76]	@ (800336c <HAL_TIM_PWM_Start+0x128>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d111      	bne.n	8003348 <HAL_TIM_PWM_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2b06      	cmp	r3, #6
 8003334:	d010      	beq.n	8003358 <HAL_TIM_PWM_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f042 0201 	orr.w	r2, r2, #1
 8003344:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003346:	e007      	b.n	8003358 <HAL_TIM_PWM_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 0201 	orr.w	r2, r2, #1
 8003356:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40000400 	.word	0x40000400
 8003368:	40000800 	.word	0x40000800
 800336c:	40010800 	.word	0x40010800

08003370 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d020      	beq.n	80033d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d01b      	beq.n	80033d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f06f 0202 	mvn.w	r2, #2
 80033a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	f003 0303 	and.w	r3, r3, #3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 fa36 	bl	800382c <HAL_TIM_IC_CaptureCallback>
 80033c0:	e005      	b.n	80033ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 fa29 	bl	800381a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 fa38 	bl	800383e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	f003 0304 	and.w	r3, r3, #4
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d020      	beq.n	8003420 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f003 0304 	and.w	r3, r3, #4
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d01b      	beq.n	8003420 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f06f 0204 	mvn.w	r2, #4
 80033f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2202      	movs	r2, #2
 80033f6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 fa10 	bl	800382c <HAL_TIM_IC_CaptureCallback>
 800340c:	e005      	b.n	800341a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 fa03 	bl	800381a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 fa12 	bl	800383e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	f003 0308 	and.w	r3, r3, #8
 8003426:	2b00      	cmp	r3, #0
 8003428:	d020      	beq.n	800346c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f003 0308 	and.w	r3, r3, #8
 8003430:	2b00      	cmp	r3, #0
 8003432:	d01b      	beq.n	800346c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f06f 0208 	mvn.w	r2, #8
 800343c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2204      	movs	r2, #4
 8003442:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	f003 0303 	and.w	r3, r3, #3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f9ea 	bl	800382c <HAL_TIM_IC_CaptureCallback>
 8003458:	e005      	b.n	8003466 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f9dd 	bl	800381a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 f9ec 	bl	800383e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	f003 0310 	and.w	r3, r3, #16
 8003472:	2b00      	cmp	r3, #0
 8003474:	d020      	beq.n	80034b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f003 0310 	and.w	r3, r3, #16
 800347c:	2b00      	cmp	r3, #0
 800347e:	d01b      	beq.n	80034b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f06f 0210 	mvn.w	r2, #16
 8003488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2208      	movs	r2, #8
 800348e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f9c4 	bl	800382c <HAL_TIM_IC_CaptureCallback>
 80034a4:	e005      	b.n	80034b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f9b7 	bl	800381a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 f9c6 	bl	800383e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00c      	beq.n	80034dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d007      	beq.n	80034dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f06f 0201 	mvn.w	r2, #1
 80034d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7fd fe32 	bl	8001140 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00c      	beq.n	8003500 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d007      	beq.n	8003500 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80034f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f9a8 	bl	8003850 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003500:	bf00      	nop
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003514:	2300      	movs	r3, #0
 8003516:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800351e:	2b01      	cmp	r3, #1
 8003520:	d101      	bne.n	8003526 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003522:	2302      	movs	r3, #2
 8003524:	e0ae      	b.n	8003684 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  switch (Channel)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b0c      	cmp	r3, #12
 8003532:	f200 809f 	bhi.w	8003674 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003536:	a201      	add	r2, pc, #4	@ (adr r2, 800353c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800353c:	08003571 	.word	0x08003571
 8003540:	08003675 	.word	0x08003675
 8003544:	08003675 	.word	0x08003675
 8003548:	08003675 	.word	0x08003675
 800354c:	080035b1 	.word	0x080035b1
 8003550:	08003675 	.word	0x08003675
 8003554:	08003675 	.word	0x08003675
 8003558:	08003675 	.word	0x08003675
 800355c:	080035f3 	.word	0x080035f3
 8003560:	08003675 	.word	0x08003675
 8003564:	08003675 	.word	0x08003675
 8003568:	08003675 	.word	0x08003675
 800356c:	08003633 	.word	0x08003633
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68b9      	ldr	r1, [r7, #8]
 8003576:	4618      	mov	r0, r3
 8003578:	f000 f9ea 	bl	8003950 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	699a      	ldr	r2, [r3, #24]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f042 0208 	orr.w	r2, r2, #8
 800358a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	699a      	ldr	r2, [r3, #24]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0204 	bic.w	r2, r2, #4
 800359a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6999      	ldr	r1, [r3, #24]
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	68da      	ldr	r2, [r3, #12]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	619a      	str	r2, [r3, #24]
      break;
 80035ae:	e064      	b.n	800367a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68b9      	ldr	r1, [r7, #8]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 fa06 	bl	80039c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	699a      	ldr	r2, [r3, #24]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	699a      	ldr	r2, [r3, #24]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6999      	ldr	r1, [r3, #24]
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	021a      	lsls	r2, r3, #8
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	619a      	str	r2, [r3, #24]
      break;
 80035f0:	e043      	b.n	800367a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68b9      	ldr	r1, [r7, #8]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f000 fa23 	bl	8003a44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	69da      	ldr	r2, [r3, #28]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f042 0208 	orr.w	r2, r2, #8
 800360c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	69da      	ldr	r2, [r3, #28]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 0204 	bic.w	r2, r2, #4
 800361c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	69d9      	ldr	r1, [r3, #28]
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	68da      	ldr	r2, [r3, #12]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	430a      	orrs	r2, r1
 800362e:	61da      	str	r2, [r3, #28]
      break;
 8003630:	e023      	b.n	800367a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68b9      	ldr	r1, [r7, #8]
 8003638:	4618      	mov	r0, r3
 800363a:	f000 fa40 	bl	8003abe <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	69da      	ldr	r2, [r3, #28]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800364c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	69da      	ldr	r2, [r3, #28]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800365c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	69d9      	ldr	r1, [r3, #28]
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	021a      	lsls	r2, r3, #8
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	61da      	str	r2, [r3, #28]
      break;
 8003672:	e002      	b.n	800367a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	75fb      	strb	r3, [r7, #23]
      break;
 8003678:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 8003682:	7dfb      	ldrb	r3, [r7, #23]
}
 8003684:	4618      	mov	r0, r3
 8003686:	3718      	adds	r7, #24
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003696:	2300      	movs	r3, #0
 8003698:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d101      	bne.n	80036a8 <HAL_TIM_ConfigClockSource+0x1c>
 80036a4:	2302      	movs	r3, #2
 80036a6:	e0b4      	b.n	8003812 <HAL_TIM_ConfigClockSource+0x186>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2202      	movs	r2, #2
 80036b4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80036c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036e0:	d03e      	beq.n	8003760 <HAL_TIM_ConfigClockSource+0xd4>
 80036e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036e6:	f200 8087 	bhi.w	80037f8 <HAL_TIM_ConfigClockSource+0x16c>
 80036ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036ee:	f000 8086 	beq.w	80037fe <HAL_TIM_ConfigClockSource+0x172>
 80036f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036f6:	d87f      	bhi.n	80037f8 <HAL_TIM_ConfigClockSource+0x16c>
 80036f8:	2b70      	cmp	r3, #112	@ 0x70
 80036fa:	d01a      	beq.n	8003732 <HAL_TIM_ConfigClockSource+0xa6>
 80036fc:	2b70      	cmp	r3, #112	@ 0x70
 80036fe:	d87b      	bhi.n	80037f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003700:	2b60      	cmp	r3, #96	@ 0x60
 8003702:	d050      	beq.n	80037a6 <HAL_TIM_ConfigClockSource+0x11a>
 8003704:	2b60      	cmp	r3, #96	@ 0x60
 8003706:	d877      	bhi.n	80037f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003708:	2b50      	cmp	r3, #80	@ 0x50
 800370a:	d03c      	beq.n	8003786 <HAL_TIM_ConfigClockSource+0xfa>
 800370c:	2b50      	cmp	r3, #80	@ 0x50
 800370e:	d873      	bhi.n	80037f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003710:	2b40      	cmp	r3, #64	@ 0x40
 8003712:	d058      	beq.n	80037c6 <HAL_TIM_ConfigClockSource+0x13a>
 8003714:	2b40      	cmp	r3, #64	@ 0x40
 8003716:	d86f      	bhi.n	80037f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003718:	2b30      	cmp	r3, #48	@ 0x30
 800371a:	d064      	beq.n	80037e6 <HAL_TIM_ConfigClockSource+0x15a>
 800371c:	2b30      	cmp	r3, #48	@ 0x30
 800371e:	d86b      	bhi.n	80037f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003720:	2b20      	cmp	r3, #32
 8003722:	d060      	beq.n	80037e6 <HAL_TIM_ConfigClockSource+0x15a>
 8003724:	2b20      	cmp	r3, #32
 8003726:	d867      	bhi.n	80037f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003728:	2b00      	cmp	r3, #0
 800372a:	d05c      	beq.n	80037e6 <HAL_TIM_ConfigClockSource+0x15a>
 800372c:	2b10      	cmp	r3, #16
 800372e:	d05a      	beq.n	80037e6 <HAL_TIM_ConfigClockSource+0x15a>
 8003730:	e062      	b.n	80037f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003742:	f000 fa71 	bl	8003c28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003754:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	609a      	str	r2, [r3, #8]
      break;
 800375e:	e04f      	b.n	8003800 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003770:	f000 fa5a 	bl	8003c28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689a      	ldr	r2, [r3, #8]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003782:	609a      	str	r2, [r3, #8]
      break;
 8003784:	e03c      	b.n	8003800 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003792:	461a      	mov	r2, r3
 8003794:	f000 f9d1 	bl	8003b3a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2150      	movs	r1, #80	@ 0x50
 800379e:	4618      	mov	r0, r3
 80037a0:	f000 fa28 	bl	8003bf4 <TIM_ITRx_SetConfig>
      break;
 80037a4:	e02c      	b.n	8003800 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037b2:	461a      	mov	r2, r3
 80037b4:	f000 f9ef 	bl	8003b96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2160      	movs	r1, #96	@ 0x60
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 fa18 	bl	8003bf4 <TIM_ITRx_SetConfig>
      break;
 80037c4:	e01c      	b.n	8003800 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037d2:	461a      	mov	r2, r3
 80037d4:	f000 f9b1 	bl	8003b3a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2140      	movs	r1, #64	@ 0x40
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 fa08 	bl	8003bf4 <TIM_ITRx_SetConfig>
      break;
 80037e4:	e00c      	b.n	8003800 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4619      	mov	r1, r3
 80037f0:	4610      	mov	r0, r2
 80037f2:	f000 f9ff 	bl	8003bf4 <TIM_ITRx_SetConfig>
      break;
 80037f6:	e003      	b.n	8003800 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	73fb      	strb	r3, [r7, #15]
      break;
 80037fc:	e000      	b.n	8003800 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80037fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 8003810:	7bfb      	ldrb	r3, [r7, #15]
}
 8003812:	4618      	mov	r0, r3
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800381a:	b480      	push	{r7}
 800381c:	b083      	sub	sp, #12
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	bc80      	pop	{r7}
 800382a:	4770      	bx	lr

0800382c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	bc80      	pop	{r7}
 800383c:	4770      	bx	lr

0800383e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800383e:	b480      	push	{r7}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	bc80      	pop	{r7}
 800384e:	4770      	bx	lr

08003850 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	bc80      	pop	{r7}
 8003860:	4770      	bx	lr
	...

08003864 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800387a:	d00f      	beq.n	800389c <TIM_Base_SetConfig+0x38>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a2e      	ldr	r2, [pc, #184]	@ (8003938 <TIM_Base_SetConfig+0xd4>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d00b      	beq.n	800389c <TIM_Base_SetConfig+0x38>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a2d      	ldr	r2, [pc, #180]	@ (800393c <TIM_Base_SetConfig+0xd8>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d007      	beq.n	800389c <TIM_Base_SetConfig+0x38>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a2c      	ldr	r2, [pc, #176]	@ (8003940 <TIM_Base_SetConfig+0xdc>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d003      	beq.n	800389c <TIM_Base_SetConfig+0x38>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a2b      	ldr	r2, [pc, #172]	@ (8003944 <TIM_Base_SetConfig+0xe0>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d108      	bne.n	80038ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038b4:	d017      	beq.n	80038e6 <TIM_Base_SetConfig+0x82>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a1f      	ldr	r2, [pc, #124]	@ (8003938 <TIM_Base_SetConfig+0xd4>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d013      	beq.n	80038e6 <TIM_Base_SetConfig+0x82>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a1e      	ldr	r2, [pc, #120]	@ (800393c <TIM_Base_SetConfig+0xd8>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d00f      	beq.n	80038e6 <TIM_Base_SetConfig+0x82>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a1d      	ldr	r2, [pc, #116]	@ (8003940 <TIM_Base_SetConfig+0xdc>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d00b      	beq.n	80038e6 <TIM_Base_SetConfig+0x82>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a1c      	ldr	r2, [pc, #112]	@ (8003944 <TIM_Base_SetConfig+0xe0>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d007      	beq.n	80038e6 <TIM_Base_SetConfig+0x82>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a1b      	ldr	r2, [pc, #108]	@ (8003948 <TIM_Base_SetConfig+0xe4>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d003      	beq.n	80038e6 <TIM_Base_SetConfig+0x82>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a1a      	ldr	r2, [pc, #104]	@ (800394c <TIM_Base_SetConfig+0xe8>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d108      	bne.n	80038f8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	4313      	orrs	r3, r2
 8003904:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	689a      	ldr	r2, [r3, #8]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f043 0204 	orr.w	r2, r3, #4
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	601a      	str	r2, [r3, #0]
}
 800392e:	bf00      	nop
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr
 8003938:	40000400 	.word	0x40000400
 800393c:	40000800 	.word	0x40000800
 8003940:	40000c00 	.word	0x40000c00
 8003944:	40010800 	.word	0x40010800
 8003948:	40010c00 	.word	0x40010c00
 800394c:	40011000 	.word	0x40011000

08003950 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003950:	b480      	push	{r7}
 8003952:	b087      	sub	sp, #28
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	f023 0201 	bic.w	r2, r3, #1
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800397e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f023 0303 	bic.w	r3, r3, #3
 8003986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	4313      	orrs	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f023 0302 	bic.w	r3, r3, #2
 8003998:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	621a      	str	r2, [r3, #32]
}
 80039be:	bf00      	nop
 80039c0:	371c      	adds	r7, #28
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bc80      	pop	{r7}
 80039c6:	4770      	bx	lr

080039c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b087      	sub	sp, #28
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	f023 0210 	bic.w	r2, r3, #16
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	021b      	lsls	r3, r3, #8
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	f023 0320 	bic.w	r3, r3, #32
 8003a12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	011b      	lsls	r3, r3, #4
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	621a      	str	r2, [r3, #32]
}
 8003a3a:	bf00      	nop
 8003a3c:	371c      	adds	r7, #28
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr

08003a44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b087      	sub	sp, #28
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f023 0303 	bic.w	r3, r3, #3
 8003a7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	021b      	lsls	r3, r3, #8
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	621a      	str	r2, [r3, #32]
}
 8003ab4:	bf00      	nop
 8003ab6:	371c      	adds	r7, #28
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bc80      	pop	{r7}
 8003abc:	4770      	bx	lr

08003abe <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b087      	sub	sp, #28
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
 8003ac6:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	69db      	ldr	r3, [r3, #28]
 8003ae4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003aec:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003af4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	021b      	lsls	r3, r3, #8
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	031b      	lsls	r3, r3, #12
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	621a      	str	r2, [r3, #32]
}
 8003b30:	bf00      	nop
 8003b32:	371c      	adds	r7, #28
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bc80      	pop	{r7}
 8003b38:	4770      	bx	lr

08003b3a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b087      	sub	sp, #28
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	60f8      	str	r0, [r7, #12]
 8003b42:	60b9      	str	r1, [r7, #8]
 8003b44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	f023 0201 	bic.w	r2, r3, #1
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	011b      	lsls	r3, r3, #4
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	f023 030a 	bic.w	r3, r3, #10
 8003b76:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	621a      	str	r2, [r3, #32]
}
 8003b8c:	bf00      	nop
 8003b8e:	371c      	adds	r7, #28
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bc80      	pop	{r7}
 8003b94:	4770      	bx	lr

08003b96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b087      	sub	sp, #28
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	60f8      	str	r0, [r7, #12]
 8003b9e:	60b9      	str	r1, [r7, #8]
 8003ba0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	f023 0210 	bic.w	r2, r3, #16
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003bc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	031b      	lsls	r3, r3, #12
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003bd2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	011b      	lsls	r3, r3, #4
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	621a      	str	r2, [r3, #32]
}
 8003bea:	bf00      	nop
 8003bec:	371c      	adds	r7, #28
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bc80      	pop	{r7}
 8003bf2:	4770      	bx	lr

08003bf4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c0a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c0c:	683a      	ldr	r2, [r7, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	f043 0307 	orr.w	r3, r3, #7
 8003c16:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	609a      	str	r2, [r3, #8]
}
 8003c1e:	bf00      	nop
 8003c20:	3714      	adds	r7, #20
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bc80      	pop	{r7}
 8003c26:	4770      	bx	lr

08003c28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b087      	sub	sp, #28
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
 8003c34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	021a      	lsls	r2, r3, #8
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	609a      	str	r2, [r3, #8]
}
 8003c5c:	bf00      	nop
 8003c5e:	371c      	adds	r7, #28
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bc80      	pop	{r7}
 8003c64:	4770      	bx	lr

08003c66 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b087      	sub	sp, #28
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	60f8      	str	r0, [r7, #12]
 8003c6e:	60b9      	str	r1, [r7, #8]
 8003c70:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	f003 031f 	and.w	r3, r3, #31
 8003c78:	2201      	movs	r2, #1
 8003c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6a1a      	ldr	r2, [r3, #32]
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	43db      	mvns	r3, r3
 8003c88:	401a      	ands	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6a1a      	ldr	r2, [r3, #32]
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	f003 031f 	and.w	r3, r3, #31
 8003c98:	6879      	ldr	r1, [r7, #4]
 8003c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	621a      	str	r2, [r3, #32]
}
 8003ca4:	bf00      	nop
 8003ca6:	371c      	adds	r7, #28
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bc80      	pop	{r7}
 8003cac:	4770      	bx	lr
	...

08003cb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d101      	bne.n	8003cc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	e046      	b.n	8003d56 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d0a:	d00e      	beq.n	8003d2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a13      	ldr	r2, [pc, #76]	@ (8003d60 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d009      	beq.n	8003d2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a12      	ldr	r2, [pc, #72]	@ (8003d64 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d004      	beq.n	8003d2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a10      	ldr	r2, [pc, #64]	@ (8003d68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d10c      	bne.n	8003d44 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68ba      	ldr	r2, [r7, #8]
 8003d42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3714      	adds	r7, #20
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bc80      	pop	{r7}
 8003d5e:	4770      	bx	lr
 8003d60:	40000400 	.word	0x40000400
 8003d64:	40000800 	.word	0x40000800
 8003d68:	40010800 	.word	0x40010800

08003d6c <memset>:
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	4402      	add	r2, r0
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d100      	bne.n	8003d76 <memset+0xa>
 8003d74:	4770      	bx	lr
 8003d76:	f803 1b01 	strb.w	r1, [r3], #1
 8003d7a:	e7f9      	b.n	8003d70 <memset+0x4>

08003d7c <__libc_init_array>:
 8003d7c:	b570      	push	{r4, r5, r6, lr}
 8003d7e:	2600      	movs	r6, #0
 8003d80:	4d0c      	ldr	r5, [pc, #48]	@ (8003db4 <__libc_init_array+0x38>)
 8003d82:	4c0d      	ldr	r4, [pc, #52]	@ (8003db8 <__libc_init_array+0x3c>)
 8003d84:	1b64      	subs	r4, r4, r5
 8003d86:	10a4      	asrs	r4, r4, #2
 8003d88:	42a6      	cmp	r6, r4
 8003d8a:	d109      	bne.n	8003da0 <__libc_init_array+0x24>
 8003d8c:	f000 f81a 	bl	8003dc4 <_init>
 8003d90:	2600      	movs	r6, #0
 8003d92:	4d0a      	ldr	r5, [pc, #40]	@ (8003dbc <__libc_init_array+0x40>)
 8003d94:	4c0a      	ldr	r4, [pc, #40]	@ (8003dc0 <__libc_init_array+0x44>)
 8003d96:	1b64      	subs	r4, r4, r5
 8003d98:	10a4      	asrs	r4, r4, #2
 8003d9a:	42a6      	cmp	r6, r4
 8003d9c:	d105      	bne.n	8003daa <__libc_init_array+0x2e>
 8003d9e:	bd70      	pop	{r4, r5, r6, pc}
 8003da0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003da4:	4798      	blx	r3
 8003da6:	3601      	adds	r6, #1
 8003da8:	e7ee      	b.n	8003d88 <__libc_init_array+0xc>
 8003daa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dae:	4798      	blx	r3
 8003db0:	3601      	adds	r6, #1
 8003db2:	e7f2      	b.n	8003d9a <__libc_init_array+0x1e>
 8003db4:	08003e00 	.word	0x08003e00
 8003db8:	08003e00 	.word	0x08003e00
 8003dbc:	08003e00 	.word	0x08003e00
 8003dc0:	08003e04 	.word	0x08003e04

08003dc4 <_init>:
 8003dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dc6:	bf00      	nop
 8003dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dca:	bc08      	pop	{r3}
 8003dcc:	469e      	mov	lr, r3
 8003dce:	4770      	bx	lr

08003dd0 <_fini>:
 8003dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dd2:	bf00      	nop
 8003dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dd6:	bc08      	pop	{r3}
 8003dd8:	469e      	mov	lr, r3
 8003dda:	4770      	bx	lr
