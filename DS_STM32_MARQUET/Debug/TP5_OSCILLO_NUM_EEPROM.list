
TP5_OSCILLO_NUM_EEPROM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f84  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000868  080050c4  080050c4  000060c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800592c  0800592c  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800592c  0800592c  0000692c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005934  08005934  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005934  08005934  00006934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005938  08005938  00006938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800593c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  2000000c  08005948  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08005948  00007130  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b56b  00000000  00000000  00007035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002011  00000000  00000000  000125a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b20  00000000  00000000  000145b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000895  00000000  00000000  000150d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001674f  00000000  00000000  0001596d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d60c  00000000  00000000  0002c0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dd23  00000000  00000000  000396c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c73eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002edc  00000000  00000000  000c7430  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000ca30c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000000c 	.word	0x2000000c
 800015c:	00000000 	.word	0x00000000
 8000160:	080050ac 	.word	0x080050ac

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000010 	.word	0x20000010
 800017c:	080050ac 	.word	0x080050ac

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	@ 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__aeabi_d2uiz>:
 800091c:	004a      	lsls	r2, r1, #1
 800091e:	d211      	bcs.n	8000944 <__aeabi_d2uiz+0x28>
 8000920:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000924:	d211      	bcs.n	800094a <__aeabi_d2uiz+0x2e>
 8000926:	d50d      	bpl.n	8000944 <__aeabi_d2uiz+0x28>
 8000928:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800092c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000930:	d40e      	bmi.n	8000950 <__aeabi_d2uiz+0x34>
 8000932:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000936:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800093a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800093e:	fa23 f002 	lsr.w	r0, r3, r2
 8000942:	4770      	bx	lr
 8000944:	f04f 0000 	mov.w	r0, #0
 8000948:	4770      	bx	lr
 800094a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800094e:	d102      	bne.n	8000956 <__aeabi_d2uiz+0x3a>
 8000950:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000954:	4770      	bx	lr
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	4770      	bx	lr

0800095c <__aeabi_uldivmod>:
 800095c:	b953      	cbnz	r3, 8000974 <__aeabi_uldivmod+0x18>
 800095e:	b94a      	cbnz	r2, 8000974 <__aeabi_uldivmod+0x18>
 8000960:	2900      	cmp	r1, #0
 8000962:	bf08      	it	eq
 8000964:	2800      	cmpeq	r0, #0
 8000966:	bf1c      	itt	ne
 8000968:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800096c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000970:	f000 b98c 	b.w	8000c8c <__aeabi_idiv0>
 8000974:	f1ad 0c08 	sub.w	ip, sp, #8
 8000978:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800097c:	f000 f806 	bl	800098c <__udivmoddi4>
 8000980:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000984:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000988:	b004      	add	sp, #16
 800098a:	4770      	bx	lr

0800098c <__udivmoddi4>:
 800098c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000990:	9d08      	ldr	r5, [sp, #32]
 8000992:	468e      	mov	lr, r1
 8000994:	4604      	mov	r4, r0
 8000996:	4688      	mov	r8, r1
 8000998:	2b00      	cmp	r3, #0
 800099a:	d14a      	bne.n	8000a32 <__udivmoddi4+0xa6>
 800099c:	428a      	cmp	r2, r1
 800099e:	4617      	mov	r7, r2
 80009a0:	d962      	bls.n	8000a68 <__udivmoddi4+0xdc>
 80009a2:	fab2 f682 	clz	r6, r2
 80009a6:	b14e      	cbz	r6, 80009bc <__udivmoddi4+0x30>
 80009a8:	f1c6 0320 	rsb	r3, r6, #32
 80009ac:	fa01 f806 	lsl.w	r8, r1, r6
 80009b0:	fa20 f303 	lsr.w	r3, r0, r3
 80009b4:	40b7      	lsls	r7, r6
 80009b6:	ea43 0808 	orr.w	r8, r3, r8
 80009ba:	40b4      	lsls	r4, r6
 80009bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009c0:	fbb8 f1fe 	udiv	r1, r8, lr
 80009c4:	fa1f fc87 	uxth.w	ip, r7
 80009c8:	fb0e 8811 	mls	r8, lr, r1, r8
 80009cc:	fb01 f20c 	mul.w	r2, r1, ip
 80009d0:	0c23      	lsrs	r3, r4, #16
 80009d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009d6:	429a      	cmp	r2, r3
 80009d8:	d909      	bls.n	80009ee <__udivmoddi4+0x62>
 80009da:	18fb      	adds	r3, r7, r3
 80009dc:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80009e0:	f080 80eb 	bcs.w	8000bba <__udivmoddi4+0x22e>
 80009e4:	429a      	cmp	r2, r3
 80009e6:	f240 80e8 	bls.w	8000bba <__udivmoddi4+0x22e>
 80009ea:	3902      	subs	r1, #2
 80009ec:	443b      	add	r3, r7
 80009ee:	1a9a      	subs	r2, r3, r2
 80009f0:	fbb2 f0fe 	udiv	r0, r2, lr
 80009f4:	fb0e 2210 	mls	r2, lr, r0, r2
 80009f8:	fb00 fc0c 	mul.w	ip, r0, ip
 80009fc:	b2a3      	uxth	r3, r4
 80009fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a02:	459c      	cmp	ip, r3
 8000a04:	d909      	bls.n	8000a1a <__udivmoddi4+0x8e>
 8000a06:	18fb      	adds	r3, r7, r3
 8000a08:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000a0c:	f080 80d7 	bcs.w	8000bbe <__udivmoddi4+0x232>
 8000a10:	459c      	cmp	ip, r3
 8000a12:	f240 80d4 	bls.w	8000bbe <__udivmoddi4+0x232>
 8000a16:	443b      	add	r3, r7
 8000a18:	3802      	subs	r0, #2
 8000a1a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a1e:	2100      	movs	r1, #0
 8000a20:	eba3 030c 	sub.w	r3, r3, ip
 8000a24:	b11d      	cbz	r5, 8000a2e <__udivmoddi4+0xa2>
 8000a26:	2200      	movs	r2, #0
 8000a28:	40f3      	lsrs	r3, r6
 8000a2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a32:	428b      	cmp	r3, r1
 8000a34:	d905      	bls.n	8000a42 <__udivmoddi4+0xb6>
 8000a36:	b10d      	cbz	r5, 8000a3c <__udivmoddi4+0xb0>
 8000a38:	e9c5 0100 	strd	r0, r1, [r5]
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4608      	mov	r0, r1
 8000a40:	e7f5      	b.n	8000a2e <__udivmoddi4+0xa2>
 8000a42:	fab3 f183 	clz	r1, r3
 8000a46:	2900      	cmp	r1, #0
 8000a48:	d146      	bne.n	8000ad8 <__udivmoddi4+0x14c>
 8000a4a:	4573      	cmp	r3, lr
 8000a4c:	d302      	bcc.n	8000a54 <__udivmoddi4+0xc8>
 8000a4e:	4282      	cmp	r2, r0
 8000a50:	f200 8108 	bhi.w	8000c64 <__udivmoddi4+0x2d8>
 8000a54:	1a84      	subs	r4, r0, r2
 8000a56:	eb6e 0203 	sbc.w	r2, lr, r3
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	4690      	mov	r8, r2
 8000a5e:	2d00      	cmp	r5, #0
 8000a60:	d0e5      	beq.n	8000a2e <__udivmoddi4+0xa2>
 8000a62:	e9c5 4800 	strd	r4, r8, [r5]
 8000a66:	e7e2      	b.n	8000a2e <__udivmoddi4+0xa2>
 8000a68:	2a00      	cmp	r2, #0
 8000a6a:	f000 8091 	beq.w	8000b90 <__udivmoddi4+0x204>
 8000a6e:	fab2 f682 	clz	r6, r2
 8000a72:	2e00      	cmp	r6, #0
 8000a74:	f040 80a5 	bne.w	8000bc2 <__udivmoddi4+0x236>
 8000a78:	1a8a      	subs	r2, r1, r2
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	0c03      	lsrs	r3, r0, #16
 8000a7e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a82:	b280      	uxth	r0, r0
 8000a84:	b2bc      	uxth	r4, r7
 8000a86:	fbb2 fcfe 	udiv	ip, r2, lr
 8000a8a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000a8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a92:	fb04 f20c 	mul.w	r2, r4, ip
 8000a96:	429a      	cmp	r2, r3
 8000a98:	d907      	bls.n	8000aaa <__udivmoddi4+0x11e>
 8000a9a:	18fb      	adds	r3, r7, r3
 8000a9c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000aa0:	d202      	bcs.n	8000aa8 <__udivmoddi4+0x11c>
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	f200 80e3 	bhi.w	8000c6e <__udivmoddi4+0x2e2>
 8000aa8:	46c4      	mov	ip, r8
 8000aaa:	1a9b      	subs	r3, r3, r2
 8000aac:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ab0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000ab4:	fb02 f404 	mul.w	r4, r2, r4
 8000ab8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000abc:	429c      	cmp	r4, r3
 8000abe:	d907      	bls.n	8000ad0 <__udivmoddi4+0x144>
 8000ac0:	18fb      	adds	r3, r7, r3
 8000ac2:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000ac6:	d202      	bcs.n	8000ace <__udivmoddi4+0x142>
 8000ac8:	429c      	cmp	r4, r3
 8000aca:	f200 80cd 	bhi.w	8000c68 <__udivmoddi4+0x2dc>
 8000ace:	4602      	mov	r2, r0
 8000ad0:	1b1b      	subs	r3, r3, r4
 8000ad2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ad6:	e7a5      	b.n	8000a24 <__udivmoddi4+0x98>
 8000ad8:	f1c1 0620 	rsb	r6, r1, #32
 8000adc:	408b      	lsls	r3, r1
 8000ade:	fa22 f706 	lsr.w	r7, r2, r6
 8000ae2:	431f      	orrs	r7, r3
 8000ae4:	fa2e fa06 	lsr.w	sl, lr, r6
 8000ae8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000aec:	fbba f8f9 	udiv	r8, sl, r9
 8000af0:	fa0e fe01 	lsl.w	lr, lr, r1
 8000af4:	fa20 f306 	lsr.w	r3, r0, r6
 8000af8:	fb09 aa18 	mls	sl, r9, r8, sl
 8000afc:	fa1f fc87 	uxth.w	ip, r7
 8000b00:	ea43 030e 	orr.w	r3, r3, lr
 8000b04:	fa00 fe01 	lsl.w	lr, r0, r1
 8000b08:	fb08 f00c 	mul.w	r0, r8, ip
 8000b0c:	0c1c      	lsrs	r4, r3, #16
 8000b0e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000b12:	42a0      	cmp	r0, r4
 8000b14:	fa02 f201 	lsl.w	r2, r2, r1
 8000b18:	d90a      	bls.n	8000b30 <__udivmoddi4+0x1a4>
 8000b1a:	193c      	adds	r4, r7, r4
 8000b1c:	f108 3aff 	add.w	sl, r8, #4294967295	@ 0xffffffff
 8000b20:	f080 809e 	bcs.w	8000c60 <__udivmoddi4+0x2d4>
 8000b24:	42a0      	cmp	r0, r4
 8000b26:	f240 809b 	bls.w	8000c60 <__udivmoddi4+0x2d4>
 8000b2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000b2e:	443c      	add	r4, r7
 8000b30:	1a24      	subs	r4, r4, r0
 8000b32:	b298      	uxth	r0, r3
 8000b34:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b38:	fb09 4413 	mls	r4, r9, r3, r4
 8000b3c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b40:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000b44:	45a4      	cmp	ip, r4
 8000b46:	d909      	bls.n	8000b5c <__udivmoddi4+0x1d0>
 8000b48:	193c      	adds	r4, r7, r4
 8000b4a:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000b4e:	f080 8085 	bcs.w	8000c5c <__udivmoddi4+0x2d0>
 8000b52:	45a4      	cmp	ip, r4
 8000b54:	f240 8082 	bls.w	8000c5c <__udivmoddi4+0x2d0>
 8000b58:	3b02      	subs	r3, #2
 8000b5a:	443c      	add	r4, r7
 8000b5c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000b60:	eba4 040c 	sub.w	r4, r4, ip
 8000b64:	fba0 8c02 	umull	r8, ip, r0, r2
 8000b68:	4564      	cmp	r4, ip
 8000b6a:	4643      	mov	r3, r8
 8000b6c:	46e1      	mov	r9, ip
 8000b6e:	d364      	bcc.n	8000c3a <__udivmoddi4+0x2ae>
 8000b70:	d061      	beq.n	8000c36 <__udivmoddi4+0x2aa>
 8000b72:	b15d      	cbz	r5, 8000b8c <__udivmoddi4+0x200>
 8000b74:	ebbe 0203 	subs.w	r2, lr, r3
 8000b78:	eb64 0409 	sbc.w	r4, r4, r9
 8000b7c:	fa04 f606 	lsl.w	r6, r4, r6
 8000b80:	fa22 f301 	lsr.w	r3, r2, r1
 8000b84:	431e      	orrs	r6, r3
 8000b86:	40cc      	lsrs	r4, r1
 8000b88:	e9c5 6400 	strd	r6, r4, [r5]
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	e74e      	b.n	8000a2e <__udivmoddi4+0xa2>
 8000b90:	fbb1 fcf2 	udiv	ip, r1, r2
 8000b94:	0c01      	lsrs	r1, r0, #16
 8000b96:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000b9a:	b280      	uxth	r0, r0
 8000b9c:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000ba0:	463b      	mov	r3, r7
 8000ba2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ba6:	4638      	mov	r0, r7
 8000ba8:	463c      	mov	r4, r7
 8000baa:	46b8      	mov	r8, r7
 8000bac:	46be      	mov	lr, r7
 8000bae:	2620      	movs	r6, #32
 8000bb0:	eba2 0208 	sub.w	r2, r2, r8
 8000bb4:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000bb8:	e765      	b.n	8000a86 <__udivmoddi4+0xfa>
 8000bba:	4601      	mov	r1, r0
 8000bbc:	e717      	b.n	80009ee <__udivmoddi4+0x62>
 8000bbe:	4610      	mov	r0, r2
 8000bc0:	e72b      	b.n	8000a1a <__udivmoddi4+0x8e>
 8000bc2:	f1c6 0120 	rsb	r1, r6, #32
 8000bc6:	fa2e fc01 	lsr.w	ip, lr, r1
 8000bca:	40b7      	lsls	r7, r6
 8000bcc:	fa0e fe06 	lsl.w	lr, lr, r6
 8000bd0:	fa20 f101 	lsr.w	r1, r0, r1
 8000bd4:	ea41 010e 	orr.w	r1, r1, lr
 8000bd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bdc:	fbbc f8fe 	udiv	r8, ip, lr
 8000be0:	b2bc      	uxth	r4, r7
 8000be2:	fb0e cc18 	mls	ip, lr, r8, ip
 8000be6:	fb08 f904 	mul.w	r9, r8, r4
 8000bea:	0c0a      	lsrs	r2, r1, #16
 8000bec:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000bf0:	40b0      	lsls	r0, r6
 8000bf2:	4591      	cmp	r9, r2
 8000bf4:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000bf8:	b280      	uxth	r0, r0
 8000bfa:	d93e      	bls.n	8000c7a <__udivmoddi4+0x2ee>
 8000bfc:	18ba      	adds	r2, r7, r2
 8000bfe:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000c02:	d201      	bcs.n	8000c08 <__udivmoddi4+0x27c>
 8000c04:	4591      	cmp	r9, r2
 8000c06:	d81f      	bhi.n	8000c48 <__udivmoddi4+0x2bc>
 8000c08:	eba2 0209 	sub.w	r2, r2, r9
 8000c0c:	fbb2 f9fe 	udiv	r9, r2, lr
 8000c10:	fb09 f804 	mul.w	r8, r9, r4
 8000c14:	fb0e 2a19 	mls	sl, lr, r9, r2
 8000c18:	b28a      	uxth	r2, r1
 8000c1a:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 8000c1e:	4542      	cmp	r2, r8
 8000c20:	d229      	bcs.n	8000c76 <__udivmoddi4+0x2ea>
 8000c22:	18ba      	adds	r2, r7, r2
 8000c24:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000c28:	d2c2      	bcs.n	8000bb0 <__udivmoddi4+0x224>
 8000c2a:	4542      	cmp	r2, r8
 8000c2c:	d2c0      	bcs.n	8000bb0 <__udivmoddi4+0x224>
 8000c2e:	f1a9 0102 	sub.w	r1, r9, #2
 8000c32:	443a      	add	r2, r7
 8000c34:	e7bc      	b.n	8000bb0 <__udivmoddi4+0x224>
 8000c36:	45c6      	cmp	lr, r8
 8000c38:	d29b      	bcs.n	8000b72 <__udivmoddi4+0x1e6>
 8000c3a:	ebb8 0302 	subs.w	r3, r8, r2
 8000c3e:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000c42:	3801      	subs	r0, #1
 8000c44:	46e1      	mov	r9, ip
 8000c46:	e794      	b.n	8000b72 <__udivmoddi4+0x1e6>
 8000c48:	eba7 0909 	sub.w	r9, r7, r9
 8000c4c:	444a      	add	r2, r9
 8000c4e:	fbb2 f9fe 	udiv	r9, r2, lr
 8000c52:	f1a8 0c02 	sub.w	ip, r8, #2
 8000c56:	fb09 f804 	mul.w	r8, r9, r4
 8000c5a:	e7db      	b.n	8000c14 <__udivmoddi4+0x288>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	e77d      	b.n	8000b5c <__udivmoddi4+0x1d0>
 8000c60:	46d0      	mov	r8, sl
 8000c62:	e765      	b.n	8000b30 <__udivmoddi4+0x1a4>
 8000c64:	4608      	mov	r0, r1
 8000c66:	e6fa      	b.n	8000a5e <__udivmoddi4+0xd2>
 8000c68:	443b      	add	r3, r7
 8000c6a:	3a02      	subs	r2, #2
 8000c6c:	e730      	b.n	8000ad0 <__udivmoddi4+0x144>
 8000c6e:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c72:	443b      	add	r3, r7
 8000c74:	e719      	b.n	8000aaa <__udivmoddi4+0x11e>
 8000c76:	4649      	mov	r1, r9
 8000c78:	e79a      	b.n	8000bb0 <__udivmoddi4+0x224>
 8000c7a:	eba2 0209 	sub.w	r2, r2, r9
 8000c7e:	fbb2 f9fe 	udiv	r9, r2, lr
 8000c82:	46c4      	mov	ip, r8
 8000c84:	fb09 f804 	mul.w	r8, r9, r4
 8000c88:	e7c4      	b.n	8000c14 <__udivmoddi4+0x288>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_idiv0>:
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <drawHLine_TFT>:
uint8_t rec = 0;
uint8_t read = 0;
uint8_t readed = 0;


void drawHLine_TFT(uint16_t x, uint16_t y, uint16_t length, uint16_t color) {
 8000c90:	b590      	push	{r4, r7, lr}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4604      	mov	r4, r0
 8000c98:	4608      	mov	r0, r1
 8000c9a:	4611      	mov	r1, r2
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	4623      	mov	r3, r4
 8000ca0:	80fb      	strh	r3, [r7, #6]
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	80bb      	strh	r3, [r7, #4]
 8000ca6:	460b      	mov	r3, r1
 8000ca8:	807b      	strh	r3, [r7, #2]
 8000caa:	4613      	mov	r3, r2
 8000cac:	803b      	strh	r3, [r7, #0]
    for (uint16_t i = 0; i < length; i++) {
 8000cae:	2300      	movs	r3, #0
 8000cb0:	81fb      	strh	r3, [r7, #14]
 8000cb2:	e00b      	b.n	8000ccc <drawHLine_TFT+0x3c>
        drawPixel_TFT(x + i, y, color);
 8000cb4:	88fa      	ldrh	r2, [r7, #6]
 8000cb6:	89fb      	ldrh	r3, [r7, #14]
 8000cb8:	4413      	add	r3, r2
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	883a      	ldrh	r2, [r7, #0]
 8000cbe:	88b9      	ldrh	r1, [r7, #4]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f003 ff77 	bl	8004bb4 <drawPixel_TFT>
    for (uint16_t i = 0; i < length; i++) {
 8000cc6:	89fb      	ldrh	r3, [r7, #14]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	81fb      	strh	r3, [r7, #14]
 8000ccc:	89fa      	ldrh	r2, [r7, #14]
 8000cce:	887b      	ldrh	r3, [r7, #2]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d3ef      	bcc.n	8000cb4 <drawHLine_TFT+0x24>
    }
}
 8000cd4:	bf00      	nop
 8000cd6:	bf00      	nop
 8000cd8:	3714      	adds	r7, #20
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd90      	pop	{r4, r7, pc}
	...

08000ce0 <drawAxes>:

void drawAxes() {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af02      	add	r7, sp, #8
	drawHLine_TFT(0, 127, 115, ST7735_WHITE);
 8000ce6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000cea:	2273      	movs	r2, #115	@ 0x73
 8000cec:	217f      	movs	r1, #127	@ 0x7f
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f7ff ffce 	bl	8000c90 <drawHLine_TFT>
	drawHLine_TFT(0, 88, 115, ST7735_WHITE);
 8000cf4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000cf8:	2273      	movs	r2, #115	@ 0x73
 8000cfa:	2158      	movs	r1, #88	@ 0x58
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	f7ff ffc7 	bl	8000c90 <drawHLine_TFT>
	drawHLine_TFT(0, 50, 115, ST7735_WHITE);
 8000d02:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d06:	2273      	movs	r2, #115	@ 0x73
 8000d08:	2132      	movs	r1, #50	@ 0x32
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f7ff ffc0 	bl	8000c90 <drawHLine_TFT>
	drawHLine_TFT(0, 11, 115, ST7735_WHITE);
 8000d10:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d14:	2273      	movs	r2, #115	@ 0x73
 8000d16:	210b      	movs	r1, #11
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f7ff ffb9 	bl	8000c90 <drawHLine_TFT>

    displayChar_TFT(120, 127, '0', ST7735_WHITE, ST7735_BLACK, 1);
 8000d1e:	2301      	movs	r3, #1
 8000d20:	9301      	str	r3, [sp, #4]
 8000d22:	2300      	movs	r3, #0
 8000d24:	9300      	str	r3, [sp, #0]
 8000d26:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d2a:	2230      	movs	r2, #48	@ 0x30
 8000d2c:	217f      	movs	r1, #127	@ 0x7f
 8000d2e:	2078      	movs	r0, #120	@ 0x78
 8000d30:	f004 f812 	bl	8004d58 <displayChar_TFT>
    displayChar_TFT(120, 88, '1', ST7735_WHITE, ST7735_BLACK, 1);
 8000d34:	2301      	movs	r3, #1
 8000d36:	9301      	str	r3, [sp, #4]
 8000d38:	2300      	movs	r3, #0
 8000d3a:	9300      	str	r3, [sp, #0]
 8000d3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d40:	2231      	movs	r2, #49	@ 0x31
 8000d42:	2158      	movs	r1, #88	@ 0x58
 8000d44:	2078      	movs	r0, #120	@ 0x78
 8000d46:	f004 f807 	bl	8004d58 <displayChar_TFT>
    displayChar_TFT(120, 50, '2', ST7735_WHITE, ST7735_BLACK, 1);
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	9301      	str	r3, [sp, #4]
 8000d4e:	2300      	movs	r3, #0
 8000d50:	9300      	str	r3, [sp, #0]
 8000d52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d56:	2232      	movs	r2, #50	@ 0x32
 8000d58:	2132      	movs	r1, #50	@ 0x32
 8000d5a:	2078      	movs	r0, #120	@ 0x78
 8000d5c:	f003 fffc 	bl	8004d58 <displayChar_TFT>
    displayChar_TFT(120, 11, '3', ST7735_WHITE, ST7735_BLACK, 1);
 8000d60:	2301      	movs	r3, #1
 8000d62:	9301      	str	r3, [sp, #4]
 8000d64:	2300      	movs	r3, #0
 8000d66:	9300      	str	r3, [sp, #0]
 8000d68:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d6c:	2233      	movs	r2, #51	@ 0x33
 8000d6e:	210b      	movs	r1, #11
 8000d70:	2078      	movs	r0, #120	@ 0x78
 8000d72:	f003 fff1 	bl	8004d58 <displayChar_TFT>

    if (rec == 1) {
 8000d76:	4b09      	ldr	r3, [pc, #36]	@ (8000d9c <drawAxes+0xbc>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d10a      	bne.n	8000d94 <drawAxes+0xb4>
    	displayChar_TFT(20, 11, 'E', ST7735_RED, ST7735_BLACK, 1);
 8000d7e:	2301      	movs	r3, #1
 8000d80:	9301      	str	r3, [sp, #4]
 8000d82:	2300      	movs	r3, #0
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000d8a:	2245      	movs	r2, #69	@ 0x45
 8000d8c:	210b      	movs	r1, #11
 8000d8e:	2014      	movs	r0, #20
 8000d90:	f003 ffe2 	bl	8004d58 <displayChar_TFT>
    }
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000129 	.word	0x20000129

08000da0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b0a8      	sub	sp, #160	@ 0xa0
 8000da4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000da6:	f000 fccb 	bl	8001740 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000daa:	f000 f8eb 	bl	8000f84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dae:	f000 f9eb 	bl	8001188 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000db2:	f000 f9b3 	bl	800111c <MX_SPI1_Init>
  MX_ADC_Init();
 8000db6:	f000 f92b 	bl	8001010 <MX_ADC_Init>
  MX_I2C1_Init();
 8000dba:	f000 f981 	bl	80010c0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  MAX7219_Init();
 8000dbe:	f000 fc42 	bl	8001646 <MAX7219_Init>
  init_TFT();
 8000dc2:	f003 fead 	bl	8004b20 <init_TFT>
  MAX7219_Clear();
 8000dc6:	f000 fc75 	bl	80016b4 <MAX7219_Clear>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  drawAxes();
 8000dca:	f7ff ff89 	bl	8000ce0 <drawAxes>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (read == 0) {
 8000dce:	4b64      	ldr	r3, [pc, #400]	@ (8000f60 <main+0x1c0>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d175      	bne.n	8000ec2 <main+0x122>
		  HAL_ADC_Start(&hadc);
 8000dd6:	4863      	ldr	r0, [pc, #396]	@ (8000f64 <main+0x1c4>)
 8000dd8:	f000 fe88 	bl	8001aec <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc, 1000);
 8000ddc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000de0:	4860      	ldr	r0, [pc, #384]	@ (8000f64 <main+0x1c4>)
 8000de2:	f000 ff0f 	bl	8001c04 <HAL_ADC_PollForConversion>
		  uint32_t value = HAL_ADC_GetValue(&hadc);
 8000de6:	485f      	ldr	r0, [pc, #380]	@ (8000f64 <main+0x1c4>)
 8000de8:	f000 ff9c 	bl	8001d24 <HAL_ADC_GetValue>
 8000dec:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
		  HAL_ADC_Stop(&hadc);
 8000df0:	485c      	ldr	r0, [pc, #368]	@ (8000f64 <main+0x1c4>)
 8000df2:	f000 fedb 	bl	8001bac <HAL_ADC_Stop>

		  uint32_t milivolt = (value / 4096.0) * 3300;
 8000df6:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8000dfa:	f7ff fb03 	bl	8000404 <__aeabi_ui2d>
 8000dfe:	f04f 0200 	mov.w	r2, #0
 8000e02:	4b59      	ldr	r3, [pc, #356]	@ (8000f68 <main+0x1c8>)
 8000e04:	f7ff fca2 	bl	800074c <__aeabi_ddiv>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	4610      	mov	r0, r2
 8000e0e:	4619      	mov	r1, r3
 8000e10:	a351      	add	r3, pc, #324	@ (adr r3, 8000f58 <main+0x1b8>)
 8000e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e16:	f7ff fb6f 	bl	80004f8 <__aeabi_dmul>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	4610      	mov	r0, r2
 8000e20:	4619      	mov	r1, r3
 8000e22:	f7ff fd7b 	bl	800091c <__aeabi_d2uiz>
 8000e26:	4603      	mov	r3, r0
 8000e28:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		  uint8_t y_pos = 127 - (milivolt * 127) / 3300;
 8000e2c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000e30:	4613      	mov	r3, r2
 8000e32:	01db      	lsls	r3, r3, #7
 8000e34:	1a9b      	subs	r3, r3, r2
 8000e36:	089b      	lsrs	r3, r3, #2
 8000e38:	4a4c      	ldr	r2, [pc, #304]	@ (8000f6c <main+0x1cc>)
 8000e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3e:	095b      	lsrs	r3, r3, #5
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8000e46:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

		  if (rec == 1) {
 8000e4a:	4b49      	ldr	r3, [pc, #292]	@ (8000f70 <main+0x1d0>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d112      	bne.n	8000e78 <main+0xd8>
		          uint8_t address[2] = {0x0, x_pos};
 8000e52:	2300      	movs	r3, #0
 8000e54:	723b      	strb	r3, [r7, #8]
 8000e56:	4b47      	ldr	r3, [pc, #284]	@ (8000f74 <main+0x1d4>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	727b      	strb	r3, [r7, #9]
		          uint8_t data[3];
		          memcpy(data, address, 2);
 8000e5c:	893b      	ldrh	r3, [r7, #8]
 8000e5e:	80bb      	strh	r3, [r7, #4]
		          data[2] = y_pos;
 8000e60:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8000e64:	71bb      	strb	r3, [r7, #6]
		          HAL_I2C_Master_Transmit(&hi2c1, 0xA8, data, sizeof(data), 1000);
 8000e66:	1d3a      	adds	r2, r7, #4
 8000e68:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e6c:	9300      	str	r3, [sp, #0]
 8000e6e:	2303      	movs	r3, #3
 8000e70:	21a8      	movs	r1, #168	@ 0xa8
 8000e72:	4841      	ldr	r0, [pc, #260]	@ (8000f78 <main+0x1d8>)
 8000e74:	f001 fe98 	bl	8002ba8 <HAL_I2C_Master_Transmit>
		  }

		  drawPixel_TFT(x_pos, y_pos, ST7735_YELLOW);
 8000e78:	4b3e      	ldr	r3, [pc, #248]	@ (8000f74 <main+0x1d4>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f003 fe93 	bl	8004bb4 <drawPixel_TFT>
		  x_pos++;
 8000e8e:	4b39      	ldr	r3, [pc, #228]	@ (8000f74 <main+0x1d4>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	3301      	adds	r3, #1
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	4b37      	ldr	r3, [pc, #220]	@ (8000f74 <main+0x1d4>)
 8000e98:	701a      	strb	r2, [r3, #0]
		  if (x_pos >= 128) {
 8000e9a:	4b36      	ldr	r3, [pc, #216]	@ (8000f74 <main+0x1d4>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	b25b      	sxtb	r3, r3
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	da53      	bge.n	8000f4c <main+0x1ac>
			  rec = 0;
 8000ea4:	4b32      	ldr	r3, [pc, #200]	@ (8000f70 <main+0x1d0>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	701a      	strb	r2, [r3, #0]
			  read = 0;
 8000eaa:	4b2d      	ldr	r3, [pc, #180]	@ (8000f60 <main+0x1c0>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	701a      	strb	r2, [r3, #0]
			  x_pos = 0;
 8000eb0:	4b30      	ldr	r3, [pc, #192]	@ (8000f74 <main+0x1d4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	701a      	strb	r2, [r3, #0]
			  fillScreen_TFT(ST7735_BLACK);
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f003 ff3c 	bl	8004d34 <fillScreen_TFT>
			  drawAxes();
 8000ebc:	f7ff ff10 	bl	8000ce0 <drawAxes>
 8000ec0:	e044      	b.n	8000f4c <main+0x1ac>
		   }
	  } else if (read == 1) {
 8000ec2:	4b27      	ldr	r3, [pc, #156]	@ (8000f60 <main+0x1c0>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d140      	bne.n	8000f4c <main+0x1ac>
		  if (x_pos < 128) {
 8000eca:	4b2a      	ldr	r3, [pc, #168]	@ (8000f74 <main+0x1d4>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	b25b      	sxtb	r3, r3
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	db3b      	blt.n	8000f4c <main+0x1ac>
			  if (readed == 0) {
 8000ed4:	4b29      	ldr	r3, [pc, #164]	@ (8000f7c <main+0x1dc>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d11c      	bne.n	8000f16 <main+0x176>
				  while ((I2C1->SR2 & (1 << 1)) == (1 << 1));
 8000edc:	bf00      	nop
 8000ede:	4b28      	ldr	r3, [pc, #160]	@ (8000f80 <main+0x1e0>)
 8000ee0:	699b      	ldr	r3, [r3, #24]
 8000ee2:	f003 0302 	and.w	r3, r3, #2
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d0f9      	beq.n	8000ede <main+0x13e>
				  uint8_t address[2] = {0x0, 0x0};
 8000eea:	2300      	movs	r3, #0
 8000eec:	803b      	strh	r3, [r7, #0]
				  HAL_I2C_Master_Transmit(&hi2c1, 0xA8, address, 2, 100 );
 8000eee:	463a      	mov	r2, r7
 8000ef0:	2364      	movs	r3, #100	@ 0x64
 8000ef2:	9300      	str	r3, [sp, #0]
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	21a8      	movs	r1, #168	@ 0xa8
 8000ef8:	481f      	ldr	r0, [pc, #124]	@ (8000f78 <main+0x1d8>)
 8000efa:	f001 fe55 	bl	8002ba8 <HAL_I2C_Master_Transmit>
				  HAL_I2C_Master_Receive(&hi2c1, 0xA8, rData, 128, 100 );
 8000efe:	f107 020c 	add.w	r2, r7, #12
 8000f02:	2364      	movs	r3, #100	@ 0x64
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	2380      	movs	r3, #128	@ 0x80
 8000f08:	21a8      	movs	r1, #168	@ 0xa8
 8000f0a:	481b      	ldr	r0, [pc, #108]	@ (8000f78 <main+0x1d8>)
 8000f0c:	f001 ff4a 	bl	8002da4 <HAL_I2C_Master_Receive>
				  readed = 1;
 8000f10:	4b1a      	ldr	r3, [pc, #104]	@ (8000f7c <main+0x1dc>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	701a      	strb	r2, [r3, #0]
			  }
			  drawPixel_TFT(x_pos, rData[x_pos], ST7735_YELLOW);
 8000f16:	4b17      	ldr	r3, [pc, #92]	@ (8000f74 <main+0x1d4>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	4b15      	ldr	r3, [pc, #84]	@ (8000f74 <main+0x1d4>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	3398      	adds	r3, #152	@ 0x98
 8000f22:	443b      	add	r3, r7
 8000f24:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 8000f28:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	f003 fe41 	bl	8004bb4 <drawPixel_TFT>
			  x_pos++;
 8000f32:	4b10      	ldr	r3, [pc, #64]	@ (8000f74 <main+0x1d4>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	3301      	adds	r3, #1
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f74 <main+0x1d4>)
 8000f3c:	701a      	strb	r2, [r3, #0]
			  if (x_pos == 127) {
 8000f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f74 <main+0x1d4>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f44:	d102      	bne.n	8000f4c <main+0x1ac>
				  readed = 0;
 8000f46:	4b0d      	ldr	r3, [pc, #52]	@ (8000f7c <main+0x1dc>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	701a      	strb	r2, [r3, #0]
			  }
		  }
	  }
	  HAL_Delay(10);
 8000f4c:	200a      	movs	r0, #10
 8000f4e:	f000 fc65 	bl	800181c <HAL_Delay>
	  if (read == 0) {
 8000f52:	e73c      	b.n	8000dce <main+0x2e>
 8000f54:	f3af 8000 	nop.w
 8000f58:	00000000 	.word	0x00000000
 8000f5c:	40a9c800 	.word	0x40a9c800
 8000f60:	2000012a 	.word	0x2000012a
 8000f64:	20000028 	.word	0x20000028
 8000f68:	40b00000 	.word	0x40b00000
 8000f6c:	09ee009f 	.word	0x09ee009f
 8000f70:	20000129 	.word	0x20000129
 8000f74:	20000128 	.word	0x20000128
 8000f78:	2000007c 	.word	0x2000007c
 8000f7c:	2000012b 	.word	0x2000012b
 8000f80:	40005400 	.word	0x40005400

08000f84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b092      	sub	sp, #72	@ 0x48
 8000f88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	2234      	movs	r2, #52	@ 0x34
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f004 f85e 	bl	8005054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f98:	463b      	mov	r3, r7
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
 8000fa4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fa6:	4b19      	ldr	r3, [pc, #100]	@ (800100c <SystemClock_Config+0x88>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8000fae:	4a17      	ldr	r2, [pc, #92]	@ (800100c <SystemClock_Config+0x88>)
 8000fb0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000fb4:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fbe:	2310      	movs	r3, #16
 8000fc0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f002 fca2 	bl	8003914 <HAL_RCC_OscConfig>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000fd6:	f000 f9bd 	bl	8001354 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fda:	230f      	movs	r3, #15
 8000fdc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fee:	463b      	mov	r3, r7
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f002 ffbe 	bl	8003f74 <HAL_RCC_ClockConfig>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000ffe:	f000 f9a9 	bl	8001354 <Error_Handler>
  }
}
 8001002:	bf00      	nop
 8001004:	3748      	adds	r7, #72	@ 0x48
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40007000 	.word	0x40007000

08001010 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001020:	4b25      	ldr	r3, [pc, #148]	@ (80010b8 <MX_ADC_Init+0xa8>)
 8001022:	4a26      	ldr	r2, [pc, #152]	@ (80010bc <MX_ADC_Init+0xac>)
 8001024:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001026:	4b24      	ldr	r3, [pc, #144]	@ (80010b8 <MX_ADC_Init+0xa8>)
 8001028:	2200      	movs	r2, #0
 800102a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800102c:	4b22      	ldr	r3, [pc, #136]	@ (80010b8 <MX_ADC_Init+0xa8>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001032:	4b21      	ldr	r3, [pc, #132]	@ (80010b8 <MX_ADC_Init+0xa8>)
 8001034:	2200      	movs	r2, #0
 8001036:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001038:	4b1f      	ldr	r3, [pc, #124]	@ (80010b8 <MX_ADC_Init+0xa8>)
 800103a:	2200      	movs	r2, #0
 800103c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800103e:	4b1e      	ldr	r3, [pc, #120]	@ (80010b8 <MX_ADC_Init+0xa8>)
 8001040:	2200      	movs	r2, #0
 8001042:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001044:	4b1c      	ldr	r3, [pc, #112]	@ (80010b8 <MX_ADC_Init+0xa8>)
 8001046:	2200      	movs	r2, #0
 8001048:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 800104a:	4b1b      	ldr	r3, [pc, #108]	@ (80010b8 <MX_ADC_Init+0xa8>)
 800104c:	2200      	movs	r2, #0
 800104e:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001050:	4b19      	ldr	r3, [pc, #100]	@ (80010b8 <MX_ADC_Init+0xa8>)
 8001052:	2200      	movs	r2, #0
 8001054:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001056:	4b18      	ldr	r3, [pc, #96]	@ (80010b8 <MX_ADC_Init+0xa8>)
 8001058:	2200      	movs	r2, #0
 800105a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc.Init.NbrOfConversion = 1;
 800105e:	4b16      	ldr	r3, [pc, #88]	@ (80010b8 <MX_ADC_Init+0xa8>)
 8001060:	2201      	movs	r2, #1
 8001062:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001064:	4b14      	ldr	r3, [pc, #80]	@ (80010b8 <MX_ADC_Init+0xa8>)
 8001066:	2200      	movs	r2, #0
 8001068:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800106c:	4b12      	ldr	r3, [pc, #72]	@ (80010b8 <MX_ADC_Init+0xa8>)
 800106e:	2210      	movs	r2, #16
 8001070:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001072:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <MX_ADC_Init+0xa8>)
 8001074:	2200      	movs	r2, #0
 8001076:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001078:	4b0f      	ldr	r3, [pc, #60]	@ (80010b8 <MX_ADC_Init+0xa8>)
 800107a:	2200      	movs	r2, #0
 800107c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001080:	480d      	ldr	r0, [pc, #52]	@ (80010b8 <MX_ADC_Init+0xa8>)
 8001082:	f000 fbed 	bl	8001860 <HAL_ADC_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 800108c:	f000 f962 	bl	8001354 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001090:	2300      	movs	r3, #0
 8001092:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001094:	2301      	movs	r3, #1
 8001096:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8001098:	2300      	movs	r3, #0
 800109a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800109c:	1d3b      	adds	r3, r7, #4
 800109e:	4619      	mov	r1, r3
 80010a0:	4805      	ldr	r0, [pc, #20]	@ (80010b8 <MX_ADC_Init+0xa8>)
 80010a2:	f000 ff5d 	bl	8001f60 <HAL_ADC_ConfigChannel>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 80010ac:	f000 f952 	bl	8001354 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80010b0:	bf00      	nop
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000028 	.word	0x20000028
 80010bc:	40012400 	.word	0x40012400

080010c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010c4:	4b12      	ldr	r3, [pc, #72]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010c6:	4a13      	ldr	r2, [pc, #76]	@ (8001114 <MX_I2C1_Init+0x54>)
 80010c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010ca:	4b11      	ldr	r3, [pc, #68]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010cc:	4a12      	ldr	r2, [pc, #72]	@ (8001118 <MX_I2C1_Init+0x58>)
 80010ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010d8:	2200      	movs	r2, #0
 80010da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010ea:	4b09      	ldr	r3, [pc, #36]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010f0:	4b07      	ldr	r3, [pc, #28]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010f6:	4b06      	ldr	r3, [pc, #24]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010fc:	4804      	ldr	r0, [pc, #16]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010fe:	f001 fc0f 	bl	8002920 <HAL_I2C_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001108:	f000 f924 	bl	8001354 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}
 8001110:	2000007c 	.word	0x2000007c
 8001114:	40005400 	.word	0x40005400
 8001118:	000186a0 	.word	0x000186a0

0800111c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001120:	4b17      	ldr	r3, [pc, #92]	@ (8001180 <MX_SPI1_Init+0x64>)
 8001122:	4a18      	ldr	r2, [pc, #96]	@ (8001184 <MX_SPI1_Init+0x68>)
 8001124:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001126:	4b16      	ldr	r3, [pc, #88]	@ (8001180 <MX_SPI1_Init+0x64>)
 8001128:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800112c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800112e:	4b14      	ldr	r3, [pc, #80]	@ (8001180 <MX_SPI1_Init+0x64>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001134:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <MX_SPI1_Init+0x64>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800113a:	4b11      	ldr	r3, [pc, #68]	@ (8001180 <MX_SPI1_Init+0x64>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001140:	4b0f      	ldr	r3, [pc, #60]	@ (8001180 <MX_SPI1_Init+0x64>)
 8001142:	2200      	movs	r2, #0
 8001144:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001146:	4b0e      	ldr	r3, [pc, #56]	@ (8001180 <MX_SPI1_Init+0x64>)
 8001148:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800114c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800114e:	4b0c      	ldr	r3, [pc, #48]	@ (8001180 <MX_SPI1_Init+0x64>)
 8001150:	2200      	movs	r2, #0
 8001152:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001154:	4b0a      	ldr	r3, [pc, #40]	@ (8001180 <MX_SPI1_Init+0x64>)
 8001156:	2200      	movs	r2, #0
 8001158:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800115a:	4b09      	ldr	r3, [pc, #36]	@ (8001180 <MX_SPI1_Init+0x64>)
 800115c:	2200      	movs	r2, #0
 800115e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001160:	4b07      	ldr	r3, [pc, #28]	@ (8001180 <MX_SPI1_Init+0x64>)
 8001162:	2200      	movs	r2, #0
 8001164:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001166:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <MX_SPI1_Init+0x64>)
 8001168:	220a      	movs	r2, #10
 800116a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800116c:	4804      	ldr	r0, [pc, #16]	@ (8001180 <MX_SPI1_Init+0x64>)
 800116e:	f003 f971 	bl	8004454 <HAL_SPI_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001178:	f000 f8ec 	bl	8001354 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}
 8001180:	200000d0 	.word	0x200000d0
 8001184:	40013000 	.word	0x40013000

08001188 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	@ 0x28
 800118c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
 800119c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800119e:	4b45      	ldr	r3, [pc, #276]	@ (80012b4 <MX_GPIO_Init+0x12c>)
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	4a44      	ldr	r2, [pc, #272]	@ (80012b4 <MX_GPIO_Init+0x12c>)
 80011a4:	f043 0304 	orr.w	r3, r3, #4
 80011a8:	61d3      	str	r3, [r2, #28]
 80011aa:	4b42      	ldr	r3, [pc, #264]	@ (80012b4 <MX_GPIO_Init+0x12c>)
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	f003 0304 	and.w	r3, r3, #4
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	4b3f      	ldr	r3, [pc, #252]	@ (80012b4 <MX_GPIO_Init+0x12c>)
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	4a3e      	ldr	r2, [pc, #248]	@ (80012b4 <MX_GPIO_Init+0x12c>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	61d3      	str	r3, [r2, #28]
 80011c2:	4b3c      	ldr	r3, [pc, #240]	@ (80012b4 <MX_GPIO_Init+0x12c>)
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ce:	4b39      	ldr	r3, [pc, #228]	@ (80012b4 <MX_GPIO_Init+0x12c>)
 80011d0:	69db      	ldr	r3, [r3, #28]
 80011d2:	4a38      	ldr	r2, [pc, #224]	@ (80012b4 <MX_GPIO_Init+0x12c>)
 80011d4:	f043 0308 	orr.w	r3, r3, #8
 80011d8:	61d3      	str	r3, [r2, #28]
 80011da:	4b36      	ldr	r3, [pc, #216]	@ (80012b4 <MX_GPIO_Init+0x12c>)
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	f003 0308 	and.w	r3, r3, #8
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e6:	4b33      	ldr	r3, [pc, #204]	@ (80012b4 <MX_GPIO_Init+0x12c>)
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	4a32      	ldr	r2, [pc, #200]	@ (80012b4 <MX_GPIO_Init+0x12c>)
 80011ec:	f043 0302 	orr.w	r3, r3, #2
 80011f0:	61d3      	str	r3, [r2, #28]
 80011f2:	4b30      	ldr	r3, [pc, #192]	@ (80012b4 <MX_GPIO_Init+0x12c>)
 80011f4:	69db      	ldr	r3, [r3, #28]
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	2101      	movs	r1, #1
 8001202:	482d      	ldr	r0, [pc, #180]	@ (80012b8 <MX_GPIO_Init+0x130>)
 8001204:	f001 fb5c 	bl	80028c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_SET);
 8001208:	2201      	movs	r2, #1
 800120a:	210e      	movs	r1, #14
 800120c:	482a      	ldr	r0, [pc, #168]	@ (80012b8 <MX_GPIO_Init+0x130>)
 800120e:	f001 fb57 	bl	80028c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8001212:	2201      	movs	r2, #1
 8001214:	2104      	movs	r1, #4
 8001216:	4829      	ldr	r0, [pc, #164]	@ (80012bc <MX_GPIO_Init+0x134>)
 8001218:	f001 fb52 	bl	80028c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800121c:	230f      	movs	r3, #15
 800121e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001220:	2301      	movs	r3, #1
 8001222:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	2300      	movs	r3, #0
 800122a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	4619      	mov	r1, r3
 8001232:	4821      	ldr	r0, [pc, #132]	@ (80012b8 <MX_GPIO_Init+0x130>)
 8001234:	f001 f9b4 	bl	80025a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001238:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800123c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800123e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001242:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4619      	mov	r1, r3
 800124e:	481a      	ldr	r0, [pc, #104]	@ (80012b8 <MX_GPIO_Init+0x130>)
 8001250:	f001 f9a6 	bl	80025a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001254:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001258:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800125a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800125e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	4619      	mov	r1, r3
 800126a:	4815      	ldr	r0, [pc, #84]	@ (80012c0 <MX_GPIO_Init+0x138>)
 800126c:	f001 f998 	bl	80025a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001270:	2304      	movs	r3, #4
 8001272:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001274:	2301      	movs	r3, #1
 8001276:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	2300      	movs	r3, #0
 800127e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	4619      	mov	r1, r3
 8001286:	480d      	ldr	r0, [pc, #52]	@ (80012bc <MX_GPIO_Init+0x134>)
 8001288:	f001 f98a 	bl	80025a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800128c:	2200      	movs	r2, #0
 800128e:	2100      	movs	r1, #0
 8001290:	2017      	movs	r0, #23
 8001292:	f001 f94e 	bl	8002532 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001296:	2017      	movs	r0, #23
 8001298:	f001 f967 	bl	800256a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800129c:	2200      	movs	r2, #0
 800129e:	2100      	movs	r1, #0
 80012a0:	2028      	movs	r0, #40	@ 0x28
 80012a2:	f001 f946 	bl	8002532 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012a6:	2028      	movs	r0, #40	@ 0x28
 80012a8:	f001 f95f 	bl	800256a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80012ac:	bf00      	nop
 80012ae:	3728      	adds	r7, #40	@ 0x28
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40020800 	.word	0x40020800
 80012bc:	40020c00 	.word	0x40020c00
 80012c0:	40020000 	.word	0x40020000

080012c4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == (1 << 9)) {
 80012ce:	88fb      	ldrh	r3, [r7, #6]
 80012d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012d4:	d10e      	bne.n	80012f4 <HAL_GPIO_EXTI_Callback+0x30>
		rec = 0;
 80012d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001348 <HAL_GPIO_EXTI_Callback+0x84>)
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]
		read = 0;
 80012dc:	4b1b      	ldr	r3, [pc, #108]	@ (800134c <HAL_GPIO_EXTI_Callback+0x88>)
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
		x_pos = 0;
 80012e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001350 <HAL_GPIO_EXTI_Callback+0x8c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	701a      	strb	r2, [r3, #0]
		fillScreen_TFT(ST7735_BLACK);
 80012e8:	2000      	movs	r0, #0
 80012ea:	f003 fd23 	bl	8004d34 <fillScreen_TFT>
		drawAxes();
 80012ee:	f7ff fcf7 	bl	8000ce0 <drawAxes>
		read = 1;
		x_pos = 0;
		fillScreen_TFT(ST7735_BLACK);
		drawAxes();
	}
}
 80012f2:	e024      	b.n	800133e <HAL_GPIO_EXTI_Callback+0x7a>
	} else if (GPIO_Pin == (1 << 11)) {
 80012f4:	88fb      	ldrh	r3, [r7, #6]
 80012f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80012fa:	d10e      	bne.n	800131a <HAL_GPIO_EXTI_Callback+0x56>
		rec = 1;
 80012fc:	4b12      	ldr	r3, [pc, #72]	@ (8001348 <HAL_GPIO_EXTI_Callback+0x84>)
 80012fe:	2201      	movs	r2, #1
 8001300:	701a      	strb	r2, [r3, #0]
		read = 0;
 8001302:	4b12      	ldr	r3, [pc, #72]	@ (800134c <HAL_GPIO_EXTI_Callback+0x88>)
 8001304:	2200      	movs	r2, #0
 8001306:	701a      	strb	r2, [r3, #0]
		x_pos = 0;
 8001308:	4b11      	ldr	r3, [pc, #68]	@ (8001350 <HAL_GPIO_EXTI_Callback+0x8c>)
 800130a:	2200      	movs	r2, #0
 800130c:	701a      	strb	r2, [r3, #0]
		fillScreen_TFT(ST7735_BLACK);
 800130e:	2000      	movs	r0, #0
 8001310:	f003 fd10 	bl	8004d34 <fillScreen_TFT>
		drawAxes();
 8001314:	f7ff fce4 	bl	8000ce0 <drawAxes>
}
 8001318:	e011      	b.n	800133e <HAL_GPIO_EXTI_Callback+0x7a>
	} else if (GPIO_Pin == (1 << 12)) {
 800131a:	88fb      	ldrh	r3, [r7, #6]
 800131c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001320:	d10d      	bne.n	800133e <HAL_GPIO_EXTI_Callback+0x7a>
		rec = 0;
 8001322:	4b09      	ldr	r3, [pc, #36]	@ (8001348 <HAL_GPIO_EXTI_Callback+0x84>)
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]
		read = 1;
 8001328:	4b08      	ldr	r3, [pc, #32]	@ (800134c <HAL_GPIO_EXTI_Callback+0x88>)
 800132a:	2201      	movs	r2, #1
 800132c:	701a      	strb	r2, [r3, #0]
		x_pos = 0;
 800132e:	4b08      	ldr	r3, [pc, #32]	@ (8001350 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001330:	2200      	movs	r2, #0
 8001332:	701a      	strb	r2, [r3, #0]
		fillScreen_TFT(ST7735_BLACK);
 8001334:	2000      	movs	r0, #0
 8001336:	f003 fcfd 	bl	8004d34 <fillScreen_TFT>
		drawAxes();
 800133a:	f7ff fcd1 	bl	8000ce0 <drawAxes>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000129 	.word	0x20000129
 800134c:	2000012a 	.word	0x2000012a
 8001350:	20000128 	.word	0x20000128

08001354 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001358:	b672      	cpsid	i
}
 800135a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800135c:	bf00      	nop
 800135e:	e7fd      	b.n	800135c <Error_Handler+0x8>

08001360 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001366:	4b14      	ldr	r3, [pc, #80]	@ (80013b8 <HAL_MspInit+0x58>)
 8001368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800136a:	4a13      	ldr	r2, [pc, #76]	@ (80013b8 <HAL_MspInit+0x58>)
 800136c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001370:	6253      	str	r3, [r2, #36]	@ 0x24
 8001372:	4b11      	ldr	r3, [pc, #68]	@ (80013b8 <HAL_MspInit+0x58>)
 8001374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001376:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137e:	4b0e      	ldr	r3, [pc, #56]	@ (80013b8 <HAL_MspInit+0x58>)
 8001380:	6a1b      	ldr	r3, [r3, #32]
 8001382:	4a0d      	ldr	r2, [pc, #52]	@ (80013b8 <HAL_MspInit+0x58>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6213      	str	r3, [r2, #32]
 800138a:	4b0b      	ldr	r3, [pc, #44]	@ (80013b8 <HAL_MspInit+0x58>)
 800138c:	6a1b      	ldr	r3, [r3, #32]
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001396:	4b08      	ldr	r3, [pc, #32]	@ (80013b8 <HAL_MspInit+0x58>)
 8001398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800139a:	4a07      	ldr	r2, [pc, #28]	@ (80013b8 <HAL_MspInit+0x58>)
 800139c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013a0:	6253      	str	r3, [r2, #36]	@ 0x24
 80013a2:	4b05      	ldr	r3, [pc, #20]	@ (80013b8 <HAL_MspInit+0x58>)
 80013a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ae:	bf00      	nop
 80013b0:	3714      	adds	r7, #20
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr
 80013b8:	40023800 	.word	0x40023800

080013bc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	@ 0x28
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a19      	ldr	r2, [pc, #100]	@ (8001440 <HAL_ADC_MspInit+0x84>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d12b      	bne.n	8001436 <HAL_ADC_MspInit+0x7a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013de:	4b19      	ldr	r3, [pc, #100]	@ (8001444 <HAL_ADC_MspInit+0x88>)
 80013e0:	6a1b      	ldr	r3, [r3, #32]
 80013e2:	4a18      	ldr	r2, [pc, #96]	@ (8001444 <HAL_ADC_MspInit+0x88>)
 80013e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013e8:	6213      	str	r3, [r2, #32]
 80013ea:	4b16      	ldr	r3, [pc, #88]	@ (8001444 <HAL_ADC_MspInit+0x88>)
 80013ec:	6a1b      	ldr	r3, [r3, #32]
 80013ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f6:	4b13      	ldr	r3, [pc, #76]	@ (8001444 <HAL_ADC_MspInit+0x88>)
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	4a12      	ldr	r2, [pc, #72]	@ (8001444 <HAL_ADC_MspInit+0x88>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	61d3      	str	r3, [r2, #28]
 8001402:	4b10      	ldr	r3, [pc, #64]	@ (8001444 <HAL_ADC_MspInit+0x88>)
 8001404:	69db      	ldr	r3, [r3, #28]
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800140e:	2301      	movs	r3, #1
 8001410:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001412:	2303      	movs	r3, #3
 8001414:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	4619      	mov	r1, r3
 8001420:	4809      	ldr	r0, [pc, #36]	@ (8001448 <HAL_ADC_MspInit+0x8c>)
 8001422:	f001 f8bd 	bl	80025a0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	2100      	movs	r1, #0
 800142a:	2012      	movs	r0, #18
 800142c:	f001 f881 	bl	8002532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001430:	2012      	movs	r0, #18
 8001432:	f001 f89a 	bl	800256a <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001436:	bf00      	nop
 8001438:	3728      	adds	r7, #40	@ 0x28
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40012400 	.word	0x40012400
 8001444:	40023800 	.word	0x40023800
 8001448:	40020000 	.word	0x40020000

0800144c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	@ 0x28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a17      	ldr	r2, [pc, #92]	@ (80014c8 <HAL_I2C_MspInit+0x7c>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d128      	bne.n	80014c0 <HAL_I2C_MspInit+0x74>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800146e:	4b17      	ldr	r3, [pc, #92]	@ (80014cc <HAL_I2C_MspInit+0x80>)
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	4a16      	ldr	r2, [pc, #88]	@ (80014cc <HAL_I2C_MspInit+0x80>)
 8001474:	f043 0302 	orr.w	r3, r3, #2
 8001478:	61d3      	str	r3, [r2, #28]
 800147a:	4b14      	ldr	r3, [pc, #80]	@ (80014cc <HAL_I2C_MspInit+0x80>)
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001486:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800148a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800148c:	2312      	movs	r3, #18
 800148e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001494:	2303      	movs	r3, #3
 8001496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001498:	2304      	movs	r3, #4
 800149a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	4619      	mov	r1, r3
 80014a2:	480b      	ldr	r0, [pc, #44]	@ (80014d0 <HAL_I2C_MspInit+0x84>)
 80014a4:	f001 f87c 	bl	80025a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014a8:	4b08      	ldr	r3, [pc, #32]	@ (80014cc <HAL_I2C_MspInit+0x80>)
 80014aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ac:	4a07      	ldr	r2, [pc, #28]	@ (80014cc <HAL_I2C_MspInit+0x80>)
 80014ae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014b2:	6253      	str	r3, [r2, #36]	@ 0x24
 80014b4:	4b05      	ldr	r3, [pc, #20]	@ (80014cc <HAL_I2C_MspInit+0x80>)
 80014b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80014c0:	bf00      	nop
 80014c2:	3728      	adds	r7, #40	@ 0x28
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40005400 	.word	0x40005400
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40020400 	.word	0x40020400

080014d4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	@ 0x28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a17      	ldr	r2, [pc, #92]	@ (8001550 <HAL_SPI_MspInit+0x7c>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d127      	bne.n	8001546 <HAL_SPI_MspInit+0x72>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014f6:	4b17      	ldr	r3, [pc, #92]	@ (8001554 <HAL_SPI_MspInit+0x80>)
 80014f8:	6a1b      	ldr	r3, [r3, #32]
 80014fa:	4a16      	ldr	r2, [pc, #88]	@ (8001554 <HAL_SPI_MspInit+0x80>)
 80014fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001500:	6213      	str	r3, [r2, #32]
 8001502:	4b14      	ldr	r3, [pc, #80]	@ (8001554 <HAL_SPI_MspInit+0x80>)
 8001504:	6a1b      	ldr	r3, [r3, #32]
 8001506:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150e:	4b11      	ldr	r3, [pc, #68]	@ (8001554 <HAL_SPI_MspInit+0x80>)
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	4a10      	ldr	r2, [pc, #64]	@ (8001554 <HAL_SPI_MspInit+0x80>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	61d3      	str	r3, [r2, #28]
 800151a:	4b0e      	ldr	r3, [pc, #56]	@ (8001554 <HAL_SPI_MspInit+0x80>)
 800151c:	69db      	ldr	r3, [r3, #28]
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001526:	23e0      	movs	r3, #224	@ 0xe0
 8001528:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152a:	2302      	movs	r3, #2
 800152c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001532:	2303      	movs	r3, #3
 8001534:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001536:	2305      	movs	r3, #5
 8001538:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153a:	f107 0314 	add.w	r3, r7, #20
 800153e:	4619      	mov	r1, r3
 8001540:	4805      	ldr	r0, [pc, #20]	@ (8001558 <HAL_SPI_MspInit+0x84>)
 8001542:	f001 f82d 	bl	80025a0 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001546:	bf00      	nop
 8001548:	3728      	adds	r7, #40	@ 0x28
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40013000 	.word	0x40013000
 8001554:	40023800 	.word	0x40023800
 8001558:	40020000 	.word	0x40020000

0800155c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001560:	bf00      	nop
 8001562:	e7fd      	b.n	8001560 <NMI_Handler+0x4>

08001564 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001568:	bf00      	nop
 800156a:	e7fd      	b.n	8001568 <HardFault_Handler+0x4>

0800156c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001570:	bf00      	nop
 8001572:	e7fd      	b.n	8001570 <MemManage_Handler+0x4>

08001574 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001578:	bf00      	nop
 800157a:	e7fd      	b.n	8001578 <BusFault_Handler+0x4>

0800157c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001580:	bf00      	nop
 8001582:	e7fd      	b.n	8001580 <UsageFault_Handler+0x4>

08001584 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr

08001590 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr

0800159c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr

080015a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ac:	f000 f91a 	bl	80017e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80015b8:	4802      	ldr	r0, [pc, #8]	@ (80015c4 <ADC1_IRQHandler+0x10>)
 80015ba:	f000 fbbf 	bl	8001d3c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000028 	.word	0x20000028

080015c8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80015cc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80015d0:	f001 f98e 	bl	80028f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80015dc:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80015e0:	f001 f986 	bl	80028f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80015e4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80015e8:	f001 f982 	bl	80028f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr

080015fc <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 80015fc:	f7ff fff8 	bl	80015f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001600:	480b      	ldr	r0, [pc, #44]	@ (8001630 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001602:	490c      	ldr	r1, [pc, #48]	@ (8001634 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001604:	4a0c      	ldr	r2, [pc, #48]	@ (8001638 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001608:	e002      	b.n	8001610 <LoopCopyDataInit>

0800160a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800160a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800160c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800160e:	3304      	adds	r3, #4

08001610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001614:	d3f9      	bcc.n	800160a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001616:	4a09      	ldr	r2, [pc, #36]	@ (800163c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001618:	4c09      	ldr	r4, [pc, #36]	@ (8001640 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800161a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800161c:	e001      	b.n	8001622 <LoopFillZerobss>

0800161e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800161e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001620:	3204      	adds	r2, #4

08001622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001624:	d3fb      	bcc.n	800161e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001626:	f003 fd1d 	bl	8005064 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800162a:	f7ff fbb9 	bl	8000da0 <main>
  bx lr
 800162e:	4770      	bx	lr
  ldr r0, =_sdata
 8001630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001634:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001638:	0800593c 	.word	0x0800593c
  ldr r2, =_sbss
 800163c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001640:	20000130 	.word	0x20000130

08001644 <COMP_ACQ_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001644:	e7fe      	b.n	8001644 <COMP_ACQ_IRQHandler>

08001646 <MAX7219_Init>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Init (void)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	af00      	add	r7, sp, #0
                               // configure "LOAD" as output

  MAX7219_Write(REG_SCAN_LIMIT, 7);                   // set up to scan all eight digits
 800164a:	2107      	movs	r1, #7
 800164c:	200b      	movs	r0, #11
 800164e:	f000 f847 	bl	80016e0 <MAX7219_Write>
  MAX7219_Write(REG_DECODE, 0x00);                    // set to "no decode" for all digits
 8001652:	2100      	movs	r1, #0
 8001654:	2009      	movs	r0, #9
 8001656:	f000 f843 	bl	80016e0 <MAX7219_Write>
  MAX7219_ShutdownStop();                             // select normal operation (i.e. not shutdown)
 800165a:	f000 f809 	bl	8001670 <MAX7219_ShutdownStop>
  MAX7219_DisplayTestStop();                          // select normal operation (i.e. not test mode)
 800165e:	f000 f80f 	bl	8001680 <MAX7219_DisplayTestStop>
  MAX7219_Clear();                                    // clear all digits
 8001662:	f000 f827 	bl	80016b4 <MAX7219_Clear>
  MAX7219_SetBrightness(INTENSITY_MAX);               // set to maximum intensity
 8001666:	200f      	movs	r0, #15
 8001668:	f000 f812 	bl	8001690 <MAX7219_SetBrightness>
}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}

08001670 <MAX7219_ShutdownStop>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_ShutdownStop (void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_SHUTDOWN, 1);                     // put MAX7219 into "normal" mode
 8001674:	2101      	movs	r1, #1
 8001676:	200c      	movs	r0, #12
 8001678:	f000 f832 	bl	80016e0 <MAX7219_Write>
}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}

08001680 <MAX7219_DisplayTestStop>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_DisplayTestStop (void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_DISPLAY_TEST, 0);                 // put MAX7219 into "normal" mode
 8001684:	2100      	movs	r1, #0
 8001686:	200f      	movs	r0, #15
 8001688:	f000 f82a 	bl	80016e0 <MAX7219_Write>
}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}

08001690 <MAX7219_SetBrightness>:
* Arguments  : brightness (0-15)
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_SetBrightness (char brightness)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	71fb      	strb	r3, [r7, #7]
  brightness &= 0x0f;                                 // mask off extra bits
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	f003 030f 	and.w	r3, r3, #15
 80016a0:	71fb      	strb	r3, [r7, #7]
  MAX7219_Write(REG_INTENSITY, brightness);           // set brightness
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	4619      	mov	r1, r3
 80016a6:	200a      	movs	r0, #10
 80016a8:	f000 f81a 	bl	80016e0 <MAX7219_Write>
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <MAX7219_Clear>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Clear (void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
  char i;
  for (i=0; i < 8; i++)
 80016ba:	2300      	movs	r3, #0
 80016bc:	71fb      	strb	r3, [r7, #7]
 80016be:	e007      	b.n	80016d0 <MAX7219_Clear+0x1c>
    MAX7219_Write(i, 0x00);                           // turn all segments off
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	2100      	movs	r1, #0
 80016c4:	4618      	mov	r0, r3
 80016c6:	f000 f80b 	bl	80016e0 <MAX7219_Write>
  for (i=0; i < 8; i++)
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	3301      	adds	r3, #1
 80016ce:	71fb      	strb	r3, [r7, #7]
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	2b07      	cmp	r3, #7
 80016d4:	d9f4      	bls.n	80016c0 <MAX7219_Clear+0xc>
}
 80016d6:	bf00      	nop
 80016d8:	bf00      	nop
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <MAX7219_Write>:
*              dataout = data to write to MAX7219
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Write (unsigned char reg_number, unsigned char dataout)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	460a      	mov	r2, r1
 80016ea:	71fb      	strb	r3, [r7, #7]
 80016ec:	4613      	mov	r3, r2
 80016ee:	71bb      	strb	r3, [r7, #6]
 MAX7219_nCS_PORT->BSRR = (uint32_t)MAX7219_nCS_PIN<<16;// nCS = 0                                          // take LOAD high to begin
 80016f0:	4b09      	ldr	r3, [pc, #36]	@ (8001718 <MAX7219_Write+0x38>)
 80016f2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80016f6:	619a      	str	r2, [r3, #24]
  MAX7219_SendByte(reg_number);                       // write register number to MAX7219
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f000 f80e 	bl	800171c <MAX7219_SendByte>
  MAX7219_SendByte(dataout);                          // write data to MAX7219
 8001700:	79bb      	ldrb	r3, [r7, #6]
 8001702:	4618      	mov	r0, r3
 8001704:	f000 f80a 	bl	800171c <MAX7219_SendByte>
  MAX7219_nCS_PORT->BSRR = (uint32_t)MAX7219_nCS_PIN;// nCS = 1                                       // take LOAD low to latch in data
 8001708:	4b03      	ldr	r3, [pc, #12]	@ (8001718 <MAX7219_Write+0x38>)
 800170a:	2201      	movs	r2, #1
 800170c:	619a      	str	r2, [r3, #24]
 }
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40020800 	.word	0x40020800

0800171c <MAX7219_SendByte>:
* Returns    : none
*********************************************************************************************************
*/

static void MAX7219_SendByte (unsigned char dataout)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	71fb      	strb	r3, [r7, #7]

	HAL_SPI_Transmit(&hspi1, &dataout, 1, 1000);
 8001726:	1df9      	adds	r1, r7, #7
 8001728:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800172c:	2201      	movs	r2, #1
 800172e:	4803      	ldr	r0, [pc, #12]	@ (800173c <MAX7219_SendByte+0x20>)
 8001730:	f002 ff19 	bl	8004566 <HAL_SPI_Transmit>

}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	200000d0 	.word	0x200000d0

08001740 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001746:	2300      	movs	r3, #0
 8001748:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800174a:	2003      	movs	r0, #3
 800174c:	f000 fee6 	bl	800251c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001750:	200f      	movs	r0, #15
 8001752:	f000 f80d 	bl	8001770 <HAL_InitTick>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d002      	beq.n	8001762 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	71fb      	strb	r3, [r7, #7]
 8001760:	e001      	b.n	8001766 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001762:	f7ff fdfd 	bl	8001360 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001766:	79fb      	ldrb	r3, [r7, #7]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001778:	2300      	movs	r3, #0
 800177a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800177c:	4b16      	ldr	r3, [pc, #88]	@ (80017d8 <HAL_InitTick+0x68>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d022      	beq.n	80017ca <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001784:	4b15      	ldr	r3, [pc, #84]	@ (80017dc <HAL_InitTick+0x6c>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4b13      	ldr	r3, [pc, #76]	@ (80017d8 <HAL_InitTick+0x68>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001790:	fbb1 f3f3 	udiv	r3, r1, r3
 8001794:	fbb2 f3f3 	udiv	r3, r2, r3
 8001798:	4618      	mov	r0, r3
 800179a:	f000 fef4 	bl	8002586 <HAL_SYSTICK_Config>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d10f      	bne.n	80017c4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b0f      	cmp	r3, #15
 80017a8:	d809      	bhi.n	80017be <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017aa:	2200      	movs	r2, #0
 80017ac:	6879      	ldr	r1, [r7, #4]
 80017ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80017b2:	f000 febe 	bl	8002532 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017b6:	4a0a      	ldr	r2, [pc, #40]	@ (80017e0 <HAL_InitTick+0x70>)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6013      	str	r3, [r2, #0]
 80017bc:	e007      	b.n	80017ce <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	73fb      	strb	r3, [r7, #15]
 80017c2:	e004      	b.n	80017ce <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	73fb      	strb	r3, [r7, #15]
 80017c8:	e001      	b.n	80017ce <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20000008 	.word	0x20000008
 80017dc:	20000000 	.word	0x20000000
 80017e0:	20000004 	.word	0x20000004

080017e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017e8:	4b05      	ldr	r3, [pc, #20]	@ (8001800 <HAL_IncTick+0x1c>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	4b05      	ldr	r3, [pc, #20]	@ (8001804 <HAL_IncTick+0x20>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4413      	add	r3, r2
 80017f2:	4a03      	ldr	r2, [pc, #12]	@ (8001800 <HAL_IncTick+0x1c>)
 80017f4:	6013      	str	r3, [r2, #0]
}
 80017f6:	bf00      	nop
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bc80      	pop	{r7}
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	2000012c 	.word	0x2000012c
 8001804:	20000008 	.word	0x20000008

08001808 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  return uwTick;
 800180c:	4b02      	ldr	r3, [pc, #8]	@ (8001818 <HAL_GetTick+0x10>)
 800180e:	681b      	ldr	r3, [r3, #0]
}
 8001810:	4618      	mov	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr
 8001818:	2000012c 	.word	0x2000012c

0800181c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001824:	f7ff fff0 	bl	8001808 <HAL_GetTick>
 8001828:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001834:	d004      	beq.n	8001840 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001836:	4b09      	ldr	r3, [pc, #36]	@ (800185c <HAL_Delay+0x40>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	4413      	add	r3, r2
 800183e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001840:	bf00      	nop
 8001842:	f7ff ffe1 	bl	8001808 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	429a      	cmp	r2, r3
 8001850:	d8f7      	bhi.n	8001842 <HAL_Delay+0x26>
  {
  }
}
 8001852:	bf00      	nop
 8001854:	bf00      	nop
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20000008 	.word	0x20000008

08001860 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08e      	sub	sp, #56	@ 0x38
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001868:	2300      	movs	r3, #0
 800186a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t tmp_cr1 = 0;
 800186e:	2300      	movs	r3, #0
 8001870:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t tmp_cr2 = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d101      	bne.n	8001880 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e127      	b.n	8001ad0 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800188a:	2b00      	cmp	r3, #0
 800188c:	d115      	bne.n	80018ba <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	651a      	str	r2, [r3, #80]	@ 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189c:	4b8e      	ldr	r3, [pc, #568]	@ (8001ad8 <HAL_ADC_Init+0x278>)
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	4a8d      	ldr	r2, [pc, #564]	@ (8001ad8 <HAL_ADC_Init+0x278>)
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	6213      	str	r3, [r2, #32]
 80018a8:	4b8b      	ldr	r3, [pc, #556]	@ (8001ad8 <HAL_ADC_Init+0x278>)
 80018aa:	6a1b      	ldr	r3, [r3, #32]
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff fd81 	bl	80013bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018be:	f003 0310 	and.w	r3, r3, #16
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f040 80ff 	bne.w	8001ac6 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018cc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80018d0:	f023 0302 	bic.w	r3, r3, #2
 80018d4:	f043 0202 	orr.w	r2, r3, #2
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 80018dc:	4b7f      	ldr	r3, [pc, #508]	@ (8001adc <HAL_ADC_Init+0x27c>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	497c      	ldr	r1, [pc, #496]	@ (8001adc <HAL_ADC_Init+0x27c>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80018f6:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018fe:	4619      	mov	r1, r3
 8001900:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001904:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001906:	6a3b      	ldr	r3, [r7, #32]
 8001908:	fa93 f3a3 	rbit	r3, r3
 800190c:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	fab3 f383 	clz	r3, r3
 8001914:	b2db      	uxtb	r3, r3
 8001916:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 800191a:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001920:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001928:	4619      	mov	r1, r3
 800192a:	2302      	movs	r3, #2
 800192c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001930:	fa93 f3a3 	rbit	r3, r3
 8001934:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001938:	fab3 f383 	clz	r3, r3
 800193c:	b2db      	uxtb	r3, r3
 800193e:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8001942:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001944:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001946:	4313      	orrs	r3, r2
 8001948:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800194e:	2b10      	cmp	r3, #16
 8001950:	d007      	beq.n	8001962 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800195a:	4313      	orrs	r3, r2
 800195c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800195e:	4313      	orrs	r3, r2
 8001960:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800196c:	2b40      	cmp	r3, #64	@ 0x40
 800196e:	d04f      	beq.n	8001a10 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001976:	4313      	orrs	r3, r2
 8001978:	62fb      	str	r3, [r7, #44]	@ 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001982:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	6912      	ldr	r2, [r2, #16]
 8001988:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 800198c:	d003      	beq.n	8001996 <HAL_ADC_Init+0x136>
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	6912      	ldr	r2, [r2, #16]
 8001992:	2a01      	cmp	r2, #1
 8001994:	d102      	bne.n	800199c <HAL_ADC_Init+0x13c>
 8001996:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800199a:	e000      	b.n	800199e <HAL_ADC_Init+0x13e>
 800199c:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 800199e:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80019a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80019a2:	4313      	orrs	r3, r2
 80019a4:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d125      	bne.n	80019fc <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d114      	bne.n	80019e4 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019be:	3b01      	subs	r3, #1
 80019c0:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 80019c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	fa92 f2a2 	rbit	r2, r2
 80019cc:	617a      	str	r2, [r7, #20]
  return result;
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	fab2 f282 	clz	r2, r2
 80019d4:	b2d2      	uxtb	r2, r2
 80019d6:	4093      	lsls	r3, r2
 80019d8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80019de:	4313      	orrs	r3, r2
 80019e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80019e2:	e00b      	b.n	80019fc <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e8:	f043 0220 	orr.w	r2, r3, #32
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	64da      	str	r2, [r3, #76]	@ 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019f4:	f043 0201 	orr.w	r2, r3, #1
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	651a      	str	r2, [r3, #80]	@ 0x50
      else
      {
        /* do nothing */
      }
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	685a      	ldr	r2, [r3, #4]
 8001a02:	4b37      	ldr	r3, [pc, #220]	@ (8001ae0 <HAL_ADC_Init+0x280>)
 8001a04:	4013      	ands	r3, r2
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	6812      	ldr	r2, [r2, #0]
 8001a0a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001a0c:	430b      	orrs	r3, r1
 8001a0e:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	689a      	ldr	r2, [r3, #8]
 8001a16:	4b33      	ldr	r3, [pc, #204]	@ (8001ae4 <HAL_ADC_Init+0x284>)
 8001a18:	4013      	ands	r3, r2
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	6812      	ldr	r2, [r2, #0]
 8001a1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001a20:	430b      	orrs	r3, r1
 8001a22:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a2c:	d003      	beq.n	8001a36 <HAL_ADC_Init+0x1d6>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d119      	bne.n	8001a6a <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3c:	f023 71f8 	bic.w	r1, r3, #32505856	@ 0x1f00000
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a44:	3b01      	subs	r3, #1
 8001a46:	f04f 72f8 	mov.w	r2, #32505856	@ 0x1f00000
 8001a4a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	fa92 f2a2 	rbit	r2, r2
 8001a52:	60fa      	str	r2, [r7, #12]
  return result;
 8001a54:	68fa      	ldr	r2, [r7, #12]
 8001a56:	fab2 f282 	clz	r2, r2
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	fa03 f202 	lsl.w	r2, r3, r2
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	430a      	orrs	r2, r1
 8001a66:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a68:	e007      	b.n	8001a7a <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f022 72f8 	bic.w	r2, r2, #32505856	@ 0x1f00000
 8001a78:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	4b19      	ldr	r3, [pc, #100]	@ (8001ae8 <HAL_ADC_Init+0x288>)
 8001a82:	4013      	ands	r3, r2
 8001a84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d10b      	bne.n	8001aa2 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	651a      	str	r2, [r3, #80]	@ 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a94:	f023 0303 	bic.w	r3, r3, #3
 8001a98:	f043 0201 	orr.w	r2, r3, #1
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001aa0:	e014      	b.n	8001acc <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aa6:	f023 0312 	bic.w	r3, r3, #18
 8001aaa:	f043 0210 	orr.w	r2, r3, #16
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	64da      	str	r2, [r3, #76]	@ 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ab6:	f043 0201 	orr.w	r2, r3, #1
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	651a      	str	r2, [r3, #80]	@ 0x50
      
      tmp_hal_status = HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001ac4:	e002      	b.n	8001acc <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001acc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3738      	adds	r7, #56	@ 0x38
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40012700 	.word	0x40012700
 8001ae0:	fcfc16ff 	.word	0xfcfc16ff
 8001ae4:	c0fff189 	.word	0xc0fff189
 8001ae8:	bf80fffe 	.word	0xbf80fffe

08001aec <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001af4:	2300      	movs	r3, #0
 8001af6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d101      	bne.n	8001b06 <HAL_ADC_Start+0x1a>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e04e      	b.n	8001ba4 <HAL_ADC_Start+0xb8>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 fb92 	bl	8002238 <ADC_Enable>
 8001b14:	4603      	mov	r3, r0
 8001b16:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001b18:	7bfb      	ldrb	r3, [r7, #15]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d141      	bne.n	8001ba2 <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b22:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001b26:	f023 0301 	bic.w	r3, r3, #1
 8001b2a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d007      	beq.n	8001b50 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b44:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b48:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b5c:	d106      	bne.n	8001b6c <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b62:	f023 0206 	bic.w	r2, r3, #6
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	651a      	str	r2, [r3, #80]	@ 0x50
 8001b6a:	e002      	b.n	8001b72 <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001b82:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d107      	bne.n	8001ba2 <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001ba0:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d101      	bne.n	8001bc6 <HAL_ADC_Stop+0x1a>
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	e01a      	b.n	8001bfc <HAL_ADC_Stop+0x50>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 fb8e 	bl	80022f0 <ADC_ConversionStop_Disable>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001bd8:	7bfb      	ldrb	r3, [r7, #15]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d109      	bne.n	8001bf2 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001be2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001be6:	f023 0301 	bic.w	r3, r3, #1
 8001bea:	f043 0201 	orr.w	r2, r3, #1
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c20:	d113      	bne.n	8001c4a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c30:	d10b      	bne.n	8001c4a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c36:	f043 0220 	orr.w	r2, r3, #32
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e068      	b.n	8001d1c <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001c4a:	f7ff fddd 	bl	8001808 <HAL_GetTick>
 8001c4e:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c50:	e021      	b.n	8001c96 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c58:	d01d      	beq.n	8001c96 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d007      	beq.n	8001c70 <HAL_ADC_PollForConversion+0x6c>
 8001c60:	f7ff fdd2 	bl	8001808 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d212      	bcs.n	8001c96 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10b      	bne.n	8001c96 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c82:	f043 0204 	orr.w	r2, r3, #4
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

          return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e042      	b.n	8001d1c <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d0d6      	beq.n	8001c52 <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d104      	bne.n	8001cb6 <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f06f 0212 	mvn.w	r2, #18
 8001cb4:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cba:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d124      	bne.n	8001d1a <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d11f      	bne.n	8001d1a <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce0:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d006      	beq.n	8001cf6 <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d111      	bne.n	8001d1a <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cfa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d105      	bne.n	8001d1a <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d12:	f043 0201 	orr.w	r2, r3, #1
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr

08001d3c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	f003 0320 	and.w	r3, r3, #32
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d04c      	beq.n	8001df8 <HAL_ADC_IRQHandler+0xbc>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d047      	beq.n	8001df8 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d6c:	f003 0310 	and.w	r3, r3, #16
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d105      	bne.n	8001d80 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d78:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32L1, there is no independent flag of end of sequence.   */
      /*       The test of scan sequence on going is done either with scan    */
      /*       sequence disabled or with end of conversion flag set to        */
      /*       of end of sequence.                                            */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d12c      	bne.n	8001de8 <HAL_ADC_IRQHandler+0xac>
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d127      	bne.n	8001de8 <HAL_ADC_IRQHandler+0xac>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9e:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d006      	beq.n	8001db4 <HAL_ADC_IRQHandler+0x78>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d119      	bne.n	8001de8 <HAL_ADC_IRQHandler+0xac>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f022 0220 	bic.w	r2, r2, #32
 8001dc2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	64da      	str	r2, [r3, #76]	@ 0x4c
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d105      	bne.n	8001de8 <HAL_ADC_IRQHandler+0xac>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001de0:	f043 0201 	orr.w	r2, r3, #1
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	64da      	str	r2, [r3, #76]	@ 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 f89e 	bl	8001f2a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f06f 0212 	mvn.w	r2, #18
 8001df6:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d05a      	beq.n	8001eb8 <HAL_ADC_IRQHandler+0x17c>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d055      	beq.n	8001eb8 <HAL_ADC_IRQHandler+0x17c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e10:	f003 0310 	and.w	r3, r3, #16
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d105      	bne.n	8001e24 <HAL_ADC_IRQHandler+0xe8>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e1c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Determine whether any further conversion upcoming on group injected  */
      /* by external trigger, scan sequence on going or by automatic injected */
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d13a      	bne.n	8001ea8 <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e38:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d006      	beq.n	8001e4e <HAL_ADC_IRQHandler+0x112>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d12c      	bne.n	8001ea8 <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d125      	bne.n	8001ea8 <HAL_ADC_IRQHandler+0x16c>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d11e      	bne.n	8001ea8 <HAL_ADC_IRQHandler+0x16c>
          (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d119      	bne.n	8001ea8 <HAL_ADC_IRQHandler+0x16c>
      {
        /* Disable ADC end of single conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e82:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e88:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	64da      	str	r2, [r3, #76]	@ 0x4c

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d105      	bne.n	8001ea8 <HAL_ADC_IRQHandler+0x16c>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ea0:	f043 0201 	orr.w	r2, r3, #1
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	64da      	str	r2, [r3, #76]	@ 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 fa62 	bl	8002372 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f06f 020c 	mvn.w	r2, #12
 8001eb6:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d012      	beq.n	8001ee8 <HAL_ADC_IRQHandler+0x1ac>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d00d      	beq.n	8001ee8 <HAL_ADC_IRQHandler+0x1ac>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ed0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	64da      	str	r2, [r3, #76]	@ 0x4c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 f82f 	bl	8001f3c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f06f 0201 	mvn.w	r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check Overrun flag ========== */
  if((tmp_cr1 & ADC_IT_OVR) == ADC_IT_OVR)
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d017      	beq.n	8001f22 <HAL_ADC_IRQHandler+0x1e6>
  {
    if((tmp_sr & ADC_FLAG_OVR) == ADC_FLAG_OVR)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f003 0320 	and.w	r3, r3, #32
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d012      	beq.n	8001f22 <HAL_ADC_IRQHandler+0x1e6>
      /* Note: On STM32L1, ADC overrun can be set through other parameters    */
      /*       refer to description of parameter "EOCSelection" for more      */
      /*       details.                                                       */
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f00:	f043 0202 	orr.w	r2, r3, #2
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	651a      	str	r2, [r3, #80]	@ 0x50
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f06f 0220 	mvn.w	r2, #32
 8001f10:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f81b 	bl	8001f4e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the Overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f06f 0220 	mvn.w	r2, #32
 8001f20:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001f22:	bf00      	nop
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr

08001f3c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bc80      	pop	{r7}
 8001f4c:	4770      	bx	lr

08001f4e <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr

08001f60 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d101      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x20>
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	e14f      	b.n	8002220 <HAL_ADC_ConfigChannel+0x2c0>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	2b06      	cmp	r3, #6
 8001f8e:	d81c      	bhi.n	8001fca <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	3b05      	subs	r3, #5
 8001fa2:	221f      	movs	r2, #31
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	4019      	ands	r1, r3
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	6818      	ldr	r0, [r3, #0]
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685a      	ldr	r2, [r3, #4]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4413      	add	r3, r2
 8001fba:	3b05      	subs	r3, #5
 8001fbc:	fa00 f203 	lsl.w	r2, r0, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	641a      	str	r2, [r3, #64]	@ 0x40
 8001fc8:	e07e      	b.n	80020c8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b0c      	cmp	r3, #12
 8001fd0:	d81c      	bhi.n	800200c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685a      	ldr	r2, [r3, #4]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	3b23      	subs	r3, #35	@ 0x23
 8001fe4:	221f      	movs	r2, #31
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43db      	mvns	r3, r3
 8001fec:	4019      	ands	r1, r3
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	6818      	ldr	r0, [r3, #0]
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	3b23      	subs	r3, #35	@ 0x23
 8001ffe:	fa00 f203 	lsl.w	r2, r0, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	430a      	orrs	r2, r1
 8002008:	63da      	str	r2, [r3, #60]	@ 0x3c
 800200a:	e05d      	b.n	80020c8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b12      	cmp	r3, #18
 8002012:	d81c      	bhi.n	800204e <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	4613      	mov	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	4413      	add	r3, r2
 8002024:	3b41      	subs	r3, #65	@ 0x41
 8002026:	221f      	movs	r2, #31
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	43db      	mvns	r3, r3
 800202e:	4019      	ands	r1, r3
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	6818      	ldr	r0, [r3, #0]
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	3b41      	subs	r3, #65	@ 0x41
 8002040:	fa00 f203 	lsl.w	r2, r0, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	430a      	orrs	r2, r1
 800204a:	639a      	str	r2, [r3, #56]	@ 0x38
 800204c:	e03c      	b.n	80020c8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b18      	cmp	r3, #24
 8002054:	d81c      	bhi.n	8002090 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685a      	ldr	r2, [r3, #4]
 8002060:	4613      	mov	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	4413      	add	r3, r2
 8002066:	3b5f      	subs	r3, #95	@ 0x5f
 8002068:	221f      	movs	r2, #31
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43db      	mvns	r3, r3
 8002070:	4019      	ands	r1, r3
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	6818      	ldr	r0, [r3, #0]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685a      	ldr	r2, [r3, #4]
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	3b5f      	subs	r3, #95	@ 0x5f
 8002082:	fa00 f203 	lsl.w	r2, r0, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	635a      	str	r2, [r3, #52]	@ 0x34
 800208e:	e01b      	b.n	80020c8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	3b7d      	subs	r3, #125	@ 0x7d
 80020a2:	221f      	movs	r2, #31
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	4019      	ands	r1, r3
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	6818      	ldr	r0, [r3, #0]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	4613      	mov	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	3b7d      	subs	r3, #125	@ 0x7d
 80020bc:	fa00 f203 	lsl.w	r2, r0, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2b09      	cmp	r3, #9
 80020ce:	d81a      	bhi.n	8002106 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6959      	ldr	r1, [r3, #20]
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	4613      	mov	r3, r2
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	4413      	add	r3, r2
 80020e0:	2207      	movs	r2, #7
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	43db      	mvns	r3, r3
 80020e8:	4019      	ands	r1, r3
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	6898      	ldr	r0, [r3, #8]
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	4613      	mov	r3, r2
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	4413      	add	r3, r2
 80020f8:	fa00 f203 	lsl.w	r2, r0, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	430a      	orrs	r2, r1
 8002102:	615a      	str	r2, [r3, #20]
 8002104:	e05d      	b.n	80021c2 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2b13      	cmp	r3, #19
 800210c:	d81c      	bhi.n	8002148 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6919      	ldr	r1, [r3, #16]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	4613      	mov	r3, r2
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	4413      	add	r3, r2
 800211e:	3b1e      	subs	r3, #30
 8002120:	2207      	movs	r2, #7
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43db      	mvns	r3, r3
 8002128:	4019      	ands	r1, r3
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	6898      	ldr	r0, [r3, #8]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	4613      	mov	r3, r2
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	4413      	add	r3, r2
 8002138:	3b1e      	subs	r3, #30
 800213a:	fa00 f203 	lsl.w	r2, r0, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	611a      	str	r2, [r3, #16]
 8002146:	e03c      	b.n	80021c2 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b1d      	cmp	r3, #29
 800214e:	d81c      	bhi.n	800218a <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68d9      	ldr	r1, [r3, #12]
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	4613      	mov	r3, r2
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	4413      	add	r3, r2
 8002160:	3b3c      	subs	r3, #60	@ 0x3c
 8002162:	2207      	movs	r2, #7
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	43db      	mvns	r3, r3
 800216a:	4019      	ands	r1, r3
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	6898      	ldr	r0, [r3, #8]
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	4613      	mov	r3, r2
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	4413      	add	r3, r2
 800217a:	3b3c      	subs	r3, #60	@ 0x3c
 800217c:	fa00 f203 	lsl.w	r2, r0, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	430a      	orrs	r2, r1
 8002186:	60da      	str	r2, [r3, #12]
 8002188:	e01b      	b.n	80021c2 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	4613      	mov	r3, r2
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	4413      	add	r3, r2
 800219a:	3b5a      	subs	r3, #90	@ 0x5a
 800219c:	2207      	movs	r2, #7
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43db      	mvns	r3, r3
 80021a4:	4019      	ands	r1, r3
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	6898      	ldr	r0, [r3, #8]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	4613      	mov	r3, r2
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	4413      	add	r3, r2
 80021b4:	3b5a      	subs	r3, #90	@ 0x5a
 80021b6:	fa00 f203 	lsl.w	r2, r0, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	430a      	orrs	r2, r1
 80021c0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2b10      	cmp	r3, #16
 80021c8:	d003      	beq.n	80021d2 <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021ce:	2b11      	cmp	r3, #17
 80021d0:	d121      	bne.n	8002216 <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 80021d2:	4b16      	ldr	r3, [pc, #88]	@ (800222c <HAL_ADC_ConfigChannel+0x2cc>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d11b      	bne.n	8002216 <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80021de:	4b13      	ldr	r3, [pc, #76]	@ (800222c <HAL_ADC_ConfigChannel+0x2cc>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	4a12      	ldr	r2, [pc, #72]	@ (800222c <HAL_ADC_ConfigChannel+0x2cc>)
 80021e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80021e8:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2b10      	cmp	r3, #16
 80021f0:	d111      	bne.n	8002216 <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80021f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002230 <HAL_ADC_ConfigChannel+0x2d0>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a0f      	ldr	r2, [pc, #60]	@ (8002234 <HAL_ADC_ConfigChannel+0x2d4>)
 80021f8:	fba2 2303 	umull	r2, r3, r2, r3
 80021fc:	0c9a      	lsrs	r2, r3, #18
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002208:	e002      	b.n	8002210 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	3b01      	subs	r3, #1
 800220e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1f9      	bne.n	800220a <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800221e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	bc80      	pop	{r7}
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	40012700 	.word	0x40012700
 8002230:	20000000 	.word	0x20000000
 8002234:	431bde83 	.word	0x431bde83

08002238 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002240:	2300      	movs	r3, #0
 8002242:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8002244:	2300      	movs	r3, #0
 8002246:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002252:	2b40      	cmp	r3, #64	@ 0x40
 8002254:	d043      	beq.n	80022de <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f042 0201 	orr.w	r2, r2, #1
 8002264:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002266:	4b20      	ldr	r3, [pc, #128]	@ (80022e8 <ADC_Enable+0xb0>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a20      	ldr	r2, [pc, #128]	@ (80022ec <ADC_Enable+0xb4>)
 800226c:	fba2 2303 	umull	r2, r3, r2, r3
 8002270:	0c9a      	lsrs	r2, r3, #18
 8002272:	4613      	mov	r3, r2
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	4413      	add	r3, r2
 8002278:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800227a:	e002      	b.n	8002282 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	3b01      	subs	r3, #1
 8002280:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1f9      	bne.n	800227c <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8002288:	f7ff fabe 	bl	8001808 <HAL_GetTick>
 800228c:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800228e:	e01f      	b.n	80022d0 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8002290:	f7ff faba 	bl	8001808 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d918      	bls.n	80022d0 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022a8:	2b40      	cmp	r3, #64	@ 0x40
 80022aa:	d011      	beq.n	80022d0 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022b0:	f043 0210 	orr.w	r2, r3, #16
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022bc:	f043 0201 	orr.w	r2, r3, #1
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

          return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e007      	b.n	80022e0 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022da:	2b40      	cmp	r3, #64	@ 0x40
 80022dc:	d1d8      	bne.n	8002290 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20000000 	.word	0x20000000
 80022ec:	431bde83 	.word	0x431bde83

080022f0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80022f8:	2300      	movs	r3, #0
 80022fa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002306:	2b40      	cmp	r3, #64	@ 0x40
 8002308:	d12e      	bne.n	8002368 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 0201 	bic.w	r2, r2, #1
 8002318:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800231a:	f7ff fa75 	bl	8001808 <HAL_GetTick>
 800231e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002320:	e01b      	b.n	800235a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 8002322:	f7ff fa71 	bl	8001808 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d914      	bls.n	800235a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800233a:	2b40      	cmp	r3, #64	@ 0x40
 800233c:	d10d      	bne.n	800235a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002342:	f043 0210 	orr.w	r2, r3, #16
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800234e:	f043 0201 	orr.w	r2, r3, #1
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	651a      	str	r2, [r3, #80]	@ 0x50

          return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e007      	b.n	800236a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002364:	2b40      	cmp	r3, #64	@ 0x40
 8002366:	d0dc      	beq.n	8002322 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr

08002384 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002394:	4b0c      	ldr	r3, [pc, #48]	@ (80023c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023a0:	4013      	ands	r3, r2
 80023a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023b6:	4a04      	ldr	r2, [pc, #16]	@ (80023c8 <__NVIC_SetPriorityGrouping+0x44>)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	60d3      	str	r3, [r2, #12]
}
 80023bc:	bf00      	nop
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bc80      	pop	{r7}
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023d0:	4b04      	ldr	r3, [pc, #16]	@ (80023e4 <__NVIC_GetPriorityGrouping+0x18>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	0a1b      	lsrs	r3, r3, #8
 80023d6:	f003 0307 	and.w	r3, r3, #7
}
 80023da:	4618      	mov	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	db0b      	blt.n	8002412 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	f003 021f 	and.w	r2, r3, #31
 8002400:	4906      	ldr	r1, [pc, #24]	@ (800241c <__NVIC_EnableIRQ+0x34>)
 8002402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002406:	095b      	lsrs	r3, r3, #5
 8002408:	2001      	movs	r0, #1
 800240a:	fa00 f202 	lsl.w	r2, r0, r2
 800240e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr
 800241c:	e000e100 	.word	0xe000e100

08002420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	6039      	str	r1, [r7, #0]
 800242a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800242c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002430:	2b00      	cmp	r3, #0
 8002432:	db0a      	blt.n	800244a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	b2da      	uxtb	r2, r3
 8002438:	490c      	ldr	r1, [pc, #48]	@ (800246c <__NVIC_SetPriority+0x4c>)
 800243a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243e:	0112      	lsls	r2, r2, #4
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	440b      	add	r3, r1
 8002444:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002448:	e00a      	b.n	8002460 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	b2da      	uxtb	r2, r3
 800244e:	4908      	ldr	r1, [pc, #32]	@ (8002470 <__NVIC_SetPriority+0x50>)
 8002450:	79fb      	ldrb	r3, [r7, #7]
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	3b04      	subs	r3, #4
 8002458:	0112      	lsls	r2, r2, #4
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	440b      	add	r3, r1
 800245e:	761a      	strb	r2, [r3, #24]
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	bc80      	pop	{r7}
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	e000e100 	.word	0xe000e100
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002474:	b480      	push	{r7}
 8002476:	b089      	sub	sp, #36	@ 0x24
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f1c3 0307 	rsb	r3, r3, #7
 800248e:	2b04      	cmp	r3, #4
 8002490:	bf28      	it	cs
 8002492:	2304      	movcs	r3, #4
 8002494:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	3304      	adds	r3, #4
 800249a:	2b06      	cmp	r3, #6
 800249c:	d902      	bls.n	80024a4 <NVIC_EncodePriority+0x30>
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	3b03      	subs	r3, #3
 80024a2:	e000      	b.n	80024a6 <NVIC_EncodePriority+0x32>
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	43da      	mvns	r2, r3
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	401a      	ands	r2, r3
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024bc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	fa01 f303 	lsl.w	r3, r1, r3
 80024c6:	43d9      	mvns	r1, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024cc:	4313      	orrs	r3, r2
         );
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3724      	adds	r7, #36	@ 0x24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr

080024d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3b01      	subs	r3, #1
 80024e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024e8:	d301      	bcc.n	80024ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ea:	2301      	movs	r3, #1
 80024ec:	e00f      	b.n	800250e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002518 <SysTick_Config+0x40>)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3b01      	subs	r3, #1
 80024f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024f6:	210f      	movs	r1, #15
 80024f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80024fc:	f7ff ff90 	bl	8002420 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002500:	4b05      	ldr	r3, [pc, #20]	@ (8002518 <SysTick_Config+0x40>)
 8002502:	2200      	movs	r2, #0
 8002504:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002506:	4b04      	ldr	r3, [pc, #16]	@ (8002518 <SysTick_Config+0x40>)
 8002508:	2207      	movs	r2, #7
 800250a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	e000e010 	.word	0xe000e010

0800251c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7ff ff2d 	bl	8002384 <__NVIC_SetPriorityGrouping>
}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b086      	sub	sp, #24
 8002536:	af00      	add	r7, sp, #0
 8002538:	4603      	mov	r3, r0
 800253a:	60b9      	str	r1, [r7, #8]
 800253c:	607a      	str	r2, [r7, #4]
 800253e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002544:	f7ff ff42 	bl	80023cc <__NVIC_GetPriorityGrouping>
 8002548:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	68b9      	ldr	r1, [r7, #8]
 800254e:	6978      	ldr	r0, [r7, #20]
 8002550:	f7ff ff90 	bl	8002474 <NVIC_EncodePriority>
 8002554:	4602      	mov	r2, r0
 8002556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800255a:	4611      	mov	r1, r2
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff ff5f 	bl	8002420 <__NVIC_SetPriority>
}
 8002562:	bf00      	nop
 8002564:	3718      	adds	r7, #24
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b082      	sub	sp, #8
 800256e:	af00      	add	r7, sp, #0
 8002570:	4603      	mov	r3, r0
 8002572:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff ff35 	bl	80023e8 <__NVIC_EnableIRQ>
}
 800257e:	bf00      	nop
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b082      	sub	sp, #8
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7ff ffa2 	bl	80024d8 <SysTick_Config>
 8002594:	4603      	mov	r3, r0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
	...

080025a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b087      	sub	sp, #28
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80025ae:	2300      	movs	r3, #0
 80025b0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80025b2:	2300      	movs	r3, #0
 80025b4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80025b6:	e160      	b.n	800287a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	2101      	movs	r1, #1
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	fa01 f303 	lsl.w	r3, r1, r3
 80025c4:	4013      	ands	r3, r2
 80025c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f000 8152 	beq.w	8002874 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f003 0303 	and.w	r3, r3, #3
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d005      	beq.n	80025e8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d130      	bne.n	800264a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	2203      	movs	r2, #3
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	43db      	mvns	r3, r3
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	4013      	ands	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	68da      	ldr	r2, [r3, #12]
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	4313      	orrs	r3, r2
 8002610:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800261e:	2201      	movs	r2, #1
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43db      	mvns	r3, r3
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	4013      	ands	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	091b      	lsrs	r3, r3, #4
 8002634:	f003 0201 	and.w	r2, r3, #1
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	4313      	orrs	r3, r2
 8002642:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f003 0303 	and.w	r3, r3, #3
 8002652:	2b03      	cmp	r3, #3
 8002654:	d017      	beq.n	8002686 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	2203      	movs	r2, #3
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	43db      	mvns	r3, r3
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	4013      	ands	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	4313      	orrs	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d123      	bne.n	80026da <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	08da      	lsrs	r2, r3, #3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	3208      	adds	r2, #8
 800269a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800269e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	220f      	movs	r2, #15
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43db      	mvns	r3, r3
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	4013      	ands	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	691a      	ldr	r2, [r3, #16]
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	08da      	lsrs	r2, r3, #3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3208      	adds	r2, #8
 80026d4:	6939      	ldr	r1, [r7, #16]
 80026d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	2203      	movs	r2, #3
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	43db      	mvns	r3, r3
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	4013      	ands	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f003 0203 	and.w	r2, r3, #3
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	4313      	orrs	r3, r2
 8002706:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 80ac 	beq.w	8002874 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800271c:	4b5e      	ldr	r3, [pc, #376]	@ (8002898 <HAL_GPIO_Init+0x2f8>)
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	4a5d      	ldr	r2, [pc, #372]	@ (8002898 <HAL_GPIO_Init+0x2f8>)
 8002722:	f043 0301 	orr.w	r3, r3, #1
 8002726:	6213      	str	r3, [r2, #32]
 8002728:	4b5b      	ldr	r3, [pc, #364]	@ (8002898 <HAL_GPIO_Init+0x2f8>)
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	60bb      	str	r3, [r7, #8]
 8002732:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002734:	4a59      	ldr	r2, [pc, #356]	@ (800289c <HAL_GPIO_Init+0x2fc>)
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	089b      	lsrs	r3, r3, #2
 800273a:	3302      	adds	r3, #2
 800273c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002740:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	f003 0303 	and.w	r3, r3, #3
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	220f      	movs	r2, #15
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	43db      	mvns	r3, r3
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	4013      	ands	r3, r2
 8002756:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a51      	ldr	r2, [pc, #324]	@ (80028a0 <HAL_GPIO_Init+0x300>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d025      	beq.n	80027ac <HAL_GPIO_Init+0x20c>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a50      	ldr	r2, [pc, #320]	@ (80028a4 <HAL_GPIO_Init+0x304>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d01f      	beq.n	80027a8 <HAL_GPIO_Init+0x208>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a4f      	ldr	r2, [pc, #316]	@ (80028a8 <HAL_GPIO_Init+0x308>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d019      	beq.n	80027a4 <HAL_GPIO_Init+0x204>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a4e      	ldr	r2, [pc, #312]	@ (80028ac <HAL_GPIO_Init+0x30c>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d013      	beq.n	80027a0 <HAL_GPIO_Init+0x200>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a4d      	ldr	r2, [pc, #308]	@ (80028b0 <HAL_GPIO_Init+0x310>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d00d      	beq.n	800279c <HAL_GPIO_Init+0x1fc>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a4c      	ldr	r2, [pc, #304]	@ (80028b4 <HAL_GPIO_Init+0x314>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d007      	beq.n	8002798 <HAL_GPIO_Init+0x1f8>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a4b      	ldr	r2, [pc, #300]	@ (80028b8 <HAL_GPIO_Init+0x318>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d101      	bne.n	8002794 <HAL_GPIO_Init+0x1f4>
 8002790:	2306      	movs	r3, #6
 8002792:	e00c      	b.n	80027ae <HAL_GPIO_Init+0x20e>
 8002794:	2307      	movs	r3, #7
 8002796:	e00a      	b.n	80027ae <HAL_GPIO_Init+0x20e>
 8002798:	2305      	movs	r3, #5
 800279a:	e008      	b.n	80027ae <HAL_GPIO_Init+0x20e>
 800279c:	2304      	movs	r3, #4
 800279e:	e006      	b.n	80027ae <HAL_GPIO_Init+0x20e>
 80027a0:	2303      	movs	r3, #3
 80027a2:	e004      	b.n	80027ae <HAL_GPIO_Init+0x20e>
 80027a4:	2302      	movs	r3, #2
 80027a6:	e002      	b.n	80027ae <HAL_GPIO_Init+0x20e>
 80027a8:	2301      	movs	r3, #1
 80027aa:	e000      	b.n	80027ae <HAL_GPIO_Init+0x20e>
 80027ac:	2300      	movs	r3, #0
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	f002 0203 	and.w	r2, r2, #3
 80027b4:	0092      	lsls	r2, r2, #2
 80027b6:	4093      	lsls	r3, r2
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80027be:	4937      	ldr	r1, [pc, #220]	@ (800289c <HAL_GPIO_Init+0x2fc>)
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	089b      	lsrs	r3, r3, #2
 80027c4:	3302      	adds	r3, #2
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027cc:	4b3b      	ldr	r3, [pc, #236]	@ (80028bc <HAL_GPIO_Init+0x31c>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	43db      	mvns	r3, r3
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	4013      	ands	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d003      	beq.n	80027f0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80027f0:	4a32      	ldr	r2, [pc, #200]	@ (80028bc <HAL_GPIO_Init+0x31c>)
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027f6:	4b31      	ldr	r3, [pc, #196]	@ (80028bc <HAL_GPIO_Init+0x31c>)
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	43db      	mvns	r3, r3
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	4013      	ands	r3, r2
 8002804:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4313      	orrs	r3, r2
 8002818:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800281a:	4a28      	ldr	r2, [pc, #160]	@ (80028bc <HAL_GPIO_Init+0x31c>)
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002820:	4b26      	ldr	r3, [pc, #152]	@ (80028bc <HAL_GPIO_Init+0x31c>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	43db      	mvns	r3, r3
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	4013      	ands	r3, r2
 800282e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d003      	beq.n	8002844 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	4313      	orrs	r3, r2
 8002842:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002844:	4a1d      	ldr	r2, [pc, #116]	@ (80028bc <HAL_GPIO_Init+0x31c>)
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800284a:	4b1c      	ldr	r3, [pc, #112]	@ (80028bc <HAL_GPIO_Init+0x31c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	43db      	mvns	r3, r3
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	4013      	ands	r3, r2
 8002858:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d003      	beq.n	800286e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	4313      	orrs	r3, r2
 800286c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800286e:	4a13      	ldr	r2, [pc, #76]	@ (80028bc <HAL_GPIO_Init+0x31c>)
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	3301      	adds	r3, #1
 8002878:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	fa22 f303 	lsr.w	r3, r2, r3
 8002884:	2b00      	cmp	r3, #0
 8002886:	f47f ae97 	bne.w	80025b8 <HAL_GPIO_Init+0x18>
  }
}
 800288a:	bf00      	nop
 800288c:	bf00      	nop
 800288e:	371c      	adds	r7, #28
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	40023800 	.word	0x40023800
 800289c:	40010000 	.word	0x40010000
 80028a0:	40020000 	.word	0x40020000
 80028a4:	40020400 	.word	0x40020400
 80028a8:	40020800 	.word	0x40020800
 80028ac:	40020c00 	.word	0x40020c00
 80028b0:	40021000 	.word	0x40021000
 80028b4:	40021400 	.word	0x40021400
 80028b8:	40021800 	.word	0x40021800
 80028bc:	40010400 	.word	0x40010400

080028c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	460b      	mov	r3, r1
 80028ca:	807b      	strh	r3, [r7, #2]
 80028cc:	4613      	mov	r3, r2
 80028ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028d0:	787b      	ldrb	r3, [r7, #1]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028d6:	887a      	ldrh	r2, [r7, #2]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80028dc:	e003      	b.n	80028e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80028de:	887b      	ldrh	r3, [r7, #2]
 80028e0:	041a      	lsls	r2, r3, #16
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	619a      	str	r2, [r3, #24]
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr

080028f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	4603      	mov	r3, r0
 80028f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80028fa:	4b08      	ldr	r3, [pc, #32]	@ (800291c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028fc:	695a      	ldr	r2, [r3, #20]
 80028fe:	88fb      	ldrh	r3, [r7, #6]
 8002900:	4013      	ands	r3, r2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d006      	beq.n	8002914 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002906:	4a05      	ldr	r2, [pc, #20]	@ (800291c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002908:	88fb      	ldrh	r3, [r7, #6]
 800290a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800290c:	88fb      	ldrh	r3, [r7, #6]
 800290e:	4618      	mov	r0, r3
 8002910:	f7fe fcd8 	bl	80012c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002914:	bf00      	nop
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40010400 	.word	0x40010400

08002920 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e12b      	b.n	8002b8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d106      	bne.n	800294c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7fe fd80 	bl	800144c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2224      	movs	r2, #36	@ 0x24
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 0201 	bic.w	r2, r2, #1
 8002962:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002972:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002982:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002984:	f001 fcf2 	bl	800436c <HAL_RCC_GetPCLK1Freq>
 8002988:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	4a81      	ldr	r2, [pc, #516]	@ (8002b94 <HAL_I2C_Init+0x274>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d807      	bhi.n	80029a4 <HAL_I2C_Init+0x84>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4a80      	ldr	r2, [pc, #512]	@ (8002b98 <HAL_I2C_Init+0x278>)
 8002998:	4293      	cmp	r3, r2
 800299a:	bf94      	ite	ls
 800299c:	2301      	movls	r3, #1
 800299e:	2300      	movhi	r3, #0
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	e006      	b.n	80029b2 <HAL_I2C_Init+0x92>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4a7d      	ldr	r2, [pc, #500]	@ (8002b9c <HAL_I2C_Init+0x27c>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	bf94      	ite	ls
 80029ac:	2301      	movls	r3, #1
 80029ae:	2300      	movhi	r3, #0
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e0e7      	b.n	8002b8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	4a78      	ldr	r2, [pc, #480]	@ (8002ba0 <HAL_I2C_Init+0x280>)
 80029be:	fba2 2303 	umull	r2, r3, r2, r3
 80029c2:	0c9b      	lsrs	r3, r3, #18
 80029c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68ba      	ldr	r2, [r7, #8]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	4a6a      	ldr	r2, [pc, #424]	@ (8002b94 <HAL_I2C_Init+0x274>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d802      	bhi.n	80029f4 <HAL_I2C_Init+0xd4>
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	3301      	adds	r3, #1
 80029f2:	e009      	b.n	8002a08 <HAL_I2C_Init+0xe8>
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80029fa:	fb02 f303 	mul.w	r3, r2, r3
 80029fe:	4a69      	ldr	r2, [pc, #420]	@ (8002ba4 <HAL_I2C_Init+0x284>)
 8002a00:	fba2 2303 	umull	r2, r3, r2, r3
 8002a04:	099b      	lsrs	r3, r3, #6
 8002a06:	3301      	adds	r3, #1
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6812      	ldr	r2, [r2, #0]
 8002a0c:	430b      	orrs	r3, r1
 8002a0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002a1a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	495c      	ldr	r1, [pc, #368]	@ (8002b94 <HAL_I2C_Init+0x274>)
 8002a24:	428b      	cmp	r3, r1
 8002a26:	d819      	bhi.n	8002a5c <HAL_I2C_Init+0x13c>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	1e59      	subs	r1, r3, #1
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a36:	1c59      	adds	r1, r3, #1
 8002a38:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002a3c:	400b      	ands	r3, r1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00a      	beq.n	8002a58 <HAL_I2C_Init+0x138>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	1e59      	subs	r1, r3, #1
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a50:	3301      	adds	r3, #1
 8002a52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a56:	e051      	b.n	8002afc <HAL_I2C_Init+0x1dc>
 8002a58:	2304      	movs	r3, #4
 8002a5a:	e04f      	b.n	8002afc <HAL_I2C_Init+0x1dc>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d111      	bne.n	8002a88 <HAL_I2C_Init+0x168>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	1e58      	subs	r0, r3, #1
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6859      	ldr	r1, [r3, #4]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	440b      	add	r3, r1
 8002a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a76:	3301      	adds	r3, #1
 8002a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	bf0c      	ite	eq
 8002a80:	2301      	moveq	r3, #1
 8002a82:	2300      	movne	r3, #0
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	e012      	b.n	8002aae <HAL_I2C_Init+0x18e>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	1e58      	subs	r0, r3, #1
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6859      	ldr	r1, [r3, #4]
 8002a90:	460b      	mov	r3, r1
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	440b      	add	r3, r1
 8002a96:	0099      	lsls	r1, r3, #2
 8002a98:	440b      	add	r3, r1
 8002a9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	bf0c      	ite	eq
 8002aa8:	2301      	moveq	r3, #1
 8002aaa:	2300      	movne	r3, #0
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <HAL_I2C_Init+0x196>
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e022      	b.n	8002afc <HAL_I2C_Init+0x1dc>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10e      	bne.n	8002adc <HAL_I2C_Init+0x1bc>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	1e58      	subs	r0, r3, #1
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6859      	ldr	r1, [r3, #4]
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	440b      	add	r3, r1
 8002acc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ad6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ada:	e00f      	b.n	8002afc <HAL_I2C_Init+0x1dc>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	1e58      	subs	r0, r3, #1
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6859      	ldr	r1, [r3, #4]
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	440b      	add	r3, r1
 8002aea:	0099      	lsls	r1, r3, #2
 8002aec:	440b      	add	r3, r1
 8002aee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002af2:	3301      	adds	r3, #1
 8002af4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002af8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	6809      	ldr	r1, [r1, #0]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69da      	ldr	r2, [r3, #28]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	431a      	orrs	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002b2a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6911      	ldr	r1, [r2, #16]
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	68d2      	ldr	r2, [r2, #12]
 8002b36:	4311      	orrs	r1, r2
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	6812      	ldr	r2, [r2, #0]
 8002b3c:	430b      	orrs	r3, r1
 8002b3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	695a      	ldr	r2, [r3, #20]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f042 0201 	orr.w	r2, r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2220      	movs	r2, #32
 8002b76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	000186a0 	.word	0x000186a0
 8002b98:	001e847f 	.word	0x001e847f
 8002b9c:	003d08ff 	.word	0x003d08ff
 8002ba0:	431bde83 	.word	0x431bde83
 8002ba4:	10624dd3 	.word	0x10624dd3

08002ba8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b088      	sub	sp, #32
 8002bac:	af02      	add	r7, sp, #8
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	607a      	str	r2, [r7, #4]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	817b      	strh	r3, [r7, #10]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bbc:	f7fe fe24 	bl	8001808 <HAL_GetTick>
 8002bc0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b20      	cmp	r3, #32
 8002bcc:	f040 80e0 	bne.w	8002d90 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	2319      	movs	r3, #25
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	4970      	ldr	r1, [pc, #448]	@ (8002d9c <HAL_I2C_Master_Transmit+0x1f4>)
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 fc64 	bl	80034a8 <I2C_WaitOnFlagUntilTimeout>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002be6:	2302      	movs	r3, #2
 8002be8:	e0d3      	b.n	8002d92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d101      	bne.n	8002bf8 <HAL_I2C_Master_Transmit+0x50>
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	e0cc      	b.n	8002d92 <HAL_I2C_Master_Transmit+0x1ea>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d007      	beq.n	8002c1e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f042 0201 	orr.w	r2, r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2221      	movs	r2, #33	@ 0x21
 8002c32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2210      	movs	r2, #16
 8002c3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	893a      	ldrh	r2, [r7, #8]
 8002c4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	4a50      	ldr	r2, [pc, #320]	@ (8002da0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002c5e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c60:	8979      	ldrh	r1, [r7, #10]
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	6a3a      	ldr	r2, [r7, #32]
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f000 face 	bl	8003208 <I2C_MasterRequestWrite>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e08d      	b.n	8002d92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c76:	2300      	movs	r3, #0
 8002c78:	613b      	str	r3, [r7, #16]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	613b      	str	r3, [r7, #16]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	613b      	str	r3, [r7, #16]
 8002c8a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c8c:	e066      	b.n	8002d5c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	6a39      	ldr	r1, [r7, #32]
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 fd22 	bl	80036dc <I2C_WaitOnTXEFlagUntilTimeout>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00d      	beq.n	8002cba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	d107      	bne.n	8002cb6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e06b      	b.n	8002d92 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cbe:	781a      	ldrb	r2, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cca:	1c5a      	adds	r2, r3, #1
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b04      	cmp	r3, #4
 8002cf6:	d11b      	bne.n	8002d30 <HAL_I2C_Master_Transmit+0x188>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d017      	beq.n	8002d30 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d04:	781a      	ldrb	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d10:	1c5a      	adds	r2, r3, #1
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	6a39      	ldr	r1, [r7, #32]
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f000 fd19 	bl	800376c <I2C_WaitOnBTFFlagUntilTimeout>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00d      	beq.n	8002d5c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d44:	2b04      	cmp	r3, #4
 8002d46:	d107      	bne.n	8002d58 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d56:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e01a      	b.n	8002d92 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d194      	bne.n	8002c8e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2220      	movs	r2, #32
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	e000      	b.n	8002d92 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d90:	2302      	movs	r3, #2
  }
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3718      	adds	r7, #24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	00100002 	.word	0x00100002
 8002da0:	ffff0000 	.word	0xffff0000

08002da4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b08c      	sub	sp, #48	@ 0x30
 8002da8:	af02      	add	r7, sp, #8
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	607a      	str	r2, [r7, #4]
 8002dae:	461a      	mov	r2, r3
 8002db0:	460b      	mov	r3, r1
 8002db2:	817b      	strh	r3, [r7, #10]
 8002db4:	4613      	mov	r3, r2
 8002db6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002db8:	f7fe fd26 	bl	8001808 <HAL_GetTick>
 8002dbc:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b20      	cmp	r3, #32
 8002dc8:	f040 8217 	bne.w	80031fa <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	2319      	movs	r3, #25
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	497c      	ldr	r1, [pc, #496]	@ (8002fc8 <HAL_I2C_Master_Receive+0x224>)
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 fb66 	bl	80034a8 <I2C_WaitOnFlagUntilTimeout>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002de2:	2302      	movs	r3, #2
 8002de4:	e20a      	b.n	80031fc <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d101      	bne.n	8002df4 <HAL_I2C_Master_Receive+0x50>
 8002df0:	2302      	movs	r3, #2
 8002df2:	e203      	b.n	80031fc <HAL_I2C_Master_Receive+0x458>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d007      	beq.n	8002e1a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f042 0201 	orr.w	r2, r2, #1
 8002e18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e28:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2222      	movs	r2, #34	@ 0x22
 8002e2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2210      	movs	r2, #16
 8002e36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	893a      	ldrh	r2, [r7, #8]
 8002e4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	4a5c      	ldr	r2, [pc, #368]	@ (8002fcc <HAL_I2C_Master_Receive+0x228>)
 8002e5a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e5c:	8979      	ldrh	r1, [r7, #10]
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 fa52 	bl	800330c <I2C_MasterRequestRead>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e1c4      	b.n	80031fc <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d113      	bne.n	8002ea2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	623b      	str	r3, [r7, #32]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	623b      	str	r3, [r7, #32]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	623b      	str	r3, [r7, #32]
 8002e8e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	e198      	b.n	80031d4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d11b      	bne.n	8002ee2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002eb8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eba:	2300      	movs	r3, #0
 8002ebc:	61fb      	str	r3, [r7, #28]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	61fb      	str	r3, [r7, #28]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	61fb      	str	r3, [r7, #28]
 8002ece:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	e178      	b.n	80031d4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d11b      	bne.n	8002f22 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ef8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61bb      	str	r3, [r7, #24]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	61bb      	str	r3, [r7, #24]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	61bb      	str	r3, [r7, #24]
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	e158      	b.n	80031d4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f32:	2300      	movs	r3, #0
 8002f34:	617b      	str	r3, [r7, #20]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	617b      	str	r3, [r7, #20]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	617b      	str	r3, [r7, #20]
 8002f46:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002f48:	e144      	b.n	80031d4 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f4e:	2b03      	cmp	r3, #3
 8002f50:	f200 80f1 	bhi.w	8003136 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d123      	bne.n	8002fa4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f5e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 fc4b 	bl	80037fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e145      	b.n	80031fc <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	691a      	ldr	r2, [r3, #16]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7a:	b2d2      	uxtb	r2, r2
 8002f7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f82:	1c5a      	adds	r2, r3, #1
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002fa2:	e117      	b.n	80031d4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d14e      	bne.n	800304a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fae:	9300      	str	r3, [sp, #0]
 8002fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	4906      	ldr	r1, [pc, #24]	@ (8002fd0 <HAL_I2C_Master_Receive+0x22c>)
 8002fb6:	68f8      	ldr	r0, [r7, #12]
 8002fb8:	f000 fa76 	bl	80034a8 <I2C_WaitOnFlagUntilTimeout>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d008      	beq.n	8002fd4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e11a      	b.n	80031fc <HAL_I2C_Master_Receive+0x458>
 8002fc6:	bf00      	nop
 8002fc8:	00100002 	.word	0x00100002
 8002fcc:	ffff0000 	.word	0xffff0000
 8002fd0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fe2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	691a      	ldr	r2, [r3, #16]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff6:	1c5a      	adds	r2, r3, #1
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003000:	3b01      	subs	r3, #1
 8003002:	b29a      	uxth	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800300c:	b29b      	uxth	r3, r3
 800300e:	3b01      	subs	r3, #1
 8003010:	b29a      	uxth	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	691a      	ldr	r2, [r3, #16]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003020:	b2d2      	uxtb	r2, r2
 8003022:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003028:	1c5a      	adds	r2, r3, #1
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003032:	3b01      	subs	r3, #1
 8003034:	b29a      	uxth	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800303e:	b29b      	uxth	r3, r3
 8003040:	3b01      	subs	r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003048:	e0c4      	b.n	80031d4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800304a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003050:	2200      	movs	r2, #0
 8003052:	496c      	ldr	r1, [pc, #432]	@ (8003204 <HAL_I2C_Master_Receive+0x460>)
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 fa27 	bl	80034a8 <I2C_WaitOnFlagUntilTimeout>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e0cb      	b.n	80031fc <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003072:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	691a      	ldr	r2, [r3, #16]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307e:	b2d2      	uxtb	r2, r2
 8003080:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003086:	1c5a      	adds	r2, r3, #1
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003090:	3b01      	subs	r3, #1
 8003092:	b29a      	uxth	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800309c:	b29b      	uxth	r3, r3
 800309e:	3b01      	subs	r3, #1
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ac:	2200      	movs	r2, #0
 80030ae:	4955      	ldr	r1, [pc, #340]	@ (8003204 <HAL_I2C_Master_Receive+0x460>)
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f000 f9f9 	bl	80034a8 <I2C_WaitOnFlagUntilTimeout>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e09d      	b.n	80031fc <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	691a      	ldr	r2, [r3, #16]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030da:	b2d2      	uxtb	r2, r2
 80030dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e2:	1c5a      	adds	r2, r3, #1
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ec:	3b01      	subs	r3, #1
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	3b01      	subs	r3, #1
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	691a      	ldr	r2, [r3, #16]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310c:	b2d2      	uxtb	r2, r2
 800310e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003114:	1c5a      	adds	r2, r3, #1
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800311e:	3b01      	subs	r3, #1
 8003120:	b29a      	uxth	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800312a:	b29b      	uxth	r3, r3
 800312c:	3b01      	subs	r3, #1
 800312e:	b29a      	uxth	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003134:	e04e      	b.n	80031d4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003136:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003138:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 fb5e 	bl	80037fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e058      	b.n	80031fc <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	691a      	ldr	r2, [r3, #16]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315c:	1c5a      	adds	r2, r3, #1
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003166:	3b01      	subs	r3, #1
 8003168:	b29a      	uxth	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003172:	b29b      	uxth	r3, r3
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	f003 0304 	and.w	r3, r3, #4
 8003186:	2b04      	cmp	r3, #4
 8003188:	d124      	bne.n	80031d4 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800318e:	2b03      	cmp	r3, #3
 8003190:	d107      	bne.n	80031a2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031a0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	691a      	ldr	r2, [r3, #16]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b4:	1c5a      	adds	r2, r3, #1
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031be:	3b01      	subs	r3, #1
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	3b01      	subs	r3, #1
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f47f aeb6 	bne.w	8002f4a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2220      	movs	r2, #32
 80031e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80031f6:	2300      	movs	r3, #0
 80031f8:	e000      	b.n	80031fc <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80031fa:	2302      	movs	r3, #2
  }
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3728      	adds	r7, #40	@ 0x28
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	00010004 	.word	0x00010004

08003208 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b088      	sub	sp, #32
 800320c:	af02      	add	r7, sp, #8
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	607a      	str	r2, [r7, #4]
 8003212:	603b      	str	r3, [r7, #0]
 8003214:	460b      	mov	r3, r1
 8003216:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800321c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	2b08      	cmp	r3, #8
 8003222:	d006      	beq.n	8003232 <I2C_MasterRequestWrite+0x2a>
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d003      	beq.n	8003232 <I2C_MasterRequestWrite+0x2a>
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003230:	d108      	bne.n	8003244 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	e00b      	b.n	800325c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003248:	2b12      	cmp	r3, #18
 800324a:	d107      	bne.n	800325c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800325a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f000 f91d 	bl	80034a8 <I2C_WaitOnFlagUntilTimeout>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00d      	beq.n	8003290 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800327e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003282:	d103      	bne.n	800328c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800328a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e035      	b.n	80032fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003298:	d108      	bne.n	80032ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800329a:	897b      	ldrh	r3, [r7, #10]
 800329c:	b2db      	uxtb	r3, r3
 800329e:	461a      	mov	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80032a8:	611a      	str	r2, [r3, #16]
 80032aa:	e01b      	b.n	80032e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80032ac:	897b      	ldrh	r3, [r7, #10]
 80032ae:	11db      	asrs	r3, r3, #7
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	f003 0306 	and.w	r3, r3, #6
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	f063 030f 	orn	r3, r3, #15
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	490e      	ldr	r1, [pc, #56]	@ (8003304 <I2C_MasterRequestWrite+0xfc>)
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 f966 	bl	800359c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e010      	b.n	80032fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80032da:	897b      	ldrh	r3, [r7, #10]
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	4907      	ldr	r1, [pc, #28]	@ (8003308 <I2C_MasterRequestWrite+0x100>)
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f000 f956 	bl	800359c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e000      	b.n	80032fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3718      	adds	r7, #24
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	00010008 	.word	0x00010008
 8003308:	00010002 	.word	0x00010002

0800330c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b088      	sub	sp, #32
 8003310:	af02      	add	r7, sp, #8
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	607a      	str	r2, [r7, #4]
 8003316:	603b      	str	r3, [r7, #0]
 8003318:	460b      	mov	r3, r1
 800331a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003320:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003330:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	2b08      	cmp	r3, #8
 8003336:	d006      	beq.n	8003346 <I2C_MasterRequestRead+0x3a>
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d003      	beq.n	8003346 <I2C_MasterRequestRead+0x3a>
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003344:	d108      	bne.n	8003358 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	e00b      	b.n	8003370 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335c:	2b11      	cmp	r3, #17
 800335e:	d107      	bne.n	8003370 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800336e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	9300      	str	r3, [sp, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f000 f893 	bl	80034a8 <I2C_WaitOnFlagUntilTimeout>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00d      	beq.n	80033a4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003392:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003396:	d103      	bne.n	80033a0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800339e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e079      	b.n	8003498 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033ac:	d108      	bne.n	80033c0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80033ae:	897b      	ldrh	r3, [r7, #10]
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	f043 0301 	orr.w	r3, r3, #1
 80033b6:	b2da      	uxtb	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	611a      	str	r2, [r3, #16]
 80033be:	e05f      	b.n	8003480 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80033c0:	897b      	ldrh	r3, [r7, #10]
 80033c2:	11db      	asrs	r3, r3, #7
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	f003 0306 	and.w	r3, r3, #6
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	f063 030f 	orn	r3, r3, #15
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	4930      	ldr	r1, [pc, #192]	@ (80034a0 <I2C_MasterRequestRead+0x194>)
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f000 f8dc 	bl	800359c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e054      	b.n	8003498 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80033ee:	897b      	ldrh	r3, [r7, #10]
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	4929      	ldr	r1, [pc, #164]	@ (80034a4 <I2C_MasterRequestRead+0x198>)
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f000 f8cc 	bl	800359c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e044      	b.n	8003498 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800340e:	2300      	movs	r3, #0
 8003410:	613b      	str	r3, [r7, #16]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	613b      	str	r3, [r7, #16]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	613b      	str	r3, [r7, #16]
 8003422:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003432:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	9300      	str	r3, [sp, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f000 f831 	bl	80034a8 <I2C_WaitOnFlagUntilTimeout>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00d      	beq.n	8003468 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003456:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800345a:	d103      	bne.n	8003464 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003462:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e017      	b.n	8003498 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003468:	897b      	ldrh	r3, [r7, #10]
 800346a:	11db      	asrs	r3, r3, #7
 800346c:	b2db      	uxtb	r3, r3
 800346e:	f003 0306 	and.w	r3, r3, #6
 8003472:	b2db      	uxtb	r3, r3
 8003474:	f063 030e 	orn	r3, r3, #14
 8003478:	b2da      	uxtb	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	4907      	ldr	r1, [pc, #28]	@ (80034a4 <I2C_MasterRequestRead+0x198>)
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f000 f888 	bl	800359c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e000      	b.n	8003498 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	00010008 	.word	0x00010008
 80034a4:	00010002 	.word	0x00010002

080034a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	603b      	str	r3, [r7, #0]
 80034b4:	4613      	mov	r3, r2
 80034b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034b8:	e048      	b.n	800354c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80034c0:	d044      	beq.n	800354c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034c2:	f7fe f9a1 	bl	8001808 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d302      	bcc.n	80034d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d139      	bne.n	800354c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	0c1b      	lsrs	r3, r3, #16
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d10d      	bne.n	80034fe <I2C_WaitOnFlagUntilTimeout+0x56>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	43da      	mvns	r2, r3
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	4013      	ands	r3, r2
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	bf0c      	ite	eq
 80034f4:	2301      	moveq	r3, #1
 80034f6:	2300      	movne	r3, #0
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	461a      	mov	r2, r3
 80034fc:	e00c      	b.n	8003518 <I2C_WaitOnFlagUntilTimeout+0x70>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	43da      	mvns	r2, r3
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	4013      	ands	r3, r2
 800350a:	b29b      	uxth	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	bf0c      	ite	eq
 8003510:	2301      	moveq	r3, #1
 8003512:	2300      	movne	r3, #0
 8003514:	b2db      	uxtb	r3, r3
 8003516:	461a      	mov	r2, r3
 8003518:	79fb      	ldrb	r3, [r7, #7]
 800351a:	429a      	cmp	r2, r3
 800351c:	d116      	bne.n	800354c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2220      	movs	r2, #32
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003538:	f043 0220 	orr.w	r2, r3, #32
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e023      	b.n	8003594 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	0c1b      	lsrs	r3, r3, #16
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b01      	cmp	r3, #1
 8003554:	d10d      	bne.n	8003572 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	695b      	ldr	r3, [r3, #20]
 800355c:	43da      	mvns	r2, r3
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	4013      	ands	r3, r2
 8003562:	b29b      	uxth	r3, r3
 8003564:	2b00      	cmp	r3, #0
 8003566:	bf0c      	ite	eq
 8003568:	2301      	moveq	r3, #1
 800356a:	2300      	movne	r3, #0
 800356c:	b2db      	uxtb	r3, r3
 800356e:	461a      	mov	r2, r3
 8003570:	e00c      	b.n	800358c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	43da      	mvns	r2, r3
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	4013      	ands	r3, r2
 800357e:	b29b      	uxth	r3, r3
 8003580:	2b00      	cmp	r3, #0
 8003582:	bf0c      	ite	eq
 8003584:	2301      	moveq	r3, #1
 8003586:	2300      	movne	r3, #0
 8003588:	b2db      	uxtb	r3, r3
 800358a:	461a      	mov	r2, r3
 800358c:	79fb      	ldrb	r3, [r7, #7]
 800358e:	429a      	cmp	r2, r3
 8003590:	d093      	beq.n	80034ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
 80035a8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035aa:	e071      	b.n	8003690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035ba:	d123      	bne.n	8003604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035ca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80035d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2220      	movs	r2, #32
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f0:	f043 0204 	orr.w	r2, r3, #4
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e067      	b.n	80036d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800360a:	d041      	beq.n	8003690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800360c:	f7fe f8fc 	bl	8001808 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	429a      	cmp	r2, r3
 800361a:	d302      	bcc.n	8003622 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d136      	bne.n	8003690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	0c1b      	lsrs	r3, r3, #16
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b01      	cmp	r3, #1
 800362a:	d10c      	bne.n	8003646 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	43da      	mvns	r2, r3
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	4013      	ands	r3, r2
 8003638:	b29b      	uxth	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	bf14      	ite	ne
 800363e:	2301      	movne	r3, #1
 8003640:	2300      	moveq	r3, #0
 8003642:	b2db      	uxtb	r3, r3
 8003644:	e00b      	b.n	800365e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	43da      	mvns	r2, r3
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	4013      	ands	r3, r2
 8003652:	b29b      	uxth	r3, r3
 8003654:	2b00      	cmp	r3, #0
 8003656:	bf14      	ite	ne
 8003658:	2301      	movne	r3, #1
 800365a:	2300      	moveq	r3, #0
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d016      	beq.n	8003690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2220      	movs	r2, #32
 800366c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367c:	f043 0220 	orr.w	r2, r3, #32
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e021      	b.n	80036d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	0c1b      	lsrs	r3, r3, #16
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b01      	cmp	r3, #1
 8003698:	d10c      	bne.n	80036b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	43da      	mvns	r2, r3
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	4013      	ands	r3, r2
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	bf14      	ite	ne
 80036ac:	2301      	movne	r3, #1
 80036ae:	2300      	moveq	r3, #0
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	e00b      	b.n	80036cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	43da      	mvns	r2, r3
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	4013      	ands	r3, r2
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	bf14      	ite	ne
 80036c6:	2301      	movne	r3, #1
 80036c8:	2300      	moveq	r3, #0
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f47f af6d 	bne.w	80035ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036e8:	e034      	b.n	8003754 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 f8e3 	bl	80038b6 <I2C_IsAcknowledgeFailed>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e034      	b.n	8003764 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003700:	d028      	beq.n	8003754 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003702:	f7fe f881 	bl	8001808 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	429a      	cmp	r2, r3
 8003710:	d302      	bcc.n	8003718 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d11d      	bne.n	8003754 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003722:	2b80      	cmp	r3, #128	@ 0x80
 8003724:	d016      	beq.n	8003754 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2220      	movs	r2, #32
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003740:	f043 0220 	orr.w	r2, r3, #32
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e007      	b.n	8003764 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800375e:	2b80      	cmp	r3, #128	@ 0x80
 8003760:	d1c3      	bne.n	80036ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003778:	e034      	b.n	80037e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f000 f89b 	bl	80038b6 <I2C_IsAcknowledgeFailed>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e034      	b.n	80037f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003790:	d028      	beq.n	80037e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003792:	f7fe f839 	bl	8001808 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d302      	bcc.n	80037a8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d11d      	bne.n	80037e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	f003 0304 	and.w	r3, r3, #4
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	d016      	beq.n	80037e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2220      	movs	r2, #32
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d0:	f043 0220 	orr.w	r2, r3, #32
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e007      	b.n	80037f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	f003 0304 	and.w	r3, r3, #4
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	d1c3      	bne.n	800377a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003808:	e049      	b.n	800389e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	f003 0310 	and.w	r3, r3, #16
 8003814:	2b10      	cmp	r3, #16
 8003816:	d119      	bne.n	800384c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f06f 0210 	mvn.w	r2, #16
 8003820:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2220      	movs	r2, #32
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e030      	b.n	80038ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800384c:	f7fd ffdc 	bl	8001808 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	429a      	cmp	r2, r3
 800385a:	d302      	bcc.n	8003862 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d11d      	bne.n	800389e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800386c:	2b40      	cmp	r3, #64	@ 0x40
 800386e:	d016      	beq.n	800389e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2220      	movs	r2, #32
 800387a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388a:	f043 0220 	orr.w	r2, r3, #32
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e007      	b.n	80038ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038a8:	2b40      	cmp	r3, #64	@ 0x40
 80038aa:	d1ae      	bne.n	800380a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b083      	sub	sp, #12
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038cc:	d11b      	bne.n	8003906 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80038d6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2220      	movs	r2, #32
 80038e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f2:	f043 0204 	orr.w	r2, r3, #4
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e000      	b.n	8003908 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	bc80      	pop	{r7}
 8003910:	4770      	bx	lr
	...

08003914 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b088      	sub	sp, #32
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e31d      	b.n	8003f62 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003926:	4b94      	ldr	r3, [pc, #592]	@ (8003b78 <HAL_RCC_OscConfig+0x264>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 030c 	and.w	r3, r3, #12
 800392e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003930:	4b91      	ldr	r3, [pc, #580]	@ (8003b78 <HAL_RCC_OscConfig+0x264>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003938:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	2b00      	cmp	r3, #0
 8003944:	d07b      	beq.n	8003a3e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	2b08      	cmp	r3, #8
 800394a:	d006      	beq.n	800395a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	2b0c      	cmp	r3, #12
 8003950:	d10f      	bne.n	8003972 <HAL_RCC_OscConfig+0x5e>
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003958:	d10b      	bne.n	8003972 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800395a:	4b87      	ldr	r3, [pc, #540]	@ (8003b78 <HAL_RCC_OscConfig+0x264>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d06a      	beq.n	8003a3c <HAL_RCC_OscConfig+0x128>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d166      	bne.n	8003a3c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e2f7      	b.n	8003f62 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d106      	bne.n	8003988 <HAL_RCC_OscConfig+0x74>
 800397a:	4b7f      	ldr	r3, [pc, #508]	@ (8003b78 <HAL_RCC_OscConfig+0x264>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a7e      	ldr	r2, [pc, #504]	@ (8003b78 <HAL_RCC_OscConfig+0x264>)
 8003980:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003984:	6013      	str	r3, [r2, #0]
 8003986:	e02d      	b.n	80039e4 <HAL_RCC_OscConfig+0xd0>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d10c      	bne.n	80039aa <HAL_RCC_OscConfig+0x96>
 8003990:	4b79      	ldr	r3, [pc, #484]	@ (8003b78 <HAL_RCC_OscConfig+0x264>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a78      	ldr	r2, [pc, #480]	@ (8003b78 <HAL_RCC_OscConfig+0x264>)
 8003996:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800399a:	6013      	str	r3, [r2, #0]
 800399c:	4b76      	ldr	r3, [pc, #472]	@ (8003b78 <HAL_RCC_OscConfig+0x264>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a75      	ldr	r2, [pc, #468]	@ (8003b78 <HAL_RCC_OscConfig+0x264>)
 80039a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039a6:	6013      	str	r3, [r2, #0]
 80039a8:	e01c      	b.n	80039e4 <HAL_RCC_OscConfig+0xd0>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	2b05      	cmp	r3, #5
 80039b0:	d10c      	bne.n	80039cc <HAL_RCC_OscConfig+0xb8>
 80039b2:	4b71      	ldr	r3, [pc, #452]	@ (8003b78 <HAL_RCC_OscConfig+0x264>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a70      	ldr	r2, [pc, #448]	@ (8003b78 <HAL_RCC_OscConfig+0x264>)
 80039b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039bc:	6013      	str	r3, [r2, #0]
 80039be:	4b6e      	ldr	r3, [pc, #440]	@ (8003b78 <HAL_RCC_OscConfig+0x264>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a6d      	ldr	r2, [pc, #436]	@ (8003b78 <HAL_RCC_OscConfig+0x264>)
 80039c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039c8:	6013      	str	r3, [r2, #0]
 80039ca:	e00b      	b.n	80039e4 <HAL_RCC_OscConfig+0xd0>
 80039cc:	4b6a      	ldr	r3, [pc, #424]	@ (8003b78 <HAL_RCC_OscConfig+0x264>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a69      	ldr	r2, [pc, #420]	@ (8003b78 <HAL_RCC_OscConfig+0x264>)
 80039d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039d6:	6013      	str	r3, [r2, #0]
 80039d8:	4b67      	ldr	r3, [pc, #412]	@ (8003b78 <HAL_RCC_OscConfig+0x264>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a66      	ldr	r2, [pc, #408]	@ (8003b78 <HAL_RCC_OscConfig+0x264>)
 80039de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d013      	beq.n	8003a14 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ec:	f7fd ff0c 	bl	8001808 <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80039f2:	e008      	b.n	8003a06 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039f4:	f7fd ff08 	bl	8001808 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b64      	cmp	r3, #100	@ 0x64
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e2ad      	b.n	8003f62 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a06:	4b5c      	ldr	r3, [pc, #368]	@ (8003b78 <HAL_RCC_OscConfig+0x264>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d0f0      	beq.n	80039f4 <HAL_RCC_OscConfig+0xe0>
 8003a12:	e014      	b.n	8003a3e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a14:	f7fd fef8 	bl	8001808 <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a1a:	e008      	b.n	8003a2e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a1c:	f7fd fef4 	bl	8001808 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b64      	cmp	r3, #100	@ 0x64
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e299      	b.n	8003f62 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a2e:	4b52      	ldr	r3, [pc, #328]	@ (8003b78 <HAL_RCC_OscConfig+0x264>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1f0      	bne.n	8003a1c <HAL_RCC_OscConfig+0x108>
 8003a3a:	e000      	b.n	8003a3e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d05a      	beq.n	8003b00 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	2b04      	cmp	r3, #4
 8003a4e:	d005      	beq.n	8003a5c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	2b0c      	cmp	r3, #12
 8003a54:	d119      	bne.n	8003a8a <HAL_RCC_OscConfig+0x176>
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d116      	bne.n	8003a8a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a5c:	4b46      	ldr	r3, [pc, #280]	@ (8003b78 <HAL_RCC_OscConfig+0x264>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d005      	beq.n	8003a74 <HAL_RCC_OscConfig+0x160>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d001      	beq.n	8003a74 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e276      	b.n	8003f62 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a74:	4b40      	ldr	r3, [pc, #256]	@ (8003b78 <HAL_RCC_OscConfig+0x264>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	021b      	lsls	r3, r3, #8
 8003a82:	493d      	ldr	r1, [pc, #244]	@ (8003b78 <HAL_RCC_OscConfig+0x264>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a88:	e03a      	b.n	8003b00 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d020      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a92:	4b3a      	ldr	r3, [pc, #232]	@ (8003b7c <HAL_RCC_OscConfig+0x268>)
 8003a94:	2201      	movs	r2, #1
 8003a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a98:	f7fd feb6 	bl	8001808 <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aa0:	f7fd feb2 	bl	8001808 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e257      	b.n	8003f62 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ab2:	4b31      	ldr	r3, [pc, #196]	@ (8003b78 <HAL_RCC_OscConfig+0x264>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d0f0      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003abe:	4b2e      	ldr	r3, [pc, #184]	@ (8003b78 <HAL_RCC_OscConfig+0x264>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	021b      	lsls	r3, r3, #8
 8003acc:	492a      	ldr	r1, [pc, #168]	@ (8003b78 <HAL_RCC_OscConfig+0x264>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	604b      	str	r3, [r1, #4]
 8003ad2:	e015      	b.n	8003b00 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ad4:	4b29      	ldr	r3, [pc, #164]	@ (8003b7c <HAL_RCC_OscConfig+0x268>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ada:	f7fd fe95 	bl	8001808 <HAL_GetTick>
 8003ade:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ae0:	e008      	b.n	8003af4 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ae2:	f7fd fe91 	bl	8001808 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d901      	bls.n	8003af4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e236      	b.n	8003f62 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003af4:	4b20      	ldr	r3, [pc, #128]	@ (8003b78 <HAL_RCC_OscConfig+0x264>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1f0      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0310 	and.w	r3, r3, #16
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 80b8 	beq.w	8003c7e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d170      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b14:	4b18      	ldr	r3, [pc, #96]	@ (8003b78 <HAL_RCC_OscConfig+0x264>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d005      	beq.n	8003b2c <HAL_RCC_OscConfig+0x218>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e21a      	b.n	8003f62 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a1a      	ldr	r2, [r3, #32]
 8003b30:	4b11      	ldr	r3, [pc, #68]	@ (8003b78 <HAL_RCC_OscConfig+0x264>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d921      	bls.n	8003b80 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f000 fc27 	bl	8004394 <RCC_SetFlashLatencyFromMSIRange>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d001      	beq.n	8003b50 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e208      	b.n	8003f62 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b50:	4b09      	ldr	r3, [pc, #36]	@ (8003b78 <HAL_RCC_OscConfig+0x264>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	4906      	ldr	r1, [pc, #24]	@ (8003b78 <HAL_RCC_OscConfig+0x264>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b62:	4b05      	ldr	r3, [pc, #20]	@ (8003b78 <HAL_RCC_OscConfig+0x264>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	061b      	lsls	r3, r3, #24
 8003b70:	4901      	ldr	r1, [pc, #4]	@ (8003b78 <HAL_RCC_OscConfig+0x264>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	604b      	str	r3, [r1, #4]
 8003b76:	e020      	b.n	8003bba <HAL_RCC_OscConfig+0x2a6>
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b80:	4b99      	ldr	r3, [pc, #612]	@ (8003de8 <HAL_RCC_OscConfig+0x4d4>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	4996      	ldr	r1, [pc, #600]	@ (8003de8 <HAL_RCC_OscConfig+0x4d4>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b92:	4b95      	ldr	r3, [pc, #596]	@ (8003de8 <HAL_RCC_OscConfig+0x4d4>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	061b      	lsls	r3, r3, #24
 8003ba0:	4991      	ldr	r1, [pc, #580]	@ (8003de8 <HAL_RCC_OscConfig+0x4d4>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 fbf2 	bl	8004394 <RCC_SetFlashLatencyFromMSIRange>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e1d3      	b.n	8003f62 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	0b5b      	lsrs	r3, r3, #13
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003bc6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003bca:	4a87      	ldr	r2, [pc, #540]	@ (8003de8 <HAL_RCC_OscConfig+0x4d4>)
 8003bcc:	6892      	ldr	r2, [r2, #8]
 8003bce:	0912      	lsrs	r2, r2, #4
 8003bd0:	f002 020f 	and.w	r2, r2, #15
 8003bd4:	4985      	ldr	r1, [pc, #532]	@ (8003dec <HAL_RCC_OscConfig+0x4d8>)
 8003bd6:	5c8a      	ldrb	r2, [r1, r2]
 8003bd8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003bda:	4a85      	ldr	r2, [pc, #532]	@ (8003df0 <HAL_RCC_OscConfig+0x4dc>)
 8003bdc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003bde:	4b85      	ldr	r3, [pc, #532]	@ (8003df4 <HAL_RCC_OscConfig+0x4e0>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fd fdc4 	bl	8001770 <HAL_InitTick>
 8003be8:	4603      	mov	r3, r0
 8003bea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003bec:	7bfb      	ldrb	r3, [r7, #15]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d045      	beq.n	8003c7e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8003bf2:	7bfb      	ldrb	r3, [r7, #15]
 8003bf4:	e1b5      	b.n	8003f62 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d029      	beq.n	8003c52 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003bfe:	4b7e      	ldr	r3, [pc, #504]	@ (8003df8 <HAL_RCC_OscConfig+0x4e4>)
 8003c00:	2201      	movs	r2, #1
 8003c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c04:	f7fd fe00 	bl	8001808 <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c0c:	f7fd fdfc 	bl	8001808 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e1a1      	b.n	8003f62 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003c1e:	4b72      	ldr	r3, [pc, #456]	@ (8003de8 <HAL_RCC_OscConfig+0x4d4>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d0f0      	beq.n	8003c0c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c2a:	4b6f      	ldr	r3, [pc, #444]	@ (8003de8 <HAL_RCC_OscConfig+0x4d4>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	496c      	ldr	r1, [pc, #432]	@ (8003de8 <HAL_RCC_OscConfig+0x4d4>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c3c:	4b6a      	ldr	r3, [pc, #424]	@ (8003de8 <HAL_RCC_OscConfig+0x4d4>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	69db      	ldr	r3, [r3, #28]
 8003c48:	061b      	lsls	r3, r3, #24
 8003c4a:	4967      	ldr	r1, [pc, #412]	@ (8003de8 <HAL_RCC_OscConfig+0x4d4>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	604b      	str	r3, [r1, #4]
 8003c50:	e015      	b.n	8003c7e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003c52:	4b69      	ldr	r3, [pc, #420]	@ (8003df8 <HAL_RCC_OscConfig+0x4e4>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c58:	f7fd fdd6 	bl	8001808 <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003c5e:	e008      	b.n	8003c72 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c60:	f7fd fdd2 	bl	8001808 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e177      	b.n	8003f62 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003c72:	4b5d      	ldr	r3, [pc, #372]	@ (8003de8 <HAL_RCC_OscConfig+0x4d4>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1f0      	bne.n	8003c60 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0308 	and.w	r3, r3, #8
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d030      	beq.n	8003cec <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d016      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c92:	4b5a      	ldr	r3, [pc, #360]	@ (8003dfc <HAL_RCC_OscConfig+0x4e8>)
 8003c94:	2201      	movs	r2, #1
 8003c96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c98:	f7fd fdb6 	bl	8001808 <HAL_GetTick>
 8003c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c9e:	e008      	b.n	8003cb2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ca0:	f7fd fdb2 	bl	8001808 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e157      	b.n	8003f62 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cb2:	4b4d      	ldr	r3, [pc, #308]	@ (8003de8 <HAL_RCC_OscConfig+0x4d4>)
 8003cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d0f0      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x38c>
 8003cbe:	e015      	b.n	8003cec <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cc0:	4b4e      	ldr	r3, [pc, #312]	@ (8003dfc <HAL_RCC_OscConfig+0x4e8>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cc6:	f7fd fd9f 	bl	8001808 <HAL_GetTick>
 8003cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003ccc:	e008      	b.n	8003ce0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cce:	f7fd fd9b 	bl	8001808 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d901      	bls.n	8003ce0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e140      	b.n	8003f62 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003ce0:	4b41      	ldr	r3, [pc, #260]	@ (8003de8 <HAL_RCC_OscConfig+0x4d4>)
 8003ce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1f0      	bne.n	8003cce <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0304 	and.w	r3, r3, #4
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f000 80b5 	beq.w	8003e64 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cfe:	4b3a      	ldr	r3, [pc, #232]	@ (8003de8 <HAL_RCC_OscConfig+0x4d4>)
 8003d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10d      	bne.n	8003d26 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d0a:	4b37      	ldr	r3, [pc, #220]	@ (8003de8 <HAL_RCC_OscConfig+0x4d4>)
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0e:	4a36      	ldr	r2, [pc, #216]	@ (8003de8 <HAL_RCC_OscConfig+0x4d4>)
 8003d10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d14:	6253      	str	r3, [r2, #36]	@ 0x24
 8003d16:	4b34      	ldr	r3, [pc, #208]	@ (8003de8 <HAL_RCC_OscConfig+0x4d4>)
 8003d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d1e:	60bb      	str	r3, [r7, #8]
 8003d20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d22:	2301      	movs	r3, #1
 8003d24:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d26:	4b36      	ldr	r3, [pc, #216]	@ (8003e00 <HAL_RCC_OscConfig+0x4ec>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d118      	bne.n	8003d64 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d32:	4b33      	ldr	r3, [pc, #204]	@ (8003e00 <HAL_RCC_OscConfig+0x4ec>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a32      	ldr	r2, [pc, #200]	@ (8003e00 <HAL_RCC_OscConfig+0x4ec>)
 8003d38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d3e:	f7fd fd63 	bl	8001808 <HAL_GetTick>
 8003d42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d44:	e008      	b.n	8003d58 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d46:	f7fd fd5f 	bl	8001808 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b64      	cmp	r3, #100	@ 0x64
 8003d52:	d901      	bls.n	8003d58 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e104      	b.n	8003f62 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d58:	4b29      	ldr	r3, [pc, #164]	@ (8003e00 <HAL_RCC_OscConfig+0x4ec>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d0f0      	beq.n	8003d46 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d106      	bne.n	8003d7a <HAL_RCC_OscConfig+0x466>
 8003d6c:	4b1e      	ldr	r3, [pc, #120]	@ (8003de8 <HAL_RCC_OscConfig+0x4d4>)
 8003d6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d70:	4a1d      	ldr	r2, [pc, #116]	@ (8003de8 <HAL_RCC_OscConfig+0x4d4>)
 8003d72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d76:	6353      	str	r3, [r2, #52]	@ 0x34
 8003d78:	e02d      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4c2>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10c      	bne.n	8003d9c <HAL_RCC_OscConfig+0x488>
 8003d82:	4b19      	ldr	r3, [pc, #100]	@ (8003de8 <HAL_RCC_OscConfig+0x4d4>)
 8003d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d86:	4a18      	ldr	r2, [pc, #96]	@ (8003de8 <HAL_RCC_OscConfig+0x4d4>)
 8003d88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d8c:	6353      	str	r3, [r2, #52]	@ 0x34
 8003d8e:	4b16      	ldr	r3, [pc, #88]	@ (8003de8 <HAL_RCC_OscConfig+0x4d4>)
 8003d90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d92:	4a15      	ldr	r2, [pc, #84]	@ (8003de8 <HAL_RCC_OscConfig+0x4d4>)
 8003d94:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d98:	6353      	str	r3, [r2, #52]	@ 0x34
 8003d9a:	e01c      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4c2>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	2b05      	cmp	r3, #5
 8003da2:	d10c      	bne.n	8003dbe <HAL_RCC_OscConfig+0x4aa>
 8003da4:	4b10      	ldr	r3, [pc, #64]	@ (8003de8 <HAL_RCC_OscConfig+0x4d4>)
 8003da6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003da8:	4a0f      	ldr	r2, [pc, #60]	@ (8003de8 <HAL_RCC_OscConfig+0x4d4>)
 8003daa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003dae:	6353      	str	r3, [r2, #52]	@ 0x34
 8003db0:	4b0d      	ldr	r3, [pc, #52]	@ (8003de8 <HAL_RCC_OscConfig+0x4d4>)
 8003db2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003db4:	4a0c      	ldr	r2, [pc, #48]	@ (8003de8 <HAL_RCC_OscConfig+0x4d4>)
 8003db6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dba:	6353      	str	r3, [r2, #52]	@ 0x34
 8003dbc:	e00b      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4c2>
 8003dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8003de8 <HAL_RCC_OscConfig+0x4d4>)
 8003dc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dc2:	4a09      	ldr	r2, [pc, #36]	@ (8003de8 <HAL_RCC_OscConfig+0x4d4>)
 8003dc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003dc8:	6353      	str	r3, [r2, #52]	@ 0x34
 8003dca:	4b07      	ldr	r3, [pc, #28]	@ (8003de8 <HAL_RCC_OscConfig+0x4d4>)
 8003dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dce:	4a06      	ldr	r2, [pc, #24]	@ (8003de8 <HAL_RCC_OscConfig+0x4d4>)
 8003dd0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003dd4:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d024      	beq.n	8003e28 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dde:	f7fd fd13 	bl	8001808 <HAL_GetTick>
 8003de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003de4:	e019      	b.n	8003e1a <HAL_RCC_OscConfig+0x506>
 8003de6:	bf00      	nop
 8003de8:	40023800 	.word	0x40023800
 8003dec:	080050d0 	.word	0x080050d0
 8003df0:	20000000 	.word	0x20000000
 8003df4:	20000004 	.word	0x20000004
 8003df8:	42470020 	.word	0x42470020
 8003dfc:	42470680 	.word	0x42470680
 8003e00:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e04:	f7fd fd00 	bl	8001808 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e0a3      	b.n	8003f62 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e1a:	4b54      	ldr	r3, [pc, #336]	@ (8003f6c <HAL_RCC_OscConfig+0x658>)
 8003e1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0ee      	beq.n	8003e04 <HAL_RCC_OscConfig+0x4f0>
 8003e26:	e014      	b.n	8003e52 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e28:	f7fd fcee 	bl	8001808 <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e2e:	e00a      	b.n	8003e46 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e30:	f7fd fcea 	bl	8001808 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e08d      	b.n	8003f62 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e46:	4b49      	ldr	r3, [pc, #292]	@ (8003f6c <HAL_RCC_OscConfig+0x658>)
 8003e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1ee      	bne.n	8003e30 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e52:	7ffb      	ldrb	r3, [r7, #31]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d105      	bne.n	8003e64 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e58:	4b44      	ldr	r3, [pc, #272]	@ (8003f6c <HAL_RCC_OscConfig+0x658>)
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5c:	4a43      	ldr	r2, [pc, #268]	@ (8003f6c <HAL_RCC_OscConfig+0x658>)
 8003e5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e62:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d079      	beq.n	8003f60 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	2b0c      	cmp	r3, #12
 8003e70:	d056      	beq.n	8003f20 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d13b      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e7a:	4b3d      	ldr	r3, [pc, #244]	@ (8003f70 <HAL_RCC_OscConfig+0x65c>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e80:	f7fd fcc2 	bl	8001808 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e88:	f7fd fcbe 	bl	8001808 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e063      	b.n	8003f62 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e9a:	4b34      	ldr	r3, [pc, #208]	@ (8003f6c <HAL_RCC_OscConfig+0x658>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1f0      	bne.n	8003e88 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ea6:	4b31      	ldr	r3, [pc, #196]	@ (8003f6c <HAL_RCC_OscConfig+0x658>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb6:	4319      	orrs	r1, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ebc:	430b      	orrs	r3, r1
 8003ebe:	492b      	ldr	r1, [pc, #172]	@ (8003f6c <HAL_RCC_OscConfig+0x658>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ec4:	4b2a      	ldr	r3, [pc, #168]	@ (8003f70 <HAL_RCC_OscConfig+0x65c>)
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eca:	f7fd fc9d 	bl	8001808 <HAL_GetTick>
 8003ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ed0:	e008      	b.n	8003ee4 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ed2:	f7fd fc99 	bl	8001808 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e03e      	b.n	8003f62 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ee4:	4b21      	ldr	r3, [pc, #132]	@ (8003f6c <HAL_RCC_OscConfig+0x658>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d0f0      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x5be>
 8003ef0:	e036      	b.n	8003f60 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ef2:	4b1f      	ldr	r3, [pc, #124]	@ (8003f70 <HAL_RCC_OscConfig+0x65c>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef8:	f7fd fc86 	bl	8001808 <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f00:	f7fd fc82 	bl	8001808 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e027      	b.n	8003f62 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f12:	4b16      	ldr	r3, [pc, #88]	@ (8003f6c <HAL_RCC_OscConfig+0x658>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1f0      	bne.n	8003f00 <HAL_RCC_OscConfig+0x5ec>
 8003f1e:	e01f      	b.n	8003f60 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d101      	bne.n	8003f2c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e01a      	b.n	8003f62 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8003f6c <HAL_RCC_OscConfig+0x658>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d10d      	bne.n	8003f5c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d106      	bne.n	8003f5c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d001      	beq.n	8003f60 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e000      	b.n	8003f62 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3720      	adds	r7, #32
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	40023800 	.word	0x40023800
 8003f70:	42470060 	.word	0x42470060

08003f74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d101      	bne.n	8003f88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e11a      	b.n	80041be <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f88:	4b8f      	ldr	r3, [pc, #572]	@ (80041c8 <HAL_RCC_ClockConfig+0x254>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d919      	bls.n	8003fca <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d105      	bne.n	8003fa8 <HAL_RCC_ClockConfig+0x34>
 8003f9c:	4b8a      	ldr	r3, [pc, #552]	@ (80041c8 <HAL_RCC_ClockConfig+0x254>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a89      	ldr	r2, [pc, #548]	@ (80041c8 <HAL_RCC_ClockConfig+0x254>)
 8003fa2:	f043 0304 	orr.w	r3, r3, #4
 8003fa6:	6013      	str	r3, [r2, #0]
 8003fa8:	4b87      	ldr	r3, [pc, #540]	@ (80041c8 <HAL_RCC_ClockConfig+0x254>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f023 0201 	bic.w	r2, r3, #1
 8003fb0:	4985      	ldr	r1, [pc, #532]	@ (80041c8 <HAL_RCC_ClockConfig+0x254>)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fb8:	4b83      	ldr	r3, [pc, #524]	@ (80041c8 <HAL_RCC_ClockConfig+0x254>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d001      	beq.n	8003fca <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e0f9      	b.n	80041be <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d008      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fd6:	4b7d      	ldr	r3, [pc, #500]	@ (80041cc <HAL_RCC_ClockConfig+0x258>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	497a      	ldr	r1, [pc, #488]	@ (80041cc <HAL_RCC_ClockConfig+0x258>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f000 808e 	beq.w	8004112 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d107      	bne.n	800400e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ffe:	4b73      	ldr	r3, [pc, #460]	@ (80041cc <HAL_RCC_ClockConfig+0x258>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d121      	bne.n	800404e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e0d7      	b.n	80041be <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2b03      	cmp	r3, #3
 8004014:	d107      	bne.n	8004026 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004016:	4b6d      	ldr	r3, [pc, #436]	@ (80041cc <HAL_RCC_ClockConfig+0x258>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d115      	bne.n	800404e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e0cb      	b.n	80041be <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d107      	bne.n	800403e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800402e:	4b67      	ldr	r3, [pc, #412]	@ (80041cc <HAL_RCC_ClockConfig+0x258>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d109      	bne.n	800404e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e0bf      	b.n	80041be <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800403e:	4b63      	ldr	r3, [pc, #396]	@ (80041cc <HAL_RCC_ClockConfig+0x258>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e0b7      	b.n	80041be <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800404e:	4b5f      	ldr	r3, [pc, #380]	@ (80041cc <HAL_RCC_ClockConfig+0x258>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f023 0203 	bic.w	r2, r3, #3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	495c      	ldr	r1, [pc, #368]	@ (80041cc <HAL_RCC_ClockConfig+0x258>)
 800405c:	4313      	orrs	r3, r2
 800405e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004060:	f7fd fbd2 	bl	8001808 <HAL_GetTick>
 8004064:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	2b02      	cmp	r3, #2
 800406c:	d112      	bne.n	8004094 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800406e:	e00a      	b.n	8004086 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004070:	f7fd fbca 	bl	8001808 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800407e:	4293      	cmp	r3, r2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e09b      	b.n	80041be <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004086:	4b51      	ldr	r3, [pc, #324]	@ (80041cc <HAL_RCC_ClockConfig+0x258>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 030c 	and.w	r3, r3, #12
 800408e:	2b08      	cmp	r3, #8
 8004090:	d1ee      	bne.n	8004070 <HAL_RCC_ClockConfig+0xfc>
 8004092:	e03e      	b.n	8004112 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	2b03      	cmp	r3, #3
 800409a:	d112      	bne.n	80040c2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800409c:	e00a      	b.n	80040b4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800409e:	f7fd fbb3 	bl	8001808 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d901      	bls.n	80040b4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e084      	b.n	80041be <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040b4:	4b45      	ldr	r3, [pc, #276]	@ (80041cc <HAL_RCC_ClockConfig+0x258>)
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f003 030c 	and.w	r3, r3, #12
 80040bc:	2b0c      	cmp	r3, #12
 80040be:	d1ee      	bne.n	800409e <HAL_RCC_ClockConfig+0x12a>
 80040c0:	e027      	b.n	8004112 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d11d      	bne.n	8004106 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80040ca:	e00a      	b.n	80040e2 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040cc:	f7fd fb9c 	bl	8001808 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040da:	4293      	cmp	r3, r2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e06d      	b.n	80041be <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80040e2:	4b3a      	ldr	r3, [pc, #232]	@ (80041cc <HAL_RCC_ClockConfig+0x258>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f003 030c 	and.w	r3, r3, #12
 80040ea:	2b04      	cmp	r3, #4
 80040ec:	d1ee      	bne.n	80040cc <HAL_RCC_ClockConfig+0x158>
 80040ee:	e010      	b.n	8004112 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040f0:	f7fd fb8a 	bl	8001808 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040fe:	4293      	cmp	r3, r2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e05b      	b.n	80041be <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004106:	4b31      	ldr	r3, [pc, #196]	@ (80041cc <HAL_RCC_ClockConfig+0x258>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 030c 	and.w	r3, r3, #12
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1ee      	bne.n	80040f0 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004112:	4b2d      	ldr	r3, [pc, #180]	@ (80041c8 <HAL_RCC_ClockConfig+0x254>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	429a      	cmp	r2, r3
 800411e:	d219      	bcs.n	8004154 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d105      	bne.n	8004132 <HAL_RCC_ClockConfig+0x1be>
 8004126:	4b28      	ldr	r3, [pc, #160]	@ (80041c8 <HAL_RCC_ClockConfig+0x254>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a27      	ldr	r2, [pc, #156]	@ (80041c8 <HAL_RCC_ClockConfig+0x254>)
 800412c:	f043 0304 	orr.w	r3, r3, #4
 8004130:	6013      	str	r3, [r2, #0]
 8004132:	4b25      	ldr	r3, [pc, #148]	@ (80041c8 <HAL_RCC_ClockConfig+0x254>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f023 0201 	bic.w	r2, r3, #1
 800413a:	4923      	ldr	r1, [pc, #140]	@ (80041c8 <HAL_RCC_ClockConfig+0x254>)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	4313      	orrs	r3, r2
 8004140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004142:	4b21      	ldr	r3, [pc, #132]	@ (80041c8 <HAL_RCC_ClockConfig+0x254>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	429a      	cmp	r2, r3
 800414e:	d001      	beq.n	8004154 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e034      	b.n	80041be <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0304 	and.w	r3, r3, #4
 800415c:	2b00      	cmp	r3, #0
 800415e:	d008      	beq.n	8004172 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004160:	4b1a      	ldr	r3, [pc, #104]	@ (80041cc <HAL_RCC_ClockConfig+0x258>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	4917      	ldr	r1, [pc, #92]	@ (80041cc <HAL_RCC_ClockConfig+0x258>)
 800416e:	4313      	orrs	r3, r2
 8004170:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0308 	and.w	r3, r3, #8
 800417a:	2b00      	cmp	r3, #0
 800417c:	d009      	beq.n	8004192 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800417e:	4b13      	ldr	r3, [pc, #76]	@ (80041cc <HAL_RCC_ClockConfig+0x258>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	00db      	lsls	r3, r3, #3
 800418c:	490f      	ldr	r1, [pc, #60]	@ (80041cc <HAL_RCC_ClockConfig+0x258>)
 800418e:	4313      	orrs	r3, r2
 8004190:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004192:	f000 f823 	bl	80041dc <HAL_RCC_GetSysClockFreq>
 8004196:	4602      	mov	r2, r0
 8004198:	4b0c      	ldr	r3, [pc, #48]	@ (80041cc <HAL_RCC_ClockConfig+0x258>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	091b      	lsrs	r3, r3, #4
 800419e:	f003 030f 	and.w	r3, r3, #15
 80041a2:	490b      	ldr	r1, [pc, #44]	@ (80041d0 <HAL_RCC_ClockConfig+0x25c>)
 80041a4:	5ccb      	ldrb	r3, [r1, r3]
 80041a6:	fa22 f303 	lsr.w	r3, r2, r3
 80041aa:	4a0a      	ldr	r2, [pc, #40]	@ (80041d4 <HAL_RCC_ClockConfig+0x260>)
 80041ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80041ae:	4b0a      	ldr	r3, [pc, #40]	@ (80041d8 <HAL_RCC_ClockConfig+0x264>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7fd fadc 	bl	8001770 <HAL_InitTick>
 80041b8:	4603      	mov	r3, r0
 80041ba:	72fb      	strb	r3, [r7, #11]

  return status;
 80041bc:	7afb      	ldrb	r3, [r7, #11]
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	40023c00 	.word	0x40023c00
 80041cc:	40023800 	.word	0x40023800
 80041d0:	080050d0 	.word	0x080050d0
 80041d4:	20000000 	.word	0x20000000
 80041d8:	20000004 	.word	0x20000004

080041dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041e0:	b08e      	sub	sp, #56	@ 0x38
 80041e2:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80041e4:	4b58      	ldr	r3, [pc, #352]	@ (8004348 <HAL_RCC_GetSysClockFreq+0x16c>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80041ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041ec:	f003 030c 	and.w	r3, r3, #12
 80041f0:	2b0c      	cmp	r3, #12
 80041f2:	d00d      	beq.n	8004210 <HAL_RCC_GetSysClockFreq+0x34>
 80041f4:	2b0c      	cmp	r3, #12
 80041f6:	f200 8092 	bhi.w	800431e <HAL_RCC_GetSysClockFreq+0x142>
 80041fa:	2b04      	cmp	r3, #4
 80041fc:	d002      	beq.n	8004204 <HAL_RCC_GetSysClockFreq+0x28>
 80041fe:	2b08      	cmp	r3, #8
 8004200:	d003      	beq.n	800420a <HAL_RCC_GetSysClockFreq+0x2e>
 8004202:	e08c      	b.n	800431e <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004204:	4b51      	ldr	r3, [pc, #324]	@ (800434c <HAL_RCC_GetSysClockFreq+0x170>)
 8004206:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8004208:	e097      	b.n	800433a <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800420a:	4b51      	ldr	r3, [pc, #324]	@ (8004350 <HAL_RCC_GetSysClockFreq+0x174>)
 800420c:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800420e:	e094      	b.n	800433a <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004212:	0c9b      	lsrs	r3, r3, #18
 8004214:	f003 020f 	and.w	r2, r3, #15
 8004218:	4b4e      	ldr	r3, [pc, #312]	@ (8004354 <HAL_RCC_GetSysClockFreq+0x178>)
 800421a:	5c9b      	ldrb	r3, [r3, r2]
 800421c:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800421e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004220:	0d9b      	lsrs	r3, r3, #22
 8004222:	f003 0303 	and.w	r3, r3, #3
 8004226:	3301      	adds	r3, #1
 8004228:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800422a:	4b47      	ldr	r3, [pc, #284]	@ (8004348 <HAL_RCC_GetSysClockFreq+0x16c>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d021      	beq.n	800427a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004238:	2200      	movs	r2, #0
 800423a:	61bb      	str	r3, [r7, #24]
 800423c:	61fa      	str	r2, [r7, #28]
 800423e:	4b44      	ldr	r3, [pc, #272]	@ (8004350 <HAL_RCC_GetSysClockFreq+0x174>)
 8004240:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8004244:	464a      	mov	r2, r9
 8004246:	fb03 f202 	mul.w	r2, r3, r2
 800424a:	2300      	movs	r3, #0
 800424c:	4644      	mov	r4, r8
 800424e:	fb04 f303 	mul.w	r3, r4, r3
 8004252:	4413      	add	r3, r2
 8004254:	4a3e      	ldr	r2, [pc, #248]	@ (8004350 <HAL_RCC_GetSysClockFreq+0x174>)
 8004256:	4644      	mov	r4, r8
 8004258:	fba4 0102 	umull	r0, r1, r4, r2
 800425c:	440b      	add	r3, r1
 800425e:	4619      	mov	r1, r3
 8004260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004262:	2200      	movs	r2, #0
 8004264:	613b      	str	r3, [r7, #16]
 8004266:	617a      	str	r2, [r7, #20]
 8004268:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800426c:	f7fc fb76 	bl	800095c <__aeabi_uldivmod>
 8004270:	4602      	mov	r2, r0
 8004272:	460b      	mov	r3, r1
 8004274:	4613      	mov	r3, r2
 8004276:	637b      	str	r3, [r7, #52]	@ 0x34
 8004278:	e04e      	b.n	8004318 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800427a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800427c:	2200      	movs	r2, #0
 800427e:	469a      	mov	sl, r3
 8004280:	4693      	mov	fp, r2
 8004282:	4652      	mov	r2, sl
 8004284:	465b      	mov	r3, fp
 8004286:	f04f 0000 	mov.w	r0, #0
 800428a:	f04f 0100 	mov.w	r1, #0
 800428e:	0159      	lsls	r1, r3, #5
 8004290:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004294:	0150      	lsls	r0, r2, #5
 8004296:	4602      	mov	r2, r0
 8004298:	460b      	mov	r3, r1
 800429a:	ebb2 080a 	subs.w	r8, r2, sl
 800429e:	eb63 090b 	sbc.w	r9, r3, fp
 80042a2:	f04f 0200 	mov.w	r2, #0
 80042a6:	f04f 0300 	mov.w	r3, #0
 80042aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80042ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80042b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80042b6:	ebb2 0408 	subs.w	r4, r2, r8
 80042ba:	eb63 0509 	sbc.w	r5, r3, r9
 80042be:	f04f 0200 	mov.w	r2, #0
 80042c2:	f04f 0300 	mov.w	r3, #0
 80042c6:	00eb      	lsls	r3, r5, #3
 80042c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042cc:	00e2      	lsls	r2, r4, #3
 80042ce:	4614      	mov	r4, r2
 80042d0:	461d      	mov	r5, r3
 80042d2:	eb14 030a 	adds.w	r3, r4, sl
 80042d6:	603b      	str	r3, [r7, #0]
 80042d8:	eb45 030b 	adc.w	r3, r5, fp
 80042dc:	607b      	str	r3, [r7, #4]
 80042de:	f04f 0200 	mov.w	r2, #0
 80042e2:	f04f 0300 	mov.w	r3, #0
 80042e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042ea:	4629      	mov	r1, r5
 80042ec:	028b      	lsls	r3, r1, #10
 80042ee:	4620      	mov	r0, r4
 80042f0:	4629      	mov	r1, r5
 80042f2:	4604      	mov	r4, r0
 80042f4:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80042f8:	4601      	mov	r1, r0
 80042fa:	028a      	lsls	r2, r1, #10
 80042fc:	4610      	mov	r0, r2
 80042fe:	4619      	mov	r1, r3
 8004300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004302:	2200      	movs	r2, #0
 8004304:	60bb      	str	r3, [r7, #8]
 8004306:	60fa      	str	r2, [r7, #12]
 8004308:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800430c:	f7fc fb26 	bl	800095c <__aeabi_uldivmod>
 8004310:	4602      	mov	r2, r0
 8004312:	460b      	mov	r3, r1
 8004314:	4613      	mov	r3, r2
 8004316:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      sysclockfreq = pllvco;
 8004318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800431a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800431c:	e00d      	b.n	800433a <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800431e:	4b0a      	ldr	r3, [pc, #40]	@ (8004348 <HAL_RCC_GetSysClockFreq+0x16c>)
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	0b5b      	lsrs	r3, r3, #13
 8004324:	f003 0307 	and.w	r3, r3, #7
 8004328:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800432a:	6a3b      	ldr	r3, [r7, #32]
 800432c:	3301      	adds	r3, #1
 800432e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004332:	fa02 f303 	lsl.w	r3, r2, r3
 8004336:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8004338:	bf00      	nop
    }
  }
  return sysclockfreq;
 800433a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800433c:	4618      	mov	r0, r3
 800433e:	3738      	adds	r7, #56	@ 0x38
 8004340:	46bd      	mov	sp, r7
 8004342:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004346:	bf00      	nop
 8004348:	40023800 	.word	0x40023800
 800434c:	00f42400 	.word	0x00f42400
 8004350:	016e3600 	.word	0x016e3600
 8004354:	080050c4 	.word	0x080050c4

08004358 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004358:	b480      	push	{r7}
 800435a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800435c:	4b02      	ldr	r3, [pc, #8]	@ (8004368 <HAL_RCC_GetHCLKFreq+0x10>)
 800435e:	681b      	ldr	r3, [r3, #0]
}
 8004360:	4618      	mov	r0, r3
 8004362:	46bd      	mov	sp, r7
 8004364:	bc80      	pop	{r7}
 8004366:	4770      	bx	lr
 8004368:	20000000 	.word	0x20000000

0800436c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004370:	f7ff fff2 	bl	8004358 <HAL_RCC_GetHCLKFreq>
 8004374:	4602      	mov	r2, r0
 8004376:	4b05      	ldr	r3, [pc, #20]	@ (800438c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	0a1b      	lsrs	r3, r3, #8
 800437c:	f003 0307 	and.w	r3, r3, #7
 8004380:	4903      	ldr	r1, [pc, #12]	@ (8004390 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004382:	5ccb      	ldrb	r3, [r1, r3]
 8004384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004388:	4618      	mov	r0, r3
 800438a:	bd80      	pop	{r7, pc}
 800438c:	40023800 	.word	0x40023800
 8004390:	080050e0 	.word	0x080050e0

08004394 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004394:	b480      	push	{r7}
 8004396:	b087      	sub	sp, #28
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800439c:	2300      	movs	r3, #0
 800439e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80043a0:	4b29      	ldr	r3, [pc, #164]	@ (8004448 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d12c      	bne.n	8004406 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80043ac:	4b26      	ldr	r3, [pc, #152]	@ (8004448 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80043ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d005      	beq.n	80043c4 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80043b8:	4b24      	ldr	r3, [pc, #144]	@ (800444c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 80043c0:	617b      	str	r3, [r7, #20]
 80043c2:	e016      	b.n	80043f2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043c4:	4b20      	ldr	r3, [pc, #128]	@ (8004448 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80043c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c8:	4a1f      	ldr	r2, [pc, #124]	@ (8004448 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80043ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043ce:	6253      	str	r3, [r2, #36]	@ 0x24
 80043d0:	4b1d      	ldr	r3, [pc, #116]	@ (8004448 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80043d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043d8:	60fb      	str	r3, [r7, #12]
 80043da:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80043dc:	4b1b      	ldr	r3, [pc, #108]	@ (800444c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 80043e4:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80043e6:	4b18      	ldr	r3, [pc, #96]	@ (8004448 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80043e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ea:	4a17      	ldr	r2, [pc, #92]	@ (8004448 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80043ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043f0:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 80043f8:	d105      	bne.n	8004406 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004400:	d101      	bne.n	8004406 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8004402:	2301      	movs	r3, #1
 8004404:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d105      	bne.n	8004418 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800440c:	4b10      	ldr	r3, [pc, #64]	@ (8004450 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a0f      	ldr	r2, [pc, #60]	@ (8004450 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004412:	f043 0304 	orr.w	r3, r3, #4
 8004416:	6013      	str	r3, [r2, #0]
 8004418:	4b0d      	ldr	r3, [pc, #52]	@ (8004450 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f023 0201 	bic.w	r2, r3, #1
 8004420:	490b      	ldr	r1, [pc, #44]	@ (8004450 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	4313      	orrs	r3, r2
 8004426:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004428:	4b09      	ldr	r3, [pc, #36]	@ (8004450 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	429a      	cmp	r2, r3
 8004434:	d001      	beq.n	800443a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e000      	b.n	800443c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	371c      	adds	r7, #28
 8004440:	46bd      	mov	sp, r7
 8004442:	bc80      	pop	{r7}
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	40023800 	.word	0x40023800
 800444c:	40007000 	.word	0x40007000
 8004450:	40023c00 	.word	0x40023c00

08004454 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e07b      	b.n	800455e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446a:	2b00      	cmp	r3, #0
 800446c:	d108      	bne.n	8004480 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004476:	d009      	beq.n	800448c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	61da      	str	r2, [r3, #28]
 800447e:	e005      	b.n	800448c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d106      	bne.n	80044ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f7fd f814 	bl	80014d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2202      	movs	r2, #2
 80044b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80044d4:	431a      	orrs	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044de:	431a      	orrs	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	431a      	orrs	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	431a      	orrs	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044fc:	431a      	orrs	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004506:	431a      	orrs	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004510:	ea42 0103 	orr.w	r1, r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004518:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	430a      	orrs	r2, r1
 8004522:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	0c1b      	lsrs	r3, r3, #16
 800452a:	f003 0104 	and.w	r1, r3, #4
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004532:	f003 0210 	and.w	r2, r3, #16
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	69da      	ldr	r2, [r3, #28]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800454c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b088      	sub	sp, #32
 800456a:	af00      	add	r7, sp, #0
 800456c:	60f8      	str	r0, [r7, #12]
 800456e:	60b9      	str	r1, [r7, #8]
 8004570:	603b      	str	r3, [r7, #0]
 8004572:	4613      	mov	r3, r2
 8004574:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004576:	f7fd f947 	bl	8001808 <HAL_GetTick>
 800457a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800457c:	88fb      	ldrh	r3, [r7, #6]
 800457e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2b01      	cmp	r3, #1
 800458a:	d001      	beq.n	8004590 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800458c:	2302      	movs	r3, #2
 800458e:	e12a      	b.n	80047e6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d002      	beq.n	800459c <HAL_SPI_Transmit+0x36>
 8004596:	88fb      	ldrh	r3, [r7, #6]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d101      	bne.n	80045a0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e122      	b.n	80047e6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d101      	bne.n	80045ae <HAL_SPI_Transmit+0x48>
 80045aa:	2302      	movs	r3, #2
 80045ac:	e11b      	b.n	80047e6 <HAL_SPI_Transmit+0x280>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2203      	movs	r2, #3
 80045ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	68ba      	ldr	r2, [r7, #8]
 80045c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	88fa      	ldrh	r2, [r7, #6]
 80045ce:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	88fa      	ldrh	r2, [r7, #6]
 80045d4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045fc:	d10f      	bne.n	800461e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800460c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800461c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004628:	2b40      	cmp	r3, #64	@ 0x40
 800462a:	d007      	beq.n	800463c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800463a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004644:	d152      	bne.n	80046ec <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d002      	beq.n	8004654 <HAL_SPI_Transmit+0xee>
 800464e:	8b7b      	ldrh	r3, [r7, #26]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d145      	bne.n	80046e0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004658:	881a      	ldrh	r2, [r3, #0]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004664:	1c9a      	adds	r2, r3, #2
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800466e:	b29b      	uxth	r3, r3
 8004670:	3b01      	subs	r3, #1
 8004672:	b29a      	uxth	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004678:	e032      	b.n	80046e0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	2b02      	cmp	r3, #2
 8004686:	d112      	bne.n	80046ae <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800468c:	881a      	ldrh	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004698:	1c9a      	adds	r2, r3, #2
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	3b01      	subs	r3, #1
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	86da      	strh	r2, [r3, #54]	@ 0x36
 80046ac:	e018      	b.n	80046e0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046ae:	f7fd f8ab 	bl	8001808 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	683a      	ldr	r2, [r7, #0]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d803      	bhi.n	80046c6 <HAL_SPI_Transmit+0x160>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046c4:	d102      	bne.n	80046cc <HAL_SPI_Transmit+0x166>
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d109      	bne.n	80046e0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e082      	b.n	80047e6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1c7      	bne.n	800467a <HAL_SPI_Transmit+0x114>
 80046ea:	e053      	b.n	8004794 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d002      	beq.n	80046fa <HAL_SPI_Transmit+0x194>
 80046f4:	8b7b      	ldrh	r3, [r7, #26]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d147      	bne.n	800478a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	330c      	adds	r3, #12
 8004704:	7812      	ldrb	r2, [r2, #0]
 8004706:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800470c:	1c5a      	adds	r2, r3, #1
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004716:	b29b      	uxth	r3, r3
 8004718:	3b01      	subs	r3, #1
 800471a:	b29a      	uxth	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004720:	e033      	b.n	800478a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	2b02      	cmp	r3, #2
 800472e:	d113      	bne.n	8004758 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	330c      	adds	r3, #12
 800473a:	7812      	ldrb	r2, [r2, #0]
 800473c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004742:	1c5a      	adds	r2, r3, #1
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800474c:	b29b      	uxth	r3, r3
 800474e:	3b01      	subs	r3, #1
 8004750:	b29a      	uxth	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004756:	e018      	b.n	800478a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004758:	f7fd f856 	bl	8001808 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	683a      	ldr	r2, [r7, #0]
 8004764:	429a      	cmp	r2, r3
 8004766:	d803      	bhi.n	8004770 <HAL_SPI_Transmit+0x20a>
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800476e:	d102      	bne.n	8004776 <HAL_SPI_Transmit+0x210>
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d109      	bne.n	800478a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e02d      	b.n	80047e6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800478e:	b29b      	uxth	r3, r3
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1c6      	bne.n	8004722 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004794:	69fa      	ldr	r2, [r7, #28]
 8004796:	6839      	ldr	r1, [r7, #0]
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f000 f8b1 	bl	8004900 <SPI_EndRxTxTransaction>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d002      	beq.n	80047aa <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2220      	movs	r2, #32
 80047a8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10a      	bne.n	80047c8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047b2:	2300      	movs	r3, #0
 80047b4:	617b      	str	r3, [r7, #20]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	617b      	str	r3, [r7, #20]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	617b      	str	r3, [r7, #20]
 80047c6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d001      	beq.n	80047e4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e000      	b.n	80047e6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80047e4:	2300      	movs	r3, #0
  }
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3720      	adds	r7, #32
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
	...

080047f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b088      	sub	sp, #32
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	603b      	str	r3, [r7, #0]
 80047fc:	4613      	mov	r3, r2
 80047fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004800:	f7fd f802 	bl	8001808 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004808:	1a9b      	subs	r3, r3, r2
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	4413      	add	r3, r2
 800480e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004810:	f7fc fffa 	bl	8001808 <HAL_GetTick>
 8004814:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004816:	4b39      	ldr	r3, [pc, #228]	@ (80048fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	015b      	lsls	r3, r3, #5
 800481c:	0d1b      	lsrs	r3, r3, #20
 800481e:	69fa      	ldr	r2, [r7, #28]
 8004820:	fb02 f303 	mul.w	r3, r2, r3
 8004824:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004826:	e054      	b.n	80048d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800482e:	d050      	beq.n	80048d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004830:	f7fc ffea 	bl	8001808 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	69fa      	ldr	r2, [r7, #28]
 800483c:	429a      	cmp	r2, r3
 800483e:	d902      	bls.n	8004846 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d13d      	bne.n	80048c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	685a      	ldr	r2, [r3, #4]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004854:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800485e:	d111      	bne.n	8004884 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004868:	d004      	beq.n	8004874 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004872:	d107      	bne.n	8004884 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004882:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004888:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800488c:	d10f      	bne.n	80048ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800489c:	601a      	str	r2, [r3, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e017      	b.n	80048f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d101      	bne.n	80048cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80048c8:	2300      	movs	r3, #0
 80048ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	3b01      	subs	r3, #1
 80048d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	689a      	ldr	r2, [r3, #8]
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	4013      	ands	r3, r2
 80048dc:	68ba      	ldr	r2, [r7, #8]
 80048de:	429a      	cmp	r2, r3
 80048e0:	bf0c      	ite	eq
 80048e2:	2301      	moveq	r3, #1
 80048e4:	2300      	movne	r3, #0
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	461a      	mov	r2, r3
 80048ea:	79fb      	ldrb	r3, [r7, #7]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d19b      	bne.n	8004828 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3720      	adds	r7, #32
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	20000000 	.word	0x20000000

08004900 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b088      	sub	sp, #32
 8004904:	af02      	add	r7, sp, #8
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	9300      	str	r3, [sp, #0]
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	2201      	movs	r2, #1
 8004914:	2102      	movs	r1, #2
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f7ff ff6a 	bl	80047f0 <SPI_WaitFlagStateUntilTimeout>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d007      	beq.n	8004932 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004926:	f043 0220 	orr.w	r2, r3, #32
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e032      	b.n	8004998 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004932:	4b1b      	ldr	r3, [pc, #108]	@ (80049a0 <SPI_EndRxTxTransaction+0xa0>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a1b      	ldr	r2, [pc, #108]	@ (80049a4 <SPI_EndRxTxTransaction+0xa4>)
 8004938:	fba2 2303 	umull	r2, r3, r2, r3
 800493c:	0d5b      	lsrs	r3, r3, #21
 800493e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004942:	fb02 f303 	mul.w	r3, r2, r3
 8004946:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004950:	d112      	bne.n	8004978 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	2200      	movs	r2, #0
 800495a:	2180      	movs	r1, #128	@ 0x80
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f7ff ff47 	bl	80047f0 <SPI_WaitFlagStateUntilTimeout>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d016      	beq.n	8004996 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800496c:	f043 0220 	orr.w	r2, r3, #32
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e00f      	b.n	8004998 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00a      	beq.n	8004994 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	3b01      	subs	r3, #1
 8004982:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800498e:	2b80      	cmp	r3, #128	@ 0x80
 8004990:	d0f2      	beq.n	8004978 <SPI_EndRxTxTransaction+0x78>
 8004992:	e000      	b.n	8004996 <SPI_EndRxTxTransaction+0x96>
        break;
 8004994:	bf00      	nop
  }

  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3718      	adds	r7, #24
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	20000000 	.word	0x20000000
 80049a4:	165e9f81 	.word	0x165e9f81

080049a8 <writecommand>:
* Input          : command byte to write
* Output         : None
* Return         : None
*******************************************************************************/
void writecommand(unsigned char cmdout)           
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	4603      	mov	r3, r0
 80049b0:	71fb      	strb	r3, [r7, #7]

	//HAL_SPI_Transmit(&hspi1, &cmdout, 1, 100); // HAL_ERROR

	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1); // nCS = 1

	ST7735_D_nC_PORT->BSRR = (uint32_t)ST7735_D_nC_PIN << 16 ;// D/nC = 0  commande
 80049b2:	4b0a      	ldr	r3, [pc, #40]	@ (80049dc <writecommand+0x34>)
 80049b4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80049b8:	619a      	str	r2, [r3, #24]
	ST7735_nCS_PORT->BSRR = (uint32_t)ST7735_nCS_PIN << 16 ;// nCS = 0
 80049ba:	4b08      	ldr	r3, [pc, #32]	@ (80049dc <writecommand+0x34>)
 80049bc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80049c0:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(&hspi1, &cmdout, 1, 100); //
 80049c2:	1df9      	adds	r1, r7, #7
 80049c4:	2364      	movs	r3, #100	@ 0x64
 80049c6:	2201      	movs	r2, #1
 80049c8:	4805      	ldr	r0, [pc, #20]	@ (80049e0 <writecommand+0x38>)
 80049ca:	f7ff fdcc 	bl	8004566 <HAL_SPI_Transmit>
	ST7735_nCS_PORT->BSRR = (uint32_t)ST7735_nCS_PIN;// nCS = 1
 80049ce:	4b03      	ldr	r3, [pc, #12]	@ (80049dc <writecommand+0x34>)
 80049d0:	2202      	movs	r2, #2
 80049d2:	619a      	str	r2, [r3, #24]

}
 80049d4:	bf00      	nop
 80049d6:	3708      	adds	r7, #8
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	40020800 	.word	0x40020800
 80049e0:	200000d0 	.word	0x200000d0

080049e4 <writedata>:
* Input          : data byte to write
* Output         : None
* Return         : None
*******************************************************************************/
void writedata(unsigned char dataout)
{             
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	4603      	mov	r3, r0
 80049ec:	71fb      	strb	r3, [r7, #7]

	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1); // nCS = 1



	ST7735_D_nC_PORT->BSRR = (uint32_t)ST7735_D_nC_PIN ;// D/nC = 1  data
 80049ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004a18 <writedata+0x34>)
 80049f0:	2204      	movs	r2, #4
 80049f2:	619a      	str	r2, [r3, #24]
		ST7735_nCS_PORT->BSRR = (uint32_t)ST7735_nCS_PIN << 16 ;// nCS = 0
 80049f4:	4b08      	ldr	r3, [pc, #32]	@ (8004a18 <writedata+0x34>)
 80049f6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80049fa:	619a      	str	r2, [r3, #24]
		HAL_SPI_Transmit(&hspi1, &dataout, 1, 100);  //
 80049fc:	1df9      	adds	r1, r7, #7
 80049fe:	2364      	movs	r3, #100	@ 0x64
 8004a00:	2201      	movs	r2, #1
 8004a02:	4806      	ldr	r0, [pc, #24]	@ (8004a1c <writedata+0x38>)
 8004a04:	f7ff fdaf 	bl	8004566 <HAL_SPI_Transmit>
		ST7735_nCS_PORT->BSRR = (uint32_t)ST7735_nCS_PIN;// nCS = 1
 8004a08:	4b03      	ldr	r3, [pc, #12]	@ (8004a18 <writedata+0x34>)
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	619a      	str	r2, [r3, #24]

}
 8004a0e:	bf00      	nop
 8004a10:	3708      	adds	r7, #8
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	40020800 	.word	0x40020800
 8004a1c:	200000d0 	.word	0x200000d0

08004a20 <commandList>:
* Input          : addr = pointer on command byte array
* Output         : None
* Return         : None
*******************************************************************************/
void commandList(const uint8_t *addr)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint8_t  numCommands, numArgs;
  uint16_t ms;

  numCommands = pgm_read_byte(addr++);   // Number of commands to follow
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	1c5a      	adds	r2, r3, #1
 8004a2c:	607a      	str	r2, [r7, #4]
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	73fb      	strb	r3, [r7, #15]
  while(numCommands--) 
 8004a32:	e033      	b.n	8004a9c <commandList+0x7c>
  {                 // For each command...
    writecommand(pgm_read_byte(addr++)); //   Read, issue command
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	1c5a      	adds	r2, r3, #1
 8004a38:	607a      	str	r2, [r7, #4]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7ff ffb3 	bl	80049a8 <writecommand>
    numArgs  = pgm_read_byte(addr++);    //   Number of args to follow
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	1c5a      	adds	r2, r3, #1
 8004a46:	607a      	str	r2, [r7, #4]
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	73bb      	strb	r3, [r7, #14]
    ms       = numArgs & DELAY;          //   If hibit set, delay follows args
 8004a4c:	7bbb      	ldrb	r3, [r7, #14]
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a54:	81bb      	strh	r3, [r7, #12]
    numArgs &= ~DELAY;                   //   Mask out delay bit
 8004a56:	7bbb      	ldrb	r3, [r7, #14]
 8004a58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a5c:	73bb      	strb	r3, [r7, #14]
    while(numArgs--) {                   //   For each argument...
 8004a5e:	e006      	b.n	8004a6e <commandList+0x4e>
      writedata(pgm_read_byte(addr++));  //     Read, issue argument
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	1c5a      	adds	r2, r3, #1
 8004a64:	607a      	str	r2, [r7, #4]
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f7ff ffbb 	bl	80049e4 <writedata>
    while(numArgs--) {                   //   For each argument...
 8004a6e:	7bbb      	ldrb	r3, [r7, #14]
 8004a70:	1e5a      	subs	r2, r3, #1
 8004a72:	73ba      	strb	r2, [r7, #14]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1f3      	bne.n	8004a60 <commandList+0x40>
    }

    if(ms) {
 8004a78:	89bb      	ldrh	r3, [r7, #12]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00e      	beq.n	8004a9c <commandList+0x7c>
      ms = pgm_read_byte(addr++); // Read post-command delay time (ms)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	1c5a      	adds	r2, r3, #1
 8004a82:	607a      	str	r2, [r7, #4]
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	81bb      	strh	r3, [r7, #12]
      if(ms == 255) ms = 500;     // If 255, delay for 500 ms
 8004a88:	89bb      	ldrh	r3, [r7, #12]
 8004a8a:	2bff      	cmp	r3, #255	@ 0xff
 8004a8c:	d102      	bne.n	8004a94 <commandList+0x74>
 8004a8e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004a92:	81bb      	strh	r3, [r7, #12]
  	HAL_Delay(500);
 8004a94:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004a98:	f7fc fec0 	bl	800181c <HAL_Delay>
  while(numCommands--) 
 8004a9c:	7bfb      	ldrb	r3, [r7, #15]
 8004a9e:	1e5a      	subs	r2, r3, #1
 8004aa0:	73fa      	strb	r2, [r7, #15]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1c6      	bne.n	8004a34 <commandList+0x14>
    }
  }
}
 8004aa6:	bf00      	nop
 8004aa8:	bf00      	nop
 8004aaa:	3710      	adds	r7, #16
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <setAddrWindow>:
*          	 : y2 vertical position = y1 to ST7735_TFTHEIGHT-1-y1
* Output         : None
* Return         : None
*******************************************************************************/
void setAddrWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8004ab0:	b590      	push	{r4, r7, lr}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	4604      	mov	r4, r0
 8004ab8:	4608      	mov	r0, r1
 8004aba:	4611      	mov	r1, r2
 8004abc:	461a      	mov	r2, r3
 8004abe:	4623      	mov	r3, r4
 8004ac0:	71fb      	strb	r3, [r7, #7]
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	71bb      	strb	r3, [r7, #6]
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	717b      	strb	r3, [r7, #5]
 8004aca:	4613      	mov	r3, r2
 8004acc:	713b      	strb	r3, [r7, #4]

  writecommand(ST7735_CASET); // Column addr set
 8004ace:	202a      	movs	r0, #42	@ 0x2a
 8004ad0:	f7ff ff6a 	bl	80049a8 <writecommand>
  writedata(0x00);
 8004ad4:	2000      	movs	r0, #0
 8004ad6:	f7ff ff85 	bl	80049e4 <writedata>
  writedata(x0);     // XSTART 
 8004ada:	79fb      	ldrb	r3, [r7, #7]
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7ff ff81 	bl	80049e4 <writedata>
  writedata(0x00);
 8004ae2:	2000      	movs	r0, #0
 8004ae4:	f7ff ff7e 	bl	80049e4 <writedata>
  writedata(x1);     // XEND
 8004ae8:	797b      	ldrb	r3, [r7, #5]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7ff ff7a 	bl	80049e4 <writedata>

  writecommand(ST7735_RASET); // Row addr set
 8004af0:	202b      	movs	r0, #43	@ 0x2b
 8004af2:	f7ff ff59 	bl	80049a8 <writecommand>
  writedata(0x00);
 8004af6:	2000      	movs	r0, #0
 8004af8:	f7ff ff74 	bl	80049e4 <writedata>
  writedata(y0);     // YSTART
 8004afc:	79bb      	ldrb	r3, [r7, #6]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7ff ff70 	bl	80049e4 <writedata>
  writedata(0x00);
 8004b04:	2000      	movs	r0, #0
 8004b06:	f7ff ff6d 	bl	80049e4 <writedata>
  writedata(y1);     // YEND
 8004b0a:	793b      	ldrb	r3, [r7, #4]
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7ff ff69 	bl	80049e4 <writedata>

  writecommand(ST7735_RAMWR); // write to RAM
 8004b12:	202c      	movs	r0, #44	@ 0x2c
 8004b14:	f7ff ff48 	bl	80049a8 <writecommand>
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd90      	pop	{r4, r7, pc}

08004b20 <init_TFT>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void init_TFT( void)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1); // nRESET = 1
	attend_500ms();
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1); // nCS = 1*/

	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1); // DC= 1
	ST7735_D_nC_PORT->BSRR = (uint32_t)ST7735_D_nC_PIN ;// D/nC = 1  data
 8004b26:	4b1e      	ldr	r3, [pc, #120]	@ (8004ba0 <init_TFT+0x80>)
 8004b28:	2204      	movs	r2, #4
 8004b2a:	619a      	str	r2, [r3, #24]
	ST7735_RST_PORT->BSRR = (uint32_t)ST7735_RST_PIN;// nRESET = 1
 8004b2c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ba4 <init_TFT+0x84>)
 8004b2e:	2204      	movs	r2, #4
 8004b30:	619a      	str	r2, [r3, #24]
	ST7735_nCS_PORT->BSRR = (uint32_t)ST7735_nCS_PIN<<16;// nCS = 0
 8004b32:	4b1b      	ldr	r3, [pc, #108]	@ (8004ba0 <init_TFT+0x80>)
 8004b34:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004b38:	619a      	str	r2, [r3, #24]
	HAL_Delay(500);
 8004b3a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004b3e:	f7fc fe6d 	bl	800181c <HAL_Delay>
	ST7735_RST_PORT->BSRR = (uint32_t)ST7735_RST_PIN<<16;// nRESET = 0
 8004b42:	4b18      	ldr	r3, [pc, #96]	@ (8004ba4 <init_TFT+0x84>)
 8004b44:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004b48:	619a      	str	r2, [r3, #24]
	HAL_Delay(500);
 8004b4a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004b4e:	f7fc fe65 	bl	800181c <HAL_Delay>
	ST7735_RST_PORT->BSRR = (uint32_t)ST7735_RST_PIN;// nRESET = 1
 8004b52:	4b14      	ldr	r3, [pc, #80]	@ (8004ba4 <init_TFT+0x84>)
 8004b54:	2204      	movs	r2, #4
 8004b56:	619a      	str	r2, [r3, #24]
	HAL_Delay(500);
 8004b58:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004b5c:	f7fc fe5e 	bl	800181c <HAL_Delay>
	ST7735_nCS_PORT->BSRR = (uint32_t)ST7735_nCS_PIN;// nCS = 1
 8004b60:	4b0f      	ldr	r3, [pc, #60]	@ (8004ba0 <init_TFT+0x80>)
 8004b62:	2202      	movs	r2, #2
 8004b64:	619a      	str	r2, [r3, #24]
	
	// initialization instruction 
	commandList(Rcmd1);
 8004b66:	4810      	ldr	r0, [pc, #64]	@ (8004ba8 <init_TFT+0x88>)
 8004b68:	f7ff ff5a 	bl	8004a20 <commandList>
	commandList(Rcmd2red);
 8004b6c:	480f      	ldr	r0, [pc, #60]	@ (8004bac <init_TFT+0x8c>)
 8004b6e:	f7ff ff57 	bl	8004a20 <commandList>
	commandList(Rcmd3);
 8004b72:	480f      	ldr	r0, [pc, #60]	@ (8004bb0 <init_TFT+0x90>)
 8004b74:	f7ff ff54 	bl	8004a20 <commandList>

 	writecommand(ST7735_MADCTL);
 8004b78:	2036      	movs	r0, #54	@ 0x36
 8004b7a:	f7ff ff15 	bl	80049a8 <writecommand>
	writedata(0xC0);
 8004b7e:	20c0      	movs	r0, #192	@ 0xc0
 8004b80:	f7ff ff30 	bl	80049e4 <writedata>
   
	// all display background is black
	fillRect_TFT(0, 0,  ST7735_TFTWIDTH, ST7735_TFTHEIGHT_18, ST7735_BLACK);
 8004b84:	2300      	movs	r3, #0
 8004b86:	9300      	str	r3, [sp, #0]
 8004b88:	23a0      	movs	r3, #160	@ 0xa0
 8004b8a:	2280      	movs	r2, #128	@ 0x80
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	2000      	movs	r0, #0
 8004b90:	f000 f856 	bl	8004c40 <fillRect_TFT>
	
	// display LOGO
	displayLogo_TFT();
 8004b94:	f000 f9aa 	bl	8004eec <displayLogo_TFT>
}
 8004b98:	bf00      	nop
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	40020800 	.word	0x40020800
 8004ba4:	40020c00 	.word	0x40020c00
 8004ba8:	080050e8 	.word	0x080050e8
 8004bac:	08005124 	.word	0x08005124
 8004bb0:	08005134 	.word	0x08005134

08004bb4 <drawPixel_TFT>:
*          	 : color = 16bits RGB=(565) soit RRRRRGGGGGGGBBBBB
* Output         : None
* Return         : None
*******************************************************************************/
void drawPixel_TFT(uint16_t x, uint16_t y, uint16_t color) 
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	4603      	mov	r3, r0
 8004bbc:	80fb      	strh	r3, [r7, #6]
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	80bb      	strh	r3, [r7, #4]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	807b      	strh	r3, [r7, #2]
	 uint8_t hi, lo;
	
	// rudimentary clipping (drawChar w/big text requires this)
	if((x >= ST7735_TFTWIDTH) || (y >= ST7735_TFTHEIGHT_18)) return;
 8004bc6:	88fb      	ldrh	r3, [r7, #6]
 8004bc8:	2b7f      	cmp	r3, #127	@ 0x7f
 8004bca:	d831      	bhi.n	8004c30 <drawPixel_TFT+0x7c>
 8004bcc:	88bb      	ldrh	r3, [r7, #4]
 8004bce:	2b9f      	cmp	r3, #159	@ 0x9f
 8004bd0:	d82e      	bhi.n	8004c30 <drawPixel_TFT+0x7c>
	
	setAddrWindow(x, y, x+1, y+1);
 8004bd2:	88fb      	ldrh	r3, [r7, #6]
 8004bd4:	b2d8      	uxtb	r0, r3
 8004bd6:	88bb      	ldrh	r3, [r7, #4]
 8004bd8:	b2d9      	uxtb	r1, r3
 8004bda:	88fb      	ldrh	r3, [r7, #6]
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	3301      	adds	r3, #1
 8004be0:	b2da      	uxtb	r2, r3
 8004be2:	88bb      	ldrh	r3, [r7, #4]
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	3301      	adds	r3, #1
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	f7ff ff61 	bl	8004ab0 <setAddrWindow>
	
	hi = color >> 8;
 8004bee:	887b      	ldrh	r3, [r7, #2]
 8004bf0:	0a1b      	lsrs	r3, r3, #8
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	73fb      	strb	r3, [r7, #15]
	lo = color ;
 8004bf8:	887b      	ldrh	r3, [r7, #2]
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&hspi1, &lo, 1, 100); //

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1); // nCS = 1*/


	ST7735_D_nC_PORT->BSRR = (uint32_t)ST7735_D_nC_PIN ;// D/nC = 1  data
 8004bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8004c38 <drawPixel_TFT+0x84>)
 8004c00:	2204      	movs	r2, #4
 8004c02:	619a      	str	r2, [r3, #24]
	ST7735_nCS_PORT->BSRR = (uint32_t)ST7735_nCS_PIN<<16;// nCS = 0
 8004c04:	4b0c      	ldr	r3, [pc, #48]	@ (8004c38 <drawPixel_TFT+0x84>)
 8004c06:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004c0a:	619a      	str	r2, [r3, #24]

	HAL_SPI_Transmit(&hspi1, &hi, 1, 100); //
 8004c0c:	f107 010f 	add.w	r1, r7, #15
 8004c10:	2364      	movs	r3, #100	@ 0x64
 8004c12:	2201      	movs	r2, #1
 8004c14:	4809      	ldr	r0, [pc, #36]	@ (8004c3c <drawPixel_TFT+0x88>)
 8004c16:	f7ff fca6 	bl	8004566 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &lo, 1, 100); //
 8004c1a:	f107 010e 	add.w	r1, r7, #14
 8004c1e:	2364      	movs	r3, #100	@ 0x64
 8004c20:	2201      	movs	r2, #1
 8004c22:	4806      	ldr	r0, [pc, #24]	@ (8004c3c <drawPixel_TFT+0x88>)
 8004c24:	f7ff fc9f 	bl	8004566 <HAL_SPI_Transmit>

	ST7735_nCS_PORT->BSRR = (uint32_t)ST7735_nCS_PIN;// nCS = 1
 8004c28:	4b03      	ldr	r3, [pc, #12]	@ (8004c38 <drawPixel_TFT+0x84>)
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	619a      	str	r2, [r3, #24]
 8004c2e:	e000      	b.n	8004c32 <drawPixel_TFT+0x7e>
	if((x >= ST7735_TFTWIDTH) || (y >= ST7735_TFTHEIGHT_18)) return;
 8004c30:	bf00      	nop
}
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	40020800 	.word	0x40020800
 8004c3c:	200000d0 	.word	0x200000d0

08004c40 <fillRect_TFT>:
*          	 : color = 16bits RGB(565) soit RRRRRGGGGGGGBBBBB
* Output         : None
* Return         : None
*******************************************************************************/
void fillRect_TFT(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) 
{
 8004c40:	b590      	push	{r4, r7, lr}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	4604      	mov	r4, r0
 8004c48:	4608      	mov	r0, r1
 8004c4a:	4611      	mov	r1, r2
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	4623      	mov	r3, r4
 8004c50:	80fb      	strh	r3, [r7, #6]
 8004c52:	4603      	mov	r3, r0
 8004c54:	80bb      	strh	r3, [r7, #4]
 8004c56:	460b      	mov	r3, r1
 8004c58:	807b      	strh	r3, [r7, #2]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	803b      	strh	r3, [r7, #0]
	 uint8_t hi, lo;
	
	// rudimentary clipping (drawChar w/big text requires this)
	if((x >= ST7735_TFTWIDTH) || (y >= ST7735_TFTHEIGHT_18)) return;
 8004c5e:	88fb      	ldrh	r3, [r7, #6]
 8004c60:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c62:	d85e      	bhi.n	8004d22 <fillRect_TFT+0xe2>
 8004c64:	88bb      	ldrh	r3, [r7, #4]
 8004c66:	2b9f      	cmp	r3, #159	@ 0x9f
 8004c68:	d85b      	bhi.n	8004d22 <fillRect_TFT+0xe2>
	
	if((x + w - 1) >= ST7735_TFTWIDTH)  w = ST7735_TFTWIDTH  - x;
 8004c6a:	88fa      	ldrh	r2, [r7, #6]
 8004c6c:	887b      	ldrh	r3, [r7, #2]
 8004c6e:	4413      	add	r3, r2
 8004c70:	2b80      	cmp	r3, #128	@ 0x80
 8004c72:	dd03      	ble.n	8004c7c <fillRect_TFT+0x3c>
 8004c74:	88fb      	ldrh	r3, [r7, #6]
 8004c76:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8004c7a:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_TFTHEIGHT_18) h = ST7735_TFTHEIGHT_18 - y;
 8004c7c:	88ba      	ldrh	r2, [r7, #4]
 8004c7e:	883b      	ldrh	r3, [r7, #0]
 8004c80:	4413      	add	r3, r2
 8004c82:	2ba0      	cmp	r3, #160	@ 0xa0
 8004c84:	dd03      	ble.n	8004c8e <fillRect_TFT+0x4e>
 8004c86:	88bb      	ldrh	r3, [r7, #4]
 8004c88:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 8004c8c:	803b      	strh	r3, [r7, #0]
	
	// select window  
	setAddrWindow(x, y, x+w-1, y+h-1);
 8004c8e:	88fb      	ldrh	r3, [r7, #6]
 8004c90:	b2d8      	uxtb	r0, r3
 8004c92:	88bb      	ldrh	r3, [r7, #4]
 8004c94:	b2d9      	uxtb	r1, r3
 8004c96:	88fb      	ldrh	r3, [r7, #6]
 8004c98:	b2da      	uxtb	r2, r3
 8004c9a:	887b      	ldrh	r3, [r7, #2]
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	4413      	add	r3, r2
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	b2dc      	uxtb	r4, r3
 8004ca6:	88bb      	ldrh	r3, [r7, #4]
 8004ca8:	b2da      	uxtb	r2, r3
 8004caa:	883b      	ldrh	r3, [r7, #0]
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	4413      	add	r3, r2
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	4622      	mov	r2, r4
 8004cb8:	f7ff fefa 	bl	8004ab0 <setAddrWindow>
	
	hi = color >> 8;
 8004cbc:	8c3b      	ldrh	r3, [r7, #32]
 8004cbe:	0a1b      	lsrs	r3, r3, #8
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	73fb      	strb	r3, [r7, #15]
	lo = color ;
 8004cc6:	8c3b      	ldrh	r3, [r7, #32]
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	73bb      	strb	r3, [r7, #14]
	*/

	/*HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1); // D/nC = 1  data
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0); // nCS = 0*/

	ST7735_D_nC_PORT->BSRR = (uint32_t)ST7735_D_nC_PIN ;// D/nC = 1  data
 8004ccc:	4b17      	ldr	r3, [pc, #92]	@ (8004d2c <fillRect_TFT+0xec>)
 8004cce:	2204      	movs	r2, #4
 8004cd0:	619a      	str	r2, [r3, #24]
	ST7735_nCS_PORT->BSRR = (uint32_t)ST7735_nCS_PIN<<16;// nCS = 0
 8004cd2:	4b16      	ldr	r3, [pc, #88]	@ (8004d2c <fillRect_TFT+0xec>)
 8004cd4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004cd8:	619a      	str	r2, [r3, #24]

	for(y=h; y>0; y--)
 8004cda:	883b      	ldrh	r3, [r7, #0]
 8004cdc:	80bb      	strh	r3, [r7, #4]
 8004cde:	e019      	b.n	8004d14 <fillRect_TFT+0xd4>
	{
		for(x=w; x>0; x--)
 8004ce0:	887b      	ldrh	r3, [r7, #2]
 8004ce2:	80fb      	strh	r3, [r7, #6]
 8004ce4:	e010      	b.n	8004d08 <fillRect_TFT+0xc8>
		{

			HAL_SPI_Transmit(&hspi1, &hi, 1, 100); //
 8004ce6:	f107 010f 	add.w	r1, r7, #15
 8004cea:	2364      	movs	r3, #100	@ 0x64
 8004cec:	2201      	movs	r2, #1
 8004cee:	4810      	ldr	r0, [pc, #64]	@ (8004d30 <fillRect_TFT+0xf0>)
 8004cf0:	f7ff fc39 	bl	8004566 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi1, &lo, 1, 100); //
 8004cf4:	f107 010e 	add.w	r1, r7, #14
 8004cf8:	2364      	movs	r3, #100	@ 0x64
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	480c      	ldr	r0, [pc, #48]	@ (8004d30 <fillRect_TFT+0xf0>)
 8004cfe:	f7ff fc32 	bl	8004566 <HAL_SPI_Transmit>
		for(x=w; x>0; x--)
 8004d02:	88fb      	ldrh	r3, [r7, #6]
 8004d04:	3b01      	subs	r3, #1
 8004d06:	80fb      	strh	r3, [r7, #6]
 8004d08:	88fb      	ldrh	r3, [r7, #6]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1eb      	bne.n	8004ce6 <fillRect_TFT+0xa6>
	for(y=h; y>0; y--)
 8004d0e:	88bb      	ldrh	r3, [r7, #4]
 8004d10:	3b01      	subs	r3, #1
 8004d12:	80bb      	strh	r3, [r7, #4]
 8004d14:	88bb      	ldrh	r3, [r7, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d1e2      	bne.n	8004ce0 <fillRect_TFT+0xa0>

		 }
	}

	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1); // nCS = 1
	ST7735_nCS_PORT->BSRR = (uint32_t)ST7735_nCS_PIN;// nCS = 1
 8004d1a:	4b04      	ldr	r3, [pc, #16]	@ (8004d2c <fillRect_TFT+0xec>)
 8004d1c:	2202      	movs	r2, #2
 8004d1e:	619a      	str	r2, [r3, #24]
 8004d20:	e000      	b.n	8004d24 <fillRect_TFT+0xe4>
	if((x >= ST7735_TFTWIDTH) || (y >= ST7735_TFTHEIGHT_18)) return;
 8004d22:	bf00      	nop
	
}
 8004d24:	3714      	adds	r7, #20
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd90      	pop	{r4, r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	40020800 	.word	0x40020800
 8004d30:	200000d0 	.word	0x200000d0

08004d34 <fillScreen_TFT>:
* Input          : color = 16bits RGB=(565) soit RRRRRGGGGGGGBBBBB
* Output         : None
* Return         : None
*******************************************************************************/
void fillScreen_TFT(uint16_t color)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af02      	add	r7, sp, #8
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	80fb      	strh	r3, [r7, #6]
  fillRect_TFT(0, 0,  ST7735_TFTWIDTH, ST7735_TFTHEIGHT_18, color);
 8004d3e:	88fb      	ldrh	r3, [r7, #6]
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	23a0      	movs	r3, #160	@ 0xa0
 8004d44:	2280      	movs	r2, #128	@ 0x80
 8004d46:	2100      	movs	r1, #0
 8004d48:	2000      	movs	r0, #0
 8004d4a:	f7ff ff79 	bl	8004c40 <fillRect_TFT>
}
 8004d4e:	bf00      	nop
 8004d50:	3708      	adds	r7, #8
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
	...

08004d58 <displayChar_TFT>:
*          	 : size = 1 to 10
* Output         : None
* Return         : None
*******************************************************************************/
void displayChar_TFT(uint16_t x, uint16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 8004d58:	b590      	push	{r4, r7, lr}
 8004d5a:	b087      	sub	sp, #28
 8004d5c:	af02      	add	r7, sp, #8
 8004d5e:	4604      	mov	r4, r0
 8004d60:	4608      	mov	r0, r1
 8004d62:	4611      	mov	r1, r2
 8004d64:	461a      	mov	r2, r3
 8004d66:	4623      	mov	r3, r4
 8004d68:	80fb      	strh	r3, [r7, #6]
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	80bb      	strh	r3, [r7, #4]
 8004d6e:	460b      	mov	r3, r1
 8004d70:	70fb      	strb	r3, [r7, #3]
 8004d72:	4613      	mov	r3, r2
 8004d74:	803b      	strh	r3, [r7, #0]
	uint8_t i,j,line;


  if((x >= ST7735_TFTWIDTH) || // Clip right
 8004d76:	88fb      	ldrh	r3, [r7, #6]
 8004d78:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d7a:	f200 80b1 	bhi.w	8004ee0 <displayChar_TFT+0x188>
 8004d7e:	88bb      	ldrh	r3, [r7, #4]
 8004d80:	2b9f      	cmp	r3, #159	@ 0x9f
 8004d82:	f200 80ad 	bhi.w	8004ee0 <displayChar_TFT+0x188>
     (y >= ST7735_TFTHEIGHT_18) || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
 8004d86:	88f9      	ldrh	r1, [r7, #6]
 8004d88:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	4413      	add	r3, r2
 8004d92:	005b      	lsls	r3, r3, #1
 8004d94:	440b      	add	r3, r1
     (y >= ST7735_TFTHEIGHT_18) || // Clip bottom
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f340 80a2 	ble.w	8004ee0 <displayChar_TFT+0x188>
     ((y + 8 * size - 1) < 0))   // Clip top
 8004d9c:	88ba      	ldrh	r2, [r7, #4]
 8004d9e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004da2:	00db      	lsls	r3, r3, #3
 8004da4:	4413      	add	r3, r2
     ((x + 6 * size - 1) < 0) || // Clip left
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	f340 809a 	ble.w	8004ee0 <displayChar_TFT+0x188>
    return;

  for (i=0; i<6; i++ )
 8004dac:	2300      	movs	r3, #0
 8004dae:	73fb      	strb	r3, [r7, #15]
 8004db0:	e091      	b.n	8004ed6 <displayChar_TFT+0x17e>
  {
    if (i == 5) 
 8004db2:	7bfb      	ldrb	r3, [r7, #15]
 8004db4:	2b05      	cmp	r3, #5
 8004db6:	d102      	bne.n	8004dbe <displayChar_TFT+0x66>
      line = 0x0;
 8004db8:	2300      	movs	r3, #0
 8004dba:	737b      	strb	r3, [r7, #13]
 8004dbc:	e00a      	b.n	8004dd4 <displayChar_TFT+0x7c>
    else 
      line = pgm_read_byte(tab_font + (c*5) + i);
 8004dbe:	78fa      	ldrb	r2, [r7, #3]
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	4413      	add	r3, r2
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	7bfb      	ldrb	r3, [r7, #15]
 8004dca:	4413      	add	r3, r2
 8004dcc:	4a46      	ldr	r2, [pc, #280]	@ (8004ee8 <displayChar_TFT+0x190>)
 8004dce:	4413      	add	r3, r2
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	737b      	strb	r3, [r7, #13]
    
	for ( j = 0; j<8; j++)
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	73bb      	strb	r3, [r7, #14]
 8004dd8:	e077      	b.n	8004eca <displayChar_TFT+0x172>
	{
		if (line & 0x1)
 8004dda:	7b7b      	ldrb	r3, [r7, #13]
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d034      	beq.n	8004e4e <displayChar_TFT+0xf6>
		{
			if (size == 1) // default size
 8004de4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d10e      	bne.n	8004e0a <displayChar_TFT+0xb2>
			    drawPixel_TFT(x+i, y+j, color);
 8004dec:	7bfb      	ldrb	r3, [r7, #15]
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	88fb      	ldrh	r3, [r7, #6]
 8004df2:	4413      	add	r3, r2
 8004df4:	b298      	uxth	r0, r3
 8004df6:	7bbb      	ldrb	r3, [r7, #14]
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	88bb      	ldrh	r3, [r7, #4]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	883a      	ldrh	r2, [r7, #0]
 8004e02:	4619      	mov	r1, r3
 8004e04:	f7ff fed6 	bl	8004bb4 <drawPixel_TFT>
 8004e08:	e059      	b.n	8004ebe <displayChar_TFT+0x166>
			else 
			{  // big size
			    fillRect_TFT(x+(i*size), y+(j*size), size, size, color);
 8004e0a:	7bfb      	ldrb	r3, [r7, #15]
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8004e12:	b292      	uxth	r2, r2
 8004e14:	fb02 f303 	mul.w	r3, r2, r3
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	88fb      	ldrh	r3, [r7, #6]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	b298      	uxth	r0, r3
 8004e20:	7bbb      	ldrb	r3, [r7, #14]
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8004e28:	b292      	uxth	r2, r2
 8004e2a:	fb02 f303 	mul.w	r3, r2, r3
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	88bb      	ldrh	r3, [r7, #4]
 8004e32:	4413      	add	r3, r2
 8004e34:	b299      	uxth	r1, r3
 8004e36:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004e40:	b29c      	uxth	r4, r3
 8004e42:	883b      	ldrh	r3, [r7, #0]
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	4623      	mov	r3, r4
 8004e48:	f7ff fefa 	bl	8004c40 <fillRect_TFT>
 8004e4c:	e037      	b.n	8004ebe <displayChar_TFT+0x166>
			} 
		} 
		else if (bg != color)
 8004e4e:	8c3a      	ldrh	r2, [r7, #32]
 8004e50:	883b      	ldrh	r3, [r7, #0]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d033      	beq.n	8004ebe <displayChar_TFT+0x166>
		{
		  if (size == 1) // default size
 8004e56:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d10e      	bne.n	8004e7c <displayChar_TFT+0x124>
		    drawPixel_TFT(x+i, y+j, bg);
 8004e5e:	7bfb      	ldrb	r3, [r7, #15]
 8004e60:	b29a      	uxth	r2, r3
 8004e62:	88fb      	ldrh	r3, [r7, #6]
 8004e64:	4413      	add	r3, r2
 8004e66:	b298      	uxth	r0, r3
 8004e68:	7bbb      	ldrb	r3, [r7, #14]
 8004e6a:	b29a      	uxth	r2, r3
 8004e6c:	88bb      	ldrh	r3, [r7, #4]
 8004e6e:	4413      	add	r3, r2
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	8c3a      	ldrh	r2, [r7, #32]
 8004e74:	4619      	mov	r1, r3
 8004e76:	f7ff fe9d 	bl	8004bb4 <drawPixel_TFT>
 8004e7a:	e020      	b.n	8004ebe <displayChar_TFT+0x166>
		  else 
		  {  // big size
		    fillRect_TFT(x+i*size, y+j*size, size, size, bg);
 8004e7c:	7bfb      	ldrb	r3, [r7, #15]
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8004e84:	b292      	uxth	r2, r2
 8004e86:	fb02 f303 	mul.w	r3, r2, r3
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	88fb      	ldrh	r3, [r7, #6]
 8004e8e:	4413      	add	r3, r2
 8004e90:	b298      	uxth	r0, r3
 8004e92:	7bbb      	ldrb	r3, [r7, #14]
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8004e9a:	b292      	uxth	r2, r2
 8004e9c:	fb02 f303 	mul.w	r3, r2, r3
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	88bb      	ldrh	r3, [r7, #4]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	b299      	uxth	r1, r3
 8004ea8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004eb2:	b29c      	uxth	r4, r3
 8004eb4:	8c3b      	ldrh	r3, [r7, #32]
 8004eb6:	9300      	str	r3, [sp, #0]
 8004eb8:	4623      	mov	r3, r4
 8004eba:	f7ff fec1 	bl	8004c40 <fillRect_TFT>
		  }
		}
		line = line >> 1;
 8004ebe:	7b7b      	ldrb	r3, [r7, #13]
 8004ec0:	085b      	lsrs	r3, r3, #1
 8004ec2:	737b      	strb	r3, [r7, #13]
	for ( j = 0; j<8; j++)
 8004ec4:	7bbb      	ldrb	r3, [r7, #14]
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	73bb      	strb	r3, [r7, #14]
 8004eca:	7bbb      	ldrb	r3, [r7, #14]
 8004ecc:	2b07      	cmp	r3, #7
 8004ece:	d984      	bls.n	8004dda <displayChar_TFT+0x82>
  for (i=0; i<6; i++ )
 8004ed0:	7bfb      	ldrb	r3, [r7, #15]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	73fb      	strb	r3, [r7, #15]
 8004ed6:	7bfb      	ldrb	r3, [r7, #15]
 8004ed8:	2b05      	cmp	r3, #5
 8004eda:	f67f af6a 	bls.w	8004db2 <displayChar_TFT+0x5a>
 8004ede:	e000      	b.n	8004ee2 <displayChar_TFT+0x18a>
    return;
 8004ee0:	bf00      	nop
	}
  }
}
 8004ee2:	3714      	adds	r7, #20
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd90      	pop	{r4, r7, pc}
 8004ee8:	08005160 	.word	0x08005160

08004eec <displayLogo_TFT>:
* Input          : 
* Output         : None
* Return         : None
*******************************************************************************/
void displayLogo_TFT( void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
	uint8_t i,j,k,line;
	uint16_t color=ST7735_WHITE;
 8004ef2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004ef6:	807b      	strh	r3, [r7, #2]


                                                                    
  for(i=0;i<=120;i++)
 8004ef8:	2300      	movs	r3, #0
 8004efa:	71fb      	strb	r3, [r7, #7]
 8004efc:	e09e      	b.n	800503c <displayLogo_TFT+0x150>
  {

  for(j=0;j<= 1;j++)
 8004efe:	2300      	movs	r3, #0
 8004f00:	71bb      	strb	r3, [r7, #6]
 8004f02:	e02b      	b.n	8004f5c <displayLogo_TFT+0x70>
  {
	line=(ALL_IS_mono_120[i+120*j]);
 8004f04:	79f9      	ldrb	r1, [r7, #7]
 8004f06:	79ba      	ldrb	r2, [r7, #6]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	011b      	lsls	r3, r3, #4
 8004f0c:	1a9b      	subs	r3, r3, r2
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	440b      	add	r3, r1
 8004f12:	4a4f      	ldr	r2, [pc, #316]	@ (8005050 <displayLogo_TFT+0x164>)
 8004f14:	5cd3      	ldrb	r3, [r2, r3]
 8004f16:	713b      	strb	r3, [r7, #4]
	for ( k = 0; k<8; k++)
 8004f18:	2300      	movs	r3, #0
 8004f1a:	717b      	strb	r3, [r7, #5]
 8004f1c:	e018      	b.n	8004f50 <displayLogo_TFT+0x64>
	{
		if (line & 0x1)                                                                                                                            
 8004f1e:	793b      	ldrb	r3, [r7, #4]
 8004f20:	f003 0301 	and.w	r3, r3, #1
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00d      	beq.n	8004f44 <displayLogo_TFT+0x58>
		{
			
			drawPixel_TFT(i, j*8+k, color);
 8004f28:	79fb      	ldrb	r3, [r7, #7]
 8004f2a:	b298      	uxth	r0, r3
 8004f2c:	79bb      	ldrb	r3, [r7, #6]
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	00db      	lsls	r3, r3, #3
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	797b      	ldrb	r3, [r7, #5]
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	4413      	add	r3, r2
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	887a      	ldrh	r2, [r7, #2]
 8004f3e:	4619      	mov	r1, r3
 8004f40:	f7ff fe38 	bl	8004bb4 <drawPixel_TFT>
		}
		line = line >> 1;
 8004f44:	793b      	ldrb	r3, [r7, #4]
 8004f46:	085b      	lsrs	r3, r3, #1
 8004f48:	713b      	strb	r3, [r7, #4]
	for ( k = 0; k<8; k++)
 8004f4a:	797b      	ldrb	r3, [r7, #5]
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	717b      	strb	r3, [r7, #5]
 8004f50:	797b      	ldrb	r3, [r7, #5]
 8004f52:	2b07      	cmp	r3, #7
 8004f54:	d9e3      	bls.n	8004f1e <displayLogo_TFT+0x32>
  for(j=0;j<= 1;j++)
 8004f56:	79bb      	ldrb	r3, [r7, #6]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	71bb      	strb	r3, [r7, #6]
 8004f5c:	79bb      	ldrb	r3, [r7, #6]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d9d0      	bls.n	8004f04 <displayLogo_TFT+0x18>
	}
  }
  
  color=ST7735_RED;                    
 8004f62:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004f66:	807b      	strh	r3, [r7, #2]
  for(j=2;j<= 3;j++)
 8004f68:	2302      	movs	r3, #2
 8004f6a:	71bb      	strb	r3, [r7, #6]
 8004f6c:	e02b      	b.n	8004fc6 <displayLogo_TFT+0xda>
  {
	line=(ALL_IS_mono_120[i+120*j]);
 8004f6e:	79f9      	ldrb	r1, [r7, #7]
 8004f70:	79ba      	ldrb	r2, [r7, #6]
 8004f72:	4613      	mov	r3, r2
 8004f74:	011b      	lsls	r3, r3, #4
 8004f76:	1a9b      	subs	r3, r3, r2
 8004f78:	00db      	lsls	r3, r3, #3
 8004f7a:	440b      	add	r3, r1
 8004f7c:	4a34      	ldr	r2, [pc, #208]	@ (8005050 <displayLogo_TFT+0x164>)
 8004f7e:	5cd3      	ldrb	r3, [r2, r3]
 8004f80:	713b      	strb	r3, [r7, #4]
	for ( k = 0; k<8; k++)
 8004f82:	2300      	movs	r3, #0
 8004f84:	717b      	strb	r3, [r7, #5]
 8004f86:	e018      	b.n	8004fba <displayLogo_TFT+0xce>
	{
		if (line & 0x1)                                                                                                                            
 8004f88:	793b      	ldrb	r3, [r7, #4]
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00d      	beq.n	8004fae <displayLogo_TFT+0xc2>
		{
			
		    drawPixel_TFT(i, j*8+k, color);
 8004f92:	79fb      	ldrb	r3, [r7, #7]
 8004f94:	b298      	uxth	r0, r3
 8004f96:	79bb      	ldrb	r3, [r7, #6]
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	00db      	lsls	r3, r3, #3
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	797b      	ldrb	r3, [r7, #5]
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	4413      	add	r3, r2
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	887a      	ldrh	r2, [r7, #2]
 8004fa8:	4619      	mov	r1, r3
 8004faa:	f7ff fe03 	bl	8004bb4 <drawPixel_TFT>
		}
		line = line >> 1;
 8004fae:	793b      	ldrb	r3, [r7, #4]
 8004fb0:	085b      	lsrs	r3, r3, #1
 8004fb2:	713b      	strb	r3, [r7, #4]
	for ( k = 0; k<8; k++)
 8004fb4:	797b      	ldrb	r3, [r7, #5]
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	717b      	strb	r3, [r7, #5]
 8004fba:	797b      	ldrb	r3, [r7, #5]
 8004fbc:	2b07      	cmp	r3, #7
 8004fbe:	d9e3      	bls.n	8004f88 <displayLogo_TFT+0x9c>
  for(j=2;j<= 3;j++)
 8004fc0:	79bb      	ldrb	r3, [r7, #6]
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	71bb      	strb	r3, [r7, #6]
 8004fc6:	79bb      	ldrb	r3, [r7, #6]
 8004fc8:	2b03      	cmp	r3, #3
 8004fca:	d9d0      	bls.n	8004f6e <displayLogo_TFT+0x82>
	}
  }

  color=ST7735_WHITE;
 8004fcc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004fd0:	807b      	strh	r3, [r7, #2]
  for(j=4;j<= 5;j++)
 8004fd2:	2304      	movs	r3, #4
 8004fd4:	71bb      	strb	r3, [r7, #6]
 8004fd6:	e02b      	b.n	8005030 <displayLogo_TFT+0x144>
  {
	line=(ALL_IS_mono_120[i+120*j]);
 8004fd8:	79f9      	ldrb	r1, [r7, #7]
 8004fda:	79ba      	ldrb	r2, [r7, #6]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	011b      	lsls	r3, r3, #4
 8004fe0:	1a9b      	subs	r3, r3, r2
 8004fe2:	00db      	lsls	r3, r3, #3
 8004fe4:	440b      	add	r3, r1
 8004fe6:	4a1a      	ldr	r2, [pc, #104]	@ (8005050 <displayLogo_TFT+0x164>)
 8004fe8:	5cd3      	ldrb	r3, [r2, r3]
 8004fea:	713b      	strb	r3, [r7, #4]
	for ( k = 0; k<8; k++)
 8004fec:	2300      	movs	r3, #0
 8004fee:	717b      	strb	r3, [r7, #5]
 8004ff0:	e018      	b.n	8005024 <displayLogo_TFT+0x138>
	{
		if (line & 0x1)                                                                                                                            
 8004ff2:	793b      	ldrb	r3, [r7, #4]
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00d      	beq.n	8005018 <displayLogo_TFT+0x12c>
		{
			
		    drawPixel_TFT(i, j*8+k, color);
 8004ffc:	79fb      	ldrb	r3, [r7, #7]
 8004ffe:	b298      	uxth	r0, r3
 8005000:	79bb      	ldrb	r3, [r7, #6]
 8005002:	b29b      	uxth	r3, r3
 8005004:	00db      	lsls	r3, r3, #3
 8005006:	b29a      	uxth	r2, r3
 8005008:	797b      	ldrb	r3, [r7, #5]
 800500a:	b29b      	uxth	r3, r3
 800500c:	4413      	add	r3, r2
 800500e:	b29b      	uxth	r3, r3
 8005010:	887a      	ldrh	r2, [r7, #2]
 8005012:	4619      	mov	r1, r3
 8005014:	f7ff fdce 	bl	8004bb4 <drawPixel_TFT>
		}
		line = line >> 1;
 8005018:	793b      	ldrb	r3, [r7, #4]
 800501a:	085b      	lsrs	r3, r3, #1
 800501c:	713b      	strb	r3, [r7, #4]
	for ( k = 0; k<8; k++)
 800501e:	797b      	ldrb	r3, [r7, #5]
 8005020:	3301      	adds	r3, #1
 8005022:	717b      	strb	r3, [r7, #5]
 8005024:	797b      	ldrb	r3, [r7, #5]
 8005026:	2b07      	cmp	r3, #7
 8005028:	d9e3      	bls.n	8004ff2 <displayLogo_TFT+0x106>
  for(j=4;j<= 5;j++)
 800502a:	79bb      	ldrb	r3, [r7, #6]
 800502c:	3301      	adds	r3, #1
 800502e:	71bb      	strb	r3, [r7, #6]
 8005030:	79bb      	ldrb	r3, [r7, #6]
 8005032:	2b05      	cmp	r3, #5
 8005034:	d9d0      	bls.n	8004fd8 <displayLogo_TFT+0xec>
  for(i=0;i<=120;i++)
 8005036:	79fb      	ldrb	r3, [r7, #7]
 8005038:	3301      	adds	r3, #1
 800503a:	71fb      	strb	r3, [r7, #7]
 800503c:	79fb      	ldrb	r3, [r7, #7]
 800503e:	2b78      	cmp	r3, #120	@ 0x78
 8005040:	f67f af5d 	bls.w	8004efe <displayLogo_TFT+0x12>
	}
  }

  }
}
 8005044:	bf00      	nop
 8005046:	bf00      	nop
 8005048:	3708      	adds	r7, #8
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	0800565c 	.word	0x0800565c

08005054 <memset>:
 8005054:	4603      	mov	r3, r0
 8005056:	4402      	add	r2, r0
 8005058:	4293      	cmp	r3, r2
 800505a:	d100      	bne.n	800505e <memset+0xa>
 800505c:	4770      	bx	lr
 800505e:	f803 1b01 	strb.w	r1, [r3], #1
 8005062:	e7f9      	b.n	8005058 <memset+0x4>

08005064 <__libc_init_array>:
 8005064:	b570      	push	{r4, r5, r6, lr}
 8005066:	2600      	movs	r6, #0
 8005068:	4d0c      	ldr	r5, [pc, #48]	@ (800509c <__libc_init_array+0x38>)
 800506a:	4c0d      	ldr	r4, [pc, #52]	@ (80050a0 <__libc_init_array+0x3c>)
 800506c:	1b64      	subs	r4, r4, r5
 800506e:	10a4      	asrs	r4, r4, #2
 8005070:	42a6      	cmp	r6, r4
 8005072:	d109      	bne.n	8005088 <__libc_init_array+0x24>
 8005074:	f000 f81a 	bl	80050ac <_init>
 8005078:	2600      	movs	r6, #0
 800507a:	4d0a      	ldr	r5, [pc, #40]	@ (80050a4 <__libc_init_array+0x40>)
 800507c:	4c0a      	ldr	r4, [pc, #40]	@ (80050a8 <__libc_init_array+0x44>)
 800507e:	1b64      	subs	r4, r4, r5
 8005080:	10a4      	asrs	r4, r4, #2
 8005082:	42a6      	cmp	r6, r4
 8005084:	d105      	bne.n	8005092 <__libc_init_array+0x2e>
 8005086:	bd70      	pop	{r4, r5, r6, pc}
 8005088:	f855 3b04 	ldr.w	r3, [r5], #4
 800508c:	4798      	blx	r3
 800508e:	3601      	adds	r6, #1
 8005090:	e7ee      	b.n	8005070 <__libc_init_array+0xc>
 8005092:	f855 3b04 	ldr.w	r3, [r5], #4
 8005096:	4798      	blx	r3
 8005098:	3601      	adds	r6, #1
 800509a:	e7f2      	b.n	8005082 <__libc_init_array+0x1e>
 800509c:	08005934 	.word	0x08005934
 80050a0:	08005934 	.word	0x08005934
 80050a4:	08005934 	.word	0x08005934
 80050a8:	08005938 	.word	0x08005938

080050ac <_init>:
 80050ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ae:	bf00      	nop
 80050b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050b2:	bc08      	pop	{r3}
 80050b4:	469e      	mov	lr, r3
 80050b6:	4770      	bx	lr

080050b8 <_fini>:
 80050b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ba:	bf00      	nop
 80050bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050be:	bc08      	pop	{r3}
 80050c0:	469e      	mov	lr, r3
 80050c2:	4770      	bx	lr
