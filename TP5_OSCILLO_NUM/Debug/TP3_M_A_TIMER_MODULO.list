
TP3_M_A_TIMER_MODULO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028c0  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080029fc  080029fc  000039fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a28  08002a28  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002a28  08002a28  00003a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a30  08002a30  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a30  08002a30  00003a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002a34  08002a34  00003a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002a38  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  08002a44  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08002a44  000040c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009760  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019c7  00000000  00000000  0000d795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  0000f160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000801  00000000  00000000  0000fbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000155f9  00000000  00000000  000103f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a9e1  00000000  00000000  000259ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088678  00000000  00000000  000303cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b8a43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bb4  00000000  00000000  000b8a88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000bb63c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	080029e4 	.word	0x080029e4

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	080029e4 	.word	0x080029e4

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800018c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000190:	f000 b98c 	b.w	80004ac <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9d08      	ldr	r5, [sp, #32]
 80001b2:	468e      	mov	lr, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14a      	bne.n	8000252 <__udivmoddi4+0xa6>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4617      	mov	r7, r2
 80001c0:	d962      	bls.n	8000288 <__udivmoddi4+0xdc>
 80001c2:	fab2 f682 	clz	r6, r2
 80001c6:	b14e      	cbz	r6, 80001dc <__udivmoddi4+0x30>
 80001c8:	f1c6 0320 	rsb	r3, r6, #32
 80001cc:	fa01 f806 	lsl.w	r8, r1, r6
 80001d0:	fa20 f303 	lsr.w	r3, r0, r3
 80001d4:	40b7      	lsls	r7, r6
 80001d6:	ea43 0808 	orr.w	r8, r3, r8
 80001da:	40b4      	lsls	r4, r6
 80001dc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80001e0:	fbb8 f1fe 	udiv	r1, r8, lr
 80001e4:	fa1f fc87 	uxth.w	ip, r7
 80001e8:	fb0e 8811 	mls	r8, lr, r1, r8
 80001ec:	fb01 f20c 	mul.w	r2, r1, ip
 80001f0:	0c23      	lsrs	r3, r4, #16
 80001f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f6:	429a      	cmp	r2, r3
 80001f8:	d909      	bls.n	800020e <__udivmoddi4+0x62>
 80001fa:	18fb      	adds	r3, r7, r3
 80001fc:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000200:	f080 80eb 	bcs.w	80003da <__udivmoddi4+0x22e>
 8000204:	429a      	cmp	r2, r3
 8000206:	f240 80e8 	bls.w	80003da <__udivmoddi4+0x22e>
 800020a:	3902      	subs	r1, #2
 800020c:	443b      	add	r3, r7
 800020e:	1a9a      	subs	r2, r3, r2
 8000210:	fbb2 f0fe 	udiv	r0, r2, lr
 8000214:	fb0e 2210 	mls	r2, lr, r0, r2
 8000218:	fb00 fc0c 	mul.w	ip, r0, ip
 800021c:	b2a3      	uxth	r3, r4
 800021e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000222:	459c      	cmp	ip, r3
 8000224:	d909      	bls.n	800023a <__udivmoddi4+0x8e>
 8000226:	18fb      	adds	r3, r7, r3
 8000228:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 800022c:	f080 80d7 	bcs.w	80003de <__udivmoddi4+0x232>
 8000230:	459c      	cmp	ip, r3
 8000232:	f240 80d4 	bls.w	80003de <__udivmoddi4+0x232>
 8000236:	443b      	add	r3, r7
 8000238:	3802      	subs	r0, #2
 800023a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800023e:	2100      	movs	r1, #0
 8000240:	eba3 030c 	sub.w	r3, r3, ip
 8000244:	b11d      	cbz	r5, 800024e <__udivmoddi4+0xa2>
 8000246:	2200      	movs	r2, #0
 8000248:	40f3      	lsrs	r3, r6
 800024a:	e9c5 3200 	strd	r3, r2, [r5]
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	428b      	cmp	r3, r1
 8000254:	d905      	bls.n	8000262 <__udivmoddi4+0xb6>
 8000256:	b10d      	cbz	r5, 800025c <__udivmoddi4+0xb0>
 8000258:	e9c5 0100 	strd	r0, r1, [r5]
 800025c:	2100      	movs	r1, #0
 800025e:	4608      	mov	r0, r1
 8000260:	e7f5      	b.n	800024e <__udivmoddi4+0xa2>
 8000262:	fab3 f183 	clz	r1, r3
 8000266:	2900      	cmp	r1, #0
 8000268:	d146      	bne.n	80002f8 <__udivmoddi4+0x14c>
 800026a:	4573      	cmp	r3, lr
 800026c:	d302      	bcc.n	8000274 <__udivmoddi4+0xc8>
 800026e:	4282      	cmp	r2, r0
 8000270:	f200 8108 	bhi.w	8000484 <__udivmoddi4+0x2d8>
 8000274:	1a84      	subs	r4, r0, r2
 8000276:	eb6e 0203 	sbc.w	r2, lr, r3
 800027a:	2001      	movs	r0, #1
 800027c:	4690      	mov	r8, r2
 800027e:	2d00      	cmp	r5, #0
 8000280:	d0e5      	beq.n	800024e <__udivmoddi4+0xa2>
 8000282:	e9c5 4800 	strd	r4, r8, [r5]
 8000286:	e7e2      	b.n	800024e <__udivmoddi4+0xa2>
 8000288:	2a00      	cmp	r2, #0
 800028a:	f000 8091 	beq.w	80003b0 <__udivmoddi4+0x204>
 800028e:	fab2 f682 	clz	r6, r2
 8000292:	2e00      	cmp	r6, #0
 8000294:	f040 80a5 	bne.w	80003e2 <__udivmoddi4+0x236>
 8000298:	1a8a      	subs	r2, r1, r2
 800029a:	2101      	movs	r1, #1
 800029c:	0c03      	lsrs	r3, r0, #16
 800029e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002a2:	b280      	uxth	r0, r0
 80002a4:	b2bc      	uxth	r4, r7
 80002a6:	fbb2 fcfe 	udiv	ip, r2, lr
 80002aa:	fb0e 221c 	mls	r2, lr, ip, r2
 80002ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b2:	fb04 f20c 	mul.w	r2, r4, ip
 80002b6:	429a      	cmp	r2, r3
 80002b8:	d907      	bls.n	80002ca <__udivmoddi4+0x11e>
 80002ba:	18fb      	adds	r3, r7, r3
 80002bc:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80002c0:	d202      	bcs.n	80002c8 <__udivmoddi4+0x11c>
 80002c2:	429a      	cmp	r2, r3
 80002c4:	f200 80e3 	bhi.w	800048e <__udivmoddi4+0x2e2>
 80002c8:	46c4      	mov	ip, r8
 80002ca:	1a9b      	subs	r3, r3, r2
 80002cc:	fbb3 f2fe 	udiv	r2, r3, lr
 80002d0:	fb0e 3312 	mls	r3, lr, r2, r3
 80002d4:	fb02 f404 	mul.w	r4, r2, r4
 80002d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80002dc:	429c      	cmp	r4, r3
 80002de:	d907      	bls.n	80002f0 <__udivmoddi4+0x144>
 80002e0:	18fb      	adds	r3, r7, r3
 80002e2:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80002e6:	d202      	bcs.n	80002ee <__udivmoddi4+0x142>
 80002e8:	429c      	cmp	r4, r3
 80002ea:	f200 80cd 	bhi.w	8000488 <__udivmoddi4+0x2dc>
 80002ee:	4602      	mov	r2, r0
 80002f0:	1b1b      	subs	r3, r3, r4
 80002f2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80002f6:	e7a5      	b.n	8000244 <__udivmoddi4+0x98>
 80002f8:	f1c1 0620 	rsb	r6, r1, #32
 80002fc:	408b      	lsls	r3, r1
 80002fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000302:	431f      	orrs	r7, r3
 8000304:	fa2e fa06 	lsr.w	sl, lr, r6
 8000308:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800030c:	fbba f8f9 	udiv	r8, sl, r9
 8000310:	fa0e fe01 	lsl.w	lr, lr, r1
 8000314:	fa20 f306 	lsr.w	r3, r0, r6
 8000318:	fb09 aa18 	mls	sl, r9, r8, sl
 800031c:	fa1f fc87 	uxth.w	ip, r7
 8000320:	ea43 030e 	orr.w	r3, r3, lr
 8000324:	fa00 fe01 	lsl.w	lr, r0, r1
 8000328:	fb08 f00c 	mul.w	r0, r8, ip
 800032c:	0c1c      	lsrs	r4, r3, #16
 800032e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000332:	42a0      	cmp	r0, r4
 8000334:	fa02 f201 	lsl.w	r2, r2, r1
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x1a4>
 800033a:	193c      	adds	r4, r7, r4
 800033c:	f108 3aff 	add.w	sl, r8, #4294967295	@ 0xffffffff
 8000340:	f080 809e 	bcs.w	8000480 <__udivmoddi4+0x2d4>
 8000344:	42a0      	cmp	r0, r4
 8000346:	f240 809b 	bls.w	8000480 <__udivmoddi4+0x2d4>
 800034a:	f1a8 0802 	sub.w	r8, r8, #2
 800034e:	443c      	add	r4, r7
 8000350:	1a24      	subs	r4, r4, r0
 8000352:	b298      	uxth	r0, r3
 8000354:	fbb4 f3f9 	udiv	r3, r4, r9
 8000358:	fb09 4413 	mls	r4, r9, r3, r4
 800035c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000360:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x1d0>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 800036e:	f080 8085 	bcs.w	800047c <__udivmoddi4+0x2d0>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8082 	bls.w	800047c <__udivmoddi4+0x2d0>
 8000378:	3b02      	subs	r3, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	fba0 8c02 	umull	r8, ip, r0, r2
 8000388:	4564      	cmp	r4, ip
 800038a:	4643      	mov	r3, r8
 800038c:	46e1      	mov	r9, ip
 800038e:	d364      	bcc.n	800045a <__udivmoddi4+0x2ae>
 8000390:	d061      	beq.n	8000456 <__udivmoddi4+0x2aa>
 8000392:	b15d      	cbz	r5, 80003ac <__udivmoddi4+0x200>
 8000394:	ebbe 0203 	subs.w	r2, lr, r3
 8000398:	eb64 0409 	sbc.w	r4, r4, r9
 800039c:	fa04 f606 	lsl.w	r6, r4, r6
 80003a0:	fa22 f301 	lsr.w	r3, r2, r1
 80003a4:	431e      	orrs	r6, r3
 80003a6:	40cc      	lsrs	r4, r1
 80003a8:	e9c5 6400 	strd	r6, r4, [r5]
 80003ac:	2100      	movs	r1, #0
 80003ae:	e74e      	b.n	800024e <__udivmoddi4+0xa2>
 80003b0:	fbb1 fcf2 	udiv	ip, r1, r2
 80003b4:	0c01      	lsrs	r1, r0, #16
 80003b6:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80003ba:	b280      	uxth	r0, r0
 80003bc:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80003c0:	463b      	mov	r3, r7
 80003c2:	fbb1 f1f7 	udiv	r1, r1, r7
 80003c6:	4638      	mov	r0, r7
 80003c8:	463c      	mov	r4, r7
 80003ca:	46b8      	mov	r8, r7
 80003cc:	46be      	mov	lr, r7
 80003ce:	2620      	movs	r6, #32
 80003d0:	eba2 0208 	sub.w	r2, r2, r8
 80003d4:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80003d8:	e765      	b.n	80002a6 <__udivmoddi4+0xfa>
 80003da:	4601      	mov	r1, r0
 80003dc:	e717      	b.n	800020e <__udivmoddi4+0x62>
 80003de:	4610      	mov	r0, r2
 80003e0:	e72b      	b.n	800023a <__udivmoddi4+0x8e>
 80003e2:	f1c6 0120 	rsb	r1, r6, #32
 80003e6:	fa2e fc01 	lsr.w	ip, lr, r1
 80003ea:	40b7      	lsls	r7, r6
 80003ec:	fa0e fe06 	lsl.w	lr, lr, r6
 80003f0:	fa20 f101 	lsr.w	r1, r0, r1
 80003f4:	ea41 010e 	orr.w	r1, r1, lr
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	fbbc f8fe 	udiv	r8, ip, lr
 8000400:	b2bc      	uxth	r4, r7
 8000402:	fb0e cc18 	mls	ip, lr, r8, ip
 8000406:	fb08 f904 	mul.w	r9, r8, r4
 800040a:	0c0a      	lsrs	r2, r1, #16
 800040c:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000410:	40b0      	lsls	r0, r6
 8000412:	4591      	cmp	r9, r2
 8000414:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000418:	b280      	uxth	r0, r0
 800041a:	d93e      	bls.n	800049a <__udivmoddi4+0x2ee>
 800041c:	18ba      	adds	r2, r7, r2
 800041e:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000422:	d201      	bcs.n	8000428 <__udivmoddi4+0x27c>
 8000424:	4591      	cmp	r9, r2
 8000426:	d81f      	bhi.n	8000468 <__udivmoddi4+0x2bc>
 8000428:	eba2 0209 	sub.w	r2, r2, r9
 800042c:	fbb2 f9fe 	udiv	r9, r2, lr
 8000430:	fb09 f804 	mul.w	r8, r9, r4
 8000434:	fb0e 2a19 	mls	sl, lr, r9, r2
 8000438:	b28a      	uxth	r2, r1
 800043a:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 800043e:	4542      	cmp	r2, r8
 8000440:	d229      	bcs.n	8000496 <__udivmoddi4+0x2ea>
 8000442:	18ba      	adds	r2, r7, r2
 8000444:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000448:	d2c2      	bcs.n	80003d0 <__udivmoddi4+0x224>
 800044a:	4542      	cmp	r2, r8
 800044c:	d2c0      	bcs.n	80003d0 <__udivmoddi4+0x224>
 800044e:	f1a9 0102 	sub.w	r1, r9, #2
 8000452:	443a      	add	r2, r7
 8000454:	e7bc      	b.n	80003d0 <__udivmoddi4+0x224>
 8000456:	45c6      	cmp	lr, r8
 8000458:	d29b      	bcs.n	8000392 <__udivmoddi4+0x1e6>
 800045a:	ebb8 0302 	subs.w	r3, r8, r2
 800045e:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000462:	3801      	subs	r0, #1
 8000464:	46e1      	mov	r9, ip
 8000466:	e794      	b.n	8000392 <__udivmoddi4+0x1e6>
 8000468:	eba7 0909 	sub.w	r9, r7, r9
 800046c:	444a      	add	r2, r9
 800046e:	fbb2 f9fe 	udiv	r9, r2, lr
 8000472:	f1a8 0c02 	sub.w	ip, r8, #2
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	e7db      	b.n	8000434 <__udivmoddi4+0x288>
 800047c:	4603      	mov	r3, r0
 800047e:	e77d      	b.n	800037c <__udivmoddi4+0x1d0>
 8000480:	46d0      	mov	r8, sl
 8000482:	e765      	b.n	8000350 <__udivmoddi4+0x1a4>
 8000484:	4608      	mov	r0, r1
 8000486:	e6fa      	b.n	800027e <__udivmoddi4+0xd2>
 8000488:	443b      	add	r3, r7
 800048a:	3a02      	subs	r2, #2
 800048c:	e730      	b.n	80002f0 <__udivmoddi4+0x144>
 800048e:	f1ac 0c02 	sub.w	ip, ip, #2
 8000492:	443b      	add	r3, r7
 8000494:	e719      	b.n	80002ca <__udivmoddi4+0x11e>
 8000496:	4649      	mov	r1, r9
 8000498:	e79a      	b.n	80003d0 <__udivmoddi4+0x224>
 800049a:	eba2 0209 	sub.w	r2, r2, r9
 800049e:	fbb2 f9fe 	udiv	r9, r2, lr
 80004a2:	46c4      	mov	ip, r8
 80004a4:	fb09 f804 	mul.w	r8, r9, r4
 80004a8:	e7c4      	b.n	8000434 <__udivmoddi4+0x288>
 80004aa:	bf00      	nop

080004ac <__aeabi_idiv0>:
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop

080004b0 <affiche>:
/* USER CODE BEGIN 0 */

volatile uint8_t marche = 0;
volatile uint8_t tempo_500ms_ok = 0;

void affiche(uint8_t nombre) {
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b084      	sub	sp, #16
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	71fb      	strb	r3, [r7, #7]
    uint8_t compt_uni;
    uint8_t compt_diz;

    compt_uni = nombre % 10;
 80004ba:	79fa      	ldrb	r2, [r7, #7]
 80004bc:	4b13      	ldr	r3, [pc, #76]	@ (800050c <affiche+0x5c>)
 80004be:	fba3 1302 	umull	r1, r3, r3, r2
 80004c2:	08d9      	lsrs	r1, r3, #3
 80004c4:	460b      	mov	r3, r1
 80004c6:	009b      	lsls	r3, r3, #2
 80004c8:	440b      	add	r3, r1
 80004ca:	005b      	lsls	r3, r3, #1
 80004cc:	1ad3      	subs	r3, r2, r3
 80004ce:	73fb      	strb	r3, [r7, #15]
    compt_diz = nombre / 10;
 80004d0:	79fb      	ldrb	r3, [r7, #7]
 80004d2:	4a0e      	ldr	r2, [pc, #56]	@ (800050c <affiche+0x5c>)
 80004d4:	fba2 2303 	umull	r2, r3, r2, r3
 80004d8:	08db      	lsrs	r3, r3, #3
 80004da:	73bb      	strb	r3, [r7, #14]

    MAX7219_DisplayChar(1, compt_diz);
 80004dc:	7bbb      	ldrb	r3, [r7, #14]
 80004de:	4619      	mov	r1, r3
 80004e0:	2001      	movs	r0, #1
 80004e2:	f000 faf1 	bl	8000ac8 <MAX7219_DisplayChar>
    MAX7219_DisplayChar(2, compt_uni);
 80004e6:	7bfb      	ldrb	r3, [r7, #15]
 80004e8:	4619      	mov	r1, r3
 80004ea:	2002      	movs	r0, #2
 80004ec:	f000 faec 	bl	8000ac8 <MAX7219_DisplayChar>
    MAX7219_DisplayChar(3, compt_diz);
 80004f0:	7bbb      	ldrb	r3, [r7, #14]
 80004f2:	4619      	mov	r1, r3
 80004f4:	2003      	movs	r0, #3
 80004f6:	f000 fae7 	bl	8000ac8 <MAX7219_DisplayChar>
    MAX7219_DisplayChar(4, compt_uni);
 80004fa:	7bfb      	ldrb	r3, [r7, #15]
 80004fc:	4619      	mov	r1, r3
 80004fe:	2004      	movs	r0, #4
 8000500:	f000 fae2 	bl	8000ac8 <MAX7219_DisplayChar>
}
 8000504:	bf00      	nop
 8000506:	3710      	adds	r7, #16
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	cccccccd 	.word	0xcccccccd

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 fb1d 	bl	8000b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f82f 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 f8f7 	bl	8000710 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000522:	f000 f871 	bl	8000608 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000526:	f000 f8a5 	bl	8000674 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  MAX7219_Init();
 800052a:	f000 fa80 	bl	8000a2e <MAX7219_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 800052e:	4810      	ldr	r0, [pc, #64]	@ (8000570 <main+0x60>)
 8000530:	f001 feb8 	bl	80022a4 <HAL_TIM_Base_Start_IT>
  uint8_t counter = 0;
 8000534:	2300      	movs	r3, #0
 8000536:	71fb      	strb	r3, [r7, #7]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  MAX7219_Clear();
 8000538:	f000 fab0 	bl	8000a9c <MAX7219_Clear>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (marche && tempo_500ms_ok) {
 800053c:	4b0d      	ldr	r3, [pc, #52]	@ (8000574 <main+0x64>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	b2db      	uxtb	r3, r3
 8000542:	2b00      	cmp	r3, #0
 8000544:	d0fa      	beq.n	800053c <main+0x2c>
 8000546:	4b0c      	ldr	r3, [pc, #48]	@ (8000578 <main+0x68>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	b2db      	uxtb	r3, r3
 800054c:	2b00      	cmp	r3, #0
 800054e:	d0f5      	beq.n	800053c <main+0x2c>
		  counter ++;
 8000550:	79fb      	ldrb	r3, [r7, #7]
 8000552:	3301      	adds	r3, #1
 8000554:	71fb      	strb	r3, [r7, #7]
		  if (counter >= 100) {
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	2b63      	cmp	r3, #99	@ 0x63
 800055a:	d901      	bls.n	8000560 <main+0x50>
			  counter = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	71fb      	strb	r3, [r7, #7]
		  }
		  affiche(counter);
 8000560:	79fb      	ldrb	r3, [r7, #7]
 8000562:	4618      	mov	r0, r3
 8000564:	f7ff ffa4 	bl	80004b0 <affiche>
		  tempo_500ms_ok = 0;
 8000568:	4b03      	ldr	r3, [pc, #12]	@ (8000578 <main+0x68>)
 800056a:	2200      	movs	r2, #0
 800056c:	701a      	strb	r2, [r3, #0]
	  if (marche && tempo_500ms_ok) {
 800056e:	e7e5      	b.n	800053c <main+0x2c>
 8000570:	20000080 	.word	0x20000080
 8000574:	200000c0 	.word	0x200000c0
 8000578:	200000c1 	.word	0x200000c1

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b092      	sub	sp, #72	@ 0x48
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	2234      	movs	r2, #52	@ 0x34
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f002 f9fe 	bl	800298c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	463b      	mov	r3, r7
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059e:	4b19      	ldr	r3, [pc, #100]	@ (8000604 <SystemClock_Config+0x88>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 80005a6:	4a17      	ldr	r2, [pc, #92]	@ (8000604 <SystemClock_Config+0x88>)
 80005a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80005ac:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ae:	2302      	movs	r3, #2
 80005b0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b2:	2301      	movs	r3, #1
 80005b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b6:	2310      	movs	r3, #16
 80005b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005ba:	2300      	movs	r3, #0
 80005bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005be:	f107 0314 	add.w	r3, r7, #20
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 fe02 	bl	80011cc <HAL_RCC_OscConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x56>
  {
    Error_Handler();
 80005ce:	f000 f925 	bl	800081c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d2:	230f      	movs	r3, #15
 80005d4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005d6:	2301      	movs	r3, #1
 80005d8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005e6:	463b      	mov	r3, r7
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f001 f91e 	bl	800182c <HAL_RCC_ClockConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80005f6:	f000 f911 	bl	800081c <Error_Handler>
  }
}
 80005fa:	bf00      	nop
 80005fc:	3748      	adds	r7, #72	@ 0x48
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40007000 	.word	0x40007000

08000608 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800060c:	4b17      	ldr	r3, [pc, #92]	@ (800066c <MX_SPI1_Init+0x64>)
 800060e:	4a18      	ldr	r2, [pc, #96]	@ (8000670 <MX_SPI1_Init+0x68>)
 8000610:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000612:	4b16      	ldr	r3, [pc, #88]	@ (800066c <MX_SPI1_Init+0x64>)
 8000614:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000618:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800061a:	4b14      	ldr	r3, [pc, #80]	@ (800066c <MX_SPI1_Init+0x64>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000620:	4b12      	ldr	r3, [pc, #72]	@ (800066c <MX_SPI1_Init+0x64>)
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000626:	4b11      	ldr	r3, [pc, #68]	@ (800066c <MX_SPI1_Init+0x64>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800062c:	4b0f      	ldr	r3, [pc, #60]	@ (800066c <MX_SPI1_Init+0x64>)
 800062e:	2200      	movs	r2, #0
 8000630:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000632:	4b0e      	ldr	r3, [pc, #56]	@ (800066c <MX_SPI1_Init+0x64>)
 8000634:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000638:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800063a:	4b0c      	ldr	r3, [pc, #48]	@ (800066c <MX_SPI1_Init+0x64>)
 800063c:	2200      	movs	r2, #0
 800063e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000640:	4b0a      	ldr	r3, [pc, #40]	@ (800066c <MX_SPI1_Init+0x64>)
 8000642:	2200      	movs	r2, #0
 8000644:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000646:	4b09      	ldr	r3, [pc, #36]	@ (800066c <MX_SPI1_Init+0x64>)
 8000648:	2200      	movs	r2, #0
 800064a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800064c:	4b07      	ldr	r3, [pc, #28]	@ (800066c <MX_SPI1_Init+0x64>)
 800064e:	2200      	movs	r2, #0
 8000650:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000652:	4b06      	ldr	r3, [pc, #24]	@ (800066c <MX_SPI1_Init+0x64>)
 8000654:	220a      	movs	r2, #10
 8000656:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000658:	4804      	ldr	r0, [pc, #16]	@ (800066c <MX_SPI1_Init+0x64>)
 800065a:	f001 fb39 	bl	8001cd0 <HAL_SPI_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000664:	f000 f8da 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000028 	.word	0x20000028
 8000670:	40013000 	.word	0x40013000

08000674 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800067a:	f107 0308 	add.w	r3, r7, #8
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000688:	463b      	mov	r3, r7
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000690:	4b1e      	ldr	r3, [pc, #120]	@ (800070c <MX_TIM2_Init+0x98>)
 8000692:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000696:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000-1;
 8000698:	4b1c      	ldr	r3, [pc, #112]	@ (800070c <MX_TIM2_Init+0x98>)
 800069a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800069e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a0:	4b1a      	ldr	r3, [pc, #104]	@ (800070c <MX_TIM2_Init+0x98>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16000-1;
 80006a6:	4b19      	ldr	r3, [pc, #100]	@ (800070c <MX_TIM2_Init+0x98>)
 80006a8:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80006ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ae:	4b17      	ldr	r3, [pc, #92]	@ (800070c <MX_TIM2_Init+0x98>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006b4:	4b15      	ldr	r3, [pc, #84]	@ (800070c <MX_TIM2_Init+0x98>)
 80006b6:	2280      	movs	r2, #128	@ 0x80
 80006b8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006ba:	4814      	ldr	r0, [pc, #80]	@ (800070c <MX_TIM2_Init+0x98>)
 80006bc:	f001 fdb2 	bl	8002224 <HAL_TIM_Base_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80006c6:	f000 f8a9 	bl	800081c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006d0:	f107 0308 	add.w	r3, r7, #8
 80006d4:	4619      	mov	r1, r3
 80006d6:	480d      	ldr	r0, [pc, #52]	@ (800070c <MX_TIM2_Init+0x98>)
 80006d8:	f001 ff02 	bl	80024e0 <HAL_TIM_ConfigClockSource>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80006e2:	f000 f89b 	bl	800081c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006e6:	2300      	movs	r3, #0
 80006e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ea:	2300      	movs	r3, #0
 80006ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006ee:	463b      	mov	r3, r7
 80006f0:	4619      	mov	r1, r3
 80006f2:	4806      	ldr	r0, [pc, #24]	@ (800070c <MX_TIM2_Init+0x98>)
 80006f4:	f002 f8ec 	bl	80028d0 <HAL_TIMEx_MasterConfigSynchronization>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80006fe:	f000 f88d 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	3718      	adds	r7, #24
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000080 	.word	0x20000080

08000710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b088      	sub	sp, #32
 8000714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	f107 030c 	add.w	r3, r7, #12
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000726:	4b22      	ldr	r3, [pc, #136]	@ (80007b0 <MX_GPIO_Init+0xa0>)
 8000728:	69db      	ldr	r3, [r3, #28]
 800072a:	4a21      	ldr	r2, [pc, #132]	@ (80007b0 <MX_GPIO_Init+0xa0>)
 800072c:	f043 0304 	orr.w	r3, r3, #4
 8000730:	61d3      	str	r3, [r2, #28]
 8000732:	4b1f      	ldr	r3, [pc, #124]	@ (80007b0 <MX_GPIO_Init+0xa0>)
 8000734:	69db      	ldr	r3, [r3, #28]
 8000736:	f003 0304 	and.w	r3, r3, #4
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	4b1c      	ldr	r3, [pc, #112]	@ (80007b0 <MX_GPIO_Init+0xa0>)
 8000740:	69db      	ldr	r3, [r3, #28]
 8000742:	4a1b      	ldr	r2, [pc, #108]	@ (80007b0 <MX_GPIO_Init+0xa0>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	61d3      	str	r3, [r2, #28]
 800074a:	4b19      	ldr	r3, [pc, #100]	@ (80007b0 <MX_GPIO_Init+0xa0>)
 800074c:	69db      	ldr	r3, [r3, #28]
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2101      	movs	r1, #1
 800075a:	4816      	ldr	r0, [pc, #88]	@ (80007b4 <MX_GPIO_Init+0xa4>)
 800075c:	f000 fd06 	bl	800116c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000760:	2301      	movs	r3, #1
 8000762:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000764:	2301      	movs	r3, #1
 8000766:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076c:	2300      	movs	r3, #0
 800076e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	4619      	mov	r1, r3
 8000776:	480f      	ldr	r0, [pc, #60]	@ (80007b4 <MX_GPIO_Init+0xa4>)
 8000778:	f000 fb68 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800077c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000780:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000782:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000786:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	4619      	mov	r1, r3
 8000792:	4809      	ldr	r0, [pc, #36]	@ (80007b8 <MX_GPIO_Init+0xa8>)
 8000794:	f000 fb5a 	bl	8000e4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000798:	2200      	movs	r2, #0
 800079a:	2100      	movs	r1, #0
 800079c:	2028      	movs	r0, #40	@ 0x28
 800079e:	f000 fb1e 	bl	8000dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007a2:	2028      	movs	r0, #40	@ 0x28
 80007a4:	f000 fb37 	bl	8000e16 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007a8:	bf00      	nop
 80007aa:	3720      	adds	r7, #32
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40020800 	.word	0x40020800
 80007b8:	40020000 	.word	0x40020000

080007bc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == (1<<11)){
 80007c6:	88fb      	ldrh	r3, [r7, #6]
 80007c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80007cc:	d103      	bne.n	80007d6 <HAL_GPIO_EXTI_Callback+0x1a>
        marche = 1;
 80007ce:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <HAL_GPIO_EXTI_Callback+0x34>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	701a      	strb	r2, [r3, #0]
    } else if (GPIO_Pin == (1<<12)) {
        marche = 0;
    }
}
 80007d4:	e006      	b.n	80007e4 <HAL_GPIO_EXTI_Callback+0x28>
    } else if (GPIO_Pin == (1<<12)) {
 80007d6:	88fb      	ldrh	r3, [r7, #6]
 80007d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80007dc:	d102      	bne.n	80007e4 <HAL_GPIO_EXTI_Callback+0x28>
        marche = 0;
 80007de:	4b04      	ldr	r3, [pc, #16]	@ (80007f0 <HAL_GPIO_EXTI_Callback+0x34>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	701a      	strb	r2, [r3, #0]
}
 80007e4:	bf00      	nop
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bc80      	pop	{r7}
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	200000c0 	.word	0x200000c0

080007f4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000804:	d102      	bne.n	800080c <HAL_TIM_PeriodElapsedCallback+0x18>
        tempo_500ms_ok = 1;
 8000806:	4b04      	ldr	r3, [pc, #16]	@ (8000818 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000808:	2201      	movs	r2, #1
 800080a:	701a      	strb	r2, [r3, #0]
    }
}
 800080c:	bf00      	nop
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	200000c1 	.word	0x200000c1

0800081c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000820:	b672      	cpsid	i
}
 8000822:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <Error_Handler+0x8>

08000828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800082e:	4b14      	ldr	r3, [pc, #80]	@ (8000880 <HAL_MspInit+0x58>)
 8000830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000832:	4a13      	ldr	r2, [pc, #76]	@ (8000880 <HAL_MspInit+0x58>)
 8000834:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000838:	6253      	str	r3, [r2, #36]	@ 0x24
 800083a:	4b11      	ldr	r3, [pc, #68]	@ (8000880 <HAL_MspInit+0x58>)
 800083c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800083e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000846:	4b0e      	ldr	r3, [pc, #56]	@ (8000880 <HAL_MspInit+0x58>)
 8000848:	6a1b      	ldr	r3, [r3, #32]
 800084a:	4a0d      	ldr	r2, [pc, #52]	@ (8000880 <HAL_MspInit+0x58>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6213      	str	r3, [r2, #32]
 8000852:	4b0b      	ldr	r3, [pc, #44]	@ (8000880 <HAL_MspInit+0x58>)
 8000854:	6a1b      	ldr	r3, [r3, #32]
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085e:	4b08      	ldr	r3, [pc, #32]	@ (8000880 <HAL_MspInit+0x58>)
 8000860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000862:	4a07      	ldr	r2, [pc, #28]	@ (8000880 <HAL_MspInit+0x58>)
 8000864:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000868:	6253      	str	r3, [r2, #36]	@ 0x24
 800086a:	4b05      	ldr	r3, [pc, #20]	@ (8000880 <HAL_MspInit+0x58>)
 800086c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800086e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000876:	bf00      	nop
 8000878:	3714      	adds	r7, #20
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr
 8000880:	40023800 	.word	0x40023800

08000884 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08a      	sub	sp, #40	@ 0x28
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a17      	ldr	r2, [pc, #92]	@ (8000900 <HAL_SPI_MspInit+0x7c>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d127      	bne.n	80008f6 <HAL_SPI_MspInit+0x72>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008a6:	4b17      	ldr	r3, [pc, #92]	@ (8000904 <HAL_SPI_MspInit+0x80>)
 80008a8:	6a1b      	ldr	r3, [r3, #32]
 80008aa:	4a16      	ldr	r2, [pc, #88]	@ (8000904 <HAL_SPI_MspInit+0x80>)
 80008ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80008b0:	6213      	str	r3, [r2, #32]
 80008b2:	4b14      	ldr	r3, [pc, #80]	@ (8000904 <HAL_SPI_MspInit+0x80>)
 80008b4:	6a1b      	ldr	r3, [r3, #32]
 80008b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	4b11      	ldr	r3, [pc, #68]	@ (8000904 <HAL_SPI_MspInit+0x80>)
 80008c0:	69db      	ldr	r3, [r3, #28]
 80008c2:	4a10      	ldr	r2, [pc, #64]	@ (8000904 <HAL_SPI_MspInit+0x80>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	61d3      	str	r3, [r2, #28]
 80008ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000904 <HAL_SPI_MspInit+0x80>)
 80008cc:	69db      	ldr	r3, [r3, #28]
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008d6:	23e0      	movs	r3, #224	@ 0xe0
 80008d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e2:	2303      	movs	r3, #3
 80008e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008e6:	2305      	movs	r3, #5
 80008e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	4619      	mov	r1, r3
 80008f0:	4805      	ldr	r0, [pc, #20]	@ (8000908 <HAL_SPI_MspInit+0x84>)
 80008f2:	f000 faab 	bl	8000e4c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80008f6:	bf00      	nop
 80008f8:	3728      	adds	r7, #40	@ 0x28
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40013000 	.word	0x40013000
 8000904:	40023800 	.word	0x40023800
 8000908:	40020000 	.word	0x40020000

0800090c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800091c:	d113      	bne.n	8000946 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800091e:	4b0c      	ldr	r3, [pc, #48]	@ (8000950 <HAL_TIM_Base_MspInit+0x44>)
 8000920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000922:	4a0b      	ldr	r2, [pc, #44]	@ (8000950 <HAL_TIM_Base_MspInit+0x44>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6253      	str	r3, [r2, #36]	@ 0x24
 800092a:	4b09      	ldr	r3, [pc, #36]	@ (8000950 <HAL_TIM_Base_MspInit+0x44>)
 800092c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	2100      	movs	r1, #0
 800093a:	201c      	movs	r0, #28
 800093c:	f000 fa4f 	bl	8000dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000940:	201c      	movs	r0, #28
 8000942:	f000 fa68 	bl	8000e16 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000946:	bf00      	nop
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800

08000954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <NMI_Handler+0x4>

0800095c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <HardFault_Handler+0x4>

08000964 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <MemManage_Handler+0x4>

0800096c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <BusFault_Handler+0x4>

08000974 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <UsageFault_Handler+0x4>

0800097c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr

08000988 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr

08000994 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	bc80      	pop	{r7}
 800099e:	4770      	bx	lr

080009a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a4:	f000 f928 	bl	8000bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}

080009ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009b0:	4802      	ldr	r0, [pc, #8]	@ (80009bc <TIM2_IRQHandler+0x10>)
 80009b2:	f001 fcc9 	bl	8002348 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000080 	.word	0x20000080

080009c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80009c4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80009c8:	f000 fbe8 	bl	800119c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80009cc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80009d0:	f000 fbe4 	bl	800119c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr

080009e4 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 80009e4:	f7ff fff8 	bl	80009d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009e8:	480b      	ldr	r0, [pc, #44]	@ (8000a18 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009ea:	490c      	ldr	r1, [pc, #48]	@ (8000a1c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009ec:	4a0c      	ldr	r2, [pc, #48]	@ (8000a20 <LoopFillZerobss+0x16>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f0:	e002      	b.n	80009f8 <LoopCopyDataInit>

080009f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f6:	3304      	adds	r3, #4

080009f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009fc:	d3f9      	bcc.n	80009f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fe:	4a09      	ldr	r2, [pc, #36]	@ (8000a24 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a00:	4c09      	ldr	r4, [pc, #36]	@ (8000a28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a04:	e001      	b.n	8000a0a <LoopFillZerobss>

08000a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a08:	3204      	adds	r2, #4

08000a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a0c:	d3fb      	bcc.n	8000a06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a0e:	f001 ffc5 	bl	800299c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a12:	f7ff fd7d 	bl	8000510 <main>
  bx lr
 8000a16:	4770      	bx	lr
  ldr r0, =_sdata
 8000a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a1c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a20:	08002a38 	.word	0x08002a38
  ldr r2, =_sbss
 8000a24:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a28:	200000c8 	.word	0x200000c8

08000a2c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a2c:	e7fe      	b.n	8000a2c <ADC1_IRQHandler>

08000a2e <MAX7219_Init>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Init (void)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	af00      	add	r7, sp, #0
                               // configure "LOAD" as output

  MAX7219_Write(REG_SCAN_LIMIT, 7);                   // set up to scan all eight digits
 8000a32:	2107      	movs	r1, #7
 8000a34:	200b      	movs	r0, #11
 8000a36:	f000 f85d 	bl	8000af4 <MAX7219_Write>
  MAX7219_Write(REG_DECODE, 0x00);                    // set to "no decode" for all digits
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	2009      	movs	r0, #9
 8000a3e:	f000 f859 	bl	8000af4 <MAX7219_Write>
  MAX7219_ShutdownStop();                             // select normal operation (i.e. not shutdown)
 8000a42:	f000 f809 	bl	8000a58 <MAX7219_ShutdownStop>
  MAX7219_DisplayTestStop();                          // select normal operation (i.e. not test mode)
 8000a46:	f000 f80f 	bl	8000a68 <MAX7219_DisplayTestStop>
  MAX7219_Clear();                                    // clear all digits
 8000a4a:	f000 f827 	bl	8000a9c <MAX7219_Clear>
  MAX7219_SetBrightness(INTENSITY_MAX);               // set to maximum intensity
 8000a4e:	200f      	movs	r0, #15
 8000a50:	f000 f812 	bl	8000a78 <MAX7219_SetBrightness>
}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <MAX7219_ShutdownStop>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_ShutdownStop (void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_SHUTDOWN, 1);                     // put MAX7219 into "normal" mode
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	200c      	movs	r0, #12
 8000a60:	f000 f848 	bl	8000af4 <MAX7219_Write>
}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <MAX7219_DisplayTestStop>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_DisplayTestStop (void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_DISPLAY_TEST, 0);                 // put MAX7219 into "normal" mode
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	200f      	movs	r0, #15
 8000a70:	f000 f840 	bl	8000af4 <MAX7219_Write>
}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <MAX7219_SetBrightness>:
* Arguments  : brightness (0-15)
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_SetBrightness (char brightness)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	71fb      	strb	r3, [r7, #7]
  brightness &= 0x0f;                                 // mask off extra bits
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	f003 030f 	and.w	r3, r3, #15
 8000a88:	71fb      	strb	r3, [r7, #7]
  MAX7219_Write(REG_INTENSITY, brightness);           // set brightness
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	200a      	movs	r0, #10
 8000a90:	f000 f830 	bl	8000af4 <MAX7219_Write>
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <MAX7219_Clear>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Clear (void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
  char i;
  for (i=0; i < 8; i++)
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	71fb      	strb	r3, [r7, #7]
 8000aa6:	e007      	b.n	8000ab8 <MAX7219_Clear+0x1c>
    MAX7219_Write(i, 0x00);                           // turn all segments off
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4618      	mov	r0, r3
 8000aae:	f000 f821 	bl	8000af4 <MAX7219_Write>
  for (i=0; i < 8; i++)
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	71fb      	strb	r3, [r7, #7]
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	2b07      	cmp	r3, #7
 8000abc:	d9f4      	bls.n	8000aa8 <MAX7219_Clear+0xc>
}
 8000abe:	bf00      	nop
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <MAX7219_DisplayChar>:
*              character = character to display (0-9, A-Z)
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_DisplayChar(char digit, char character)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	460a      	mov	r2, r1
 8000ad2:	71fb      	strb	r3, [r7, #7]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	71bb      	strb	r3, [r7, #6]
  //MAX7219_Write(digit, MAX7219_LookupCode(character));
	MAX7219_Write(digit, conv_7seg[character]);
 8000ad8:	79bb      	ldrb	r3, [r7, #6]
 8000ada:	4a05      	ldr	r2, [pc, #20]	@ (8000af0 <MAX7219_DisplayChar+0x28>)
 8000adc:	5cd2      	ldrb	r2, [r2, r3]
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	4611      	mov	r1, r2
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 f806 	bl	8000af4 <MAX7219_Write>
}
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	08002a18 	.word	0x08002a18

08000af4 <MAX7219_Write>:
*              dataout = data to write to MAX7219
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Write (unsigned char reg_number, unsigned char dataout)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	460a      	mov	r2, r1
 8000afe:	71fb      	strb	r3, [r7, #7]
 8000b00:	4613      	mov	r3, r2
 8000b02:	71bb      	strb	r3, [r7, #6]
 MAX7219_nCS_PORT->BSRR = (uint32_t)MAX7219_nCS_PIN<<16;// nCS = 0                                          // take LOAD high to begin
 8000b04:	4b09      	ldr	r3, [pc, #36]	@ (8000b2c <MAX7219_Write+0x38>)
 8000b06:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000b0a:	619a      	str	r2, [r3, #24]
  MAX7219_SendByte(reg_number);                       // write register number to MAX7219
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f000 f80e 	bl	8000b30 <MAX7219_SendByte>
  MAX7219_SendByte(dataout);                          // write data to MAX7219
 8000b14:	79bb      	ldrb	r3, [r7, #6]
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 f80a 	bl	8000b30 <MAX7219_SendByte>
  MAX7219_nCS_PORT->BSRR = (uint32_t)MAX7219_nCS_PIN;// nCS = 1                                       // take LOAD low to latch in data
 8000b1c:	4b03      	ldr	r3, [pc, #12]	@ (8000b2c <MAX7219_Write+0x38>)
 8000b1e:	2201      	movs	r2, #1
 8000b20:	619a      	str	r2, [r3, #24]
 }
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40020800 	.word	0x40020800

08000b30 <MAX7219_SendByte>:
* Returns    : none
*********************************************************************************************************
*/

static void MAX7219_SendByte (unsigned char dataout)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	71fb      	strb	r3, [r7, #7]

	HAL_SPI_Transmit(&hspi1, &dataout, 1, 1000);
 8000b3a:	1df9      	adds	r1, r7, #7
 8000b3c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b40:	2201      	movs	r2, #1
 8000b42:	4803      	ldr	r0, [pc, #12]	@ (8000b50 <MAX7219_SendByte+0x20>)
 8000b44:	f001 f94d 	bl	8001de2 <HAL_SPI_Transmit>

}
 8000b48:	bf00      	nop
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000028 	.word	0x20000028

08000b54 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b5e:	2003      	movs	r0, #3
 8000b60:	f000 f932 	bl	8000dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b64:	200f      	movs	r0, #15
 8000b66:	f000 f80d 	bl	8000b84 <HAL_InitTick>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d002      	beq.n	8000b76 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b70:	2301      	movs	r3, #1
 8000b72:	71fb      	strb	r3, [r7, #7]
 8000b74:	e001      	b.n	8000b7a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b76:	f7ff fe57 	bl	8000828 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b90:	4b16      	ldr	r3, [pc, #88]	@ (8000bec <HAL_InitTick+0x68>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d022      	beq.n	8000bde <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b98:	4b15      	ldr	r3, [pc, #84]	@ (8000bf0 <HAL_InitTick+0x6c>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4b13      	ldr	r3, [pc, #76]	@ (8000bec <HAL_InitTick+0x68>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ba4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bac:	4618      	mov	r0, r3
 8000bae:	f000 f940 	bl	8000e32 <HAL_SYSTICK_Config>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d10f      	bne.n	8000bd8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2b0f      	cmp	r3, #15
 8000bbc:	d809      	bhi.n	8000bd2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	6879      	ldr	r1, [r7, #4]
 8000bc2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bc6:	f000 f90a 	bl	8000dde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bca:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf4 <HAL_InitTick+0x70>)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6013      	str	r3, [r2, #0]
 8000bd0:	e007      	b.n	8000be2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	73fb      	strb	r3, [r7, #15]
 8000bd6:	e004      	b.n	8000be2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	73fb      	strb	r3, [r7, #15]
 8000bdc:	e001      	b.n	8000be2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000008 	.word	0x20000008
 8000bf0:	20000000 	.word	0x20000000
 8000bf4:	20000004 	.word	0x20000004

08000bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bfc:	4b05      	ldr	r3, [pc, #20]	@ (8000c14 <HAL_IncTick+0x1c>)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	4b05      	ldr	r3, [pc, #20]	@ (8000c18 <HAL_IncTick+0x20>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4413      	add	r3, r2
 8000c06:	4a03      	ldr	r2, [pc, #12]	@ (8000c14 <HAL_IncTick+0x1c>)
 8000c08:	6013      	str	r3, [r2, #0]
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bc80      	pop	{r7}
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	200000c4 	.word	0x200000c4
 8000c18:	20000008 	.word	0x20000008

08000c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c20:	4b02      	ldr	r3, [pc, #8]	@ (8000c2c <HAL_GetTick+0x10>)
 8000c22:	681b      	ldr	r3, [r3, #0]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr
 8000c2c:	200000c4 	.word	0x200000c4

08000c30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c40:	4b0c      	ldr	r3, [pc, #48]	@ (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c46:	68ba      	ldr	r2, [r7, #8]
 8000c48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c62:	4a04      	ldr	r2, [pc, #16]	@ (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	60d3      	str	r3, [r2, #12]
}
 8000c68:	bf00      	nop
 8000c6a:	3714      	adds	r7, #20
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c7c:	4b04      	ldr	r3, [pc, #16]	@ (8000c90 <__NVIC_GetPriorityGrouping+0x18>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	0a1b      	lsrs	r3, r3, #8
 8000c82:	f003 0307 	and.w	r3, r3, #7
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	db0b      	blt.n	8000cbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	f003 021f 	and.w	r2, r3, #31
 8000cac:	4906      	ldr	r1, [pc, #24]	@ (8000cc8 <__NVIC_EnableIRQ+0x34>)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	095b      	lsrs	r3, r3, #5
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr
 8000cc8:	e000e100 	.word	0xe000e100

08000ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	6039      	str	r1, [r7, #0]
 8000cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	db0a      	blt.n	8000cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	b2da      	uxtb	r2, r3
 8000ce4:	490c      	ldr	r1, [pc, #48]	@ (8000d18 <__NVIC_SetPriority+0x4c>)
 8000ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cea:	0112      	lsls	r2, r2, #4
 8000cec:	b2d2      	uxtb	r2, r2
 8000cee:	440b      	add	r3, r1
 8000cf0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf4:	e00a      	b.n	8000d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	4908      	ldr	r1, [pc, #32]	@ (8000d1c <__NVIC_SetPriority+0x50>)
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	f003 030f 	and.w	r3, r3, #15
 8000d02:	3b04      	subs	r3, #4
 8000d04:	0112      	lsls	r2, r2, #4
 8000d06:	b2d2      	uxtb	r2, r2
 8000d08:	440b      	add	r3, r1
 8000d0a:	761a      	strb	r2, [r3, #24]
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	e000e100 	.word	0xe000e100
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b089      	sub	sp, #36	@ 0x24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	f1c3 0307 	rsb	r3, r3, #7
 8000d3a:	2b04      	cmp	r3, #4
 8000d3c:	bf28      	it	cs
 8000d3e:	2304      	movcs	r3, #4
 8000d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	3304      	adds	r3, #4
 8000d46:	2b06      	cmp	r3, #6
 8000d48:	d902      	bls.n	8000d50 <NVIC_EncodePriority+0x30>
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	3b03      	subs	r3, #3
 8000d4e:	e000      	b.n	8000d52 <NVIC_EncodePriority+0x32>
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	43da      	mvns	r2, r3
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	401a      	ands	r2, r3
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d68:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d72:	43d9      	mvns	r1, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d78:	4313      	orrs	r3, r2
         );
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3724      	adds	r7, #36	@ 0x24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr

08000d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d94:	d301      	bcc.n	8000d9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d96:	2301      	movs	r3, #1
 8000d98:	e00f      	b.n	8000dba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc4 <SysTick_Config+0x40>)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000da2:	210f      	movs	r1, #15
 8000da4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000da8:	f7ff ff90 	bl	8000ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dac:	4b05      	ldr	r3, [pc, #20]	@ (8000dc4 <SysTick_Config+0x40>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db2:	4b04      	ldr	r3, [pc, #16]	@ (8000dc4 <SysTick_Config+0x40>)
 8000db4:	2207      	movs	r2, #7
 8000db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	e000e010 	.word	0xe000e010

08000dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f7ff ff2d 	bl	8000c30 <__NVIC_SetPriorityGrouping>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b086      	sub	sp, #24
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	4603      	mov	r3, r0
 8000de6:	60b9      	str	r1, [r7, #8]
 8000de8:	607a      	str	r2, [r7, #4]
 8000dea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df0:	f7ff ff42 	bl	8000c78 <__NVIC_GetPriorityGrouping>
 8000df4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	68b9      	ldr	r1, [r7, #8]
 8000dfa:	6978      	ldr	r0, [r7, #20]
 8000dfc:	f7ff ff90 	bl	8000d20 <NVIC_EncodePriority>
 8000e00:	4602      	mov	r2, r0
 8000e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e06:	4611      	mov	r1, r2
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff ff5f 	bl	8000ccc <__NVIC_SetPriority>
}
 8000e0e:	bf00      	nop
 8000e10:	3718      	adds	r7, #24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff ff35 	bl	8000c94 <__NVIC_EnableIRQ>
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff ffa2 	bl	8000d84 <SysTick_Config>
 8000e40:	4603      	mov	r3, r0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
	...

08000e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b087      	sub	sp, #28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e62:	e160      	b.n	8001126 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	2101      	movs	r1, #1
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e70:	4013      	ands	r3, r2
 8000e72:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	f000 8152 	beq.w	8001120 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f003 0303 	and.w	r3, r3, #3
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d005      	beq.n	8000e94 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d130      	bne.n	8000ef6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	2203      	movs	r2, #3
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	68da      	ldr	r2, [r3, #12]
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000eca:	2201      	movs	r2, #1
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	091b      	lsrs	r3, r3, #4
 8000ee0:	f003 0201 	and.w	r2, r3, #1
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f003 0303 	and.w	r3, r3, #3
 8000efe:	2b03      	cmp	r3, #3
 8000f00:	d017      	beq.n	8000f32 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43db      	mvns	r3, r3
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	4013      	ands	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	689a      	ldr	r2, [r3, #8]
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f003 0303 	and.w	r3, r3, #3
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d123      	bne.n	8000f86 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	08da      	lsrs	r2, r3, #3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	3208      	adds	r2, #8
 8000f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f4a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	220f      	movs	r2, #15
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	691a      	ldr	r2, [r3, #16]
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	f003 0307 	and.w	r3, r3, #7
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	08da      	lsrs	r2, r3, #3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3208      	adds	r2, #8
 8000f80:	6939      	ldr	r1, [r7, #16]
 8000f82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	2203      	movs	r2, #3
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43db      	mvns	r3, r3
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f003 0203 	and.w	r2, r3, #3
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	f000 80ac 	beq.w	8001120 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc8:	4b5e      	ldr	r3, [pc, #376]	@ (8001144 <HAL_GPIO_Init+0x2f8>)
 8000fca:	6a1b      	ldr	r3, [r3, #32]
 8000fcc:	4a5d      	ldr	r2, [pc, #372]	@ (8001144 <HAL_GPIO_Init+0x2f8>)
 8000fce:	f043 0301 	orr.w	r3, r3, #1
 8000fd2:	6213      	str	r3, [r2, #32]
 8000fd4:	4b5b      	ldr	r3, [pc, #364]	@ (8001144 <HAL_GPIO_Init+0x2f8>)
 8000fd6:	6a1b      	ldr	r3, [r3, #32]
 8000fd8:	f003 0301 	and.w	r3, r3, #1
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000fe0:	4a59      	ldr	r2, [pc, #356]	@ (8001148 <HAL_GPIO_Init+0x2fc>)
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	089b      	lsrs	r3, r3, #2
 8000fe6:	3302      	adds	r3, #2
 8000fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	f003 0303 	and.w	r3, r3, #3
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	220f      	movs	r2, #15
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4013      	ands	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a51      	ldr	r2, [pc, #324]	@ (800114c <HAL_GPIO_Init+0x300>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d025      	beq.n	8001058 <HAL_GPIO_Init+0x20c>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a50      	ldr	r2, [pc, #320]	@ (8001150 <HAL_GPIO_Init+0x304>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d01f      	beq.n	8001054 <HAL_GPIO_Init+0x208>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a4f      	ldr	r2, [pc, #316]	@ (8001154 <HAL_GPIO_Init+0x308>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d019      	beq.n	8001050 <HAL_GPIO_Init+0x204>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a4e      	ldr	r2, [pc, #312]	@ (8001158 <HAL_GPIO_Init+0x30c>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d013      	beq.n	800104c <HAL_GPIO_Init+0x200>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a4d      	ldr	r2, [pc, #308]	@ (800115c <HAL_GPIO_Init+0x310>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d00d      	beq.n	8001048 <HAL_GPIO_Init+0x1fc>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a4c      	ldr	r2, [pc, #304]	@ (8001160 <HAL_GPIO_Init+0x314>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d007      	beq.n	8001044 <HAL_GPIO_Init+0x1f8>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a4b      	ldr	r2, [pc, #300]	@ (8001164 <HAL_GPIO_Init+0x318>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d101      	bne.n	8001040 <HAL_GPIO_Init+0x1f4>
 800103c:	2306      	movs	r3, #6
 800103e:	e00c      	b.n	800105a <HAL_GPIO_Init+0x20e>
 8001040:	2307      	movs	r3, #7
 8001042:	e00a      	b.n	800105a <HAL_GPIO_Init+0x20e>
 8001044:	2305      	movs	r3, #5
 8001046:	e008      	b.n	800105a <HAL_GPIO_Init+0x20e>
 8001048:	2304      	movs	r3, #4
 800104a:	e006      	b.n	800105a <HAL_GPIO_Init+0x20e>
 800104c:	2303      	movs	r3, #3
 800104e:	e004      	b.n	800105a <HAL_GPIO_Init+0x20e>
 8001050:	2302      	movs	r3, #2
 8001052:	e002      	b.n	800105a <HAL_GPIO_Init+0x20e>
 8001054:	2301      	movs	r3, #1
 8001056:	e000      	b.n	800105a <HAL_GPIO_Init+0x20e>
 8001058:	2300      	movs	r3, #0
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	f002 0203 	and.w	r2, r2, #3
 8001060:	0092      	lsls	r2, r2, #2
 8001062:	4093      	lsls	r3, r2
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	4313      	orrs	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800106a:	4937      	ldr	r1, [pc, #220]	@ (8001148 <HAL_GPIO_Init+0x2fc>)
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	089b      	lsrs	r3, r3, #2
 8001070:	3302      	adds	r3, #2
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001078:	4b3b      	ldr	r3, [pc, #236]	@ (8001168 <HAL_GPIO_Init+0x31c>)
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	43db      	mvns	r3, r3
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	4013      	ands	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d003      	beq.n	800109c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	4313      	orrs	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800109c:	4a32      	ldr	r2, [pc, #200]	@ (8001168 <HAL_GPIO_Init+0x31c>)
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010a2:	4b31      	ldr	r3, [pc, #196]	@ (8001168 <HAL_GPIO_Init+0x31c>)
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	43db      	mvns	r3, r3
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	4013      	ands	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d003      	beq.n	80010c6 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010c6:	4a28      	ldr	r2, [pc, #160]	@ (8001168 <HAL_GPIO_Init+0x31c>)
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010cc:	4b26      	ldr	r3, [pc, #152]	@ (8001168 <HAL_GPIO_Init+0x31c>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	43db      	mvns	r3, r3
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4013      	ands	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d003      	beq.n	80010f0 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010f0:	4a1d      	ldr	r2, [pc, #116]	@ (8001168 <HAL_GPIO_Init+0x31c>)
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001168 <HAL_GPIO_Init+0x31c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	43db      	mvns	r3, r3
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	4013      	ands	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4313      	orrs	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800111a:	4a13      	ldr	r2, [pc, #76]	@ (8001168 <HAL_GPIO_Init+0x31c>)
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	3301      	adds	r3, #1
 8001124:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	fa22 f303 	lsr.w	r3, r2, r3
 8001130:	2b00      	cmp	r3, #0
 8001132:	f47f ae97 	bne.w	8000e64 <HAL_GPIO_Init+0x18>
  }
}
 8001136:	bf00      	nop
 8001138:	bf00      	nop
 800113a:	371c      	adds	r7, #28
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40023800 	.word	0x40023800
 8001148:	40010000 	.word	0x40010000
 800114c:	40020000 	.word	0x40020000
 8001150:	40020400 	.word	0x40020400
 8001154:	40020800 	.word	0x40020800
 8001158:	40020c00 	.word	0x40020c00
 800115c:	40021000 	.word	0x40021000
 8001160:	40021400 	.word	0x40021400
 8001164:	40021800 	.word	0x40021800
 8001168:	40010400 	.word	0x40010400

0800116c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	807b      	strh	r3, [r7, #2]
 8001178:	4613      	mov	r3, r2
 800117a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800117c:	787b      	ldrb	r3, [r7, #1]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001182:	887a      	ldrh	r2, [r7, #2]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001188:	e003      	b.n	8001192 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800118a:	887b      	ldrh	r3, [r7, #2]
 800118c:	041a      	lsls	r2, r3, #16
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	619a      	str	r2, [r3, #24]
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr

0800119c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80011a6:	4b08      	ldr	r3, [pc, #32]	@ (80011c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011a8:	695a      	ldr	r2, [r3, #20]
 80011aa:	88fb      	ldrh	r3, [r7, #6]
 80011ac:	4013      	ands	r3, r2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d006      	beq.n	80011c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011b2:	4a05      	ldr	r2, [pc, #20]	@ (80011c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011b4:	88fb      	ldrh	r3, [r7, #6]
 80011b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011b8:	88fb      	ldrh	r3, [r7, #6]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff fafe 	bl	80007bc <HAL_GPIO_EXTI_Callback>
  }
}
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40010400 	.word	0x40010400

080011cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b088      	sub	sp, #32
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d101      	bne.n	80011de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e31d      	b.n	800181a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011de:	4b94      	ldr	r3, [pc, #592]	@ (8001430 <HAL_RCC_OscConfig+0x264>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f003 030c 	and.w	r3, r3, #12
 80011e6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011e8:	4b91      	ldr	r3, [pc, #580]	@ (8001430 <HAL_RCC_OscConfig+0x264>)
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011f0:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d07b      	beq.n	80012f6 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	2b08      	cmp	r3, #8
 8001202:	d006      	beq.n	8001212 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	2b0c      	cmp	r3, #12
 8001208:	d10f      	bne.n	800122a <HAL_RCC_OscConfig+0x5e>
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001210:	d10b      	bne.n	800122a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001212:	4b87      	ldr	r3, [pc, #540]	@ (8001430 <HAL_RCC_OscConfig+0x264>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d06a      	beq.n	80012f4 <HAL_RCC_OscConfig+0x128>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d166      	bne.n	80012f4 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e2f7      	b.n	800181a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d106      	bne.n	8001240 <HAL_RCC_OscConfig+0x74>
 8001232:	4b7f      	ldr	r3, [pc, #508]	@ (8001430 <HAL_RCC_OscConfig+0x264>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a7e      	ldr	r2, [pc, #504]	@ (8001430 <HAL_RCC_OscConfig+0x264>)
 8001238:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800123c:	6013      	str	r3, [r2, #0]
 800123e:	e02d      	b.n	800129c <HAL_RCC_OscConfig+0xd0>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d10c      	bne.n	8001262 <HAL_RCC_OscConfig+0x96>
 8001248:	4b79      	ldr	r3, [pc, #484]	@ (8001430 <HAL_RCC_OscConfig+0x264>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a78      	ldr	r2, [pc, #480]	@ (8001430 <HAL_RCC_OscConfig+0x264>)
 800124e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001252:	6013      	str	r3, [r2, #0]
 8001254:	4b76      	ldr	r3, [pc, #472]	@ (8001430 <HAL_RCC_OscConfig+0x264>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a75      	ldr	r2, [pc, #468]	@ (8001430 <HAL_RCC_OscConfig+0x264>)
 800125a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800125e:	6013      	str	r3, [r2, #0]
 8001260:	e01c      	b.n	800129c <HAL_RCC_OscConfig+0xd0>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b05      	cmp	r3, #5
 8001268:	d10c      	bne.n	8001284 <HAL_RCC_OscConfig+0xb8>
 800126a:	4b71      	ldr	r3, [pc, #452]	@ (8001430 <HAL_RCC_OscConfig+0x264>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a70      	ldr	r2, [pc, #448]	@ (8001430 <HAL_RCC_OscConfig+0x264>)
 8001270:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	4b6e      	ldr	r3, [pc, #440]	@ (8001430 <HAL_RCC_OscConfig+0x264>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a6d      	ldr	r2, [pc, #436]	@ (8001430 <HAL_RCC_OscConfig+0x264>)
 800127c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	e00b      	b.n	800129c <HAL_RCC_OscConfig+0xd0>
 8001284:	4b6a      	ldr	r3, [pc, #424]	@ (8001430 <HAL_RCC_OscConfig+0x264>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a69      	ldr	r2, [pc, #420]	@ (8001430 <HAL_RCC_OscConfig+0x264>)
 800128a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800128e:	6013      	str	r3, [r2, #0]
 8001290:	4b67      	ldr	r3, [pc, #412]	@ (8001430 <HAL_RCC_OscConfig+0x264>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a66      	ldr	r2, [pc, #408]	@ (8001430 <HAL_RCC_OscConfig+0x264>)
 8001296:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800129a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d013      	beq.n	80012cc <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a4:	f7ff fcba 	bl	8000c1c <HAL_GetTick>
 80012a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012aa:	e008      	b.n	80012be <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012ac:	f7ff fcb6 	bl	8000c1c <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b64      	cmp	r3, #100	@ 0x64
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e2ad      	b.n	800181a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012be:	4b5c      	ldr	r3, [pc, #368]	@ (8001430 <HAL_RCC_OscConfig+0x264>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0f0      	beq.n	80012ac <HAL_RCC_OscConfig+0xe0>
 80012ca:	e014      	b.n	80012f6 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012cc:	f7ff fca6 	bl	8000c1c <HAL_GetTick>
 80012d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012d4:	f7ff fca2 	bl	8000c1c <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b64      	cmp	r3, #100	@ 0x64
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e299      	b.n	800181a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012e6:	4b52      	ldr	r3, [pc, #328]	@ (8001430 <HAL_RCC_OscConfig+0x264>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d1f0      	bne.n	80012d4 <HAL_RCC_OscConfig+0x108>
 80012f2:	e000      	b.n	80012f6 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d05a      	beq.n	80013b8 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	2b04      	cmp	r3, #4
 8001306:	d005      	beq.n	8001314 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	2b0c      	cmp	r3, #12
 800130c:	d119      	bne.n	8001342 <HAL_RCC_OscConfig+0x176>
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d116      	bne.n	8001342 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001314:	4b46      	ldr	r3, [pc, #280]	@ (8001430 <HAL_RCC_OscConfig+0x264>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d005      	beq.n	800132c <HAL_RCC_OscConfig+0x160>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d001      	beq.n	800132c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e276      	b.n	800181a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132c:	4b40      	ldr	r3, [pc, #256]	@ (8001430 <HAL_RCC_OscConfig+0x264>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	691b      	ldr	r3, [r3, #16]
 8001338:	021b      	lsls	r3, r3, #8
 800133a:	493d      	ldr	r1, [pc, #244]	@ (8001430 <HAL_RCC_OscConfig+0x264>)
 800133c:	4313      	orrs	r3, r2
 800133e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001340:	e03a      	b.n	80013b8 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d020      	beq.n	800138c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800134a:	4b3a      	ldr	r3, [pc, #232]	@ (8001434 <HAL_RCC_OscConfig+0x268>)
 800134c:	2201      	movs	r2, #1
 800134e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001350:	f7ff fc64 	bl	8000c1c <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001358:	f7ff fc60 	bl	8000c1c <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e257      	b.n	800181a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800136a:	4b31      	ldr	r3, [pc, #196]	@ (8001430 <HAL_RCC_OscConfig+0x264>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0f0      	beq.n	8001358 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001376:	4b2e      	ldr	r3, [pc, #184]	@ (8001430 <HAL_RCC_OscConfig+0x264>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	691b      	ldr	r3, [r3, #16]
 8001382:	021b      	lsls	r3, r3, #8
 8001384:	492a      	ldr	r1, [pc, #168]	@ (8001430 <HAL_RCC_OscConfig+0x264>)
 8001386:	4313      	orrs	r3, r2
 8001388:	604b      	str	r3, [r1, #4]
 800138a:	e015      	b.n	80013b8 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800138c:	4b29      	ldr	r3, [pc, #164]	@ (8001434 <HAL_RCC_OscConfig+0x268>)
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001392:	f7ff fc43 	bl	8000c1c <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001398:	e008      	b.n	80013ac <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800139a:	f7ff fc3f 	bl	8000c1c <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e236      	b.n	800181a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013ac:	4b20      	ldr	r3, [pc, #128]	@ (8001430 <HAL_RCC_OscConfig+0x264>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1f0      	bne.n	800139a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0310 	and.w	r3, r3, #16
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f000 80b8 	beq.w	8001536 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d170      	bne.n	80014ae <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013cc:	4b18      	ldr	r3, [pc, #96]	@ (8001430 <HAL_RCC_OscConfig+0x264>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d005      	beq.n	80013e4 <HAL_RCC_OscConfig+0x218>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d101      	bne.n	80013e4 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e21a      	b.n	800181a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a1a      	ldr	r2, [r3, #32]
 80013e8:	4b11      	ldr	r3, [pc, #68]	@ (8001430 <HAL_RCC_OscConfig+0x264>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d921      	bls.n	8001438 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a1b      	ldr	r3, [r3, #32]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f000 fc09 	bl	8001c10 <RCC_SetFlashLatencyFromMSIRange>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e208      	b.n	800181a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001408:	4b09      	ldr	r3, [pc, #36]	@ (8001430 <HAL_RCC_OscConfig+0x264>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a1b      	ldr	r3, [r3, #32]
 8001414:	4906      	ldr	r1, [pc, #24]	@ (8001430 <HAL_RCC_OscConfig+0x264>)
 8001416:	4313      	orrs	r3, r2
 8001418:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800141a:	4b05      	ldr	r3, [pc, #20]	@ (8001430 <HAL_RCC_OscConfig+0x264>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	061b      	lsls	r3, r3, #24
 8001428:	4901      	ldr	r1, [pc, #4]	@ (8001430 <HAL_RCC_OscConfig+0x264>)
 800142a:	4313      	orrs	r3, r2
 800142c:	604b      	str	r3, [r1, #4]
 800142e:	e020      	b.n	8001472 <HAL_RCC_OscConfig+0x2a6>
 8001430:	40023800 	.word	0x40023800
 8001434:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001438:	4b99      	ldr	r3, [pc, #612]	@ (80016a0 <HAL_RCC_OscConfig+0x4d4>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a1b      	ldr	r3, [r3, #32]
 8001444:	4996      	ldr	r1, [pc, #600]	@ (80016a0 <HAL_RCC_OscConfig+0x4d4>)
 8001446:	4313      	orrs	r3, r2
 8001448:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800144a:	4b95      	ldr	r3, [pc, #596]	@ (80016a0 <HAL_RCC_OscConfig+0x4d4>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	061b      	lsls	r3, r3, #24
 8001458:	4991      	ldr	r1, [pc, #580]	@ (80016a0 <HAL_RCC_OscConfig+0x4d4>)
 800145a:	4313      	orrs	r3, r2
 800145c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a1b      	ldr	r3, [r3, #32]
 8001462:	4618      	mov	r0, r3
 8001464:	f000 fbd4 	bl	8001c10 <RCC_SetFlashLatencyFromMSIRange>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e1d3      	b.n	800181a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a1b      	ldr	r3, [r3, #32]
 8001476:	0b5b      	lsrs	r3, r3, #13
 8001478:	3301      	adds	r3, #1
 800147a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001482:	4a87      	ldr	r2, [pc, #540]	@ (80016a0 <HAL_RCC_OscConfig+0x4d4>)
 8001484:	6892      	ldr	r2, [r2, #8]
 8001486:	0912      	lsrs	r2, r2, #4
 8001488:	f002 020f 	and.w	r2, r2, #15
 800148c:	4985      	ldr	r1, [pc, #532]	@ (80016a4 <HAL_RCC_OscConfig+0x4d8>)
 800148e:	5c8a      	ldrb	r2, [r1, r2]
 8001490:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001492:	4a85      	ldr	r2, [pc, #532]	@ (80016a8 <HAL_RCC_OscConfig+0x4dc>)
 8001494:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001496:	4b85      	ldr	r3, [pc, #532]	@ (80016ac <HAL_RCC_OscConfig+0x4e0>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff fb72 	bl	8000b84 <HAL_InitTick>
 80014a0:	4603      	mov	r3, r0
 80014a2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d045      	beq.n	8001536 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80014aa:	7bfb      	ldrb	r3, [r7, #15]
 80014ac:	e1b5      	b.n	800181a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d029      	beq.n	800150a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014b6:	4b7e      	ldr	r3, [pc, #504]	@ (80016b0 <HAL_RCC_OscConfig+0x4e4>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014bc:	f7ff fbae 	bl	8000c1c <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014c4:	f7ff fbaa 	bl	8000c1c <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e1a1      	b.n	800181a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80014d6:	4b72      	ldr	r3, [pc, #456]	@ (80016a0 <HAL_RCC_OscConfig+0x4d4>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0f0      	beq.n	80014c4 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014e2:	4b6f      	ldr	r3, [pc, #444]	@ (80016a0 <HAL_RCC_OscConfig+0x4d4>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	496c      	ldr	r1, [pc, #432]	@ (80016a0 <HAL_RCC_OscConfig+0x4d4>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014f4:	4b6a      	ldr	r3, [pc, #424]	@ (80016a0 <HAL_RCC_OscConfig+0x4d4>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	69db      	ldr	r3, [r3, #28]
 8001500:	061b      	lsls	r3, r3, #24
 8001502:	4967      	ldr	r1, [pc, #412]	@ (80016a0 <HAL_RCC_OscConfig+0x4d4>)
 8001504:	4313      	orrs	r3, r2
 8001506:	604b      	str	r3, [r1, #4]
 8001508:	e015      	b.n	8001536 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800150a:	4b69      	ldr	r3, [pc, #420]	@ (80016b0 <HAL_RCC_OscConfig+0x4e4>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001510:	f7ff fb84 	bl	8000c1c <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001518:	f7ff fb80 	bl	8000c1c <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e177      	b.n	800181a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800152a:	4b5d      	ldr	r3, [pc, #372]	@ (80016a0 <HAL_RCC_OscConfig+0x4d4>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f0      	bne.n	8001518 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0308 	and.w	r3, r3, #8
 800153e:	2b00      	cmp	r3, #0
 8001540:	d030      	beq.n	80015a4 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d016      	beq.n	8001578 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800154a:	4b5a      	ldr	r3, [pc, #360]	@ (80016b4 <HAL_RCC_OscConfig+0x4e8>)
 800154c:	2201      	movs	r2, #1
 800154e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001550:	f7ff fb64 	bl	8000c1c <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001558:	f7ff fb60 	bl	8000c1c <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e157      	b.n	800181a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800156a:	4b4d      	ldr	r3, [pc, #308]	@ (80016a0 <HAL_RCC_OscConfig+0x4d4>)
 800156c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d0f0      	beq.n	8001558 <HAL_RCC_OscConfig+0x38c>
 8001576:	e015      	b.n	80015a4 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001578:	4b4e      	ldr	r3, [pc, #312]	@ (80016b4 <HAL_RCC_OscConfig+0x4e8>)
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800157e:	f7ff fb4d 	bl	8000c1c <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001586:	f7ff fb49 	bl	8000c1c <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e140      	b.n	800181a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001598:	4b41      	ldr	r3, [pc, #260]	@ (80016a0 <HAL_RCC_OscConfig+0x4d4>)
 800159a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d1f0      	bne.n	8001586 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f000 80b5 	beq.w	800171c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015b2:	2300      	movs	r3, #0
 80015b4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015b6:	4b3a      	ldr	r3, [pc, #232]	@ (80016a0 <HAL_RCC_OscConfig+0x4d4>)
 80015b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d10d      	bne.n	80015de <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015c2:	4b37      	ldr	r3, [pc, #220]	@ (80016a0 <HAL_RCC_OscConfig+0x4d4>)
 80015c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c6:	4a36      	ldr	r2, [pc, #216]	@ (80016a0 <HAL_RCC_OscConfig+0x4d4>)
 80015c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015cc:	6253      	str	r3, [r2, #36]	@ 0x24
 80015ce:	4b34      	ldr	r3, [pc, #208]	@ (80016a0 <HAL_RCC_OscConfig+0x4d4>)
 80015d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015da:	2301      	movs	r3, #1
 80015dc:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015de:	4b36      	ldr	r3, [pc, #216]	@ (80016b8 <HAL_RCC_OscConfig+0x4ec>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d118      	bne.n	800161c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ea:	4b33      	ldr	r3, [pc, #204]	@ (80016b8 <HAL_RCC_OscConfig+0x4ec>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a32      	ldr	r2, [pc, #200]	@ (80016b8 <HAL_RCC_OscConfig+0x4ec>)
 80015f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015f6:	f7ff fb11 	bl	8000c1c <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015fc:	e008      	b.n	8001610 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015fe:	f7ff fb0d 	bl	8000c1c <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b64      	cmp	r3, #100	@ 0x64
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e104      	b.n	800181a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001610:	4b29      	ldr	r3, [pc, #164]	@ (80016b8 <HAL_RCC_OscConfig+0x4ec>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0f0      	beq.n	80015fe <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d106      	bne.n	8001632 <HAL_RCC_OscConfig+0x466>
 8001624:	4b1e      	ldr	r3, [pc, #120]	@ (80016a0 <HAL_RCC_OscConfig+0x4d4>)
 8001626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001628:	4a1d      	ldr	r2, [pc, #116]	@ (80016a0 <HAL_RCC_OscConfig+0x4d4>)
 800162a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800162e:	6353      	str	r3, [r2, #52]	@ 0x34
 8001630:	e02d      	b.n	800168e <HAL_RCC_OscConfig+0x4c2>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d10c      	bne.n	8001654 <HAL_RCC_OscConfig+0x488>
 800163a:	4b19      	ldr	r3, [pc, #100]	@ (80016a0 <HAL_RCC_OscConfig+0x4d4>)
 800163c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800163e:	4a18      	ldr	r2, [pc, #96]	@ (80016a0 <HAL_RCC_OscConfig+0x4d4>)
 8001640:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001644:	6353      	str	r3, [r2, #52]	@ 0x34
 8001646:	4b16      	ldr	r3, [pc, #88]	@ (80016a0 <HAL_RCC_OscConfig+0x4d4>)
 8001648:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800164a:	4a15      	ldr	r2, [pc, #84]	@ (80016a0 <HAL_RCC_OscConfig+0x4d4>)
 800164c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001650:	6353      	str	r3, [r2, #52]	@ 0x34
 8001652:	e01c      	b.n	800168e <HAL_RCC_OscConfig+0x4c2>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	2b05      	cmp	r3, #5
 800165a:	d10c      	bne.n	8001676 <HAL_RCC_OscConfig+0x4aa>
 800165c:	4b10      	ldr	r3, [pc, #64]	@ (80016a0 <HAL_RCC_OscConfig+0x4d4>)
 800165e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001660:	4a0f      	ldr	r2, [pc, #60]	@ (80016a0 <HAL_RCC_OscConfig+0x4d4>)
 8001662:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001666:	6353      	str	r3, [r2, #52]	@ 0x34
 8001668:	4b0d      	ldr	r3, [pc, #52]	@ (80016a0 <HAL_RCC_OscConfig+0x4d4>)
 800166a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800166c:	4a0c      	ldr	r2, [pc, #48]	@ (80016a0 <HAL_RCC_OscConfig+0x4d4>)
 800166e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001672:	6353      	str	r3, [r2, #52]	@ 0x34
 8001674:	e00b      	b.n	800168e <HAL_RCC_OscConfig+0x4c2>
 8001676:	4b0a      	ldr	r3, [pc, #40]	@ (80016a0 <HAL_RCC_OscConfig+0x4d4>)
 8001678:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800167a:	4a09      	ldr	r2, [pc, #36]	@ (80016a0 <HAL_RCC_OscConfig+0x4d4>)
 800167c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001680:	6353      	str	r3, [r2, #52]	@ 0x34
 8001682:	4b07      	ldr	r3, [pc, #28]	@ (80016a0 <HAL_RCC_OscConfig+0x4d4>)
 8001684:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001686:	4a06      	ldr	r2, [pc, #24]	@ (80016a0 <HAL_RCC_OscConfig+0x4d4>)
 8001688:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800168c:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d024      	beq.n	80016e0 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001696:	f7ff fac1 	bl	8000c1c <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800169c:	e019      	b.n	80016d2 <HAL_RCC_OscConfig+0x506>
 800169e:	bf00      	nop
 80016a0:	40023800 	.word	0x40023800
 80016a4:	08002a08 	.word	0x08002a08
 80016a8:	20000000 	.word	0x20000000
 80016ac:	20000004 	.word	0x20000004
 80016b0:	42470020 	.word	0x42470020
 80016b4:	42470680 	.word	0x42470680
 80016b8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016bc:	f7ff faae 	bl	8000c1c <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e0a3      	b.n	800181a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80016d2:	4b54      	ldr	r3, [pc, #336]	@ (8001824 <HAL_RCC_OscConfig+0x658>)
 80016d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0ee      	beq.n	80016bc <HAL_RCC_OscConfig+0x4f0>
 80016de:	e014      	b.n	800170a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e0:	f7ff fa9c 	bl	8000c1c <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016e6:	e00a      	b.n	80016fe <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016e8:	f7ff fa98 	bl	8000c1c <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e08d      	b.n	800181a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016fe:	4b49      	ldr	r3, [pc, #292]	@ (8001824 <HAL_RCC_OscConfig+0x658>)
 8001700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001702:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1ee      	bne.n	80016e8 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800170a:	7ffb      	ldrb	r3, [r7, #31]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d105      	bne.n	800171c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001710:	4b44      	ldr	r3, [pc, #272]	@ (8001824 <HAL_RCC_OscConfig+0x658>)
 8001712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001714:	4a43      	ldr	r2, [pc, #268]	@ (8001824 <HAL_RCC_OscConfig+0x658>)
 8001716:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800171a:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001720:	2b00      	cmp	r3, #0
 8001722:	d079      	beq.n	8001818 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	2b0c      	cmp	r3, #12
 8001728:	d056      	beq.n	80017d8 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800172e:	2b02      	cmp	r3, #2
 8001730:	d13b      	bne.n	80017aa <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001732:	4b3d      	ldr	r3, [pc, #244]	@ (8001828 <HAL_RCC_OscConfig+0x65c>)
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001738:	f7ff fa70 	bl	8000c1c <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001740:	f7ff fa6c 	bl	8000c1c <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e063      	b.n	800181a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001752:	4b34      	ldr	r3, [pc, #208]	@ (8001824 <HAL_RCC_OscConfig+0x658>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1f0      	bne.n	8001740 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800175e:	4b31      	ldr	r3, [pc, #196]	@ (8001824 <HAL_RCC_OscConfig+0x658>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800176e:	4319      	orrs	r1, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001774:	430b      	orrs	r3, r1
 8001776:	492b      	ldr	r1, [pc, #172]	@ (8001824 <HAL_RCC_OscConfig+0x658>)
 8001778:	4313      	orrs	r3, r2
 800177a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800177c:	4b2a      	ldr	r3, [pc, #168]	@ (8001828 <HAL_RCC_OscConfig+0x65c>)
 800177e:	2201      	movs	r2, #1
 8001780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001782:	f7ff fa4b 	bl	8000c1c <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800178a:	f7ff fa47 	bl	8000c1c <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e03e      	b.n	800181a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800179c:	4b21      	ldr	r3, [pc, #132]	@ (8001824 <HAL_RCC_OscConfig+0x658>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0f0      	beq.n	800178a <HAL_RCC_OscConfig+0x5be>
 80017a8:	e036      	b.n	8001818 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001828 <HAL_RCC_OscConfig+0x65c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b0:	f7ff fa34 	bl	8000c1c <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017b8:	f7ff fa30 	bl	8000c1c <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e027      	b.n	800181a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017ca:	4b16      	ldr	r3, [pc, #88]	@ (8001824 <HAL_RCC_OscConfig+0x658>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1f0      	bne.n	80017b8 <HAL_RCC_OscConfig+0x5ec>
 80017d6:	e01f      	b.n	8001818 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d101      	bne.n	80017e4 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e01a      	b.n	800181a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001824 <HAL_RCC_OscConfig+0x658>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d10d      	bne.n	8001814 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001802:	429a      	cmp	r2, r3
 8001804:	d106      	bne.n	8001814 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001810:	429a      	cmp	r2, r3
 8001812:	d001      	beq.n	8001818 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e000      	b.n	800181a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3720      	adds	r7, #32
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40023800 	.word	0x40023800
 8001828:	42470060 	.word	0x42470060

0800182c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d101      	bne.n	8001840 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e11a      	b.n	8001a76 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001840:	4b8f      	ldr	r3, [pc, #572]	@ (8001a80 <HAL_RCC_ClockConfig+0x254>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0301 	and.w	r3, r3, #1
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	429a      	cmp	r2, r3
 800184c:	d919      	bls.n	8001882 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d105      	bne.n	8001860 <HAL_RCC_ClockConfig+0x34>
 8001854:	4b8a      	ldr	r3, [pc, #552]	@ (8001a80 <HAL_RCC_ClockConfig+0x254>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a89      	ldr	r2, [pc, #548]	@ (8001a80 <HAL_RCC_ClockConfig+0x254>)
 800185a:	f043 0304 	orr.w	r3, r3, #4
 800185e:	6013      	str	r3, [r2, #0]
 8001860:	4b87      	ldr	r3, [pc, #540]	@ (8001a80 <HAL_RCC_ClockConfig+0x254>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f023 0201 	bic.w	r2, r3, #1
 8001868:	4985      	ldr	r1, [pc, #532]	@ (8001a80 <HAL_RCC_ClockConfig+0x254>)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	4313      	orrs	r3, r2
 800186e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001870:	4b83      	ldr	r3, [pc, #524]	@ (8001a80 <HAL_RCC_ClockConfig+0x254>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	429a      	cmp	r2, r3
 800187c:	d001      	beq.n	8001882 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e0f9      	b.n	8001a76 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d008      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800188e:	4b7d      	ldr	r3, [pc, #500]	@ (8001a84 <HAL_RCC_ClockConfig+0x258>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	497a      	ldr	r1, [pc, #488]	@ (8001a84 <HAL_RCC_ClockConfig+0x258>)
 800189c:	4313      	orrs	r3, r2
 800189e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f000 808e 	beq.w	80019ca <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d107      	bne.n	80018c6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018b6:	4b73      	ldr	r3, [pc, #460]	@ (8001a84 <HAL_RCC_ClockConfig+0x258>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d121      	bne.n	8001906 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e0d7      	b.n	8001a76 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b03      	cmp	r3, #3
 80018cc:	d107      	bne.n	80018de <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018ce:	4b6d      	ldr	r3, [pc, #436]	@ (8001a84 <HAL_RCC_ClockConfig+0x258>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d115      	bne.n	8001906 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e0cb      	b.n	8001a76 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d107      	bne.n	80018f6 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018e6:	4b67      	ldr	r3, [pc, #412]	@ (8001a84 <HAL_RCC_ClockConfig+0x258>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d109      	bne.n	8001906 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e0bf      	b.n	8001a76 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80018f6:	4b63      	ldr	r3, [pc, #396]	@ (8001a84 <HAL_RCC_ClockConfig+0x258>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e0b7      	b.n	8001a76 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001906:	4b5f      	ldr	r3, [pc, #380]	@ (8001a84 <HAL_RCC_ClockConfig+0x258>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f023 0203 	bic.w	r2, r3, #3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	495c      	ldr	r1, [pc, #368]	@ (8001a84 <HAL_RCC_ClockConfig+0x258>)
 8001914:	4313      	orrs	r3, r2
 8001916:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001918:	f7ff f980 	bl	8000c1c <HAL_GetTick>
 800191c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b02      	cmp	r3, #2
 8001924:	d112      	bne.n	800194c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001926:	e00a      	b.n	800193e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001928:	f7ff f978 	bl	8000c1c <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001936:	4293      	cmp	r3, r2
 8001938:	d901      	bls.n	800193e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e09b      	b.n	8001a76 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800193e:	4b51      	ldr	r3, [pc, #324]	@ (8001a84 <HAL_RCC_ClockConfig+0x258>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f003 030c 	and.w	r3, r3, #12
 8001946:	2b08      	cmp	r3, #8
 8001948:	d1ee      	bne.n	8001928 <HAL_RCC_ClockConfig+0xfc>
 800194a:	e03e      	b.n	80019ca <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	2b03      	cmp	r3, #3
 8001952:	d112      	bne.n	800197a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001954:	e00a      	b.n	800196c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001956:	f7ff f961 	bl	8000c1c <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001964:	4293      	cmp	r3, r2
 8001966:	d901      	bls.n	800196c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e084      	b.n	8001a76 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800196c:	4b45      	ldr	r3, [pc, #276]	@ (8001a84 <HAL_RCC_ClockConfig+0x258>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 030c 	and.w	r3, r3, #12
 8001974:	2b0c      	cmp	r3, #12
 8001976:	d1ee      	bne.n	8001956 <HAL_RCC_ClockConfig+0x12a>
 8001978:	e027      	b.n	80019ca <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d11d      	bne.n	80019be <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001982:	e00a      	b.n	800199a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001984:	f7ff f94a 	bl	8000c1c <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001992:	4293      	cmp	r3, r2
 8001994:	d901      	bls.n	800199a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e06d      	b.n	8001a76 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800199a:	4b3a      	ldr	r3, [pc, #232]	@ (8001a84 <HAL_RCC_ClockConfig+0x258>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 030c 	and.w	r3, r3, #12
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	d1ee      	bne.n	8001984 <HAL_RCC_ClockConfig+0x158>
 80019a6:	e010      	b.n	80019ca <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a8:	f7ff f938 	bl	8000c1c <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e05b      	b.n	8001a76 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80019be:	4b31      	ldr	r3, [pc, #196]	@ (8001a84 <HAL_RCC_ClockConfig+0x258>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 030c 	and.w	r3, r3, #12
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1ee      	bne.n	80019a8 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001a80 <HAL_RCC_ClockConfig+0x254>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d219      	bcs.n	8001a0c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d105      	bne.n	80019ea <HAL_RCC_ClockConfig+0x1be>
 80019de:	4b28      	ldr	r3, [pc, #160]	@ (8001a80 <HAL_RCC_ClockConfig+0x254>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a27      	ldr	r2, [pc, #156]	@ (8001a80 <HAL_RCC_ClockConfig+0x254>)
 80019e4:	f043 0304 	orr.w	r3, r3, #4
 80019e8:	6013      	str	r3, [r2, #0]
 80019ea:	4b25      	ldr	r3, [pc, #148]	@ (8001a80 <HAL_RCC_ClockConfig+0x254>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f023 0201 	bic.w	r2, r3, #1
 80019f2:	4923      	ldr	r1, [pc, #140]	@ (8001a80 <HAL_RCC_ClockConfig+0x254>)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019fa:	4b21      	ldr	r3, [pc, #132]	@ (8001a80 <HAL_RCC_ClockConfig+0x254>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d001      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e034      	b.n	8001a76 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0304 	and.w	r3, r3, #4
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d008      	beq.n	8001a2a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a18:	4b1a      	ldr	r3, [pc, #104]	@ (8001a84 <HAL_RCC_ClockConfig+0x258>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	4917      	ldr	r1, [pc, #92]	@ (8001a84 <HAL_RCC_ClockConfig+0x258>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0308 	and.w	r3, r3, #8
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d009      	beq.n	8001a4a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a36:	4b13      	ldr	r3, [pc, #76]	@ (8001a84 <HAL_RCC_ClockConfig+0x258>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	490f      	ldr	r1, [pc, #60]	@ (8001a84 <HAL_RCC_ClockConfig+0x258>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a4a:	f000 f823 	bl	8001a94 <HAL_RCC_GetSysClockFreq>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	4b0c      	ldr	r3, [pc, #48]	@ (8001a84 <HAL_RCC_ClockConfig+0x258>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	091b      	lsrs	r3, r3, #4
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	490b      	ldr	r1, [pc, #44]	@ (8001a88 <HAL_RCC_ClockConfig+0x25c>)
 8001a5c:	5ccb      	ldrb	r3, [r1, r3]
 8001a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a62:	4a0a      	ldr	r2, [pc, #40]	@ (8001a8c <HAL_RCC_ClockConfig+0x260>)
 8001a64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a66:	4b0a      	ldr	r3, [pc, #40]	@ (8001a90 <HAL_RCC_ClockConfig+0x264>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff f88a 	bl	8000b84 <HAL_InitTick>
 8001a70:	4603      	mov	r3, r0
 8001a72:	72fb      	strb	r3, [r7, #11]

  return status;
 8001a74:	7afb      	ldrb	r3, [r7, #11]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40023c00 	.word	0x40023c00
 8001a84:	40023800 	.word	0x40023800
 8001a88:	08002a08 	.word	0x08002a08
 8001a8c:	20000000 	.word	0x20000000
 8001a90:	20000004 	.word	0x20000004

08001a94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a98:	b08e      	sub	sp, #56	@ 0x38
 8001a9a:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001a9c:	4b58      	ldr	r3, [pc, #352]	@ (8001c00 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aa4:	f003 030c 	and.w	r3, r3, #12
 8001aa8:	2b0c      	cmp	r3, #12
 8001aaa:	d00d      	beq.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x34>
 8001aac:	2b0c      	cmp	r3, #12
 8001aae:	f200 8092 	bhi.w	8001bd6 <HAL_RCC_GetSysClockFreq+0x142>
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	d002      	beq.n	8001abc <HAL_RCC_GetSysClockFreq+0x28>
 8001ab6:	2b08      	cmp	r3, #8
 8001ab8:	d003      	beq.n	8001ac2 <HAL_RCC_GetSysClockFreq+0x2e>
 8001aba:	e08c      	b.n	8001bd6 <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001abc:	4b51      	ldr	r3, [pc, #324]	@ (8001c04 <HAL_RCC_GetSysClockFreq+0x170>)
 8001abe:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001ac0:	e097      	b.n	8001bf2 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ac2:	4b51      	ldr	r3, [pc, #324]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x174>)
 8001ac4:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001ac6:	e094      	b.n	8001bf2 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aca:	0c9b      	lsrs	r3, r3, #18
 8001acc:	f003 020f 	and.w	r2, r3, #15
 8001ad0:	4b4e      	ldr	r3, [pc, #312]	@ (8001c0c <HAL_RCC_GetSysClockFreq+0x178>)
 8001ad2:	5c9b      	ldrb	r3, [r3, r2]
 8001ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ad8:	0d9b      	lsrs	r3, r3, #22
 8001ada:	f003 0303 	and.w	r3, r3, #3
 8001ade:	3301      	adds	r3, #1
 8001ae0:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ae2:	4b47      	ldr	r3, [pc, #284]	@ (8001c00 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d021      	beq.n	8001b32 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001af0:	2200      	movs	r2, #0
 8001af2:	61bb      	str	r3, [r7, #24]
 8001af4:	61fa      	str	r2, [r7, #28]
 8001af6:	4b44      	ldr	r3, [pc, #272]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x174>)
 8001af8:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001afc:	464a      	mov	r2, r9
 8001afe:	fb03 f202 	mul.w	r2, r3, r2
 8001b02:	2300      	movs	r3, #0
 8001b04:	4644      	mov	r4, r8
 8001b06:	fb04 f303 	mul.w	r3, r4, r3
 8001b0a:	4413      	add	r3, r2
 8001b0c:	4a3e      	ldr	r2, [pc, #248]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x174>)
 8001b0e:	4644      	mov	r4, r8
 8001b10:	fba4 0102 	umull	r0, r1, r4, r2
 8001b14:	440b      	add	r3, r1
 8001b16:	4619      	mov	r1, r3
 8001b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	613b      	str	r3, [r7, #16]
 8001b1e:	617a      	str	r2, [r7, #20]
 8001b20:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001b24:	f7fe fb2a 	bl	800017c <__aeabi_uldivmod>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b30:	e04e      	b.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b34:	2200      	movs	r2, #0
 8001b36:	469a      	mov	sl, r3
 8001b38:	4693      	mov	fp, r2
 8001b3a:	4652      	mov	r2, sl
 8001b3c:	465b      	mov	r3, fp
 8001b3e:	f04f 0000 	mov.w	r0, #0
 8001b42:	f04f 0100 	mov.w	r1, #0
 8001b46:	0159      	lsls	r1, r3, #5
 8001b48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b4c:	0150      	lsls	r0, r2, #5
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	ebb2 080a 	subs.w	r8, r2, sl
 8001b56:	eb63 090b 	sbc.w	r9, r3, fp
 8001b5a:	f04f 0200 	mov.w	r2, #0
 8001b5e:	f04f 0300 	mov.w	r3, #0
 8001b62:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001b66:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001b6a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001b6e:	ebb2 0408 	subs.w	r4, r2, r8
 8001b72:	eb63 0509 	sbc.w	r5, r3, r9
 8001b76:	f04f 0200 	mov.w	r2, #0
 8001b7a:	f04f 0300 	mov.w	r3, #0
 8001b7e:	00eb      	lsls	r3, r5, #3
 8001b80:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b84:	00e2      	lsls	r2, r4, #3
 8001b86:	4614      	mov	r4, r2
 8001b88:	461d      	mov	r5, r3
 8001b8a:	eb14 030a 	adds.w	r3, r4, sl
 8001b8e:	603b      	str	r3, [r7, #0]
 8001b90:	eb45 030b 	adc.w	r3, r5, fp
 8001b94:	607b      	str	r3, [r7, #4]
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	f04f 0300 	mov.w	r3, #0
 8001b9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ba2:	4629      	mov	r1, r5
 8001ba4:	028b      	lsls	r3, r1, #10
 8001ba6:	4620      	mov	r0, r4
 8001ba8:	4629      	mov	r1, r5
 8001baa:	4604      	mov	r4, r0
 8001bac:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001bb0:	4601      	mov	r1, r0
 8001bb2:	028a      	lsls	r2, r1, #10
 8001bb4:	4610      	mov	r0, r2
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bba:	2200      	movs	r2, #0
 8001bbc:	60bb      	str	r3, [r7, #8]
 8001bbe:	60fa      	str	r2, [r7, #12]
 8001bc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bc4:	f7fe fada 	bl	800017c <__aeabi_uldivmod>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4613      	mov	r3, r2
 8001bce:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      sysclockfreq = pllvco;
 8001bd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bd2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001bd4:	e00d      	b.n	8001bf2 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001c00 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	0b5b      	lsrs	r3, r3, #13
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001be2:	6a3b      	ldr	r3, [r7, #32]
 8001be4:	3301      	adds	r3, #1
 8001be6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001bf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3738      	adds	r7, #56	@ 0x38
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bfe:	bf00      	nop
 8001c00:	40023800 	.word	0x40023800
 8001c04:	00f42400 	.word	0x00f42400
 8001c08:	016e3600 	.word	0x016e3600
 8001c0c:	080029fc 	.word	0x080029fc

08001c10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b087      	sub	sp, #28
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c18:	2300      	movs	r3, #0
 8001c1a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001c1c:	4b29      	ldr	r3, [pc, #164]	@ (8001cc4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d12c      	bne.n	8001c82 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c28:	4b26      	ldr	r3, [pc, #152]	@ (8001cc4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d005      	beq.n	8001c40 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001c34:	4b24      	ldr	r3, [pc, #144]	@ (8001cc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8001c3c:	617b      	str	r3, [r7, #20]
 8001c3e:	e016      	b.n	8001c6e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c40:	4b20      	ldr	r3, [pc, #128]	@ (8001cc4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c44:	4a1f      	ldr	r2, [pc, #124]	@ (8001cc4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001c46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c4a:	6253      	str	r3, [r2, #36]	@ 0x24
 8001c4c:	4b1d      	ldr	r3, [pc, #116]	@ (8001cc4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001c58:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8001c60:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c62:	4b18      	ldr	r3, [pc, #96]	@ (8001cc4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c66:	4a17      	ldr	r2, [pc, #92]	@ (8001cc4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001c68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c6c:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8001c74:	d105      	bne.n	8001c82 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8001c7c:	d101      	bne.n	8001c82 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001c7e:	2301      	movs	r3, #1
 8001c80:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d105      	bne.n	8001c94 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001c88:	4b10      	ldr	r3, [pc, #64]	@ (8001ccc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a0f      	ldr	r2, [pc, #60]	@ (8001ccc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c8e:	f043 0304 	orr.w	r3, r3, #4
 8001c92:	6013      	str	r3, [r2, #0]
 8001c94:	4b0d      	ldr	r3, [pc, #52]	@ (8001ccc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f023 0201 	bic.w	r2, r3, #1
 8001c9c:	490b      	ldr	r1, [pc, #44]	@ (8001ccc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ca4:	4b09      	ldr	r3, [pc, #36]	@ (8001ccc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d001      	beq.n	8001cb6 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e000      	b.n	8001cb8 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	371c      	adds	r7, #28
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40007000 	.word	0x40007000
 8001ccc:	40023c00 	.word	0x40023c00

08001cd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e07b      	b.n	8001dda <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d108      	bne.n	8001cfc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001cf2:	d009      	beq.n	8001d08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	61da      	str	r2, [r3, #28]
 8001cfa:	e005      	b.n	8001d08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d106      	bne.n	8001d28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7fe fdae 	bl	8000884 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d3e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001d50:	431a      	orrs	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	431a      	orrs	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d82:	431a      	orrs	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d8c:	ea42 0103 	orr.w	r1, r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d94:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	0c1b      	lsrs	r3, r3, #16
 8001da6:	f003 0104 	and.w	r1, r3, #4
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dae:	f003 0210 	and.w	r2, r3, #16
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	69da      	ldr	r2, [r3, #28]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001dc8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b088      	sub	sp, #32
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	60f8      	str	r0, [r7, #12]
 8001dea:	60b9      	str	r1, [r7, #8]
 8001dec:	603b      	str	r3, [r7, #0]
 8001dee:	4613      	mov	r3, r2
 8001df0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001df2:	f7fe ff13 	bl	8000c1c <HAL_GetTick>
 8001df6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001df8:	88fb      	ldrh	r3, [r7, #6]
 8001dfa:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d001      	beq.n	8001e0c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	e12a      	b.n	8002062 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d002      	beq.n	8001e18 <HAL_SPI_Transmit+0x36>
 8001e12:	88fb      	ldrh	r3, [r7, #6]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d101      	bne.n	8001e1c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e122      	b.n	8002062 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d101      	bne.n	8001e2a <HAL_SPI_Transmit+0x48>
 8001e26:	2302      	movs	r3, #2
 8001e28:	e11b      	b.n	8002062 <HAL_SPI_Transmit+0x280>
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2203      	movs	r2, #3
 8001e36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	88fa      	ldrh	r2, [r7, #6]
 8001e4a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	88fa      	ldrh	r2, [r7, #6]
 8001e50:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2200      	movs	r2, #0
 8001e56:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2200      	movs	r2, #0
 8001e62:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e78:	d10f      	bne.n	8001e9a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e88:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001e98:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ea4:	2b40      	cmp	r3, #64	@ 0x40
 8001ea6:	d007      	beq.n	8001eb8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001eb6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001ec0:	d152      	bne.n	8001f68 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d002      	beq.n	8001ed0 <HAL_SPI_Transmit+0xee>
 8001eca:	8b7b      	ldrh	r3, [r7, #26]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d145      	bne.n	8001f5c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed4:	881a      	ldrh	r2, [r3, #0]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee0:	1c9a      	adds	r2, r3, #2
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	3b01      	subs	r3, #1
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001ef4:	e032      	b.n	8001f5c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d112      	bne.n	8001f2a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f08:	881a      	ldrh	r2, [r3, #0]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f14:	1c9a      	adds	r2, r3, #2
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	3b01      	subs	r3, #1
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001f28:	e018      	b.n	8001f5c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f2a:	f7fe fe77 	bl	8000c1c <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d803      	bhi.n	8001f42 <HAL_SPI_Transmit+0x160>
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f40:	d102      	bne.n	8001f48 <HAL_SPI_Transmit+0x166>
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d109      	bne.n	8001f5c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e082      	b.n	8002062 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1c7      	bne.n	8001ef6 <HAL_SPI_Transmit+0x114>
 8001f66:	e053      	b.n	8002010 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d002      	beq.n	8001f76 <HAL_SPI_Transmit+0x194>
 8001f70:	8b7b      	ldrh	r3, [r7, #26]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d147      	bne.n	8002006 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	330c      	adds	r3, #12
 8001f80:	7812      	ldrb	r2, [r2, #0]
 8001f82:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f88:	1c5a      	adds	r2, r3, #1
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	3b01      	subs	r3, #1
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001f9c:	e033      	b.n	8002006 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d113      	bne.n	8001fd4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	330c      	adds	r3, #12
 8001fb6:	7812      	ldrb	r2, [r2, #0]
 8001fb8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fbe:	1c5a      	adds	r2, r3, #1
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001fd2:	e018      	b.n	8002006 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001fd4:	f7fe fe22 	bl	8000c1c <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	683a      	ldr	r2, [r7, #0]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d803      	bhi.n	8001fec <HAL_SPI_Transmit+0x20a>
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001fea:	d102      	bne.n	8001ff2 <HAL_SPI_Transmit+0x210>
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d109      	bne.n	8002006 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e02d      	b.n	8002062 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800200a:	b29b      	uxth	r3, r3
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1c6      	bne.n	8001f9e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002010:	69fa      	ldr	r2, [r7, #28]
 8002012:	6839      	ldr	r1, [r7, #0]
 8002014:	68f8      	ldr	r0, [r7, #12]
 8002016:	f000 f8b1 	bl	800217c <SPI_EndRxTxTransaction>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d002      	beq.n	8002026 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2220      	movs	r2, #32
 8002024:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10a      	bne.n	8002044 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	617b      	str	r3, [r7, #20]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	617b      	str	r3, [r7, #20]
 8002042:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e000      	b.n	8002062 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002060:	2300      	movs	r3, #0
  }
}
 8002062:	4618      	mov	r0, r3
 8002064:	3720      	adds	r7, #32
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
	...

0800206c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b088      	sub	sp, #32
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	603b      	str	r3, [r7, #0]
 8002078:	4613      	mov	r3, r2
 800207a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800207c:	f7fe fdce 	bl	8000c1c <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002084:	1a9b      	subs	r3, r3, r2
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	4413      	add	r3, r2
 800208a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800208c:	f7fe fdc6 	bl	8000c1c <HAL_GetTick>
 8002090:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002092:	4b39      	ldr	r3, [pc, #228]	@ (8002178 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	015b      	lsls	r3, r3, #5
 8002098:	0d1b      	lsrs	r3, r3, #20
 800209a:	69fa      	ldr	r2, [r7, #28]
 800209c:	fb02 f303 	mul.w	r3, r2, r3
 80020a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020a2:	e054      	b.n	800214e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80020aa:	d050      	beq.n	800214e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80020ac:	f7fe fdb6 	bl	8000c1c <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	69fa      	ldr	r2, [r7, #28]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d902      	bls.n	80020c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d13d      	bne.n	800213e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80020d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80020da:	d111      	bne.n	8002100 <SPI_WaitFlagStateUntilTimeout+0x94>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80020e4:	d004      	beq.n	80020f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020ee:	d107      	bne.n	8002100 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80020fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002104:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002108:	d10f      	bne.n	800212a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002128:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e017      	b.n	800216e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002144:	2300      	movs	r3, #0
 8002146:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	3b01      	subs	r3, #1
 800214c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	4013      	ands	r3, r2
 8002158:	68ba      	ldr	r2, [r7, #8]
 800215a:	429a      	cmp	r2, r3
 800215c:	bf0c      	ite	eq
 800215e:	2301      	moveq	r3, #1
 8002160:	2300      	movne	r3, #0
 8002162:	b2db      	uxtb	r3, r3
 8002164:	461a      	mov	r2, r3
 8002166:	79fb      	ldrb	r3, [r7, #7]
 8002168:	429a      	cmp	r2, r3
 800216a:	d19b      	bne.n	80020a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3720      	adds	r7, #32
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000000 	.word	0x20000000

0800217c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b088      	sub	sp, #32
 8002180:	af02      	add	r7, sp, #8
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	9300      	str	r3, [sp, #0]
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	2201      	movs	r2, #1
 8002190:	2102      	movs	r1, #2
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f7ff ff6a 	bl	800206c <SPI_WaitFlagStateUntilTimeout>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d007      	beq.n	80021ae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021a2:	f043 0220 	orr.w	r2, r3, #32
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e032      	b.n	8002214 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80021ae:	4b1b      	ldr	r3, [pc, #108]	@ (800221c <SPI_EndRxTxTransaction+0xa0>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a1b      	ldr	r2, [pc, #108]	@ (8002220 <SPI_EndRxTxTransaction+0xa4>)
 80021b4:	fba2 2303 	umull	r2, r3, r2, r3
 80021b8:	0d5b      	lsrs	r3, r3, #21
 80021ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80021be:	fb02 f303 	mul.w	r3, r2, r3
 80021c2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80021cc:	d112      	bne.n	80021f4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	2200      	movs	r2, #0
 80021d6:	2180      	movs	r1, #128	@ 0x80
 80021d8:	68f8      	ldr	r0, [r7, #12]
 80021da:	f7ff ff47 	bl	800206c <SPI_WaitFlagStateUntilTimeout>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d016      	beq.n	8002212 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e8:	f043 0220 	orr.w	r2, r3, #32
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e00f      	b.n	8002214 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00a      	beq.n	8002210 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	3b01      	subs	r3, #1
 80021fe:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800220a:	2b80      	cmp	r3, #128	@ 0x80
 800220c:	d0f2      	beq.n	80021f4 <SPI_EndRxTxTransaction+0x78>
 800220e:	e000      	b.n	8002212 <SPI_EndRxTxTransaction+0x96>
        break;
 8002210:	bf00      	nop
  }

  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3718      	adds	r7, #24
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	20000000 	.word	0x20000000
 8002220:	165e9f81 	.word	0x165e9f81

08002224 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e031      	b.n	800229a <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d106      	bne.n	8002250 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f7fe fb5e 	bl	800090c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2202      	movs	r2, #2
 8002254:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3304      	adds	r3, #4
 8002260:	4619      	mov	r1, r3
 8002262:	4610      	mov	r0, r2
 8002264:	f000 fa28 	bl	80026b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
	...

080022a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d001      	beq.n	80022bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e03a      	b.n	8002332 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2202      	movs	r2, #2
 80022c0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f042 0201 	orr.w	r2, r2, #1
 80022d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022dc:	d00e      	beq.n	80022fc <HAL_TIM_Base_Start_IT+0x58>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a16      	ldr	r2, [pc, #88]	@ (800233c <HAL_TIM_Base_Start_IT+0x98>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d009      	beq.n	80022fc <HAL_TIM_Base_Start_IT+0x58>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a14      	ldr	r2, [pc, #80]	@ (8002340 <HAL_TIM_Base_Start_IT+0x9c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d004      	beq.n	80022fc <HAL_TIM_Base_Start_IT+0x58>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a13      	ldr	r2, [pc, #76]	@ (8002344 <HAL_TIM_Base_Start_IT+0xa0>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d111      	bne.n	8002320 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2b06      	cmp	r3, #6
 800230c:	d010      	beq.n	8002330 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f042 0201 	orr.w	r2, r2, #1
 800231c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800231e:	e007      	b.n	8002330 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f042 0201 	orr.w	r2, r2, #1
 800232e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr
 800233c:	40000400 	.word	0x40000400
 8002340:	40000800 	.word	0x40000800
 8002344:	40010800 	.word	0x40010800

08002348 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d020      	beq.n	80023ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d01b      	beq.n	80023ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f06f 0202 	mvn.w	r2, #2
 800237c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2201      	movs	r2, #1
 8002382:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	f003 0303 	and.w	r3, r3, #3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f974 	bl	8002680 <HAL_TIM_IC_CaptureCallback>
 8002398:	e005      	b.n	80023a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 f967 	bl	800266e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 f976 	bl	8002692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	f003 0304 	and.w	r3, r3, #4
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d020      	beq.n	80023f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d01b      	beq.n	80023f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f06f 0204 	mvn.w	r2, #4
 80023c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2202      	movs	r2, #2
 80023ce:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 f94e 	bl	8002680 <HAL_TIM_IC_CaptureCallback>
 80023e4:	e005      	b.n	80023f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f941 	bl	800266e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 f950 	bl	8002692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	f003 0308 	and.w	r3, r3, #8
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d020      	beq.n	8002444 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f003 0308 	and.w	r3, r3, #8
 8002408:	2b00      	cmp	r3, #0
 800240a:	d01b      	beq.n	8002444 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f06f 0208 	mvn.w	r2, #8
 8002414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2204      	movs	r2, #4
 800241a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f928 	bl	8002680 <HAL_TIM_IC_CaptureCallback>
 8002430:	e005      	b.n	800243e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f91b 	bl	800266e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 f92a 	bl	8002692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	f003 0310 	and.w	r3, r3, #16
 800244a:	2b00      	cmp	r3, #0
 800244c:	d020      	beq.n	8002490 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f003 0310 	and.w	r3, r3, #16
 8002454:	2b00      	cmp	r3, #0
 8002456:	d01b      	beq.n	8002490 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f06f 0210 	mvn.w	r2, #16
 8002460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2208      	movs	r2, #8
 8002466:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f902 	bl	8002680 <HAL_TIM_IC_CaptureCallback>
 800247c:	e005      	b.n	800248a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f8f5 	bl	800266e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 f904 	bl	8002692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00c      	beq.n	80024b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d007      	beq.n	80024b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f06f 0201 	mvn.w	r2, #1
 80024ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f7fe f9a0 	bl	80007f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00c      	beq.n	80024d8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d007      	beq.n	80024d8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80024d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f8e6 	bl	80026a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024d8:	bf00      	nop
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024ea:	2300      	movs	r3, #0
 80024ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d101      	bne.n	80024fc <HAL_TIM_ConfigClockSource+0x1c>
 80024f8:	2302      	movs	r3, #2
 80024fa:	e0b4      	b.n	8002666 <HAL_TIM_ConfigClockSource+0x186>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2202      	movs	r2, #2
 8002508:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800251a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002522:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002534:	d03e      	beq.n	80025b4 <HAL_TIM_ConfigClockSource+0xd4>
 8002536:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800253a:	f200 8087 	bhi.w	800264c <HAL_TIM_ConfigClockSource+0x16c>
 800253e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002542:	f000 8086 	beq.w	8002652 <HAL_TIM_ConfigClockSource+0x172>
 8002546:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800254a:	d87f      	bhi.n	800264c <HAL_TIM_ConfigClockSource+0x16c>
 800254c:	2b70      	cmp	r3, #112	@ 0x70
 800254e:	d01a      	beq.n	8002586 <HAL_TIM_ConfigClockSource+0xa6>
 8002550:	2b70      	cmp	r3, #112	@ 0x70
 8002552:	d87b      	bhi.n	800264c <HAL_TIM_ConfigClockSource+0x16c>
 8002554:	2b60      	cmp	r3, #96	@ 0x60
 8002556:	d050      	beq.n	80025fa <HAL_TIM_ConfigClockSource+0x11a>
 8002558:	2b60      	cmp	r3, #96	@ 0x60
 800255a:	d877      	bhi.n	800264c <HAL_TIM_ConfigClockSource+0x16c>
 800255c:	2b50      	cmp	r3, #80	@ 0x50
 800255e:	d03c      	beq.n	80025da <HAL_TIM_ConfigClockSource+0xfa>
 8002560:	2b50      	cmp	r3, #80	@ 0x50
 8002562:	d873      	bhi.n	800264c <HAL_TIM_ConfigClockSource+0x16c>
 8002564:	2b40      	cmp	r3, #64	@ 0x40
 8002566:	d058      	beq.n	800261a <HAL_TIM_ConfigClockSource+0x13a>
 8002568:	2b40      	cmp	r3, #64	@ 0x40
 800256a:	d86f      	bhi.n	800264c <HAL_TIM_ConfigClockSource+0x16c>
 800256c:	2b30      	cmp	r3, #48	@ 0x30
 800256e:	d064      	beq.n	800263a <HAL_TIM_ConfigClockSource+0x15a>
 8002570:	2b30      	cmp	r3, #48	@ 0x30
 8002572:	d86b      	bhi.n	800264c <HAL_TIM_ConfigClockSource+0x16c>
 8002574:	2b20      	cmp	r3, #32
 8002576:	d060      	beq.n	800263a <HAL_TIM_ConfigClockSource+0x15a>
 8002578:	2b20      	cmp	r3, #32
 800257a:	d867      	bhi.n	800264c <HAL_TIM_ConfigClockSource+0x16c>
 800257c:	2b00      	cmp	r3, #0
 800257e:	d05c      	beq.n	800263a <HAL_TIM_ConfigClockSource+0x15a>
 8002580:	2b10      	cmp	r3, #16
 8002582:	d05a      	beq.n	800263a <HAL_TIM_ConfigClockSource+0x15a>
 8002584:	e062      	b.n	800264c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002596:	f000 f97c 	bl	8002892 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80025a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	609a      	str	r2, [r3, #8]
      break;
 80025b2:	e04f      	b.n	8002654 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80025c4:	f000 f965 	bl	8002892 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689a      	ldr	r2, [r3, #8]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80025d6:	609a      	str	r2, [r3, #8]
      break;
 80025d8:	e03c      	b.n	8002654 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025e6:	461a      	mov	r2, r3
 80025e8:	f000 f8dc 	bl	80027a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2150      	movs	r1, #80	@ 0x50
 80025f2:	4618      	mov	r0, r3
 80025f4:	f000 f933 	bl	800285e <TIM_ITRx_SetConfig>
      break;
 80025f8:	e02c      	b.n	8002654 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002606:	461a      	mov	r2, r3
 8002608:	f000 f8fa 	bl	8002800 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2160      	movs	r1, #96	@ 0x60
 8002612:	4618      	mov	r0, r3
 8002614:	f000 f923 	bl	800285e <TIM_ITRx_SetConfig>
      break;
 8002618:	e01c      	b.n	8002654 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002626:	461a      	mov	r2, r3
 8002628:	f000 f8bc 	bl	80027a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2140      	movs	r1, #64	@ 0x40
 8002632:	4618      	mov	r0, r3
 8002634:	f000 f913 	bl	800285e <TIM_ITRx_SetConfig>
      break;
 8002638:	e00c      	b.n	8002654 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4619      	mov	r1, r3
 8002644:	4610      	mov	r0, r2
 8002646:	f000 f90a 	bl	800285e <TIM_ITRx_SetConfig>
      break;
 800264a:	e003      	b.n	8002654 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	73fb      	strb	r3, [r7, #15]
      break;
 8002650:	e000      	b.n	8002654 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002652:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 8002664:	7bfb      	ldrb	r3, [r7, #15]
}
 8002666:	4618      	mov	r0, r3
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr

08002680 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	bc80      	pop	{r7}
 8002690:	4770      	bx	lr

08002692 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr

080026a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bc80      	pop	{r7}
 80026b4:	4770      	bx	lr
	...

080026b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026ce:	d00f      	beq.n	80026f0 <TIM_Base_SetConfig+0x38>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a2e      	ldr	r2, [pc, #184]	@ (800278c <TIM_Base_SetConfig+0xd4>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d00b      	beq.n	80026f0 <TIM_Base_SetConfig+0x38>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a2d      	ldr	r2, [pc, #180]	@ (8002790 <TIM_Base_SetConfig+0xd8>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d007      	beq.n	80026f0 <TIM_Base_SetConfig+0x38>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a2c      	ldr	r2, [pc, #176]	@ (8002794 <TIM_Base_SetConfig+0xdc>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d003      	beq.n	80026f0 <TIM_Base_SetConfig+0x38>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a2b      	ldr	r2, [pc, #172]	@ (8002798 <TIM_Base_SetConfig+0xe0>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d108      	bne.n	8002702 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	4313      	orrs	r3, r2
 8002700:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002708:	d017      	beq.n	800273a <TIM_Base_SetConfig+0x82>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a1f      	ldr	r2, [pc, #124]	@ (800278c <TIM_Base_SetConfig+0xd4>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d013      	beq.n	800273a <TIM_Base_SetConfig+0x82>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a1e      	ldr	r2, [pc, #120]	@ (8002790 <TIM_Base_SetConfig+0xd8>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d00f      	beq.n	800273a <TIM_Base_SetConfig+0x82>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a1d      	ldr	r2, [pc, #116]	@ (8002794 <TIM_Base_SetConfig+0xdc>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d00b      	beq.n	800273a <TIM_Base_SetConfig+0x82>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a1c      	ldr	r2, [pc, #112]	@ (8002798 <TIM_Base_SetConfig+0xe0>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d007      	beq.n	800273a <TIM_Base_SetConfig+0x82>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a1b      	ldr	r2, [pc, #108]	@ (800279c <TIM_Base_SetConfig+0xe4>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d003      	beq.n	800273a <TIM_Base_SetConfig+0x82>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a1a      	ldr	r2, [pc, #104]	@ (80027a0 <TIM_Base_SetConfig+0xe8>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d108      	bne.n	800274c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002740:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	4313      	orrs	r3, r2
 800274a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	4313      	orrs	r3, r2
 8002758:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	689a      	ldr	r2, [r3, #8]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f043 0204 	orr.w	r2, r3, #4
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	601a      	str	r2, [r3, #0]
}
 8002782:	bf00      	nop
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr
 800278c:	40000400 	.word	0x40000400
 8002790:	40000800 	.word	0x40000800
 8002794:	40000c00 	.word	0x40000c00
 8002798:	40010800 	.word	0x40010800
 800279c:	40010c00 	.word	0x40010c00
 80027a0:	40011000 	.word	0x40011000

080027a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b087      	sub	sp, #28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	f023 0201 	bic.w	r2, r3, #1
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80027ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	011b      	lsls	r3, r3, #4
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	f023 030a 	bic.w	r3, r3, #10
 80027e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	621a      	str	r2, [r3, #32]
}
 80027f6:	bf00      	nop
 80027f8:	371c      	adds	r7, #28
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr

08002800 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002800:	b480      	push	{r7}
 8002802:	b087      	sub	sp, #28
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	f023 0210 	bic.w	r2, r3, #16
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800282a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	031b      	lsls	r3, r3, #12
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	4313      	orrs	r3, r2
 8002834:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800283c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	011b      	lsls	r3, r3, #4
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	4313      	orrs	r3, r2
 8002846:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	697a      	ldr	r2, [r7, #20]
 8002852:	621a      	str	r2, [r3, #32]
}
 8002854:	bf00      	nop
 8002856:	371c      	adds	r7, #28
 8002858:	46bd      	mov	sp, r7
 800285a:	bc80      	pop	{r7}
 800285c:	4770      	bx	lr

0800285e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800285e:	b480      	push	{r7}
 8002860:	b085      	sub	sp, #20
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
 8002866:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002874:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	4313      	orrs	r3, r2
 800287c:	f043 0307 	orr.w	r3, r3, #7
 8002880:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	609a      	str	r2, [r3, #8]
}
 8002888:	bf00      	nop
 800288a:	3714      	adds	r7, #20
 800288c:	46bd      	mov	sp, r7
 800288e:	bc80      	pop	{r7}
 8002890:	4770      	bx	lr

08002892 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002892:	b480      	push	{r7}
 8002894:	b087      	sub	sp, #28
 8002896:	af00      	add	r7, sp, #0
 8002898:	60f8      	str	r0, [r7, #12]
 800289a:	60b9      	str	r1, [r7, #8]
 800289c:	607a      	str	r2, [r7, #4]
 800289e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80028ac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	021a      	lsls	r2, r3, #8
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	431a      	orrs	r2, r3
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	4313      	orrs	r3, r2
 80028be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	609a      	str	r2, [r3, #8]
}
 80028c6:	bf00      	nop
 80028c8:	371c      	adds	r7, #28
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bc80      	pop	{r7}
 80028ce:	4770      	bx	lr

080028d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d101      	bne.n	80028e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028e4:	2302      	movs	r3, #2
 80028e6:	e046      	b.n	8002976 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2202      	movs	r2, #2
 80028f4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800290e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	4313      	orrs	r3, r2
 8002918:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800292a:	d00e      	beq.n	800294a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a13      	ldr	r2, [pc, #76]	@ (8002980 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d009      	beq.n	800294a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a12      	ldr	r2, [pc, #72]	@ (8002984 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d004      	beq.n	800294a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a10      	ldr	r2, [pc, #64]	@ (8002988 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d10c      	bne.n	8002964 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002950:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	4313      	orrs	r3, r2
 800295a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68ba      	ldr	r2, [r7, #8]
 8002962:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr
 8002980:	40000400 	.word	0x40000400
 8002984:	40000800 	.word	0x40000800
 8002988:	40010800 	.word	0x40010800

0800298c <memset>:
 800298c:	4603      	mov	r3, r0
 800298e:	4402      	add	r2, r0
 8002990:	4293      	cmp	r3, r2
 8002992:	d100      	bne.n	8002996 <memset+0xa>
 8002994:	4770      	bx	lr
 8002996:	f803 1b01 	strb.w	r1, [r3], #1
 800299a:	e7f9      	b.n	8002990 <memset+0x4>

0800299c <__libc_init_array>:
 800299c:	b570      	push	{r4, r5, r6, lr}
 800299e:	2600      	movs	r6, #0
 80029a0:	4d0c      	ldr	r5, [pc, #48]	@ (80029d4 <__libc_init_array+0x38>)
 80029a2:	4c0d      	ldr	r4, [pc, #52]	@ (80029d8 <__libc_init_array+0x3c>)
 80029a4:	1b64      	subs	r4, r4, r5
 80029a6:	10a4      	asrs	r4, r4, #2
 80029a8:	42a6      	cmp	r6, r4
 80029aa:	d109      	bne.n	80029c0 <__libc_init_array+0x24>
 80029ac:	f000 f81a 	bl	80029e4 <_init>
 80029b0:	2600      	movs	r6, #0
 80029b2:	4d0a      	ldr	r5, [pc, #40]	@ (80029dc <__libc_init_array+0x40>)
 80029b4:	4c0a      	ldr	r4, [pc, #40]	@ (80029e0 <__libc_init_array+0x44>)
 80029b6:	1b64      	subs	r4, r4, r5
 80029b8:	10a4      	asrs	r4, r4, #2
 80029ba:	42a6      	cmp	r6, r4
 80029bc:	d105      	bne.n	80029ca <__libc_init_array+0x2e>
 80029be:	bd70      	pop	{r4, r5, r6, pc}
 80029c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80029c4:	4798      	blx	r3
 80029c6:	3601      	adds	r6, #1
 80029c8:	e7ee      	b.n	80029a8 <__libc_init_array+0xc>
 80029ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80029ce:	4798      	blx	r3
 80029d0:	3601      	adds	r6, #1
 80029d2:	e7f2      	b.n	80029ba <__libc_init_array+0x1e>
 80029d4:	08002a30 	.word	0x08002a30
 80029d8:	08002a30 	.word	0x08002a30
 80029dc:	08002a30 	.word	0x08002a30
 80029e0:	08002a34 	.word	0x08002a34

080029e4 <_init>:
 80029e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029e6:	bf00      	nop
 80029e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ea:	bc08      	pop	{r3}
 80029ec:	469e      	mov	lr, r3
 80029ee:	4770      	bx	lr

080029f0 <_fini>:
 80029f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029f2:	bf00      	nop
 80029f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029f6:	bc08      	pop	{r3}
 80029f8:	469e      	mov	lr, r3
 80029fa:	4770      	bx	lr
