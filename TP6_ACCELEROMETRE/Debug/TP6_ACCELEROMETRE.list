
TP6_ACCELEROMETRE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028d8  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002a14  08002a14  00003a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a38  08002a38  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002a38  08002a38  00003a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a40  08002a40  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a40  08002a40  00003a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002a44  08002a44  00003a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002a48  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08002a54  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08002a54  00004080  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005e7c  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000124c  00000000  00000000  00009eb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b8  00000000  00000000  0000b100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000527  00000000  00000000  0000b7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015119  00000000  00000000  0000bcdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000086ca  00000000  00000000  00020df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084ad6  00000000  00000000  000294c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000adf98  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b4c  00000000  00000000  000adfdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000afb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	080029fc 	.word	0x080029fc

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	080029fc 	.word	0x080029fc

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800018c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000190:	f000 b98c 	b.w	80004ac <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9d08      	ldr	r5, [sp, #32]
 80001b2:	468e      	mov	lr, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14a      	bne.n	8000252 <__udivmoddi4+0xa6>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4617      	mov	r7, r2
 80001c0:	d962      	bls.n	8000288 <__udivmoddi4+0xdc>
 80001c2:	fab2 f682 	clz	r6, r2
 80001c6:	b14e      	cbz	r6, 80001dc <__udivmoddi4+0x30>
 80001c8:	f1c6 0320 	rsb	r3, r6, #32
 80001cc:	fa01 f806 	lsl.w	r8, r1, r6
 80001d0:	fa20 f303 	lsr.w	r3, r0, r3
 80001d4:	40b7      	lsls	r7, r6
 80001d6:	ea43 0808 	orr.w	r8, r3, r8
 80001da:	40b4      	lsls	r4, r6
 80001dc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80001e0:	fbb8 f1fe 	udiv	r1, r8, lr
 80001e4:	fa1f fc87 	uxth.w	ip, r7
 80001e8:	fb0e 8811 	mls	r8, lr, r1, r8
 80001ec:	fb01 f20c 	mul.w	r2, r1, ip
 80001f0:	0c23      	lsrs	r3, r4, #16
 80001f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f6:	429a      	cmp	r2, r3
 80001f8:	d909      	bls.n	800020e <__udivmoddi4+0x62>
 80001fa:	18fb      	adds	r3, r7, r3
 80001fc:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000200:	f080 80eb 	bcs.w	80003da <__udivmoddi4+0x22e>
 8000204:	429a      	cmp	r2, r3
 8000206:	f240 80e8 	bls.w	80003da <__udivmoddi4+0x22e>
 800020a:	3902      	subs	r1, #2
 800020c:	443b      	add	r3, r7
 800020e:	1a9a      	subs	r2, r3, r2
 8000210:	fbb2 f0fe 	udiv	r0, r2, lr
 8000214:	fb0e 2210 	mls	r2, lr, r0, r2
 8000218:	fb00 fc0c 	mul.w	ip, r0, ip
 800021c:	b2a3      	uxth	r3, r4
 800021e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000222:	459c      	cmp	ip, r3
 8000224:	d909      	bls.n	800023a <__udivmoddi4+0x8e>
 8000226:	18fb      	adds	r3, r7, r3
 8000228:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 800022c:	f080 80d7 	bcs.w	80003de <__udivmoddi4+0x232>
 8000230:	459c      	cmp	ip, r3
 8000232:	f240 80d4 	bls.w	80003de <__udivmoddi4+0x232>
 8000236:	443b      	add	r3, r7
 8000238:	3802      	subs	r0, #2
 800023a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800023e:	2100      	movs	r1, #0
 8000240:	eba3 030c 	sub.w	r3, r3, ip
 8000244:	b11d      	cbz	r5, 800024e <__udivmoddi4+0xa2>
 8000246:	2200      	movs	r2, #0
 8000248:	40f3      	lsrs	r3, r6
 800024a:	e9c5 3200 	strd	r3, r2, [r5]
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	428b      	cmp	r3, r1
 8000254:	d905      	bls.n	8000262 <__udivmoddi4+0xb6>
 8000256:	b10d      	cbz	r5, 800025c <__udivmoddi4+0xb0>
 8000258:	e9c5 0100 	strd	r0, r1, [r5]
 800025c:	2100      	movs	r1, #0
 800025e:	4608      	mov	r0, r1
 8000260:	e7f5      	b.n	800024e <__udivmoddi4+0xa2>
 8000262:	fab3 f183 	clz	r1, r3
 8000266:	2900      	cmp	r1, #0
 8000268:	d146      	bne.n	80002f8 <__udivmoddi4+0x14c>
 800026a:	4573      	cmp	r3, lr
 800026c:	d302      	bcc.n	8000274 <__udivmoddi4+0xc8>
 800026e:	4282      	cmp	r2, r0
 8000270:	f200 8108 	bhi.w	8000484 <__udivmoddi4+0x2d8>
 8000274:	1a84      	subs	r4, r0, r2
 8000276:	eb6e 0203 	sbc.w	r2, lr, r3
 800027a:	2001      	movs	r0, #1
 800027c:	4690      	mov	r8, r2
 800027e:	2d00      	cmp	r5, #0
 8000280:	d0e5      	beq.n	800024e <__udivmoddi4+0xa2>
 8000282:	e9c5 4800 	strd	r4, r8, [r5]
 8000286:	e7e2      	b.n	800024e <__udivmoddi4+0xa2>
 8000288:	2a00      	cmp	r2, #0
 800028a:	f000 8091 	beq.w	80003b0 <__udivmoddi4+0x204>
 800028e:	fab2 f682 	clz	r6, r2
 8000292:	2e00      	cmp	r6, #0
 8000294:	f040 80a5 	bne.w	80003e2 <__udivmoddi4+0x236>
 8000298:	1a8a      	subs	r2, r1, r2
 800029a:	2101      	movs	r1, #1
 800029c:	0c03      	lsrs	r3, r0, #16
 800029e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002a2:	b280      	uxth	r0, r0
 80002a4:	b2bc      	uxth	r4, r7
 80002a6:	fbb2 fcfe 	udiv	ip, r2, lr
 80002aa:	fb0e 221c 	mls	r2, lr, ip, r2
 80002ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b2:	fb04 f20c 	mul.w	r2, r4, ip
 80002b6:	429a      	cmp	r2, r3
 80002b8:	d907      	bls.n	80002ca <__udivmoddi4+0x11e>
 80002ba:	18fb      	adds	r3, r7, r3
 80002bc:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80002c0:	d202      	bcs.n	80002c8 <__udivmoddi4+0x11c>
 80002c2:	429a      	cmp	r2, r3
 80002c4:	f200 80e3 	bhi.w	800048e <__udivmoddi4+0x2e2>
 80002c8:	46c4      	mov	ip, r8
 80002ca:	1a9b      	subs	r3, r3, r2
 80002cc:	fbb3 f2fe 	udiv	r2, r3, lr
 80002d0:	fb0e 3312 	mls	r3, lr, r2, r3
 80002d4:	fb02 f404 	mul.w	r4, r2, r4
 80002d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80002dc:	429c      	cmp	r4, r3
 80002de:	d907      	bls.n	80002f0 <__udivmoddi4+0x144>
 80002e0:	18fb      	adds	r3, r7, r3
 80002e2:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80002e6:	d202      	bcs.n	80002ee <__udivmoddi4+0x142>
 80002e8:	429c      	cmp	r4, r3
 80002ea:	f200 80cd 	bhi.w	8000488 <__udivmoddi4+0x2dc>
 80002ee:	4602      	mov	r2, r0
 80002f0:	1b1b      	subs	r3, r3, r4
 80002f2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80002f6:	e7a5      	b.n	8000244 <__udivmoddi4+0x98>
 80002f8:	f1c1 0620 	rsb	r6, r1, #32
 80002fc:	408b      	lsls	r3, r1
 80002fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000302:	431f      	orrs	r7, r3
 8000304:	fa2e fa06 	lsr.w	sl, lr, r6
 8000308:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800030c:	fbba f8f9 	udiv	r8, sl, r9
 8000310:	fa0e fe01 	lsl.w	lr, lr, r1
 8000314:	fa20 f306 	lsr.w	r3, r0, r6
 8000318:	fb09 aa18 	mls	sl, r9, r8, sl
 800031c:	fa1f fc87 	uxth.w	ip, r7
 8000320:	ea43 030e 	orr.w	r3, r3, lr
 8000324:	fa00 fe01 	lsl.w	lr, r0, r1
 8000328:	fb08 f00c 	mul.w	r0, r8, ip
 800032c:	0c1c      	lsrs	r4, r3, #16
 800032e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000332:	42a0      	cmp	r0, r4
 8000334:	fa02 f201 	lsl.w	r2, r2, r1
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x1a4>
 800033a:	193c      	adds	r4, r7, r4
 800033c:	f108 3aff 	add.w	sl, r8, #4294967295	@ 0xffffffff
 8000340:	f080 809e 	bcs.w	8000480 <__udivmoddi4+0x2d4>
 8000344:	42a0      	cmp	r0, r4
 8000346:	f240 809b 	bls.w	8000480 <__udivmoddi4+0x2d4>
 800034a:	f1a8 0802 	sub.w	r8, r8, #2
 800034e:	443c      	add	r4, r7
 8000350:	1a24      	subs	r4, r4, r0
 8000352:	b298      	uxth	r0, r3
 8000354:	fbb4 f3f9 	udiv	r3, r4, r9
 8000358:	fb09 4413 	mls	r4, r9, r3, r4
 800035c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000360:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x1d0>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 800036e:	f080 8085 	bcs.w	800047c <__udivmoddi4+0x2d0>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8082 	bls.w	800047c <__udivmoddi4+0x2d0>
 8000378:	3b02      	subs	r3, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	fba0 8c02 	umull	r8, ip, r0, r2
 8000388:	4564      	cmp	r4, ip
 800038a:	4643      	mov	r3, r8
 800038c:	46e1      	mov	r9, ip
 800038e:	d364      	bcc.n	800045a <__udivmoddi4+0x2ae>
 8000390:	d061      	beq.n	8000456 <__udivmoddi4+0x2aa>
 8000392:	b15d      	cbz	r5, 80003ac <__udivmoddi4+0x200>
 8000394:	ebbe 0203 	subs.w	r2, lr, r3
 8000398:	eb64 0409 	sbc.w	r4, r4, r9
 800039c:	fa04 f606 	lsl.w	r6, r4, r6
 80003a0:	fa22 f301 	lsr.w	r3, r2, r1
 80003a4:	431e      	orrs	r6, r3
 80003a6:	40cc      	lsrs	r4, r1
 80003a8:	e9c5 6400 	strd	r6, r4, [r5]
 80003ac:	2100      	movs	r1, #0
 80003ae:	e74e      	b.n	800024e <__udivmoddi4+0xa2>
 80003b0:	fbb1 fcf2 	udiv	ip, r1, r2
 80003b4:	0c01      	lsrs	r1, r0, #16
 80003b6:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80003ba:	b280      	uxth	r0, r0
 80003bc:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80003c0:	463b      	mov	r3, r7
 80003c2:	fbb1 f1f7 	udiv	r1, r1, r7
 80003c6:	4638      	mov	r0, r7
 80003c8:	463c      	mov	r4, r7
 80003ca:	46b8      	mov	r8, r7
 80003cc:	46be      	mov	lr, r7
 80003ce:	2620      	movs	r6, #32
 80003d0:	eba2 0208 	sub.w	r2, r2, r8
 80003d4:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80003d8:	e765      	b.n	80002a6 <__udivmoddi4+0xfa>
 80003da:	4601      	mov	r1, r0
 80003dc:	e717      	b.n	800020e <__udivmoddi4+0x62>
 80003de:	4610      	mov	r0, r2
 80003e0:	e72b      	b.n	800023a <__udivmoddi4+0x8e>
 80003e2:	f1c6 0120 	rsb	r1, r6, #32
 80003e6:	fa2e fc01 	lsr.w	ip, lr, r1
 80003ea:	40b7      	lsls	r7, r6
 80003ec:	fa0e fe06 	lsl.w	lr, lr, r6
 80003f0:	fa20 f101 	lsr.w	r1, r0, r1
 80003f4:	ea41 010e 	orr.w	r1, r1, lr
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	fbbc f8fe 	udiv	r8, ip, lr
 8000400:	b2bc      	uxth	r4, r7
 8000402:	fb0e cc18 	mls	ip, lr, r8, ip
 8000406:	fb08 f904 	mul.w	r9, r8, r4
 800040a:	0c0a      	lsrs	r2, r1, #16
 800040c:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000410:	40b0      	lsls	r0, r6
 8000412:	4591      	cmp	r9, r2
 8000414:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000418:	b280      	uxth	r0, r0
 800041a:	d93e      	bls.n	800049a <__udivmoddi4+0x2ee>
 800041c:	18ba      	adds	r2, r7, r2
 800041e:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000422:	d201      	bcs.n	8000428 <__udivmoddi4+0x27c>
 8000424:	4591      	cmp	r9, r2
 8000426:	d81f      	bhi.n	8000468 <__udivmoddi4+0x2bc>
 8000428:	eba2 0209 	sub.w	r2, r2, r9
 800042c:	fbb2 f9fe 	udiv	r9, r2, lr
 8000430:	fb09 f804 	mul.w	r8, r9, r4
 8000434:	fb0e 2a19 	mls	sl, lr, r9, r2
 8000438:	b28a      	uxth	r2, r1
 800043a:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 800043e:	4542      	cmp	r2, r8
 8000440:	d229      	bcs.n	8000496 <__udivmoddi4+0x2ea>
 8000442:	18ba      	adds	r2, r7, r2
 8000444:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000448:	d2c2      	bcs.n	80003d0 <__udivmoddi4+0x224>
 800044a:	4542      	cmp	r2, r8
 800044c:	d2c0      	bcs.n	80003d0 <__udivmoddi4+0x224>
 800044e:	f1a9 0102 	sub.w	r1, r9, #2
 8000452:	443a      	add	r2, r7
 8000454:	e7bc      	b.n	80003d0 <__udivmoddi4+0x224>
 8000456:	45c6      	cmp	lr, r8
 8000458:	d29b      	bcs.n	8000392 <__udivmoddi4+0x1e6>
 800045a:	ebb8 0302 	subs.w	r3, r8, r2
 800045e:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000462:	3801      	subs	r0, #1
 8000464:	46e1      	mov	r9, ip
 8000466:	e794      	b.n	8000392 <__udivmoddi4+0x1e6>
 8000468:	eba7 0909 	sub.w	r9, r7, r9
 800046c:	444a      	add	r2, r9
 800046e:	fbb2 f9fe 	udiv	r9, r2, lr
 8000472:	f1a8 0c02 	sub.w	ip, r8, #2
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	e7db      	b.n	8000434 <__udivmoddi4+0x288>
 800047c:	4603      	mov	r3, r0
 800047e:	e77d      	b.n	800037c <__udivmoddi4+0x1d0>
 8000480:	46d0      	mov	r8, sl
 8000482:	e765      	b.n	8000350 <__udivmoddi4+0x1a4>
 8000484:	4608      	mov	r0, r1
 8000486:	e6fa      	b.n	800027e <__udivmoddi4+0xd2>
 8000488:	443b      	add	r3, r7
 800048a:	3a02      	subs	r2, #2
 800048c:	e730      	b.n	80002f0 <__udivmoddi4+0x144>
 800048e:	f1ac 0c02 	sub.w	ip, ip, #2
 8000492:	443b      	add	r3, r7
 8000494:	e719      	b.n	80002ca <__udivmoddi4+0x11e>
 8000496:	4649      	mov	r1, r9
 8000498:	e79a      	b.n	80003d0 <__udivmoddi4+0x224>
 800049a:	eba2 0209 	sub.w	r2, r2, r9
 800049e:	fbb2 f9fe 	udiv	r9, r2, lr
 80004a2:	46c4      	mov	ip, r8
 80004a4:	fb09 f804 	mul.w	r8, r9, r4
 80004a8:	e7c4      	b.n	8000434 <__udivmoddi4+0x288>
 80004aa:	bf00      	nop

080004ac <__aeabi_idiv0>:
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop

080004b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b086      	sub	sp, #24
 80004b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b6:	f000 f9be 	bl	8000836 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ba:	f000 f83b 	bl	8000534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004be:	f000 f8ad 	bl	800061c <MX_GPIO_Init>
  MX_I2C1_Init();
 80004c2:	f000 f87d 	bl	80005c0 <MX_I2C1_Init>

/* WHO_AM_I
  uint8_t adress[1] = {0x0F};
  uint8_t rData[1];
*/
  uint8_t adresse[1] = {0x2D} ;
 80004c6:	232d      	movs	r3, #45	@ 0x2d
 80004c8:	733b      	strb	r3, [r7, #12]
  uint8_t rData[1];
  uint8_t wData[1];
  wData[0] = (1<<7);
 80004ca:	2380      	movs	r3, #128	@ 0x80
 80004cc:	713b      	strb	r3, [r7, #4]
  uint8_t data[2];
  memcpy(data, adresse, 1);
 80004ce:	7b3b      	ldrb	r3, [r7, #12]
 80004d0:	703b      	strb	r3, [r7, #0]
  memcpy(data+1, wData, 1);
 80004d2:	463b      	mov	r3, r7
 80004d4:	3301      	adds	r3, #1
 80004d6:	793a      	ldrb	r2, [r7, #4]
 80004d8:	701a      	strb	r2, [r3, #0]
    /* USER CODE BEGIN 3 */
/* WHO_AM_I
	  HAL_I2C_Master_Transmit(&hi2c1, 0xD6, adress, 1, 100);
	  HAL_I2C_Master_Receive(&hi2c1, 0xD6, rData, 1, 100);
*/
	  HAL_I2C_Master_Transmit(&hi2c1, 0xD6, adresse, 1, 100);
 80004da:	f107 020c 	add.w	r2, r7, #12
 80004de:	2364      	movs	r3, #100	@ 0x64
 80004e0:	9300      	str	r3, [sp, #0]
 80004e2:	2301      	movs	r3, #1
 80004e4:	21d6      	movs	r1, #214	@ 0xd6
 80004e6:	4811      	ldr	r0, [pc, #68]	@ (800052c <main+0x7c>)
 80004e8:	f000 fe06 	bl	80010f8 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c1, 0xD6, rData, 1, 100);
 80004ec:	f107 0208 	add.w	r2, r7, #8
 80004f0:	2364      	movs	r3, #100	@ 0x64
 80004f2:	9300      	str	r3, [sp, #0]
 80004f4:	2301      	movs	r3, #1
 80004f6:	21d6      	movs	r1, #214	@ 0xd6
 80004f8:	480c      	ldr	r0, [pc, #48]	@ (800052c <main+0x7c>)
 80004fa:	f000 fefb 	bl	80012f4 <HAL_I2C_Master_Receive>

	  if((rData[0]>=0) && (rData[0]<=128)){
 80004fe:	7a3b      	ldrb	r3, [r7, #8]
 8000500:	2b80      	cmp	r3, #128	@ 0x80
 8000502:	d806      	bhi.n	8000512 <main+0x62>
		  GPIOA -> ODR |= (1<<5);
 8000504:	4b0a      	ldr	r3, [pc, #40]	@ (8000530 <main+0x80>)
 8000506:	695b      	ldr	r3, [r3, #20]
 8000508:	4a09      	ldr	r2, [pc, #36]	@ (8000530 <main+0x80>)
 800050a:	f043 0320 	orr.w	r3, r3, #32
 800050e:	6153      	str	r3, [r2, #20]
 8000510:	e008      	b.n	8000524 <main+0x74>
	  } else if((rData[0]>128) && (rData[0]<=255)){
 8000512:	7a3b      	ldrb	r3, [r7, #8]
 8000514:	2b80      	cmp	r3, #128	@ 0x80
 8000516:	d905      	bls.n	8000524 <main+0x74>
		  GPIOA -> ODR &= ~(1<<5);
 8000518:	4b05      	ldr	r3, [pc, #20]	@ (8000530 <main+0x80>)
 800051a:	695b      	ldr	r3, [r3, #20]
 800051c:	4a04      	ldr	r2, [pc, #16]	@ (8000530 <main+0x80>)
 800051e:	f023 0320 	bic.w	r3, r3, #32
 8000522:	6153      	str	r3, [r2, #20]
	  }

	  HAL_Delay(100);
 8000524:	2064      	movs	r0, #100	@ 0x64
 8000526:	f000 f9f5 	bl	8000914 <HAL_Delay>
	  HAL_I2C_Master_Transmit(&hi2c1, 0xD6, adresse, 1, 100);
 800052a:	e7d6      	b.n	80004da <main+0x2a>
 800052c:	20000028 	.word	0x20000028
 8000530:	40020000 	.word	0x40020000

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b092      	sub	sp, #72	@ 0x48
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 0314 	add.w	r3, r7, #20
 800053e:	2234      	movs	r2, #52	@ 0x34
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f002 fa2e 	bl	80029a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	463b      	mov	r3, r7
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]
 8000554:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000556:	4b19      	ldr	r3, [pc, #100]	@ (80005bc <SystemClock_Config+0x88>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 800055e:	4a17      	ldr	r2, [pc, #92]	@ (80005bc <SystemClock_Config+0x88>)
 8000560:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000564:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000566:	2302      	movs	r3, #2
 8000568:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056a:	2301      	movs	r3, #1
 800056c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056e:	2310      	movs	r3, #16
 8000570:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000572:	2300      	movs	r3, #0
 8000574:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	4618      	mov	r0, r3
 800057c:	f001 fc72 	bl	8001e64 <HAL_RCC_OscConfig>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000586:	f000 f887 	bl	8000698 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058a:	230f      	movs	r3, #15
 800058c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800058e:	2301      	movs	r3, #1
 8000590:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800059e:	463b      	mov	r3, r7
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f001 ff8e 	bl	80024c4 <HAL_RCC_ClockConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80005ae:	f000 f873 	bl	8000698 <Error_Handler>
  }
}
 80005b2:	bf00      	nop
 80005b4:	3748      	adds	r7, #72	@ 0x48
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40007000 	.word	0x40007000

080005c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005c4:	4b12      	ldr	r3, [pc, #72]	@ (8000610 <MX_I2C1_Init+0x50>)
 80005c6:	4a13      	ldr	r2, [pc, #76]	@ (8000614 <MX_I2C1_Init+0x54>)
 80005c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005ca:	4b11      	ldr	r3, [pc, #68]	@ (8000610 <MX_I2C1_Init+0x50>)
 80005cc:	4a12      	ldr	r2, [pc, #72]	@ (8000618 <MX_I2C1_Init+0x58>)
 80005ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000610 <MX_I2C1_Init+0x50>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000610 <MX_I2C1_Init+0x50>)
 80005d8:	2200      	movs	r2, #0
 80005da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000610 <MX_I2C1_Init+0x50>)
 80005de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80005e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000610 <MX_I2C1_Init+0x50>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005ea:	4b09      	ldr	r3, [pc, #36]	@ (8000610 <MX_I2C1_Init+0x50>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005f0:	4b07      	ldr	r3, [pc, #28]	@ (8000610 <MX_I2C1_Init+0x50>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005f6:	4b06      	ldr	r3, [pc, #24]	@ (8000610 <MX_I2C1_Init+0x50>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005fc:	4804      	ldr	r0, [pc, #16]	@ (8000610 <MX_I2C1_Init+0x50>)
 80005fe:	f000 fc37 	bl	8000e70 <HAL_I2C_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000608:	f000 f846 	bl	8000698 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000028 	.word	0x20000028
 8000614:	40005400 	.word	0x40005400
 8000618:	000186a0 	.word	0x000186a0

0800061c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000622:	f107 030c 	add.w	r3, r7, #12
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000632:	4b17      	ldr	r3, [pc, #92]	@ (8000690 <MX_GPIO_Init+0x74>)
 8000634:	69db      	ldr	r3, [r3, #28]
 8000636:	4a16      	ldr	r2, [pc, #88]	@ (8000690 <MX_GPIO_Init+0x74>)
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	61d3      	str	r3, [r2, #28]
 800063e:	4b14      	ldr	r3, [pc, #80]	@ (8000690 <MX_GPIO_Init+0x74>)
 8000640:	69db      	ldr	r3, [r3, #28]
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800064a:	4b11      	ldr	r3, [pc, #68]	@ (8000690 <MX_GPIO_Init+0x74>)
 800064c:	69db      	ldr	r3, [r3, #28]
 800064e:	4a10      	ldr	r2, [pc, #64]	@ (8000690 <MX_GPIO_Init+0x74>)
 8000650:	f043 0302 	orr.w	r3, r3, #2
 8000654:	61d3      	str	r3, [r2, #28]
 8000656:	4b0e      	ldr	r3, [pc, #56]	@ (8000690 <MX_GPIO_Init+0x74>)
 8000658:	69db      	ldr	r3, [r3, #28]
 800065a:	f003 0302 	and.w	r3, r3, #2
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	2120      	movs	r1, #32
 8000666:	480b      	ldr	r0, [pc, #44]	@ (8000694 <MX_GPIO_Init+0x78>)
 8000668:	f000 fbea 	bl	8000e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800066c:	2320      	movs	r3, #32
 800066e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000670:	2301      	movs	r3, #1
 8000672:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000678:	2300      	movs	r3, #0
 800067a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	4619      	mov	r1, r3
 8000682:	4804      	ldr	r0, [pc, #16]	@ (8000694 <MX_GPIO_Init+0x78>)
 8000684:	f000 fa4c 	bl	8000b20 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000688:	bf00      	nop
 800068a:	3720      	adds	r7, #32
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40023800 	.word	0x40023800
 8000694:	40020000 	.word	0x40020000

08000698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800069c:	b672      	cpsid	i
}
 800069e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a0:	bf00      	nop
 80006a2:	e7fd      	b.n	80006a0 <Error_Handler+0x8>

080006a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80006aa:	4b14      	ldr	r3, [pc, #80]	@ (80006fc <HAL_MspInit+0x58>)
 80006ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006ae:	4a13      	ldr	r2, [pc, #76]	@ (80006fc <HAL_MspInit+0x58>)
 80006b0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80006b4:	6253      	str	r3, [r2, #36]	@ 0x24
 80006b6:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <HAL_MspInit+0x58>)
 80006b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c2:	4b0e      	ldr	r3, [pc, #56]	@ (80006fc <HAL_MspInit+0x58>)
 80006c4:	6a1b      	ldr	r3, [r3, #32]
 80006c6:	4a0d      	ldr	r2, [pc, #52]	@ (80006fc <HAL_MspInit+0x58>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	6213      	str	r3, [r2, #32]
 80006ce:	4b0b      	ldr	r3, [pc, #44]	@ (80006fc <HAL_MspInit+0x58>)
 80006d0:	6a1b      	ldr	r3, [r3, #32]
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006da:	4b08      	ldr	r3, [pc, #32]	@ (80006fc <HAL_MspInit+0x58>)
 80006dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006de:	4a07      	ldr	r2, [pc, #28]	@ (80006fc <HAL_MspInit+0x58>)
 80006e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006e4:	6253      	str	r3, [r2, #36]	@ 0x24
 80006e6:	4b05      	ldr	r3, [pc, #20]	@ (80006fc <HAL_MspInit+0x58>)
 80006e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f2:	bf00      	nop
 80006f4:	3714      	adds	r7, #20
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr
 80006fc:	40023800 	.word	0x40023800

08000700 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08a      	sub	sp, #40	@ 0x28
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a17      	ldr	r2, [pc, #92]	@ (800077c <HAL_I2C_MspInit+0x7c>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d128      	bne.n	8000774 <HAL_I2C_MspInit+0x74>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000722:	4b17      	ldr	r3, [pc, #92]	@ (8000780 <HAL_I2C_MspInit+0x80>)
 8000724:	69db      	ldr	r3, [r3, #28]
 8000726:	4a16      	ldr	r2, [pc, #88]	@ (8000780 <HAL_I2C_MspInit+0x80>)
 8000728:	f043 0302 	orr.w	r3, r3, #2
 800072c:	61d3      	str	r3, [r2, #28]
 800072e:	4b14      	ldr	r3, [pc, #80]	@ (8000780 <HAL_I2C_MspInit+0x80>)
 8000730:	69db      	ldr	r3, [r3, #28]
 8000732:	f003 0302 	and.w	r3, r3, #2
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800073a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800073e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000740:	2312      	movs	r3, #18
 8000742:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000748:	2303      	movs	r3, #3
 800074a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800074c:	2304      	movs	r3, #4
 800074e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000750:	f107 0314 	add.w	r3, r7, #20
 8000754:	4619      	mov	r1, r3
 8000756:	480b      	ldr	r0, [pc, #44]	@ (8000784 <HAL_I2C_MspInit+0x84>)
 8000758:	f000 f9e2 	bl	8000b20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800075c:	4b08      	ldr	r3, [pc, #32]	@ (8000780 <HAL_I2C_MspInit+0x80>)
 800075e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000760:	4a07      	ldr	r2, [pc, #28]	@ (8000780 <HAL_I2C_MspInit+0x80>)
 8000762:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000766:	6253      	str	r3, [r2, #36]	@ 0x24
 8000768:	4b05      	ldr	r3, [pc, #20]	@ (8000780 <HAL_I2C_MspInit+0x80>)
 800076a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800076c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000774:	bf00      	nop
 8000776:	3728      	adds	r7, #40	@ 0x28
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40005400 	.word	0x40005400
 8000780:	40023800 	.word	0x40023800
 8000784:	40020400 	.word	0x40020400

08000788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800078c:	bf00      	nop
 800078e:	e7fd      	b.n	800078c <NMI_Handler+0x4>

08000790 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000794:	bf00      	nop
 8000796:	e7fd      	b.n	8000794 <HardFault_Handler+0x4>

08000798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800079c:	bf00      	nop
 800079e:	e7fd      	b.n	800079c <MemManage_Handler+0x4>

080007a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a4:	bf00      	nop
 80007a6:	e7fd      	b.n	80007a4 <BusFault_Handler+0x4>

080007a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <UsageFault_Handler+0x4>

080007b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr

080007bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr

080007c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr

080007d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d8:	f000 f880 	bl	80008dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}

080007e0 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr

080007ec <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 80007ec:	f7ff fff8 	bl	80007e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007f0:	480b      	ldr	r0, [pc, #44]	@ (8000820 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007f2:	490c      	ldr	r1, [pc, #48]	@ (8000824 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007f4:	4a0c      	ldr	r2, [pc, #48]	@ (8000828 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f8:	e002      	b.n	8000800 <LoopCopyDataInit>

080007fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007fe:	3304      	adds	r3, #4

08000800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000804:	d3f9      	bcc.n	80007fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000806:	4a09      	ldr	r2, [pc, #36]	@ (800082c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000808:	4c09      	ldr	r4, [pc, #36]	@ (8000830 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800080a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800080c:	e001      	b.n	8000812 <LoopFillZerobss>

0800080e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800080e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000810:	3204      	adds	r2, #4

08000812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000814:	d3fb      	bcc.n	800080e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000816:	f002 f8cd 	bl	80029b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800081a:	f7ff fe49 	bl	80004b0 <main>
  bx lr
 800081e:	4770      	bx	lr
  ldr r0, =_sdata
 8000820:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000824:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000828:	08002a48 	.word	0x08002a48
  ldr r2, =_sbss
 800082c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000830:	20000080 	.word	0x20000080

08000834 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000834:	e7fe      	b.n	8000834 <ADC1_IRQHandler>

08000836 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	b082      	sub	sp, #8
 800083a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800083c:	2300      	movs	r3, #0
 800083e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000840:	2003      	movs	r0, #3
 8000842:	f000 f939 	bl	8000ab8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000846:	200f      	movs	r0, #15
 8000848:	f000 f80e 	bl	8000868 <HAL_InitTick>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d002      	beq.n	8000858 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000852:	2301      	movs	r3, #1
 8000854:	71fb      	strb	r3, [r7, #7]
 8000856:	e001      	b.n	800085c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000858:	f7ff ff24 	bl	80006a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800085c:	79fb      	ldrb	r3, [r7, #7]
}
 800085e:	4618      	mov	r0, r3
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000870:	2300      	movs	r3, #0
 8000872:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000874:	4b16      	ldr	r3, [pc, #88]	@ (80008d0 <HAL_InitTick+0x68>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d022      	beq.n	80008c2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800087c:	4b15      	ldr	r3, [pc, #84]	@ (80008d4 <HAL_InitTick+0x6c>)
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	4b13      	ldr	r3, [pc, #76]	@ (80008d0 <HAL_InitTick+0x68>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000888:	fbb1 f3f3 	udiv	r3, r1, r3
 800088c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000890:	4618      	mov	r0, r3
 8000892:	f000 f938 	bl	8000b06 <HAL_SYSTICK_Config>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d10f      	bne.n	80008bc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2b0f      	cmp	r3, #15
 80008a0:	d809      	bhi.n	80008b6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008a2:	2200      	movs	r2, #0
 80008a4:	6879      	ldr	r1, [r7, #4]
 80008a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80008aa:	f000 f910 	bl	8000ace <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008ae:	4a0a      	ldr	r2, [pc, #40]	@ (80008d8 <HAL_InitTick+0x70>)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	6013      	str	r3, [r2, #0]
 80008b4:	e007      	b.n	80008c6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80008b6:	2301      	movs	r3, #1
 80008b8:	73fb      	strb	r3, [r7, #15]
 80008ba:	e004      	b.n	80008c6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008bc:	2301      	movs	r3, #1
 80008be:	73fb      	strb	r3, [r7, #15]
 80008c0:	e001      	b.n	80008c6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008c2:	2301      	movs	r3, #1
 80008c4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000008 	.word	0x20000008
 80008d4:	20000000 	.word	0x20000000
 80008d8:	20000004 	.word	0x20000004

080008dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008e0:	4b05      	ldr	r3, [pc, #20]	@ (80008f8 <HAL_IncTick+0x1c>)
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	4b05      	ldr	r3, [pc, #20]	@ (80008fc <HAL_IncTick+0x20>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4413      	add	r3, r2
 80008ea:	4a03      	ldr	r2, [pc, #12]	@ (80008f8 <HAL_IncTick+0x1c>)
 80008ec:	6013      	str	r3, [r2, #0]
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	2000007c 	.word	0x2000007c
 80008fc:	20000008 	.word	0x20000008

08000900 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  return uwTick;
 8000904:	4b02      	ldr	r3, [pc, #8]	@ (8000910 <HAL_GetTick+0x10>)
 8000906:	681b      	ldr	r3, [r3, #0]
}
 8000908:	4618      	mov	r0, r3
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr
 8000910:	2000007c 	.word	0x2000007c

08000914 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800091c:	f7ff fff0 	bl	8000900 <HAL_GetTick>
 8000920:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800092c:	d004      	beq.n	8000938 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800092e:	4b09      	ldr	r3, [pc, #36]	@ (8000954 <HAL_Delay+0x40>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	68fa      	ldr	r2, [r7, #12]
 8000934:	4413      	add	r3, r2
 8000936:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000938:	bf00      	nop
 800093a:	f7ff ffe1 	bl	8000900 <HAL_GetTick>
 800093e:	4602      	mov	r2, r0
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	1ad3      	subs	r3, r2, r3
 8000944:	68fa      	ldr	r2, [r7, #12]
 8000946:	429a      	cmp	r2, r3
 8000948:	d8f7      	bhi.n	800093a <HAL_Delay+0x26>
  {
  }
}
 800094a:	bf00      	nop
 800094c:	bf00      	nop
 800094e:	3710      	adds	r7, #16
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000008 	.word	0x20000008

08000958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f003 0307 	and.w	r3, r3, #7
 8000966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000968:	4b0c      	ldr	r3, [pc, #48]	@ (800099c <__NVIC_SetPriorityGrouping+0x44>)
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800096e:	68ba      	ldr	r2, [r7, #8]
 8000970:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000974:	4013      	ands	r3, r2
 8000976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000980:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000984:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800098a:	4a04      	ldr	r2, [pc, #16]	@ (800099c <__NVIC_SetPriorityGrouping+0x44>)
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	60d3      	str	r3, [r2, #12]
}
 8000990:	bf00      	nop
 8000992:	3714      	adds	r7, #20
 8000994:	46bd      	mov	sp, r7
 8000996:	bc80      	pop	{r7}
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009a4:	4b04      	ldr	r3, [pc, #16]	@ (80009b8 <__NVIC_GetPriorityGrouping+0x18>)
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	0a1b      	lsrs	r3, r3, #8
 80009aa:	f003 0307 	and.w	r3, r3, #7
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bc80      	pop	{r7}
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	6039      	str	r1, [r7, #0]
 80009c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	db0a      	blt.n	80009e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	490c      	ldr	r1, [pc, #48]	@ (8000a08 <__NVIC_SetPriority+0x4c>)
 80009d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009da:	0112      	lsls	r2, r2, #4
 80009dc:	b2d2      	uxtb	r2, r2
 80009de:	440b      	add	r3, r1
 80009e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009e4:	e00a      	b.n	80009fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	4908      	ldr	r1, [pc, #32]	@ (8000a0c <__NVIC_SetPriority+0x50>)
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	f003 030f 	and.w	r3, r3, #15
 80009f2:	3b04      	subs	r3, #4
 80009f4:	0112      	lsls	r2, r2, #4
 80009f6:	b2d2      	uxtb	r2, r2
 80009f8:	440b      	add	r3, r1
 80009fa:	761a      	strb	r2, [r3, #24]
}
 80009fc:	bf00      	nop
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000e100 	.word	0xe000e100
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b089      	sub	sp, #36	@ 0x24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	f003 0307 	and.w	r3, r3, #7
 8000a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a24:	69fb      	ldr	r3, [r7, #28]
 8000a26:	f1c3 0307 	rsb	r3, r3, #7
 8000a2a:	2b04      	cmp	r3, #4
 8000a2c:	bf28      	it	cs
 8000a2e:	2304      	movcs	r3, #4
 8000a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	3304      	adds	r3, #4
 8000a36:	2b06      	cmp	r3, #6
 8000a38:	d902      	bls.n	8000a40 <NVIC_EncodePriority+0x30>
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	3b03      	subs	r3, #3
 8000a3e:	e000      	b.n	8000a42 <NVIC_EncodePriority+0x32>
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	43da      	mvns	r2, r3
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	401a      	ands	r2, r3
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a58:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a62:	43d9      	mvns	r1, r3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a68:	4313      	orrs	r3, r2
         );
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3724      	adds	r7, #36	@ 0x24
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr

08000a74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	3b01      	subs	r3, #1
 8000a80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a84:	d301      	bcc.n	8000a8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a86:	2301      	movs	r3, #1
 8000a88:	e00f      	b.n	8000aaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab4 <SysTick_Config+0x40>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a92:	210f      	movs	r1, #15
 8000a94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a98:	f7ff ff90 	bl	80009bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a9c:	4b05      	ldr	r3, [pc, #20]	@ (8000ab4 <SysTick_Config+0x40>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aa2:	4b04      	ldr	r3, [pc, #16]	@ (8000ab4 <SysTick_Config+0x40>)
 8000aa4:	2207      	movs	r2, #7
 8000aa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	e000e010 	.word	0xe000e010

08000ab8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f7ff ff49 	bl	8000958 <__NVIC_SetPriorityGrouping>
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b086      	sub	sp, #24
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	60b9      	str	r1, [r7, #8]
 8000ad8:	607a      	str	r2, [r7, #4]
 8000ada:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ae0:	f7ff ff5e 	bl	80009a0 <__NVIC_GetPriorityGrouping>
 8000ae4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ae6:	687a      	ldr	r2, [r7, #4]
 8000ae8:	68b9      	ldr	r1, [r7, #8]
 8000aea:	6978      	ldr	r0, [r7, #20]
 8000aec:	f7ff ff90 	bl	8000a10 <NVIC_EncodePriority>
 8000af0:	4602      	mov	r2, r0
 8000af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000af6:	4611      	mov	r1, r2
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff ff5f 	bl	80009bc <__NVIC_SetPriority>
}
 8000afe:	bf00      	nop
 8000b00:	3718      	adds	r7, #24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b082      	sub	sp, #8
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f7ff ffb0 	bl	8000a74 <SysTick_Config>
 8000b14:	4603      	mov	r3, r0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b087      	sub	sp, #28
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000b36:	e160      	b.n	8000dfa <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	fa01 f303 	lsl.w	r3, r1, r3
 8000b44:	4013      	ands	r3, r2
 8000b46:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	f000 8152 	beq.w	8000df4 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	f003 0303 	and.w	r3, r3, #3
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d005      	beq.n	8000b68 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b64:	2b02      	cmp	r3, #2
 8000b66:	d130      	bne.n	8000bca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	2203      	movs	r2, #3
 8000b74:	fa02 f303 	lsl.w	r3, r2, r3
 8000b78:	43db      	mvns	r3, r3
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	68da      	ldr	r2, [r3, #12]
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	693a      	ldr	r2, [r7, #16]
 8000b96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	4013      	ands	r3, r2
 8000bac:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	091b      	lsrs	r3, r3, #4
 8000bb4:	f003 0201 	and.w	r2, r3, #1
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f003 0303 	and.w	r3, r3, #3
 8000bd2:	2b03      	cmp	r3, #3
 8000bd4:	d017      	beq.n	8000c06 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	68db      	ldr	r3, [r3, #12]
 8000bda:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	2203      	movs	r2, #3
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	43db      	mvns	r3, r3
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	4013      	ands	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	689a      	ldr	r2, [r3, #8]
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f003 0303 	and.w	r3, r3, #3
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d123      	bne.n	8000c5a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	08da      	lsrs	r2, r3, #3
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	3208      	adds	r2, #8
 8000c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c1e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	220f      	movs	r2, #15
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	4013      	ands	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	691a      	ldr	r2, [r3, #16]
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	f003 0307 	and.w	r3, r3, #7
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	08da      	lsrs	r2, r3, #3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3208      	adds	r2, #8
 8000c54:	6939      	ldr	r1, [r7, #16]
 8000c56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	2203      	movs	r2, #3
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43db      	mvns	r3, r3
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f003 0203 	and.w	r2, r3, #3
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f000 80ac 	beq.w	8000df4 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9c:	4b5e      	ldr	r3, [pc, #376]	@ (8000e18 <HAL_GPIO_Init+0x2f8>)
 8000c9e:	6a1b      	ldr	r3, [r3, #32]
 8000ca0:	4a5d      	ldr	r2, [pc, #372]	@ (8000e18 <HAL_GPIO_Init+0x2f8>)
 8000ca2:	f043 0301 	orr.w	r3, r3, #1
 8000ca6:	6213      	str	r3, [r2, #32]
 8000ca8:	4b5b      	ldr	r3, [pc, #364]	@ (8000e18 <HAL_GPIO_Init+0x2f8>)
 8000caa:	6a1b      	ldr	r3, [r3, #32]
 8000cac:	f003 0301 	and.w	r3, r3, #1
 8000cb0:	60bb      	str	r3, [r7, #8]
 8000cb2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000cb4:	4a59      	ldr	r2, [pc, #356]	@ (8000e1c <HAL_GPIO_Init+0x2fc>)
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	089b      	lsrs	r3, r3, #2
 8000cba:	3302      	adds	r3, #2
 8000cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cc0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	f003 0303 	and.w	r3, r3, #3
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	220f      	movs	r2, #15
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a51      	ldr	r2, [pc, #324]	@ (8000e20 <HAL_GPIO_Init+0x300>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d025      	beq.n	8000d2c <HAL_GPIO_Init+0x20c>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a50      	ldr	r2, [pc, #320]	@ (8000e24 <HAL_GPIO_Init+0x304>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d01f      	beq.n	8000d28 <HAL_GPIO_Init+0x208>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a4f      	ldr	r2, [pc, #316]	@ (8000e28 <HAL_GPIO_Init+0x308>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d019      	beq.n	8000d24 <HAL_GPIO_Init+0x204>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4a4e      	ldr	r2, [pc, #312]	@ (8000e2c <HAL_GPIO_Init+0x30c>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d013      	beq.n	8000d20 <HAL_GPIO_Init+0x200>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4a4d      	ldr	r2, [pc, #308]	@ (8000e30 <HAL_GPIO_Init+0x310>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d00d      	beq.n	8000d1c <HAL_GPIO_Init+0x1fc>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a4c      	ldr	r2, [pc, #304]	@ (8000e34 <HAL_GPIO_Init+0x314>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d007      	beq.n	8000d18 <HAL_GPIO_Init+0x1f8>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4a4b      	ldr	r2, [pc, #300]	@ (8000e38 <HAL_GPIO_Init+0x318>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d101      	bne.n	8000d14 <HAL_GPIO_Init+0x1f4>
 8000d10:	2306      	movs	r3, #6
 8000d12:	e00c      	b.n	8000d2e <HAL_GPIO_Init+0x20e>
 8000d14:	2307      	movs	r3, #7
 8000d16:	e00a      	b.n	8000d2e <HAL_GPIO_Init+0x20e>
 8000d18:	2305      	movs	r3, #5
 8000d1a:	e008      	b.n	8000d2e <HAL_GPIO_Init+0x20e>
 8000d1c:	2304      	movs	r3, #4
 8000d1e:	e006      	b.n	8000d2e <HAL_GPIO_Init+0x20e>
 8000d20:	2303      	movs	r3, #3
 8000d22:	e004      	b.n	8000d2e <HAL_GPIO_Init+0x20e>
 8000d24:	2302      	movs	r3, #2
 8000d26:	e002      	b.n	8000d2e <HAL_GPIO_Init+0x20e>
 8000d28:	2301      	movs	r3, #1
 8000d2a:	e000      	b.n	8000d2e <HAL_GPIO_Init+0x20e>
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	697a      	ldr	r2, [r7, #20]
 8000d30:	f002 0203 	and.w	r2, r2, #3
 8000d34:	0092      	lsls	r2, r2, #2
 8000d36:	4093      	lsls	r3, r2
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000d3e:	4937      	ldr	r1, [pc, #220]	@ (8000e1c <HAL_GPIO_Init+0x2fc>)
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	089b      	lsrs	r3, r3, #2
 8000d44:	3302      	adds	r3, #2
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d4c:	4b3b      	ldr	r3, [pc, #236]	@ (8000e3c <HAL_GPIO_Init+0x31c>)
 8000d4e:	689b      	ldr	r3, [r3, #8]
 8000d50:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	43db      	mvns	r3, r3
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d003      	beq.n	8000d70 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d70:	4a32      	ldr	r2, [pc, #200]	@ (8000e3c <HAL_GPIO_Init+0x31c>)
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d76:	4b31      	ldr	r3, [pc, #196]	@ (8000e3c <HAL_GPIO_Init+0x31c>)
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	4013      	ands	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d003      	beq.n	8000d9a <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d9a:	4a28      	ldr	r2, [pc, #160]	@ (8000e3c <HAL_GPIO_Init+0x31c>)
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000da0:	4b26      	ldr	r3, [pc, #152]	@ (8000e3c <HAL_GPIO_Init+0x31c>)
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	43db      	mvns	r3, r3
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4013      	ands	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d003      	beq.n	8000dc4 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000dc4:	4a1d      	ldr	r2, [pc, #116]	@ (8000e3c <HAL_GPIO_Init+0x31c>)
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dca:	4b1c      	ldr	r3, [pc, #112]	@ (8000e3c <HAL_GPIO_Init+0x31c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d003      	beq.n	8000dee <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000dee:	4a13      	ldr	r2, [pc, #76]	@ (8000e3c <HAL_GPIO_Init+0x31c>)
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	3301      	adds	r3, #1
 8000df8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	fa22 f303 	lsr.w	r3, r2, r3
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	f47f ae97 	bne.w	8000b38 <HAL_GPIO_Init+0x18>
  }
}
 8000e0a:	bf00      	nop
 8000e0c:	bf00      	nop
 8000e0e:	371c      	adds	r7, #28
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40010000 	.word	0x40010000
 8000e20:	40020000 	.word	0x40020000
 8000e24:	40020400 	.word	0x40020400
 8000e28:	40020800 	.word	0x40020800
 8000e2c:	40020c00 	.word	0x40020c00
 8000e30:	40021000 	.word	0x40021000
 8000e34:	40021400 	.word	0x40021400
 8000e38:	40021800 	.word	0x40021800
 8000e3c:	40010400 	.word	0x40010400

08000e40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	460b      	mov	r3, r1
 8000e4a:	807b      	strh	r3, [r7, #2]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e50:	787b      	ldrb	r3, [r7, #1]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d003      	beq.n	8000e5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e56:	887a      	ldrh	r2, [r7, #2]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8000e5c:	e003      	b.n	8000e66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000e5e:	887b      	ldrh	r3, [r7, #2]
 8000e60:	041a      	lsls	r2, r3, #16
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	619a      	str	r2, [r3, #24]
}
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr

08000e70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d101      	bne.n	8000e82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e12b      	b.n	80010da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d106      	bne.n	8000e9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2200      	movs	r2, #0
 8000e92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f7ff fc32 	bl	8000700 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2224      	movs	r2, #36	@ 0x24
 8000ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f022 0201 	bic.w	r2, r2, #1
 8000eb2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000ec2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000ed2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000ed4:	f001 fcf2 	bl	80028bc <HAL_RCC_GetPCLK1Freq>
 8000ed8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	4a81      	ldr	r2, [pc, #516]	@ (80010e4 <HAL_I2C_Init+0x274>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d807      	bhi.n	8000ef4 <HAL_I2C_Init+0x84>
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	4a80      	ldr	r2, [pc, #512]	@ (80010e8 <HAL_I2C_Init+0x278>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	bf94      	ite	ls
 8000eec:	2301      	movls	r3, #1
 8000eee:	2300      	movhi	r3, #0
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	e006      	b.n	8000f02 <HAL_I2C_Init+0x92>
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	4a7d      	ldr	r2, [pc, #500]	@ (80010ec <HAL_I2C_Init+0x27c>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	bf94      	ite	ls
 8000efc:	2301      	movls	r3, #1
 8000efe:	2300      	movhi	r3, #0
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e0e7      	b.n	80010da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	4a78      	ldr	r2, [pc, #480]	@ (80010f0 <HAL_I2C_Init+0x280>)
 8000f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f12:	0c9b      	lsrs	r3, r3, #18
 8000f14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	68ba      	ldr	r2, [r7, #8]
 8000f26:	430a      	orrs	r2, r1
 8000f28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	6a1b      	ldr	r3, [r3, #32]
 8000f30:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	4a6a      	ldr	r2, [pc, #424]	@ (80010e4 <HAL_I2C_Init+0x274>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d802      	bhi.n	8000f44 <HAL_I2C_Init+0xd4>
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	3301      	adds	r3, #1
 8000f42:	e009      	b.n	8000f58 <HAL_I2C_Init+0xe8>
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000f4a:	fb02 f303 	mul.w	r3, r2, r3
 8000f4e:	4a69      	ldr	r2, [pc, #420]	@ (80010f4 <HAL_I2C_Init+0x284>)
 8000f50:	fba2 2303 	umull	r2, r3, r2, r3
 8000f54:	099b      	lsrs	r3, r3, #6
 8000f56:	3301      	adds	r3, #1
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	6812      	ldr	r2, [r2, #0]
 8000f5c:	430b      	orrs	r3, r1
 8000f5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000f6a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	495c      	ldr	r1, [pc, #368]	@ (80010e4 <HAL_I2C_Init+0x274>)
 8000f74:	428b      	cmp	r3, r1
 8000f76:	d819      	bhi.n	8000fac <HAL_I2C_Init+0x13c>
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	1e59      	subs	r1, r3, #1
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f86:	1c59      	adds	r1, r3, #1
 8000f88:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8000f8c:	400b      	ands	r3, r1
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d00a      	beq.n	8000fa8 <HAL_I2C_Init+0x138>
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	1e59      	subs	r1, r3, #1
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fa6:	e051      	b.n	800104c <HAL_I2C_Init+0x1dc>
 8000fa8:	2304      	movs	r3, #4
 8000faa:	e04f      	b.n	800104c <HAL_I2C_Init+0x1dc>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d111      	bne.n	8000fd8 <HAL_I2C_Init+0x168>
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	1e58      	subs	r0, r3, #1
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6859      	ldr	r1, [r3, #4]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	440b      	add	r3, r1
 8000fc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	bf0c      	ite	eq
 8000fd0:	2301      	moveq	r3, #1
 8000fd2:	2300      	movne	r3, #0
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	e012      	b.n	8000ffe <HAL_I2C_Init+0x18e>
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	1e58      	subs	r0, r3, #1
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6859      	ldr	r1, [r3, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	440b      	add	r3, r1
 8000fe6:	0099      	lsls	r1, r3, #2
 8000fe8:	440b      	add	r3, r1
 8000fea:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fee:	3301      	adds	r3, #1
 8000ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	bf0c      	ite	eq
 8000ff8:	2301      	moveq	r3, #1
 8000ffa:	2300      	movne	r3, #0
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <HAL_I2C_Init+0x196>
 8001002:	2301      	movs	r3, #1
 8001004:	e022      	b.n	800104c <HAL_I2C_Init+0x1dc>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d10e      	bne.n	800102c <HAL_I2C_Init+0x1bc>
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	1e58      	subs	r0, r3, #1
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6859      	ldr	r1, [r3, #4]
 8001016:	460b      	mov	r3, r1
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	440b      	add	r3, r1
 800101c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001020:	3301      	adds	r3, #1
 8001022:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001026:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800102a:	e00f      	b.n	800104c <HAL_I2C_Init+0x1dc>
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	1e58      	subs	r0, r3, #1
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6859      	ldr	r1, [r3, #4]
 8001034:	460b      	mov	r3, r1
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	440b      	add	r3, r1
 800103a:	0099      	lsls	r1, r3, #2
 800103c:	440b      	add	r3, r1
 800103e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001042:	3301      	adds	r3, #1
 8001044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001048:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800104c:	6879      	ldr	r1, [r7, #4]
 800104e:	6809      	ldr	r1, [r1, #0]
 8001050:	4313      	orrs	r3, r2
 8001052:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	69da      	ldr	r2, [r3, #28]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6a1b      	ldr	r3, [r3, #32]
 8001066:	431a      	orrs	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	430a      	orrs	r2, r1
 800106e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800107a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	6911      	ldr	r1, [r2, #16]
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	68d2      	ldr	r2, [r2, #12]
 8001086:	4311      	orrs	r1, r2
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	6812      	ldr	r2, [r2, #0]
 800108c:	430b      	orrs	r3, r1
 800108e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	695a      	ldr	r2, [r3, #20]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	431a      	orrs	r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	430a      	orrs	r2, r1
 80010aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f042 0201 	orr.w	r2, r2, #1
 80010ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2220      	movs	r2, #32
 80010c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	000186a0 	.word	0x000186a0
 80010e8:	001e847f 	.word	0x001e847f
 80010ec:	003d08ff 	.word	0x003d08ff
 80010f0:	431bde83 	.word	0x431bde83
 80010f4:	10624dd3 	.word	0x10624dd3

080010f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af02      	add	r7, sp, #8
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	607a      	str	r2, [r7, #4]
 8001102:	461a      	mov	r2, r3
 8001104:	460b      	mov	r3, r1
 8001106:	817b      	strh	r3, [r7, #10]
 8001108:	4613      	mov	r3, r2
 800110a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800110c:	f7ff fbf8 	bl	8000900 <HAL_GetTick>
 8001110:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b20      	cmp	r3, #32
 800111c:	f040 80e0 	bne.w	80012e0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	2319      	movs	r3, #25
 8001126:	2201      	movs	r2, #1
 8001128:	4970      	ldr	r1, [pc, #448]	@ (80012ec <HAL_I2C_Master_Transmit+0x1f4>)
 800112a:	68f8      	ldr	r0, [r7, #12]
 800112c:	f000 fc64 	bl	80019f8 <I2C_WaitOnFlagUntilTimeout>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001136:	2302      	movs	r3, #2
 8001138:	e0d3      	b.n	80012e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001140:	2b01      	cmp	r3, #1
 8001142:	d101      	bne.n	8001148 <HAL_I2C_Master_Transmit+0x50>
 8001144:	2302      	movs	r3, #2
 8001146:	e0cc      	b.n	80012e2 <HAL_I2C_Master_Transmit+0x1ea>
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2201      	movs	r2, #1
 800114c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	2b01      	cmp	r3, #1
 800115c:	d007      	beq.n	800116e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f042 0201 	orr.w	r2, r2, #1
 800116c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800117c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2221      	movs	r2, #33	@ 0x21
 8001182:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2210      	movs	r2, #16
 800118a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	2200      	movs	r2, #0
 8001192:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	893a      	ldrh	r2, [r7, #8]
 800119e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	4a50      	ldr	r2, [pc, #320]	@ (80012f0 <HAL_I2C_Master_Transmit+0x1f8>)
 80011ae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80011b0:	8979      	ldrh	r1, [r7, #10]
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	6a3a      	ldr	r2, [r7, #32]
 80011b6:	68f8      	ldr	r0, [r7, #12]
 80011b8:	f000 face 	bl	8001758 <I2C_MasterRequestWrite>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e08d      	b.n	80012e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80011c6:	2300      	movs	r3, #0
 80011c8:	613b      	str	r3, [r7, #16]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	695b      	ldr	r3, [r3, #20]
 80011d0:	613b      	str	r3, [r7, #16]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80011dc:	e066      	b.n	80012ac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011de:	697a      	ldr	r2, [r7, #20]
 80011e0:	6a39      	ldr	r1, [r7, #32]
 80011e2:	68f8      	ldr	r0, [r7, #12]
 80011e4:	f000 fd22 	bl	8001c2c <I2C_WaitOnTXEFlagUntilTimeout>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00d      	beq.n	800120a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f2:	2b04      	cmp	r3, #4
 80011f4:	d107      	bne.n	8001206 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001204:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e06b      	b.n	80012e2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800120e:	781a      	ldrb	r2, [r3, #0]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800121a:	1c5a      	adds	r2, r3, #1
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001224:	b29b      	uxth	r3, r3
 8001226:	3b01      	subs	r3, #1
 8001228:	b29a      	uxth	r2, r3
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001232:	3b01      	subs	r3, #1
 8001234:	b29a      	uxth	r2, r3
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	695b      	ldr	r3, [r3, #20]
 8001240:	f003 0304 	and.w	r3, r3, #4
 8001244:	2b04      	cmp	r3, #4
 8001246:	d11b      	bne.n	8001280 <HAL_I2C_Master_Transmit+0x188>
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800124c:	2b00      	cmp	r3, #0
 800124e:	d017      	beq.n	8001280 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001254:	781a      	ldrb	r2, [r3, #0]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001260:	1c5a      	adds	r2, r3, #1
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800126a:	b29b      	uxth	r3, r3
 800126c:	3b01      	subs	r3, #1
 800126e:	b29a      	uxth	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001278:	3b01      	subs	r3, #1
 800127a:	b29a      	uxth	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001280:	697a      	ldr	r2, [r7, #20]
 8001282:	6a39      	ldr	r1, [r7, #32]
 8001284:	68f8      	ldr	r0, [r7, #12]
 8001286:	f000 fd19 	bl	8001cbc <I2C_WaitOnBTFFlagUntilTimeout>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d00d      	beq.n	80012ac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001294:	2b04      	cmp	r3, #4
 8001296:	d107      	bne.n	80012a8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80012a6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e01a      	b.n	80012e2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d194      	bne.n	80011de <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80012c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2220      	movs	r2, #32
 80012c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	2200      	movs	r2, #0
 80012d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2200      	movs	r2, #0
 80012d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80012dc:	2300      	movs	r3, #0
 80012de:	e000      	b.n	80012e2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80012e0:	2302      	movs	r3, #2
  }
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3718      	adds	r7, #24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	00100002 	.word	0x00100002
 80012f0:	ffff0000 	.word	0xffff0000

080012f4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08c      	sub	sp, #48	@ 0x30
 80012f8:	af02      	add	r7, sp, #8
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	607a      	str	r2, [r7, #4]
 80012fe:	461a      	mov	r2, r3
 8001300:	460b      	mov	r3, r1
 8001302:	817b      	strh	r3, [r7, #10]
 8001304:	4613      	mov	r3, r2
 8001306:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001308:	f7ff fafa 	bl	8000900 <HAL_GetTick>
 800130c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b20      	cmp	r3, #32
 8001318:	f040 8217 	bne.w	800174a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800131c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	2319      	movs	r3, #25
 8001322:	2201      	movs	r2, #1
 8001324:	497c      	ldr	r1, [pc, #496]	@ (8001518 <HAL_I2C_Master_Receive+0x224>)
 8001326:	68f8      	ldr	r0, [r7, #12]
 8001328:	f000 fb66 	bl	80019f8 <I2C_WaitOnFlagUntilTimeout>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001332:	2302      	movs	r3, #2
 8001334:	e20a      	b.n	800174c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800133c:	2b01      	cmp	r3, #1
 800133e:	d101      	bne.n	8001344 <HAL_I2C_Master_Receive+0x50>
 8001340:	2302      	movs	r3, #2
 8001342:	e203      	b.n	800174c <HAL_I2C_Master_Receive+0x458>
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2201      	movs	r2, #1
 8001348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	2b01      	cmp	r3, #1
 8001358:	d007      	beq.n	800136a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f042 0201 	orr.w	r2, r2, #1
 8001368:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001378:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2222      	movs	r2, #34	@ 0x22
 800137e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	2210      	movs	r2, #16
 8001386:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	2200      	movs	r2, #0
 800138e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	893a      	ldrh	r2, [r7, #8]
 800139a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	4a5c      	ldr	r2, [pc, #368]	@ (800151c <HAL_I2C_Master_Receive+0x228>)
 80013aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80013ac:	8979      	ldrh	r1, [r7, #10]
 80013ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	f000 fa52 	bl	800185c <I2C_MasterRequestRead>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e1c4      	b.n	800174c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d113      	bne.n	80013f2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013ca:	2300      	movs	r3, #0
 80013cc:	623b      	str	r3, [r7, #32]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	695b      	ldr	r3, [r3, #20]
 80013d4:	623b      	str	r3, [r7, #32]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	623b      	str	r3, [r7, #32]
 80013de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	e198      	b.n	8001724 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d11b      	bne.n	8001432 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001408:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800140a:	2300      	movs	r3, #0
 800140c:	61fb      	str	r3, [r7, #28]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	695b      	ldr	r3, [r3, #20]
 8001414:	61fb      	str	r3, [r7, #28]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	61fb      	str	r3, [r7, #28]
 800141e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	e178      	b.n	8001724 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001436:	2b02      	cmp	r3, #2
 8001438:	d11b      	bne.n	8001472 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001448:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001458:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800145a:	2300      	movs	r3, #0
 800145c:	61bb      	str	r3, [r7, #24]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	695b      	ldr	r3, [r3, #20]
 8001464:	61bb      	str	r3, [r7, #24]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	61bb      	str	r3, [r7, #24]
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	e158      	b.n	8001724 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001480:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	617b      	str	r3, [r7, #20]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	617b      	str	r3, [r7, #20]
 8001496:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001498:	e144      	b.n	8001724 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800149e:	2b03      	cmp	r3, #3
 80014a0:	f200 80f1 	bhi.w	8001686 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d123      	bne.n	80014f4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014ae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	f000 fc4b 	bl	8001d4c <I2C_WaitOnRXNEFlagUntilTimeout>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e145      	b.n	800174c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	691a      	ldr	r2, [r3, #16]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ca:	b2d2      	uxtb	r2, r2
 80014cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d2:	1c5a      	adds	r2, r3, #1
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014dc:	3b01      	subs	r3, #1
 80014de:	b29a      	uxth	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	3b01      	subs	r3, #1
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80014f2:	e117      	b.n	8001724 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d14e      	bne.n	800159a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80014fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001502:	2200      	movs	r2, #0
 8001504:	4906      	ldr	r1, [pc, #24]	@ (8001520 <HAL_I2C_Master_Receive+0x22c>)
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f000 fa76 	bl	80019f8 <I2C_WaitOnFlagUntilTimeout>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d008      	beq.n	8001524 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e11a      	b.n	800174c <HAL_I2C_Master_Receive+0x458>
 8001516:	bf00      	nop
 8001518:	00100002 	.word	0x00100002
 800151c:	ffff0000 	.word	0xffff0000
 8001520:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001532:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	691a      	ldr	r2, [r3, #16]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001546:	1c5a      	adds	r2, r3, #1
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001550:	3b01      	subs	r3, #1
 8001552:	b29a      	uxth	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800155c:	b29b      	uxth	r3, r3
 800155e:	3b01      	subs	r3, #1
 8001560:	b29a      	uxth	r2, r3
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	691a      	ldr	r2, [r3, #16]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001570:	b2d2      	uxtb	r2, r2
 8001572:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001578:	1c5a      	adds	r2, r3, #1
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001582:	3b01      	subs	r3, #1
 8001584:	b29a      	uxth	r2, r3
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800158e:	b29b      	uxth	r3, r3
 8001590:	3b01      	subs	r3, #1
 8001592:	b29a      	uxth	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001598:	e0c4      	b.n	8001724 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800159a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015a0:	2200      	movs	r2, #0
 80015a2:	496c      	ldr	r1, [pc, #432]	@ (8001754 <HAL_I2C_Master_Receive+0x460>)
 80015a4:	68f8      	ldr	r0, [r7, #12]
 80015a6:	f000 fa27 	bl	80019f8 <I2C_WaitOnFlagUntilTimeout>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e0cb      	b.n	800174c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80015c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	691a      	ldr	r2, [r3, #16]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d6:	1c5a      	adds	r2, r3, #1
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015e0:	3b01      	subs	r3, #1
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	3b01      	subs	r3, #1
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80015f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015fc:	2200      	movs	r2, #0
 80015fe:	4955      	ldr	r1, [pc, #340]	@ (8001754 <HAL_I2C_Master_Receive+0x460>)
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	f000 f9f9 	bl	80019f8 <I2C_WaitOnFlagUntilTimeout>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e09d      	b.n	800174c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800161e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	691a      	ldr	r2, [r3, #16]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800162a:	b2d2      	uxtb	r2, r2
 800162c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001632:	1c5a      	adds	r2, r3, #1
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800163c:	3b01      	subs	r3, #1
 800163e:	b29a      	uxth	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001648:	b29b      	uxth	r3, r3
 800164a:	3b01      	subs	r3, #1
 800164c:	b29a      	uxth	r2, r3
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	691a      	ldr	r2, [r3, #16]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800165c:	b2d2      	uxtb	r2, r2
 800165e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001664:	1c5a      	adds	r2, r3, #1
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800166e:	3b01      	subs	r3, #1
 8001670:	b29a      	uxth	r2, r3
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800167a:	b29b      	uxth	r3, r3
 800167c:	3b01      	subs	r3, #1
 800167e:	b29a      	uxth	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001684:	e04e      	b.n	8001724 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001686:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001688:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800168a:	68f8      	ldr	r0, [r7, #12]
 800168c:	f000 fb5e 	bl	8001d4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e058      	b.n	800174c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	691a      	ldr	r2, [r3, #16]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ac:	1c5a      	adds	r2, r3, #1
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016b6:	3b01      	subs	r3, #1
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	3b01      	subs	r3, #1
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	f003 0304 	and.w	r3, r3, #4
 80016d6:	2b04      	cmp	r3, #4
 80016d8:	d124      	bne.n	8001724 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016de:	2b03      	cmp	r3, #3
 80016e0:	d107      	bne.n	80016f2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80016f0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	691a      	ldr	r2, [r3, #16]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016fc:	b2d2      	uxtb	r2, r2
 80016fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001704:	1c5a      	adds	r2, r3, #1
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800170e:	3b01      	subs	r3, #1
 8001710:	b29a      	uxth	r2, r3
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800171a:	b29b      	uxth	r3, r3
 800171c:	3b01      	subs	r3, #1
 800171e:	b29a      	uxth	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001728:	2b00      	cmp	r3, #0
 800172a:	f47f aeb6 	bne.w	800149a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2220      	movs	r2, #32
 8001732:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001746:	2300      	movs	r3, #0
 8001748:	e000      	b.n	800174c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800174a:	2302      	movs	r3, #2
  }
}
 800174c:	4618      	mov	r0, r3
 800174e:	3728      	adds	r7, #40	@ 0x28
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	00010004 	.word	0x00010004

08001758 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b088      	sub	sp, #32
 800175c:	af02      	add	r7, sp, #8
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	607a      	str	r2, [r7, #4]
 8001762:	603b      	str	r3, [r7, #0]
 8001764:	460b      	mov	r3, r1
 8001766:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800176c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	2b08      	cmp	r3, #8
 8001772:	d006      	beq.n	8001782 <I2C_MasterRequestWrite+0x2a>
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d003      	beq.n	8001782 <I2C_MasterRequestWrite+0x2a>
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001780:	d108      	bne.n	8001794 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	e00b      	b.n	80017ac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001798:	2b12      	cmp	r3, #18
 800179a:	d107      	bne.n	80017ac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80017aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80017b8:	68f8      	ldr	r0, [r7, #12]
 80017ba:	f000 f91d 	bl	80019f8 <I2C_WaitOnFlagUntilTimeout>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d00d      	beq.n	80017e0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80017d2:	d103      	bne.n	80017dc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017da:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e035      	b.n	800184c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	691b      	ldr	r3, [r3, #16]
 80017e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80017e8:	d108      	bne.n	80017fc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80017ea:	897b      	ldrh	r3, [r7, #10]
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	461a      	mov	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80017f8:	611a      	str	r2, [r3, #16]
 80017fa:	e01b      	b.n	8001834 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80017fc:	897b      	ldrh	r3, [r7, #10]
 80017fe:	11db      	asrs	r3, r3, #7
 8001800:	b2db      	uxtb	r3, r3
 8001802:	f003 0306 	and.w	r3, r3, #6
 8001806:	b2db      	uxtb	r3, r3
 8001808:	f063 030f 	orn	r3, r3, #15
 800180c:	b2da      	uxtb	r2, r3
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	490e      	ldr	r1, [pc, #56]	@ (8001854 <I2C_MasterRequestWrite+0xfc>)
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	f000 f966 	bl	8001aec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e010      	b.n	800184c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800182a:	897b      	ldrh	r3, [r7, #10]
 800182c:	b2da      	uxtb	r2, r3
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	4907      	ldr	r1, [pc, #28]	@ (8001858 <I2C_MasterRequestWrite+0x100>)
 800183a:	68f8      	ldr	r0, [r7, #12]
 800183c:	f000 f956 	bl	8001aec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e000      	b.n	800184c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	00010008 	.word	0x00010008
 8001858:	00010002 	.word	0x00010002

0800185c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b088      	sub	sp, #32
 8001860:	af02      	add	r7, sp, #8
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	607a      	str	r2, [r7, #4]
 8001866:	603b      	str	r3, [r7, #0]
 8001868:	460b      	mov	r3, r1
 800186a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001870:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001880:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	2b08      	cmp	r3, #8
 8001886:	d006      	beq.n	8001896 <I2C_MasterRequestRead+0x3a>
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d003      	beq.n	8001896 <I2C_MasterRequestRead+0x3a>
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001894:	d108      	bne.n	80018a8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	e00b      	b.n	80018c0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ac:	2b11      	cmp	r3, #17
 80018ae:	d107      	bne.n	80018c0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80018be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80018cc:	68f8      	ldr	r0, [r7, #12]
 80018ce:	f000 f893 	bl	80019f8 <I2C_WaitOnFlagUntilTimeout>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d00d      	beq.n	80018f4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018e6:	d103      	bne.n	80018f0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e079      	b.n	80019e8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80018fc:	d108      	bne.n	8001910 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80018fe:	897b      	ldrh	r3, [r7, #10]
 8001900:	b2db      	uxtb	r3, r3
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	b2da      	uxtb	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	611a      	str	r2, [r3, #16]
 800190e:	e05f      	b.n	80019d0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001910:	897b      	ldrh	r3, [r7, #10]
 8001912:	11db      	asrs	r3, r3, #7
 8001914:	b2db      	uxtb	r3, r3
 8001916:	f003 0306 	and.w	r3, r3, #6
 800191a:	b2db      	uxtb	r3, r3
 800191c:	f063 030f 	orn	r3, r3, #15
 8001920:	b2da      	uxtb	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	4930      	ldr	r1, [pc, #192]	@ (80019f0 <I2C_MasterRequestRead+0x194>)
 800192e:	68f8      	ldr	r0, [r7, #12]
 8001930:	f000 f8dc 	bl	8001aec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e054      	b.n	80019e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800193e:	897b      	ldrh	r3, [r7, #10]
 8001940:	b2da      	uxtb	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	4929      	ldr	r1, [pc, #164]	@ (80019f4 <I2C_MasterRequestRead+0x198>)
 800194e:	68f8      	ldr	r0, [r7, #12]
 8001950:	f000 f8cc 	bl	8001aec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e044      	b.n	80019e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	695b      	ldr	r3, [r3, #20]
 8001968:	613b      	str	r3, [r7, #16]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	613b      	str	r3, [r7, #16]
 8001972:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001982:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001990:	68f8      	ldr	r0, [r7, #12]
 8001992:	f000 f831 	bl	80019f8 <I2C_WaitOnFlagUntilTimeout>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d00d      	beq.n	80019b8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80019aa:	d103      	bne.n	80019b4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019b2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e017      	b.n	80019e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80019b8:	897b      	ldrh	r3, [r7, #10]
 80019ba:	11db      	asrs	r3, r3, #7
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	f003 0306 	and.w	r3, r3, #6
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	f063 030e 	orn	r3, r3, #14
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	4907      	ldr	r1, [pc, #28]	@ (80019f4 <I2C_MasterRequestRead+0x198>)
 80019d6:	68f8      	ldr	r0, [r7, #12]
 80019d8:	f000 f888 	bl	8001aec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3718      	adds	r7, #24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	00010008 	.word	0x00010008
 80019f4:	00010002 	.word	0x00010002

080019f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	603b      	str	r3, [r7, #0]
 8001a04:	4613      	mov	r3, r2
 8001a06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a08:	e048      	b.n	8001a9c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a10:	d044      	beq.n	8001a9c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a12:	f7fe ff75 	bl	8000900 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d302      	bcc.n	8001a28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d139      	bne.n	8001a9c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	0c1b      	lsrs	r3, r3, #16
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d10d      	bne.n	8001a4e <I2C_WaitOnFlagUntilTimeout+0x56>
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	695b      	ldr	r3, [r3, #20]
 8001a38:	43da      	mvns	r2, r3
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	bf0c      	ite	eq
 8001a44:	2301      	moveq	r3, #1
 8001a46:	2300      	movne	r3, #0
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	e00c      	b.n	8001a68 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	43da      	mvns	r2, r3
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	bf0c      	ite	eq
 8001a60:	2301      	moveq	r3, #1
 8001a62:	2300      	movne	r3, #0
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	461a      	mov	r2, r3
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d116      	bne.n	8001a9c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2200      	movs	r2, #0
 8001a72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2220      	movs	r2, #32
 8001a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a88:	f043 0220 	orr.w	r2, r3, #32
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e023      	b.n	8001ae4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	0c1b      	lsrs	r3, r3, #16
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d10d      	bne.n	8001ac2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	695b      	ldr	r3, [r3, #20]
 8001aac:	43da      	mvns	r2, r3
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	bf0c      	ite	eq
 8001ab8:	2301      	moveq	r3, #1
 8001aba:	2300      	movne	r3, #0
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	461a      	mov	r2, r3
 8001ac0:	e00c      	b.n	8001adc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	43da      	mvns	r2, r3
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	4013      	ands	r3, r2
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	bf0c      	ite	eq
 8001ad4:	2301      	moveq	r3, #1
 8001ad6:	2300      	movne	r3, #0
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	461a      	mov	r2, r3
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d093      	beq.n	8001a0a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
 8001af8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001afa:	e071      	b.n	8001be0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b0a:	d123      	bne.n	8001b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b1a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001b24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2220      	movs	r2, #32
 8001b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b40:	f043 0204 	orr.w	r2, r3, #4
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e067      	b.n	8001c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b5a:	d041      	beq.n	8001be0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b5c:	f7fe fed0 	bl	8000900 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d302      	bcc.n	8001b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d136      	bne.n	8001be0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	0c1b      	lsrs	r3, r3, #16
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d10c      	bne.n	8001b96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	43da      	mvns	r2, r3
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	4013      	ands	r3, r2
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	bf14      	ite	ne
 8001b8e:	2301      	movne	r3, #1
 8001b90:	2300      	moveq	r3, #0
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	e00b      	b.n	8001bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	43da      	mvns	r2, r3
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	bf14      	ite	ne
 8001ba8:	2301      	movne	r3, #1
 8001baa:	2300      	moveq	r3, #0
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d016      	beq.n	8001be0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2220      	movs	r2, #32
 8001bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bcc:	f043 0220 	orr.w	r2, r3, #32
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e021      	b.n	8001c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	0c1b      	lsrs	r3, r3, #16
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d10c      	bne.n	8001c04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	695b      	ldr	r3, [r3, #20]
 8001bf0:	43da      	mvns	r2, r3
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	bf14      	ite	ne
 8001bfc:	2301      	movne	r3, #1
 8001bfe:	2300      	moveq	r3, #0
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	e00b      	b.n	8001c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	43da      	mvns	r2, r3
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	bf14      	ite	ne
 8001c16:	2301      	movne	r3, #1
 8001c18:	2300      	moveq	r3, #0
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f47f af6d 	bne.w	8001afc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c38:	e034      	b.n	8001ca4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f000 f8e3 	bl	8001e06 <I2C_IsAcknowledgeFailed>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e034      	b.n	8001cb4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c50:	d028      	beq.n	8001ca4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c52:	f7fe fe55 	bl	8000900 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	68ba      	ldr	r2, [r7, #8]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d302      	bcc.n	8001c68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d11d      	bne.n	8001ca4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c72:	2b80      	cmp	r3, #128	@ 0x80
 8001c74:	d016      	beq.n	8001ca4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2220      	movs	r2, #32
 8001c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c90:	f043 0220 	orr.w	r2, r3, #32
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e007      	b.n	8001cb4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cae:	2b80      	cmp	r3, #128	@ 0x80
 8001cb0:	d1c3      	bne.n	8001c3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001cc8:	e034      	b.n	8001d34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001cca:	68f8      	ldr	r0, [r7, #12]
 8001ccc:	f000 f89b 	bl	8001e06 <I2C_IsAcknowledgeFailed>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e034      	b.n	8001d44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ce0:	d028      	beq.n	8001d34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ce2:	f7fe fe0d 	bl	8000900 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	68ba      	ldr	r2, [r7, #8]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d302      	bcc.n	8001cf8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d11d      	bne.n	8001d34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	f003 0304 	and.w	r3, r3, #4
 8001d02:	2b04      	cmp	r3, #4
 8001d04:	d016      	beq.n	8001d34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2220      	movs	r2, #32
 8001d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d20:	f043 0220 	orr.w	r2, r3, #32
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e007      	b.n	8001d44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	f003 0304 	and.w	r3, r3, #4
 8001d3e:	2b04      	cmp	r3, #4
 8001d40:	d1c3      	bne.n	8001cca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d58:	e049      	b.n	8001dee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	695b      	ldr	r3, [r3, #20]
 8001d60:	f003 0310 	and.w	r3, r3, #16
 8001d64:	2b10      	cmp	r3, #16
 8001d66:	d119      	bne.n	8001d9c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f06f 0210 	mvn.w	r2, #16
 8001d70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2200      	movs	r2, #0
 8001d76:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2220      	movs	r2, #32
 8001d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e030      	b.n	8001dfe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d9c:	f7fe fdb0 	bl	8000900 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	68ba      	ldr	r2, [r7, #8]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d302      	bcc.n	8001db2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d11d      	bne.n	8001dee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	695b      	ldr	r3, [r3, #20]
 8001db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dbc:	2b40      	cmp	r3, #64	@ 0x40
 8001dbe:	d016      	beq.n	8001dee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2220      	movs	r2, #32
 8001dca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dda:	f043 0220 	orr.w	r2, r3, #32
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e007      	b.n	8001dfe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	695b      	ldr	r3, [r3, #20]
 8001df4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001df8:	2b40      	cmp	r3, #64	@ 0x40
 8001dfa:	d1ae      	bne.n	8001d5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b083      	sub	sp, #12
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	695b      	ldr	r3, [r3, #20]
 8001e14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e1c:	d11b      	bne.n	8001e56 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001e26:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2220      	movs	r2, #32
 8001e32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e42:	f043 0204 	orr.w	r2, r3, #4
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e000      	b.n	8001e58 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bc80      	pop	{r7}
 8001e60:	4770      	bx	lr
	...

08001e64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b088      	sub	sp, #32
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e31d      	b.n	80024b2 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e76:	4b94      	ldr	r3, [pc, #592]	@ (80020c8 <HAL_RCC_OscConfig+0x264>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 030c 	and.w	r3, r3, #12
 8001e7e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e80:	4b91      	ldr	r3, [pc, #580]	@ (80020c8 <HAL_RCC_OscConfig+0x264>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e88:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d07b      	beq.n	8001f8e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	2b08      	cmp	r3, #8
 8001e9a:	d006      	beq.n	8001eaa <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	2b0c      	cmp	r3, #12
 8001ea0:	d10f      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x5e>
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ea8:	d10b      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eaa:	4b87      	ldr	r3, [pc, #540]	@ (80020c8 <HAL_RCC_OscConfig+0x264>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d06a      	beq.n	8001f8c <HAL_RCC_OscConfig+0x128>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d166      	bne.n	8001f8c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e2f7      	b.n	80024b2 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d106      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x74>
 8001eca:	4b7f      	ldr	r3, [pc, #508]	@ (80020c8 <HAL_RCC_OscConfig+0x264>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a7e      	ldr	r2, [pc, #504]	@ (80020c8 <HAL_RCC_OscConfig+0x264>)
 8001ed0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	e02d      	b.n	8001f34 <HAL_RCC_OscConfig+0xd0>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d10c      	bne.n	8001efa <HAL_RCC_OscConfig+0x96>
 8001ee0:	4b79      	ldr	r3, [pc, #484]	@ (80020c8 <HAL_RCC_OscConfig+0x264>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a78      	ldr	r2, [pc, #480]	@ (80020c8 <HAL_RCC_OscConfig+0x264>)
 8001ee6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eea:	6013      	str	r3, [r2, #0]
 8001eec:	4b76      	ldr	r3, [pc, #472]	@ (80020c8 <HAL_RCC_OscConfig+0x264>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a75      	ldr	r2, [pc, #468]	@ (80020c8 <HAL_RCC_OscConfig+0x264>)
 8001ef2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ef6:	6013      	str	r3, [r2, #0]
 8001ef8:	e01c      	b.n	8001f34 <HAL_RCC_OscConfig+0xd0>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b05      	cmp	r3, #5
 8001f00:	d10c      	bne.n	8001f1c <HAL_RCC_OscConfig+0xb8>
 8001f02:	4b71      	ldr	r3, [pc, #452]	@ (80020c8 <HAL_RCC_OscConfig+0x264>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a70      	ldr	r2, [pc, #448]	@ (80020c8 <HAL_RCC_OscConfig+0x264>)
 8001f08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	4b6e      	ldr	r3, [pc, #440]	@ (80020c8 <HAL_RCC_OscConfig+0x264>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a6d      	ldr	r2, [pc, #436]	@ (80020c8 <HAL_RCC_OscConfig+0x264>)
 8001f14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f18:	6013      	str	r3, [r2, #0]
 8001f1a:	e00b      	b.n	8001f34 <HAL_RCC_OscConfig+0xd0>
 8001f1c:	4b6a      	ldr	r3, [pc, #424]	@ (80020c8 <HAL_RCC_OscConfig+0x264>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a69      	ldr	r2, [pc, #420]	@ (80020c8 <HAL_RCC_OscConfig+0x264>)
 8001f22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f26:	6013      	str	r3, [r2, #0]
 8001f28:	4b67      	ldr	r3, [pc, #412]	@ (80020c8 <HAL_RCC_OscConfig+0x264>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a66      	ldr	r2, [pc, #408]	@ (80020c8 <HAL_RCC_OscConfig+0x264>)
 8001f2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d013      	beq.n	8001f64 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3c:	f7fe fce0 	bl	8000900 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f44:	f7fe fcdc 	bl	8000900 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b64      	cmp	r3, #100	@ 0x64
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e2ad      	b.n	80024b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f56:	4b5c      	ldr	r3, [pc, #368]	@ (80020c8 <HAL_RCC_OscConfig+0x264>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d0f0      	beq.n	8001f44 <HAL_RCC_OscConfig+0xe0>
 8001f62:	e014      	b.n	8001f8e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f64:	f7fe fccc 	bl	8000900 <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f6c:	f7fe fcc8 	bl	8000900 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b64      	cmp	r3, #100	@ 0x64
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e299      	b.n	80024b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f7e:	4b52      	ldr	r3, [pc, #328]	@ (80020c8 <HAL_RCC_OscConfig+0x264>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1f0      	bne.n	8001f6c <HAL_RCC_OscConfig+0x108>
 8001f8a:	e000      	b.n	8001f8e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d05a      	beq.n	8002050 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	2b04      	cmp	r3, #4
 8001f9e:	d005      	beq.n	8001fac <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	2b0c      	cmp	r3, #12
 8001fa4:	d119      	bne.n	8001fda <HAL_RCC_OscConfig+0x176>
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d116      	bne.n	8001fda <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fac:	4b46      	ldr	r3, [pc, #280]	@ (80020c8 <HAL_RCC_OscConfig+0x264>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d005      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x160>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e276      	b.n	80024b2 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc4:	4b40      	ldr	r3, [pc, #256]	@ (80020c8 <HAL_RCC_OscConfig+0x264>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	021b      	lsls	r3, r3, #8
 8001fd2:	493d      	ldr	r1, [pc, #244]	@ (80020c8 <HAL_RCC_OscConfig+0x264>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fd8:	e03a      	b.n	8002050 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d020      	beq.n	8002024 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fe2:	4b3a      	ldr	r3, [pc, #232]	@ (80020cc <HAL_RCC_OscConfig+0x268>)
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe8:	f7fe fc8a 	bl	8000900 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ff0:	f7fe fc86 	bl	8000900 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e257      	b.n	80024b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002002:	4b31      	ldr	r3, [pc, #196]	@ (80020c8 <HAL_RCC_OscConfig+0x264>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0f0      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800200e:	4b2e      	ldr	r3, [pc, #184]	@ (80020c8 <HAL_RCC_OscConfig+0x264>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	021b      	lsls	r3, r3, #8
 800201c:	492a      	ldr	r1, [pc, #168]	@ (80020c8 <HAL_RCC_OscConfig+0x264>)
 800201e:	4313      	orrs	r3, r2
 8002020:	604b      	str	r3, [r1, #4]
 8002022:	e015      	b.n	8002050 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002024:	4b29      	ldr	r3, [pc, #164]	@ (80020cc <HAL_RCC_OscConfig+0x268>)
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202a:	f7fe fc69 	bl	8000900 <HAL_GetTick>
 800202e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002030:	e008      	b.n	8002044 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002032:	f7fe fc65 	bl	8000900 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e236      	b.n	80024b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002044:	4b20      	ldr	r3, [pc, #128]	@ (80020c8 <HAL_RCC_OscConfig+0x264>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1f0      	bne.n	8002032 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0310 	and.w	r3, r3, #16
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 80b8 	beq.w	80021ce <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d170      	bne.n	8002146 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002064:	4b18      	ldr	r3, [pc, #96]	@ (80020c8 <HAL_RCC_OscConfig+0x264>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800206c:	2b00      	cmp	r3, #0
 800206e:	d005      	beq.n	800207c <HAL_RCC_OscConfig+0x218>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e21a      	b.n	80024b2 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a1a      	ldr	r2, [r3, #32]
 8002080:	4b11      	ldr	r3, [pc, #68]	@ (80020c8 <HAL_RCC_OscConfig+0x264>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8002088:	429a      	cmp	r2, r3
 800208a:	d921      	bls.n	80020d0 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	4618      	mov	r0, r3
 8002092:	f000 fc27 	bl	80028e4 <RCC_SetFlashLatencyFromMSIRange>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e208      	b.n	80024b2 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020a0:	4b09      	ldr	r3, [pc, #36]	@ (80020c8 <HAL_RCC_OscConfig+0x264>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	4906      	ldr	r1, [pc, #24]	@ (80020c8 <HAL_RCC_OscConfig+0x264>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020b2:	4b05      	ldr	r3, [pc, #20]	@ (80020c8 <HAL_RCC_OscConfig+0x264>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	061b      	lsls	r3, r3, #24
 80020c0:	4901      	ldr	r1, [pc, #4]	@ (80020c8 <HAL_RCC_OscConfig+0x264>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	604b      	str	r3, [r1, #4]
 80020c6:	e020      	b.n	800210a <HAL_RCC_OscConfig+0x2a6>
 80020c8:	40023800 	.word	0x40023800
 80020cc:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020d0:	4b99      	ldr	r3, [pc, #612]	@ (8002338 <HAL_RCC_OscConfig+0x4d4>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	4996      	ldr	r1, [pc, #600]	@ (8002338 <HAL_RCC_OscConfig+0x4d4>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020e2:	4b95      	ldr	r3, [pc, #596]	@ (8002338 <HAL_RCC_OscConfig+0x4d4>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	061b      	lsls	r3, r3, #24
 80020f0:	4991      	ldr	r1, [pc, #580]	@ (8002338 <HAL_RCC_OscConfig+0x4d4>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f000 fbf2 	bl	80028e4 <RCC_SetFlashLatencyFromMSIRange>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e1d3      	b.n	80024b2 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	0b5b      	lsrs	r3, r3, #13
 8002110:	3301      	adds	r3, #1
 8002112:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800211a:	4a87      	ldr	r2, [pc, #540]	@ (8002338 <HAL_RCC_OscConfig+0x4d4>)
 800211c:	6892      	ldr	r2, [r2, #8]
 800211e:	0912      	lsrs	r2, r2, #4
 8002120:	f002 020f 	and.w	r2, r2, #15
 8002124:	4985      	ldr	r1, [pc, #532]	@ (800233c <HAL_RCC_OscConfig+0x4d8>)
 8002126:	5c8a      	ldrb	r2, [r1, r2]
 8002128:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800212a:	4a85      	ldr	r2, [pc, #532]	@ (8002340 <HAL_RCC_OscConfig+0x4dc>)
 800212c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800212e:	4b85      	ldr	r3, [pc, #532]	@ (8002344 <HAL_RCC_OscConfig+0x4e0>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe fb98 	bl	8000868 <HAL_InitTick>
 8002138:	4603      	mov	r3, r0
 800213a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800213c:	7bfb      	ldrb	r3, [r7, #15]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d045      	beq.n	80021ce <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002142:	7bfb      	ldrb	r3, [r7, #15]
 8002144:	e1b5      	b.n	80024b2 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d029      	beq.n	80021a2 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800214e:	4b7e      	ldr	r3, [pc, #504]	@ (8002348 <HAL_RCC_OscConfig+0x4e4>)
 8002150:	2201      	movs	r2, #1
 8002152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002154:	f7fe fbd4 	bl	8000900 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800215c:	f7fe fbd0 	bl	8000900 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e1a1      	b.n	80024b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800216e:	4b72      	ldr	r3, [pc, #456]	@ (8002338 <HAL_RCC_OscConfig+0x4d4>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002176:	2b00      	cmp	r3, #0
 8002178:	d0f0      	beq.n	800215c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800217a:	4b6f      	ldr	r3, [pc, #444]	@ (8002338 <HAL_RCC_OscConfig+0x4d4>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	496c      	ldr	r1, [pc, #432]	@ (8002338 <HAL_RCC_OscConfig+0x4d4>)
 8002188:	4313      	orrs	r3, r2
 800218a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800218c:	4b6a      	ldr	r3, [pc, #424]	@ (8002338 <HAL_RCC_OscConfig+0x4d4>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	69db      	ldr	r3, [r3, #28]
 8002198:	061b      	lsls	r3, r3, #24
 800219a:	4967      	ldr	r1, [pc, #412]	@ (8002338 <HAL_RCC_OscConfig+0x4d4>)
 800219c:	4313      	orrs	r3, r2
 800219e:	604b      	str	r3, [r1, #4]
 80021a0:	e015      	b.n	80021ce <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021a2:	4b69      	ldr	r3, [pc, #420]	@ (8002348 <HAL_RCC_OscConfig+0x4e4>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a8:	f7fe fbaa 	bl	8000900 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021b0:	f7fe fba6 	bl	8000900 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e177      	b.n	80024b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80021c2:	4b5d      	ldr	r3, [pc, #372]	@ (8002338 <HAL_RCC_OscConfig+0x4d4>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f0      	bne.n	80021b0 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d030      	beq.n	800223c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d016      	beq.n	8002210 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021e2:	4b5a      	ldr	r3, [pc, #360]	@ (800234c <HAL_RCC_OscConfig+0x4e8>)
 80021e4:	2201      	movs	r2, #1
 80021e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e8:	f7fe fb8a 	bl	8000900 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021f0:	f7fe fb86 	bl	8000900 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e157      	b.n	80024b2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002202:	4b4d      	ldr	r3, [pc, #308]	@ (8002338 <HAL_RCC_OscConfig+0x4d4>)
 8002204:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0f0      	beq.n	80021f0 <HAL_RCC_OscConfig+0x38c>
 800220e:	e015      	b.n	800223c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002210:	4b4e      	ldr	r3, [pc, #312]	@ (800234c <HAL_RCC_OscConfig+0x4e8>)
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002216:	f7fe fb73 	bl	8000900 <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800221e:	f7fe fb6f 	bl	8000900 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e140      	b.n	80024b2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002230:	4b41      	ldr	r3, [pc, #260]	@ (8002338 <HAL_RCC_OscConfig+0x4d4>)
 8002232:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1f0      	bne.n	800221e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 80b5 	beq.w	80023b4 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800224a:	2300      	movs	r3, #0
 800224c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800224e:	4b3a      	ldr	r3, [pc, #232]	@ (8002338 <HAL_RCC_OscConfig+0x4d4>)
 8002250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10d      	bne.n	8002276 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800225a:	4b37      	ldr	r3, [pc, #220]	@ (8002338 <HAL_RCC_OscConfig+0x4d4>)
 800225c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225e:	4a36      	ldr	r2, [pc, #216]	@ (8002338 <HAL_RCC_OscConfig+0x4d4>)
 8002260:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002264:	6253      	str	r3, [r2, #36]	@ 0x24
 8002266:	4b34      	ldr	r3, [pc, #208]	@ (8002338 <HAL_RCC_OscConfig+0x4d4>)
 8002268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800226e:	60bb      	str	r3, [r7, #8]
 8002270:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002272:	2301      	movs	r3, #1
 8002274:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002276:	4b36      	ldr	r3, [pc, #216]	@ (8002350 <HAL_RCC_OscConfig+0x4ec>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800227e:	2b00      	cmp	r3, #0
 8002280:	d118      	bne.n	80022b4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002282:	4b33      	ldr	r3, [pc, #204]	@ (8002350 <HAL_RCC_OscConfig+0x4ec>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a32      	ldr	r2, [pc, #200]	@ (8002350 <HAL_RCC_OscConfig+0x4ec>)
 8002288:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800228c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800228e:	f7fe fb37 	bl	8000900 <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002296:	f7fe fb33 	bl	8000900 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b64      	cmp	r3, #100	@ 0x64
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e104      	b.n	80024b2 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a8:	4b29      	ldr	r3, [pc, #164]	@ (8002350 <HAL_RCC_OscConfig+0x4ec>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0f0      	beq.n	8002296 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d106      	bne.n	80022ca <HAL_RCC_OscConfig+0x466>
 80022bc:	4b1e      	ldr	r3, [pc, #120]	@ (8002338 <HAL_RCC_OscConfig+0x4d4>)
 80022be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022c0:	4a1d      	ldr	r2, [pc, #116]	@ (8002338 <HAL_RCC_OscConfig+0x4d4>)
 80022c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022c6:	6353      	str	r3, [r2, #52]	@ 0x34
 80022c8:	e02d      	b.n	8002326 <HAL_RCC_OscConfig+0x4c2>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10c      	bne.n	80022ec <HAL_RCC_OscConfig+0x488>
 80022d2:	4b19      	ldr	r3, [pc, #100]	@ (8002338 <HAL_RCC_OscConfig+0x4d4>)
 80022d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022d6:	4a18      	ldr	r2, [pc, #96]	@ (8002338 <HAL_RCC_OscConfig+0x4d4>)
 80022d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022dc:	6353      	str	r3, [r2, #52]	@ 0x34
 80022de:	4b16      	ldr	r3, [pc, #88]	@ (8002338 <HAL_RCC_OscConfig+0x4d4>)
 80022e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022e2:	4a15      	ldr	r2, [pc, #84]	@ (8002338 <HAL_RCC_OscConfig+0x4d4>)
 80022e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80022e8:	6353      	str	r3, [r2, #52]	@ 0x34
 80022ea:	e01c      	b.n	8002326 <HAL_RCC_OscConfig+0x4c2>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	2b05      	cmp	r3, #5
 80022f2:	d10c      	bne.n	800230e <HAL_RCC_OscConfig+0x4aa>
 80022f4:	4b10      	ldr	r3, [pc, #64]	@ (8002338 <HAL_RCC_OscConfig+0x4d4>)
 80022f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022f8:	4a0f      	ldr	r2, [pc, #60]	@ (8002338 <HAL_RCC_OscConfig+0x4d4>)
 80022fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022fe:	6353      	str	r3, [r2, #52]	@ 0x34
 8002300:	4b0d      	ldr	r3, [pc, #52]	@ (8002338 <HAL_RCC_OscConfig+0x4d4>)
 8002302:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002304:	4a0c      	ldr	r2, [pc, #48]	@ (8002338 <HAL_RCC_OscConfig+0x4d4>)
 8002306:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800230a:	6353      	str	r3, [r2, #52]	@ 0x34
 800230c:	e00b      	b.n	8002326 <HAL_RCC_OscConfig+0x4c2>
 800230e:	4b0a      	ldr	r3, [pc, #40]	@ (8002338 <HAL_RCC_OscConfig+0x4d4>)
 8002310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002312:	4a09      	ldr	r2, [pc, #36]	@ (8002338 <HAL_RCC_OscConfig+0x4d4>)
 8002314:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002318:	6353      	str	r3, [r2, #52]	@ 0x34
 800231a:	4b07      	ldr	r3, [pc, #28]	@ (8002338 <HAL_RCC_OscConfig+0x4d4>)
 800231c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800231e:	4a06      	ldr	r2, [pc, #24]	@ (8002338 <HAL_RCC_OscConfig+0x4d4>)
 8002320:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002324:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d024      	beq.n	8002378 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800232e:	f7fe fae7 	bl	8000900 <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002334:	e019      	b.n	800236a <HAL_RCC_OscConfig+0x506>
 8002336:	bf00      	nop
 8002338:	40023800 	.word	0x40023800
 800233c:	08002a20 	.word	0x08002a20
 8002340:	20000000 	.word	0x20000000
 8002344:	20000004 	.word	0x20000004
 8002348:	42470020 	.word	0x42470020
 800234c:	42470680 	.word	0x42470680
 8002350:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002354:	f7fe fad4 	bl	8000900 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002362:	4293      	cmp	r3, r2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e0a3      	b.n	80024b2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800236a:	4b54      	ldr	r3, [pc, #336]	@ (80024bc <HAL_RCC_OscConfig+0x658>)
 800236c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800236e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0ee      	beq.n	8002354 <HAL_RCC_OscConfig+0x4f0>
 8002376:	e014      	b.n	80023a2 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002378:	f7fe fac2 	bl	8000900 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800237e:	e00a      	b.n	8002396 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002380:	f7fe fabe 	bl	8000900 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800238e:	4293      	cmp	r3, r2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e08d      	b.n	80024b2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002396:	4b49      	ldr	r3, [pc, #292]	@ (80024bc <HAL_RCC_OscConfig+0x658>)
 8002398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800239a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1ee      	bne.n	8002380 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023a2:	7ffb      	ldrb	r3, [r7, #31]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d105      	bne.n	80023b4 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023a8:	4b44      	ldr	r3, [pc, #272]	@ (80024bc <HAL_RCC_OscConfig+0x658>)
 80023aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ac:	4a43      	ldr	r2, [pc, #268]	@ (80024bc <HAL_RCC_OscConfig+0x658>)
 80023ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023b2:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d079      	beq.n	80024b0 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	2b0c      	cmp	r3, #12
 80023c0:	d056      	beq.n	8002470 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d13b      	bne.n	8002442 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ca:	4b3d      	ldr	r3, [pc, #244]	@ (80024c0 <HAL_RCC_OscConfig+0x65c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d0:	f7fe fa96 	bl	8000900 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023d8:	f7fe fa92 	bl	8000900 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e063      	b.n	80024b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023ea:	4b34      	ldr	r3, [pc, #208]	@ (80024bc <HAL_RCC_OscConfig+0x658>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1f0      	bne.n	80023d8 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023f6:	4b31      	ldr	r3, [pc, #196]	@ (80024bc <HAL_RCC_OscConfig+0x658>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002406:	4319      	orrs	r1, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240c:	430b      	orrs	r3, r1
 800240e:	492b      	ldr	r1, [pc, #172]	@ (80024bc <HAL_RCC_OscConfig+0x658>)
 8002410:	4313      	orrs	r3, r2
 8002412:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002414:	4b2a      	ldr	r3, [pc, #168]	@ (80024c0 <HAL_RCC_OscConfig+0x65c>)
 8002416:	2201      	movs	r2, #1
 8002418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241a:	f7fe fa71 	bl	8000900 <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002422:	f7fe fa6d 	bl	8000900 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e03e      	b.n	80024b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002434:	4b21      	ldr	r3, [pc, #132]	@ (80024bc <HAL_RCC_OscConfig+0x658>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0f0      	beq.n	8002422 <HAL_RCC_OscConfig+0x5be>
 8002440:	e036      	b.n	80024b0 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002442:	4b1f      	ldr	r3, [pc, #124]	@ (80024c0 <HAL_RCC_OscConfig+0x65c>)
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002448:	f7fe fa5a 	bl	8000900 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002450:	f7fe fa56 	bl	8000900 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e027      	b.n	80024b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002462:	4b16      	ldr	r3, [pc, #88]	@ (80024bc <HAL_RCC_OscConfig+0x658>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f0      	bne.n	8002450 <HAL_RCC_OscConfig+0x5ec>
 800246e:	e01f      	b.n	80024b0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002474:	2b01      	cmp	r3, #1
 8002476:	d101      	bne.n	800247c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e01a      	b.n	80024b2 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800247c:	4b0f      	ldr	r3, [pc, #60]	@ (80024bc <HAL_RCC_OscConfig+0x658>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800248c:	429a      	cmp	r2, r3
 800248e:	d10d      	bne.n	80024ac <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800249a:	429a      	cmp	r2, r3
 800249c:	d106      	bne.n	80024ac <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d001      	beq.n	80024b0 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e000      	b.n	80024b2 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3720      	adds	r7, #32
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40023800 	.word	0x40023800
 80024c0:	42470060 	.word	0x42470060

080024c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e11a      	b.n	800270e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024d8:	4b8f      	ldr	r3, [pc, #572]	@ (8002718 <HAL_RCC_ClockConfig+0x254>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d919      	bls.n	800251a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d105      	bne.n	80024f8 <HAL_RCC_ClockConfig+0x34>
 80024ec:	4b8a      	ldr	r3, [pc, #552]	@ (8002718 <HAL_RCC_ClockConfig+0x254>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a89      	ldr	r2, [pc, #548]	@ (8002718 <HAL_RCC_ClockConfig+0x254>)
 80024f2:	f043 0304 	orr.w	r3, r3, #4
 80024f6:	6013      	str	r3, [r2, #0]
 80024f8:	4b87      	ldr	r3, [pc, #540]	@ (8002718 <HAL_RCC_ClockConfig+0x254>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f023 0201 	bic.w	r2, r3, #1
 8002500:	4985      	ldr	r1, [pc, #532]	@ (8002718 <HAL_RCC_ClockConfig+0x254>)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	4313      	orrs	r3, r2
 8002506:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002508:	4b83      	ldr	r3, [pc, #524]	@ (8002718 <HAL_RCC_ClockConfig+0x254>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	429a      	cmp	r2, r3
 8002514:	d001      	beq.n	800251a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e0f9      	b.n	800270e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d008      	beq.n	8002538 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002526:	4b7d      	ldr	r3, [pc, #500]	@ (800271c <HAL_RCC_ClockConfig+0x258>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	497a      	ldr	r1, [pc, #488]	@ (800271c <HAL_RCC_ClockConfig+0x258>)
 8002534:	4313      	orrs	r3, r2
 8002536:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 808e 	beq.w	8002662 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2b02      	cmp	r3, #2
 800254c:	d107      	bne.n	800255e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800254e:	4b73      	ldr	r3, [pc, #460]	@ (800271c <HAL_RCC_ClockConfig+0x258>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d121      	bne.n	800259e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e0d7      	b.n	800270e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b03      	cmp	r3, #3
 8002564:	d107      	bne.n	8002576 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002566:	4b6d      	ldr	r3, [pc, #436]	@ (800271c <HAL_RCC_ClockConfig+0x258>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d115      	bne.n	800259e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e0cb      	b.n	800270e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d107      	bne.n	800258e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800257e:	4b67      	ldr	r3, [pc, #412]	@ (800271c <HAL_RCC_ClockConfig+0x258>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d109      	bne.n	800259e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e0bf      	b.n	800270e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800258e:	4b63      	ldr	r3, [pc, #396]	@ (800271c <HAL_RCC_ClockConfig+0x258>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e0b7      	b.n	800270e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800259e:	4b5f      	ldr	r3, [pc, #380]	@ (800271c <HAL_RCC_ClockConfig+0x258>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f023 0203 	bic.w	r2, r3, #3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	495c      	ldr	r1, [pc, #368]	@ (800271c <HAL_RCC_ClockConfig+0x258>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025b0:	f7fe f9a6 	bl	8000900 <HAL_GetTick>
 80025b4:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d112      	bne.n	80025e4 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80025be:	e00a      	b.n	80025d6 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c0:	f7fe f99e 	bl	8000900 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e09b      	b.n	800270e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80025d6:	4b51      	ldr	r3, [pc, #324]	@ (800271c <HAL_RCC_ClockConfig+0x258>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 030c 	and.w	r3, r3, #12
 80025de:	2b08      	cmp	r3, #8
 80025e0:	d1ee      	bne.n	80025c0 <HAL_RCC_ClockConfig+0xfc>
 80025e2:	e03e      	b.n	8002662 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b03      	cmp	r3, #3
 80025ea:	d112      	bne.n	8002612 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025ec:	e00a      	b.n	8002604 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ee:	f7fe f987 	bl	8000900 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e084      	b.n	800270e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002604:	4b45      	ldr	r3, [pc, #276]	@ (800271c <HAL_RCC_ClockConfig+0x258>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 030c 	and.w	r3, r3, #12
 800260c:	2b0c      	cmp	r3, #12
 800260e:	d1ee      	bne.n	80025ee <HAL_RCC_ClockConfig+0x12a>
 8002610:	e027      	b.n	8002662 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d11d      	bne.n	8002656 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800261a:	e00a      	b.n	8002632 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800261c:	f7fe f970 	bl	8000900 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800262a:	4293      	cmp	r3, r2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e06d      	b.n	800270e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002632:	4b3a      	ldr	r3, [pc, #232]	@ (800271c <HAL_RCC_ClockConfig+0x258>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 030c 	and.w	r3, r3, #12
 800263a:	2b04      	cmp	r3, #4
 800263c:	d1ee      	bne.n	800261c <HAL_RCC_ClockConfig+0x158>
 800263e:	e010      	b.n	8002662 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002640:	f7fe f95e 	bl	8000900 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800264e:	4293      	cmp	r3, r2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e05b      	b.n	800270e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002656:	4b31      	ldr	r3, [pc, #196]	@ (800271c <HAL_RCC_ClockConfig+0x258>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f003 030c 	and.w	r3, r3, #12
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1ee      	bne.n	8002640 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002662:	4b2d      	ldr	r3, [pc, #180]	@ (8002718 <HAL_RCC_ClockConfig+0x254>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	429a      	cmp	r2, r3
 800266e:	d219      	bcs.n	80026a4 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d105      	bne.n	8002682 <HAL_RCC_ClockConfig+0x1be>
 8002676:	4b28      	ldr	r3, [pc, #160]	@ (8002718 <HAL_RCC_ClockConfig+0x254>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a27      	ldr	r2, [pc, #156]	@ (8002718 <HAL_RCC_ClockConfig+0x254>)
 800267c:	f043 0304 	orr.w	r3, r3, #4
 8002680:	6013      	str	r3, [r2, #0]
 8002682:	4b25      	ldr	r3, [pc, #148]	@ (8002718 <HAL_RCC_ClockConfig+0x254>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f023 0201 	bic.w	r2, r3, #1
 800268a:	4923      	ldr	r1, [pc, #140]	@ (8002718 <HAL_RCC_ClockConfig+0x254>)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	4313      	orrs	r3, r2
 8002690:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002692:	4b21      	ldr	r3, [pc, #132]	@ (8002718 <HAL_RCC_ClockConfig+0x254>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	429a      	cmp	r2, r3
 800269e:	d001      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e034      	b.n	800270e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d008      	beq.n	80026c2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026b0:	4b1a      	ldr	r3, [pc, #104]	@ (800271c <HAL_RCC_ClockConfig+0x258>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	4917      	ldr	r1, [pc, #92]	@ (800271c <HAL_RCC_ClockConfig+0x258>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0308 	and.w	r3, r3, #8
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d009      	beq.n	80026e2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026ce:	4b13      	ldr	r3, [pc, #76]	@ (800271c <HAL_RCC_ClockConfig+0x258>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	490f      	ldr	r1, [pc, #60]	@ (800271c <HAL_RCC_ClockConfig+0x258>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026e2:	f000 f823 	bl	800272c <HAL_RCC_GetSysClockFreq>
 80026e6:	4602      	mov	r2, r0
 80026e8:	4b0c      	ldr	r3, [pc, #48]	@ (800271c <HAL_RCC_ClockConfig+0x258>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	091b      	lsrs	r3, r3, #4
 80026ee:	f003 030f 	and.w	r3, r3, #15
 80026f2:	490b      	ldr	r1, [pc, #44]	@ (8002720 <HAL_RCC_ClockConfig+0x25c>)
 80026f4:	5ccb      	ldrb	r3, [r1, r3]
 80026f6:	fa22 f303 	lsr.w	r3, r2, r3
 80026fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002724 <HAL_RCC_ClockConfig+0x260>)
 80026fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002728 <HAL_RCC_ClockConfig+0x264>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f7fe f8b0 	bl	8000868 <HAL_InitTick>
 8002708:	4603      	mov	r3, r0
 800270a:	72fb      	strb	r3, [r7, #11]

  return status;
 800270c:	7afb      	ldrb	r3, [r7, #11]
}
 800270e:	4618      	mov	r0, r3
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40023c00 	.word	0x40023c00
 800271c:	40023800 	.word	0x40023800
 8002720:	08002a20 	.word	0x08002a20
 8002724:	20000000 	.word	0x20000000
 8002728:	20000004 	.word	0x20000004

0800272c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800272c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002730:	b08e      	sub	sp, #56	@ 0x38
 8002732:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002734:	4b58      	ldr	r3, [pc, #352]	@ (8002898 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800273a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800273c:	f003 030c 	and.w	r3, r3, #12
 8002740:	2b0c      	cmp	r3, #12
 8002742:	d00d      	beq.n	8002760 <HAL_RCC_GetSysClockFreq+0x34>
 8002744:	2b0c      	cmp	r3, #12
 8002746:	f200 8092 	bhi.w	800286e <HAL_RCC_GetSysClockFreq+0x142>
 800274a:	2b04      	cmp	r3, #4
 800274c:	d002      	beq.n	8002754 <HAL_RCC_GetSysClockFreq+0x28>
 800274e:	2b08      	cmp	r3, #8
 8002750:	d003      	beq.n	800275a <HAL_RCC_GetSysClockFreq+0x2e>
 8002752:	e08c      	b.n	800286e <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002754:	4b51      	ldr	r3, [pc, #324]	@ (800289c <HAL_RCC_GetSysClockFreq+0x170>)
 8002756:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002758:	e097      	b.n	800288a <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800275a:	4b51      	ldr	r3, [pc, #324]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x174>)
 800275c:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800275e:	e094      	b.n	800288a <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002762:	0c9b      	lsrs	r3, r3, #18
 8002764:	f003 020f 	and.w	r2, r3, #15
 8002768:	4b4e      	ldr	r3, [pc, #312]	@ (80028a4 <HAL_RCC_GetSysClockFreq+0x178>)
 800276a:	5c9b      	ldrb	r3, [r3, r2]
 800276c:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800276e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002770:	0d9b      	lsrs	r3, r3, #22
 8002772:	f003 0303 	and.w	r3, r3, #3
 8002776:	3301      	adds	r3, #1
 8002778:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800277a:	4b47      	ldr	r3, [pc, #284]	@ (8002898 <HAL_RCC_GetSysClockFreq+0x16c>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d021      	beq.n	80027ca <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002788:	2200      	movs	r2, #0
 800278a:	61bb      	str	r3, [r7, #24]
 800278c:	61fa      	str	r2, [r7, #28]
 800278e:	4b44      	ldr	r3, [pc, #272]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x174>)
 8002790:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002794:	464a      	mov	r2, r9
 8002796:	fb03 f202 	mul.w	r2, r3, r2
 800279a:	2300      	movs	r3, #0
 800279c:	4644      	mov	r4, r8
 800279e:	fb04 f303 	mul.w	r3, r4, r3
 80027a2:	4413      	add	r3, r2
 80027a4:	4a3e      	ldr	r2, [pc, #248]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x174>)
 80027a6:	4644      	mov	r4, r8
 80027a8:	fba4 0102 	umull	r0, r1, r4, r2
 80027ac:	440b      	add	r3, r1
 80027ae:	4619      	mov	r1, r3
 80027b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b2:	2200      	movs	r2, #0
 80027b4:	613b      	str	r3, [r7, #16]
 80027b6:	617a      	str	r2, [r7, #20]
 80027b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80027bc:	f7fd fcde 	bl	800017c <__aeabi_uldivmod>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4613      	mov	r3, r2
 80027c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80027c8:	e04e      	b.n	8002868 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80027ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027cc:	2200      	movs	r2, #0
 80027ce:	469a      	mov	sl, r3
 80027d0:	4693      	mov	fp, r2
 80027d2:	4652      	mov	r2, sl
 80027d4:	465b      	mov	r3, fp
 80027d6:	f04f 0000 	mov.w	r0, #0
 80027da:	f04f 0100 	mov.w	r1, #0
 80027de:	0159      	lsls	r1, r3, #5
 80027e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027e4:	0150      	lsls	r0, r2, #5
 80027e6:	4602      	mov	r2, r0
 80027e8:	460b      	mov	r3, r1
 80027ea:	ebb2 080a 	subs.w	r8, r2, sl
 80027ee:	eb63 090b 	sbc.w	r9, r3, fp
 80027f2:	f04f 0200 	mov.w	r2, #0
 80027f6:	f04f 0300 	mov.w	r3, #0
 80027fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80027fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002802:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002806:	ebb2 0408 	subs.w	r4, r2, r8
 800280a:	eb63 0509 	sbc.w	r5, r3, r9
 800280e:	f04f 0200 	mov.w	r2, #0
 8002812:	f04f 0300 	mov.w	r3, #0
 8002816:	00eb      	lsls	r3, r5, #3
 8002818:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800281c:	00e2      	lsls	r2, r4, #3
 800281e:	4614      	mov	r4, r2
 8002820:	461d      	mov	r5, r3
 8002822:	eb14 030a 	adds.w	r3, r4, sl
 8002826:	603b      	str	r3, [r7, #0]
 8002828:	eb45 030b 	adc.w	r3, r5, fp
 800282c:	607b      	str	r3, [r7, #4]
 800282e:	f04f 0200 	mov.w	r2, #0
 8002832:	f04f 0300 	mov.w	r3, #0
 8002836:	e9d7 4500 	ldrd	r4, r5, [r7]
 800283a:	4629      	mov	r1, r5
 800283c:	028b      	lsls	r3, r1, #10
 800283e:	4620      	mov	r0, r4
 8002840:	4629      	mov	r1, r5
 8002842:	4604      	mov	r4, r0
 8002844:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002848:	4601      	mov	r1, r0
 800284a:	028a      	lsls	r2, r1, #10
 800284c:	4610      	mov	r0, r2
 800284e:	4619      	mov	r1, r3
 8002850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002852:	2200      	movs	r2, #0
 8002854:	60bb      	str	r3, [r7, #8]
 8002856:	60fa      	str	r2, [r7, #12]
 8002858:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800285c:	f7fd fc8e 	bl	800017c <__aeabi_uldivmod>
 8002860:	4602      	mov	r2, r0
 8002862:	460b      	mov	r3, r1
 8002864:	4613      	mov	r3, r2
 8002866:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      sysclockfreq = pllvco;
 8002868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800286a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800286c:	e00d      	b.n	800288a <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800286e:	4b0a      	ldr	r3, [pc, #40]	@ (8002898 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	0b5b      	lsrs	r3, r3, #13
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800287a:	6a3b      	ldr	r3, [r7, #32]
 800287c:	3301      	adds	r3, #1
 800287e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002888:	bf00      	nop
    }
  }
  return sysclockfreq;
 800288a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800288c:	4618      	mov	r0, r3
 800288e:	3738      	adds	r7, #56	@ 0x38
 8002890:	46bd      	mov	sp, r7
 8002892:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002896:	bf00      	nop
 8002898:	40023800 	.word	0x40023800
 800289c:	00f42400 	.word	0x00f42400
 80028a0:	016e3600 	.word	0x016e3600
 80028a4:	08002a14 	.word	0x08002a14

080028a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028ac:	4b02      	ldr	r3, [pc, #8]	@ (80028b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80028ae:	681b      	ldr	r3, [r3, #0]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr
 80028b8:	20000000 	.word	0x20000000

080028bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028c0:	f7ff fff2 	bl	80028a8 <HAL_RCC_GetHCLKFreq>
 80028c4:	4602      	mov	r2, r0
 80028c6:	4b05      	ldr	r3, [pc, #20]	@ (80028dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	0a1b      	lsrs	r3, r3, #8
 80028cc:	f003 0307 	and.w	r3, r3, #7
 80028d0:	4903      	ldr	r1, [pc, #12]	@ (80028e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028d2:	5ccb      	ldrb	r3, [r1, r3]
 80028d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028d8:	4618      	mov	r0, r3
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40023800 	.word	0x40023800
 80028e0:	08002a30 	.word	0x08002a30

080028e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b087      	sub	sp, #28
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80028ec:	2300      	movs	r3, #0
 80028ee:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80028f0:	4b29      	ldr	r3, [pc, #164]	@ (8002998 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d12c      	bne.n	8002956 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80028fc:	4b26      	ldr	r3, [pc, #152]	@ (8002998 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80028fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002900:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d005      	beq.n	8002914 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002908:	4b24      	ldr	r3, [pc, #144]	@ (800299c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8002910:	617b      	str	r3, [r7, #20]
 8002912:	e016      	b.n	8002942 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002914:	4b20      	ldr	r3, [pc, #128]	@ (8002998 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002918:	4a1f      	ldr	r2, [pc, #124]	@ (8002998 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800291a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800291e:	6253      	str	r3, [r2, #36]	@ 0x24
 8002920:	4b1d      	ldr	r3, [pc, #116]	@ (8002998 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002924:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800292c:	4b1b      	ldr	r3, [pc, #108]	@ (800299c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8002934:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002936:	4b18      	ldr	r3, [pc, #96]	@ (8002998 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293a:	4a17      	ldr	r2, [pc, #92]	@ (8002998 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800293c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002940:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8002948:	d105      	bne.n	8002956 <RCC_SetFlashLatencyFromMSIRange+0x72>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002950:	d101      	bne.n	8002956 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8002952:	2301      	movs	r3, #1
 8002954:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d105      	bne.n	8002968 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800295c:	4b10      	ldr	r3, [pc, #64]	@ (80029a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a0f      	ldr	r2, [pc, #60]	@ (80029a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002962:	f043 0304 	orr.w	r3, r3, #4
 8002966:	6013      	str	r3, [r2, #0]
 8002968:	4b0d      	ldr	r3, [pc, #52]	@ (80029a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f023 0201 	bic.w	r2, r3, #1
 8002970:	490b      	ldr	r1, [pc, #44]	@ (80029a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	4313      	orrs	r3, r2
 8002976:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002978:	4b09      	ldr	r3, [pc, #36]	@ (80029a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	429a      	cmp	r2, r3
 8002984:	d001      	beq.n	800298a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e000      	b.n	800298c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	371c      	adds	r7, #28
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	40023800 	.word	0x40023800
 800299c:	40007000 	.word	0x40007000
 80029a0:	40023c00 	.word	0x40023c00

080029a4 <memset>:
 80029a4:	4603      	mov	r3, r0
 80029a6:	4402      	add	r2, r0
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d100      	bne.n	80029ae <memset+0xa>
 80029ac:	4770      	bx	lr
 80029ae:	f803 1b01 	strb.w	r1, [r3], #1
 80029b2:	e7f9      	b.n	80029a8 <memset+0x4>

080029b4 <__libc_init_array>:
 80029b4:	b570      	push	{r4, r5, r6, lr}
 80029b6:	2600      	movs	r6, #0
 80029b8:	4d0c      	ldr	r5, [pc, #48]	@ (80029ec <__libc_init_array+0x38>)
 80029ba:	4c0d      	ldr	r4, [pc, #52]	@ (80029f0 <__libc_init_array+0x3c>)
 80029bc:	1b64      	subs	r4, r4, r5
 80029be:	10a4      	asrs	r4, r4, #2
 80029c0:	42a6      	cmp	r6, r4
 80029c2:	d109      	bne.n	80029d8 <__libc_init_array+0x24>
 80029c4:	f000 f81a 	bl	80029fc <_init>
 80029c8:	2600      	movs	r6, #0
 80029ca:	4d0a      	ldr	r5, [pc, #40]	@ (80029f4 <__libc_init_array+0x40>)
 80029cc:	4c0a      	ldr	r4, [pc, #40]	@ (80029f8 <__libc_init_array+0x44>)
 80029ce:	1b64      	subs	r4, r4, r5
 80029d0:	10a4      	asrs	r4, r4, #2
 80029d2:	42a6      	cmp	r6, r4
 80029d4:	d105      	bne.n	80029e2 <__libc_init_array+0x2e>
 80029d6:	bd70      	pop	{r4, r5, r6, pc}
 80029d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80029dc:	4798      	blx	r3
 80029de:	3601      	adds	r6, #1
 80029e0:	e7ee      	b.n	80029c0 <__libc_init_array+0xc>
 80029e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80029e6:	4798      	blx	r3
 80029e8:	3601      	adds	r6, #1
 80029ea:	e7f2      	b.n	80029d2 <__libc_init_array+0x1e>
 80029ec:	08002a40 	.word	0x08002a40
 80029f0:	08002a40 	.word	0x08002a40
 80029f4:	08002a40 	.word	0x08002a40
 80029f8:	08002a44 	.word	0x08002a44

080029fc <_init>:
 80029fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029fe:	bf00      	nop
 8002a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a02:	bc08      	pop	{r3}
 8002a04:	469e      	mov	lr, r3
 8002a06:	4770      	bx	lr

08002a08 <_fini>:
 8002a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a0a:	bf00      	nop
 8002a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a0e:	bc08      	pop	{r3}
 8002a10:	469e      	mov	lr, r3
 8002a12:	4770      	bx	lr
