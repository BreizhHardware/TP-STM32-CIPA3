
TP2_ISEN_DISPLAY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f28  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08002064  08002064  00003064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002080  08002080  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002080  08002080  00003080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002088  08002088  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002088  08002088  00003088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800208c  0800208c  0000308c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002090  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000000c  0800209c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  0800209c  00004084  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000057a5  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000148d  00000000  00000000  000097da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000660  00000000  00000000  0000ac68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004b5  00000000  00000000  0000b2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014998  00000000  00000000  0000b77d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006fed  00000000  00000000  00020115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008118d  00000000  00000000  00027102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a828f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018a4  00000000  00000000  000a82d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000a9b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	0800204c 	.word	0x0800204c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	0800204c 	.word	0x0800204c

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800018c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000190:	f000 b98c 	b.w	80004ac <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9d08      	ldr	r5, [sp, #32]
 80001b2:	468e      	mov	lr, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14a      	bne.n	8000252 <__udivmoddi4+0xa6>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4617      	mov	r7, r2
 80001c0:	d962      	bls.n	8000288 <__udivmoddi4+0xdc>
 80001c2:	fab2 f682 	clz	r6, r2
 80001c6:	b14e      	cbz	r6, 80001dc <__udivmoddi4+0x30>
 80001c8:	f1c6 0320 	rsb	r3, r6, #32
 80001cc:	fa01 f806 	lsl.w	r8, r1, r6
 80001d0:	fa20 f303 	lsr.w	r3, r0, r3
 80001d4:	40b7      	lsls	r7, r6
 80001d6:	ea43 0808 	orr.w	r8, r3, r8
 80001da:	40b4      	lsls	r4, r6
 80001dc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80001e0:	fbb8 f1fe 	udiv	r1, r8, lr
 80001e4:	fa1f fc87 	uxth.w	ip, r7
 80001e8:	fb0e 8811 	mls	r8, lr, r1, r8
 80001ec:	fb01 f20c 	mul.w	r2, r1, ip
 80001f0:	0c23      	lsrs	r3, r4, #16
 80001f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f6:	429a      	cmp	r2, r3
 80001f8:	d909      	bls.n	800020e <__udivmoddi4+0x62>
 80001fa:	18fb      	adds	r3, r7, r3
 80001fc:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000200:	f080 80eb 	bcs.w	80003da <__udivmoddi4+0x22e>
 8000204:	429a      	cmp	r2, r3
 8000206:	f240 80e8 	bls.w	80003da <__udivmoddi4+0x22e>
 800020a:	3902      	subs	r1, #2
 800020c:	443b      	add	r3, r7
 800020e:	1a9a      	subs	r2, r3, r2
 8000210:	fbb2 f0fe 	udiv	r0, r2, lr
 8000214:	fb0e 2210 	mls	r2, lr, r0, r2
 8000218:	fb00 fc0c 	mul.w	ip, r0, ip
 800021c:	b2a3      	uxth	r3, r4
 800021e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000222:	459c      	cmp	ip, r3
 8000224:	d909      	bls.n	800023a <__udivmoddi4+0x8e>
 8000226:	18fb      	adds	r3, r7, r3
 8000228:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 800022c:	f080 80d7 	bcs.w	80003de <__udivmoddi4+0x232>
 8000230:	459c      	cmp	ip, r3
 8000232:	f240 80d4 	bls.w	80003de <__udivmoddi4+0x232>
 8000236:	443b      	add	r3, r7
 8000238:	3802      	subs	r0, #2
 800023a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800023e:	2100      	movs	r1, #0
 8000240:	eba3 030c 	sub.w	r3, r3, ip
 8000244:	b11d      	cbz	r5, 800024e <__udivmoddi4+0xa2>
 8000246:	2200      	movs	r2, #0
 8000248:	40f3      	lsrs	r3, r6
 800024a:	e9c5 3200 	strd	r3, r2, [r5]
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	428b      	cmp	r3, r1
 8000254:	d905      	bls.n	8000262 <__udivmoddi4+0xb6>
 8000256:	b10d      	cbz	r5, 800025c <__udivmoddi4+0xb0>
 8000258:	e9c5 0100 	strd	r0, r1, [r5]
 800025c:	2100      	movs	r1, #0
 800025e:	4608      	mov	r0, r1
 8000260:	e7f5      	b.n	800024e <__udivmoddi4+0xa2>
 8000262:	fab3 f183 	clz	r1, r3
 8000266:	2900      	cmp	r1, #0
 8000268:	d146      	bne.n	80002f8 <__udivmoddi4+0x14c>
 800026a:	4573      	cmp	r3, lr
 800026c:	d302      	bcc.n	8000274 <__udivmoddi4+0xc8>
 800026e:	4282      	cmp	r2, r0
 8000270:	f200 8108 	bhi.w	8000484 <__udivmoddi4+0x2d8>
 8000274:	1a84      	subs	r4, r0, r2
 8000276:	eb6e 0203 	sbc.w	r2, lr, r3
 800027a:	2001      	movs	r0, #1
 800027c:	4690      	mov	r8, r2
 800027e:	2d00      	cmp	r5, #0
 8000280:	d0e5      	beq.n	800024e <__udivmoddi4+0xa2>
 8000282:	e9c5 4800 	strd	r4, r8, [r5]
 8000286:	e7e2      	b.n	800024e <__udivmoddi4+0xa2>
 8000288:	2a00      	cmp	r2, #0
 800028a:	f000 8091 	beq.w	80003b0 <__udivmoddi4+0x204>
 800028e:	fab2 f682 	clz	r6, r2
 8000292:	2e00      	cmp	r6, #0
 8000294:	f040 80a5 	bne.w	80003e2 <__udivmoddi4+0x236>
 8000298:	1a8a      	subs	r2, r1, r2
 800029a:	2101      	movs	r1, #1
 800029c:	0c03      	lsrs	r3, r0, #16
 800029e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002a2:	b280      	uxth	r0, r0
 80002a4:	b2bc      	uxth	r4, r7
 80002a6:	fbb2 fcfe 	udiv	ip, r2, lr
 80002aa:	fb0e 221c 	mls	r2, lr, ip, r2
 80002ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b2:	fb04 f20c 	mul.w	r2, r4, ip
 80002b6:	429a      	cmp	r2, r3
 80002b8:	d907      	bls.n	80002ca <__udivmoddi4+0x11e>
 80002ba:	18fb      	adds	r3, r7, r3
 80002bc:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80002c0:	d202      	bcs.n	80002c8 <__udivmoddi4+0x11c>
 80002c2:	429a      	cmp	r2, r3
 80002c4:	f200 80e3 	bhi.w	800048e <__udivmoddi4+0x2e2>
 80002c8:	46c4      	mov	ip, r8
 80002ca:	1a9b      	subs	r3, r3, r2
 80002cc:	fbb3 f2fe 	udiv	r2, r3, lr
 80002d0:	fb0e 3312 	mls	r3, lr, r2, r3
 80002d4:	fb02 f404 	mul.w	r4, r2, r4
 80002d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80002dc:	429c      	cmp	r4, r3
 80002de:	d907      	bls.n	80002f0 <__udivmoddi4+0x144>
 80002e0:	18fb      	adds	r3, r7, r3
 80002e2:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80002e6:	d202      	bcs.n	80002ee <__udivmoddi4+0x142>
 80002e8:	429c      	cmp	r4, r3
 80002ea:	f200 80cd 	bhi.w	8000488 <__udivmoddi4+0x2dc>
 80002ee:	4602      	mov	r2, r0
 80002f0:	1b1b      	subs	r3, r3, r4
 80002f2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80002f6:	e7a5      	b.n	8000244 <__udivmoddi4+0x98>
 80002f8:	f1c1 0620 	rsb	r6, r1, #32
 80002fc:	408b      	lsls	r3, r1
 80002fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000302:	431f      	orrs	r7, r3
 8000304:	fa2e fa06 	lsr.w	sl, lr, r6
 8000308:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800030c:	fbba f8f9 	udiv	r8, sl, r9
 8000310:	fa0e fe01 	lsl.w	lr, lr, r1
 8000314:	fa20 f306 	lsr.w	r3, r0, r6
 8000318:	fb09 aa18 	mls	sl, r9, r8, sl
 800031c:	fa1f fc87 	uxth.w	ip, r7
 8000320:	ea43 030e 	orr.w	r3, r3, lr
 8000324:	fa00 fe01 	lsl.w	lr, r0, r1
 8000328:	fb08 f00c 	mul.w	r0, r8, ip
 800032c:	0c1c      	lsrs	r4, r3, #16
 800032e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000332:	42a0      	cmp	r0, r4
 8000334:	fa02 f201 	lsl.w	r2, r2, r1
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x1a4>
 800033a:	193c      	adds	r4, r7, r4
 800033c:	f108 3aff 	add.w	sl, r8, #4294967295	@ 0xffffffff
 8000340:	f080 809e 	bcs.w	8000480 <__udivmoddi4+0x2d4>
 8000344:	42a0      	cmp	r0, r4
 8000346:	f240 809b 	bls.w	8000480 <__udivmoddi4+0x2d4>
 800034a:	f1a8 0802 	sub.w	r8, r8, #2
 800034e:	443c      	add	r4, r7
 8000350:	1a24      	subs	r4, r4, r0
 8000352:	b298      	uxth	r0, r3
 8000354:	fbb4 f3f9 	udiv	r3, r4, r9
 8000358:	fb09 4413 	mls	r4, r9, r3, r4
 800035c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000360:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x1d0>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 800036e:	f080 8085 	bcs.w	800047c <__udivmoddi4+0x2d0>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8082 	bls.w	800047c <__udivmoddi4+0x2d0>
 8000378:	3b02      	subs	r3, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	fba0 8c02 	umull	r8, ip, r0, r2
 8000388:	4564      	cmp	r4, ip
 800038a:	4643      	mov	r3, r8
 800038c:	46e1      	mov	r9, ip
 800038e:	d364      	bcc.n	800045a <__udivmoddi4+0x2ae>
 8000390:	d061      	beq.n	8000456 <__udivmoddi4+0x2aa>
 8000392:	b15d      	cbz	r5, 80003ac <__udivmoddi4+0x200>
 8000394:	ebbe 0203 	subs.w	r2, lr, r3
 8000398:	eb64 0409 	sbc.w	r4, r4, r9
 800039c:	fa04 f606 	lsl.w	r6, r4, r6
 80003a0:	fa22 f301 	lsr.w	r3, r2, r1
 80003a4:	431e      	orrs	r6, r3
 80003a6:	40cc      	lsrs	r4, r1
 80003a8:	e9c5 6400 	strd	r6, r4, [r5]
 80003ac:	2100      	movs	r1, #0
 80003ae:	e74e      	b.n	800024e <__udivmoddi4+0xa2>
 80003b0:	fbb1 fcf2 	udiv	ip, r1, r2
 80003b4:	0c01      	lsrs	r1, r0, #16
 80003b6:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80003ba:	b280      	uxth	r0, r0
 80003bc:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80003c0:	463b      	mov	r3, r7
 80003c2:	fbb1 f1f7 	udiv	r1, r1, r7
 80003c6:	4638      	mov	r0, r7
 80003c8:	463c      	mov	r4, r7
 80003ca:	46b8      	mov	r8, r7
 80003cc:	46be      	mov	lr, r7
 80003ce:	2620      	movs	r6, #32
 80003d0:	eba2 0208 	sub.w	r2, r2, r8
 80003d4:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80003d8:	e765      	b.n	80002a6 <__udivmoddi4+0xfa>
 80003da:	4601      	mov	r1, r0
 80003dc:	e717      	b.n	800020e <__udivmoddi4+0x62>
 80003de:	4610      	mov	r0, r2
 80003e0:	e72b      	b.n	800023a <__udivmoddi4+0x8e>
 80003e2:	f1c6 0120 	rsb	r1, r6, #32
 80003e6:	fa2e fc01 	lsr.w	ip, lr, r1
 80003ea:	40b7      	lsls	r7, r6
 80003ec:	fa0e fe06 	lsl.w	lr, lr, r6
 80003f0:	fa20 f101 	lsr.w	r1, r0, r1
 80003f4:	ea41 010e 	orr.w	r1, r1, lr
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	fbbc f8fe 	udiv	r8, ip, lr
 8000400:	b2bc      	uxth	r4, r7
 8000402:	fb0e cc18 	mls	ip, lr, r8, ip
 8000406:	fb08 f904 	mul.w	r9, r8, r4
 800040a:	0c0a      	lsrs	r2, r1, #16
 800040c:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000410:	40b0      	lsls	r0, r6
 8000412:	4591      	cmp	r9, r2
 8000414:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000418:	b280      	uxth	r0, r0
 800041a:	d93e      	bls.n	800049a <__udivmoddi4+0x2ee>
 800041c:	18ba      	adds	r2, r7, r2
 800041e:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000422:	d201      	bcs.n	8000428 <__udivmoddi4+0x27c>
 8000424:	4591      	cmp	r9, r2
 8000426:	d81f      	bhi.n	8000468 <__udivmoddi4+0x2bc>
 8000428:	eba2 0209 	sub.w	r2, r2, r9
 800042c:	fbb2 f9fe 	udiv	r9, r2, lr
 8000430:	fb09 f804 	mul.w	r8, r9, r4
 8000434:	fb0e 2a19 	mls	sl, lr, r9, r2
 8000438:	b28a      	uxth	r2, r1
 800043a:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 800043e:	4542      	cmp	r2, r8
 8000440:	d229      	bcs.n	8000496 <__udivmoddi4+0x2ea>
 8000442:	18ba      	adds	r2, r7, r2
 8000444:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000448:	d2c2      	bcs.n	80003d0 <__udivmoddi4+0x224>
 800044a:	4542      	cmp	r2, r8
 800044c:	d2c0      	bcs.n	80003d0 <__udivmoddi4+0x224>
 800044e:	f1a9 0102 	sub.w	r1, r9, #2
 8000452:	443a      	add	r2, r7
 8000454:	e7bc      	b.n	80003d0 <__udivmoddi4+0x224>
 8000456:	45c6      	cmp	lr, r8
 8000458:	d29b      	bcs.n	8000392 <__udivmoddi4+0x1e6>
 800045a:	ebb8 0302 	subs.w	r3, r8, r2
 800045e:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000462:	3801      	subs	r0, #1
 8000464:	46e1      	mov	r9, ip
 8000466:	e794      	b.n	8000392 <__udivmoddi4+0x1e6>
 8000468:	eba7 0909 	sub.w	r9, r7, r9
 800046c:	444a      	add	r2, r9
 800046e:	fbb2 f9fe 	udiv	r9, r2, lr
 8000472:	f1a8 0c02 	sub.w	ip, r8, #2
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	e7db      	b.n	8000434 <__udivmoddi4+0x288>
 800047c:	4603      	mov	r3, r0
 800047e:	e77d      	b.n	800037c <__udivmoddi4+0x1d0>
 8000480:	46d0      	mov	r8, sl
 8000482:	e765      	b.n	8000350 <__udivmoddi4+0x1a4>
 8000484:	4608      	mov	r0, r1
 8000486:	e6fa      	b.n	800027e <__udivmoddi4+0xd2>
 8000488:	443b      	add	r3, r7
 800048a:	3a02      	subs	r2, #2
 800048c:	e730      	b.n	80002f0 <__udivmoddi4+0x144>
 800048e:	f1ac 0c02 	sub.w	ip, ip, #2
 8000492:	443b      	add	r3, r7
 8000494:	e719      	b.n	80002ca <__udivmoddi4+0x11e>
 8000496:	4649      	mov	r1, r9
 8000498:	e79a      	b.n	80003d0 <__udivmoddi4+0x224>
 800049a:	eba2 0209 	sub.w	r2, r2, r9
 800049e:	fbb2 f9fe 	udiv	r9, r2, lr
 80004a2:	46c4      	mov	ip, r8
 80004a4:	fb09 f804 	mul.w	r8, r9, r4
 80004a8:	e7c4      	b.n	8000434 <__udivmoddi4+0x288>
 80004aa:	bf00      	nop

080004ac <__aeabi_idiv0>:
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop

080004b0 <displayScrollingText>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void displayScrollingText() {
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b086      	sub	sp, #24
 80004b4:	af00      	add	r7, sp, #0
    const uint8_t I = 0b00110000; // I
 80004b6:	2330      	movs	r3, #48	@ 0x30
 80004b8:	73fb      	strb	r3, [r7, #15]
    const uint8_t S = 0b01011011; // S
 80004ba:	235b      	movs	r3, #91	@ 0x5b
 80004bc:	73bb      	strb	r3, [r7, #14]
    const uint8_t E = 0b01001111; // E
 80004be:	234f      	movs	r3, #79	@ 0x4f
 80004c0:	737b      	strb	r3, [r7, #13]
    const uint8_t N = 0b00110110; // N
 80004c2:	2336      	movs	r3, #54	@ 0x36
 80004c4:	733b      	strb	r3, [r7, #12]
    const uint8_t SPACE = 0b00000000; // Espace
 80004c6:	2300      	movs	r3, #0
 80004c8:	72fb      	strb	r3, [r7, #11]

    const uint8_t symbols[] = {I, S, E, N, SPACE};
 80004ca:	7bfb      	ldrb	r3, [r7, #15]
 80004cc:	713b      	strb	r3, [r7, #4]
 80004ce:	7bbb      	ldrb	r3, [r7, #14]
 80004d0:	717b      	strb	r3, [r7, #5]
 80004d2:	7b7b      	ldrb	r3, [r7, #13]
 80004d4:	71bb      	strb	r3, [r7, #6]
 80004d6:	7b3b      	ldrb	r3, [r7, #12]
 80004d8:	71fb      	strb	r3, [r7, #7]
 80004da:	7afb      	ldrb	r3, [r7, #11]
 80004dc:	723b      	strb	r3, [r7, #8]
    const uint8_t numSymbols = sizeof(symbols) / sizeof(symbols[0]);
 80004de:	2305      	movs	r3, #5
 80004e0:	72bb      	strb	r3, [r7, #10]

    while (1) {
        for (int i = 0; i < numSymbols; i++) {
 80004e2:	2300      	movs	r3, #0
 80004e4:	617b      	str	r3, [r7, #20]
 80004e6:	e021      	b.n	800052c <displayScrollingText+0x7c>
            for (int j = 0; j < 4; j++) {
 80004e8:	2300      	movs	r3, #0
 80004ea:	613b      	str	r3, [r7, #16]
 80004ec:	e014      	b.n	8000518 <displayScrollingText+0x68>
                MAX7219_Write(j + 1, symbols[(i + j) % numSymbols]);
 80004ee:	693b      	ldr	r3, [r7, #16]
 80004f0:	1c58      	adds	r0, r3, #1
 80004f2:	697a      	ldr	r2, [r7, #20]
 80004f4:	693b      	ldr	r3, [r7, #16]
 80004f6:	4413      	add	r3, r2
 80004f8:	7aba      	ldrb	r2, [r7, #10]
 80004fa:	fb93 f1f2 	sdiv	r1, r3, r2
 80004fe:	fb01 f202 	mul.w	r2, r1, r2
 8000502:	1a9b      	subs	r3, r3, r2
 8000504:	3318      	adds	r3, #24
 8000506:	443b      	add	r3, r7
 8000508:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800050c:	4619      	mov	r1, r3
 800050e:	f000 f9f9 	bl	8000904 <MAX7219_Write>
            for (int j = 0; j < 4; j++) {
 8000512:	693b      	ldr	r3, [r7, #16]
 8000514:	3301      	adds	r3, #1
 8000516:	613b      	str	r3, [r7, #16]
 8000518:	693b      	ldr	r3, [r7, #16]
 800051a:	2b03      	cmp	r3, #3
 800051c:	dde7      	ble.n	80004ee <displayScrollingText+0x3e>
            }
            HAL_Delay(500);
 800051e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000522:	f000 fa8d 	bl	8000a40 <HAL_Delay>
        for (int i = 0; i < numSymbols; i++) {
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	3301      	adds	r3, #1
 800052a:	617b      	str	r3, [r7, #20]
 800052c:	7abb      	ldrb	r3, [r7, #10]
 800052e:	697a      	ldr	r2, [r7, #20]
 8000530:	429a      	cmp	r2, r3
 8000532:	dbd9      	blt.n	80004e8 <displayScrollingText+0x38>
 8000534:	e7d5      	b.n	80004e2 <displayScrollingText+0x32>

08000536 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000536:	b580      	push	{r7, lr}
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053a:	f000 fa13 	bl	8000964 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053e:	f000 f80b 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000542:	f000 f885 	bl	8000650 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000546:	f000 f84d 	bl	80005e4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  MAX7219_Init();
 800054a:	f000 f98e 	bl	800086a <MAX7219_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  MAX7219_Clear();
 800054e:	f000 f9c3 	bl	80008d8 <MAX7219_Clear>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  displayScrollingText();
 8000552:	f7ff ffad 	bl	80004b0 <displayScrollingText>
 8000556:	e7fc      	b.n	8000552 <main+0x1c>

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b092      	sub	sp, #72	@ 0x48
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0314 	add.w	r3, r7, #20
 8000562:	2234      	movs	r2, #52	@ 0x34
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f001 fd44 	bl	8001ff4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	463b      	mov	r3, r7
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	605a      	str	r2, [r3, #4]
 8000574:	609a      	str	r2, [r3, #8]
 8000576:	60da      	str	r2, [r3, #12]
 8000578:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800057a:	4b19      	ldr	r3, [pc, #100]	@ (80005e0 <SystemClock_Config+0x88>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8000582:	4a17      	ldr	r2, [pc, #92]	@ (80005e0 <SystemClock_Config+0x88>)
 8000584:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000588:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800058a:	2302      	movs	r3, #2
 800058c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058e:	2301      	movs	r3, #1
 8000590:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000592:	2310      	movs	r3, #16
 8000594:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000596:	2300      	movs	r3, #0
 8000598:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059a:	f107 0314 	add.w	r3, r7, #20
 800059e:	4618      	mov	r0, r3
 80005a0:	f000 fcfc 	bl	8000f9c <HAL_RCC_OscConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0x56>
  {
    Error_Handler();
 80005aa:	f000 f88f 	bl	80006cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ae:	230f      	movs	r3, #15
 80005b0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005b2:	2301      	movs	r3, #1
 80005b4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005c2:	463b      	mov	r3, r7
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f001 f818 	bl	80015fc <HAL_RCC_ClockConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80005d2:	f000 f87b 	bl	80006cc <Error_Handler>
  }
}
 80005d6:	bf00      	nop
 80005d8:	3748      	adds	r7, #72	@ 0x48
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40007000 	.word	0x40007000

080005e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005e8:	4b17      	ldr	r3, [pc, #92]	@ (8000648 <MX_SPI1_Init+0x64>)
 80005ea:	4a18      	ldr	r2, [pc, #96]	@ (800064c <MX_SPI1_Init+0x68>)
 80005ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005ee:	4b16      	ldr	r3, [pc, #88]	@ (8000648 <MX_SPI1_Init+0x64>)
 80005f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80005f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005f6:	4b14      	ldr	r3, [pc, #80]	@ (8000648 <MX_SPI1_Init+0x64>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005fc:	4b12      	ldr	r3, [pc, #72]	@ (8000648 <MX_SPI1_Init+0x64>)
 80005fe:	2200      	movs	r2, #0
 8000600:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000602:	4b11      	ldr	r3, [pc, #68]	@ (8000648 <MX_SPI1_Init+0x64>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000608:	4b0f      	ldr	r3, [pc, #60]	@ (8000648 <MX_SPI1_Init+0x64>)
 800060a:	2200      	movs	r2, #0
 800060c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800060e:	4b0e      	ldr	r3, [pc, #56]	@ (8000648 <MX_SPI1_Init+0x64>)
 8000610:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000614:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000616:	4b0c      	ldr	r3, [pc, #48]	@ (8000648 <MX_SPI1_Init+0x64>)
 8000618:	2200      	movs	r2, #0
 800061a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800061c:	4b0a      	ldr	r3, [pc, #40]	@ (8000648 <MX_SPI1_Init+0x64>)
 800061e:	2200      	movs	r2, #0
 8000620:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000622:	4b09      	ldr	r3, [pc, #36]	@ (8000648 <MX_SPI1_Init+0x64>)
 8000624:	2200      	movs	r2, #0
 8000626:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000628:	4b07      	ldr	r3, [pc, #28]	@ (8000648 <MX_SPI1_Init+0x64>)
 800062a:	2200      	movs	r2, #0
 800062c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800062e:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <MX_SPI1_Init+0x64>)
 8000630:	220a      	movs	r2, #10
 8000632:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000634:	4804      	ldr	r0, [pc, #16]	@ (8000648 <MX_SPI1_Init+0x64>)
 8000636:	f001 fa33 	bl	8001aa0 <HAL_SPI_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000640:	f000 f844 	bl	80006cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000028 	.word	0x20000028
 800064c:	40013000 	.word	0x40013000

08000650 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000656:	f107 030c 	add.w	r3, r7, #12
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
 8000664:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000666:	4b17      	ldr	r3, [pc, #92]	@ (80006c4 <MX_GPIO_Init+0x74>)
 8000668:	69db      	ldr	r3, [r3, #28]
 800066a:	4a16      	ldr	r2, [pc, #88]	@ (80006c4 <MX_GPIO_Init+0x74>)
 800066c:	f043 0304 	orr.w	r3, r3, #4
 8000670:	61d3      	str	r3, [r2, #28]
 8000672:	4b14      	ldr	r3, [pc, #80]	@ (80006c4 <MX_GPIO_Init+0x74>)
 8000674:	69db      	ldr	r3, [r3, #28]
 8000676:	f003 0304 	and.w	r3, r3, #4
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	4b11      	ldr	r3, [pc, #68]	@ (80006c4 <MX_GPIO_Init+0x74>)
 8000680:	69db      	ldr	r3, [r3, #28]
 8000682:	4a10      	ldr	r2, [pc, #64]	@ (80006c4 <MX_GPIO_Init+0x74>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	61d3      	str	r3, [r2, #28]
 800068a:	4b0e      	ldr	r3, [pc, #56]	@ (80006c4 <MX_GPIO_Init+0x74>)
 800068c:	69db      	ldr	r3, [r3, #28]
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	2101      	movs	r1, #1
 800069a:	480b      	ldr	r0, [pc, #44]	@ (80006c8 <MX_GPIO_Init+0x78>)
 800069c:	f000 fc66 	bl	8000f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006a0:	2301      	movs	r3, #1
 80006a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a4:	2301      	movs	r3, #1
 80006a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	4619      	mov	r1, r3
 80006b6:	4804      	ldr	r0, [pc, #16]	@ (80006c8 <MX_GPIO_Init+0x78>)
 80006b8:	f000 fac8 	bl	8000c4c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80006bc:	bf00      	nop
 80006be:	3720      	adds	r7, #32
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40020800 	.word	0x40020800

080006cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d0:	b672      	cpsid	i
}
 80006d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d4:	bf00      	nop
 80006d6:	e7fd      	b.n	80006d4 <Error_Handler+0x8>

080006d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80006de:	4b14      	ldr	r3, [pc, #80]	@ (8000730 <HAL_MspInit+0x58>)
 80006e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006e2:	4a13      	ldr	r2, [pc, #76]	@ (8000730 <HAL_MspInit+0x58>)
 80006e4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80006e8:	6253      	str	r3, [r2, #36]	@ 0x24
 80006ea:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <HAL_MspInit+0x58>)
 80006ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000730 <HAL_MspInit+0x58>)
 80006f8:	6a1b      	ldr	r3, [r3, #32]
 80006fa:	4a0d      	ldr	r2, [pc, #52]	@ (8000730 <HAL_MspInit+0x58>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	6213      	str	r3, [r2, #32]
 8000702:	4b0b      	ldr	r3, [pc, #44]	@ (8000730 <HAL_MspInit+0x58>)
 8000704:	6a1b      	ldr	r3, [r3, #32]
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070e:	4b08      	ldr	r3, [pc, #32]	@ (8000730 <HAL_MspInit+0x58>)
 8000710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000712:	4a07      	ldr	r2, [pc, #28]	@ (8000730 <HAL_MspInit+0x58>)
 8000714:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000718:	6253      	str	r3, [r2, #36]	@ 0x24
 800071a:	4b05      	ldr	r3, [pc, #20]	@ (8000730 <HAL_MspInit+0x58>)
 800071c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800071e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000726:	bf00      	nop
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr
 8000730:	40023800 	.word	0x40023800

08000734 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	@ 0x28
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a17      	ldr	r2, [pc, #92]	@ (80007b0 <HAL_SPI_MspInit+0x7c>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d127      	bne.n	80007a6 <HAL_SPI_MspInit+0x72>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000756:	4b17      	ldr	r3, [pc, #92]	@ (80007b4 <HAL_SPI_MspInit+0x80>)
 8000758:	6a1b      	ldr	r3, [r3, #32]
 800075a:	4a16      	ldr	r2, [pc, #88]	@ (80007b4 <HAL_SPI_MspInit+0x80>)
 800075c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000760:	6213      	str	r3, [r2, #32]
 8000762:	4b14      	ldr	r3, [pc, #80]	@ (80007b4 <HAL_SPI_MspInit+0x80>)
 8000764:	6a1b      	ldr	r3, [r3, #32]
 8000766:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	4b11      	ldr	r3, [pc, #68]	@ (80007b4 <HAL_SPI_MspInit+0x80>)
 8000770:	69db      	ldr	r3, [r3, #28]
 8000772:	4a10      	ldr	r2, [pc, #64]	@ (80007b4 <HAL_SPI_MspInit+0x80>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	61d3      	str	r3, [r2, #28]
 800077a:	4b0e      	ldr	r3, [pc, #56]	@ (80007b4 <HAL_SPI_MspInit+0x80>)
 800077c:	69db      	ldr	r3, [r3, #28]
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000786:	23e0      	movs	r3, #224	@ 0xe0
 8000788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078a:	2302      	movs	r3, #2
 800078c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000792:	2303      	movs	r3, #3
 8000794:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000796:	2305      	movs	r3, #5
 8000798:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079a:	f107 0314 	add.w	r3, r7, #20
 800079e:	4619      	mov	r1, r3
 80007a0:	4805      	ldr	r0, [pc, #20]	@ (80007b8 <HAL_SPI_MspInit+0x84>)
 80007a2:	f000 fa53 	bl	8000c4c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80007a6:	bf00      	nop
 80007a8:	3728      	adds	r7, #40	@ 0x28
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40013000 	.word	0x40013000
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40020000 	.word	0x40020000

080007bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007c0:	bf00      	nop
 80007c2:	e7fd      	b.n	80007c0 <NMI_Handler+0x4>

080007c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c8:	bf00      	nop
 80007ca:	e7fd      	b.n	80007c8 <HardFault_Handler+0x4>

080007cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d0:	bf00      	nop
 80007d2:	e7fd      	b.n	80007d0 <MemManage_Handler+0x4>

080007d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d8:	bf00      	nop
 80007da:	e7fd      	b.n	80007d8 <BusFault_Handler+0x4>

080007dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e0:	bf00      	nop
 80007e2:	e7fd      	b.n	80007e0 <UsageFault_Handler+0x4>

080007e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr

080007f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr

080007fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr

08000808 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800080c:	f000 f8fc 	bl	8000a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}

08000814 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr

08000820 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8000820:	f7ff fff8 	bl	8000814 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000824:	480b      	ldr	r0, [pc, #44]	@ (8000854 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000826:	490c      	ldr	r1, [pc, #48]	@ (8000858 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000828:	4a0c      	ldr	r2, [pc, #48]	@ (800085c <LoopFillZerobss+0x16>)
  movs r3, #0
 800082a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800082c:	e002      	b.n	8000834 <LoopCopyDataInit>

0800082e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800082e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000830:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000832:	3304      	adds	r3, #4

08000834 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000834:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000836:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000838:	d3f9      	bcc.n	800082e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800083a:	4a09      	ldr	r2, [pc, #36]	@ (8000860 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800083c:	4c09      	ldr	r4, [pc, #36]	@ (8000864 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800083e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000840:	e001      	b.n	8000846 <LoopFillZerobss>

08000842 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000842:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000844:	3204      	adds	r2, #4

08000846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000846:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000848:	d3fb      	bcc.n	8000842 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800084a:	f001 fbdb 	bl	8002004 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800084e:	f7ff fe72 	bl	8000536 <main>
  bx lr
 8000852:	4770      	bx	lr
  ldr r0, =_sdata
 8000854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000858:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800085c:	08002090 	.word	0x08002090
  ldr r2, =_sbss
 8000860:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000864:	20000084 	.word	0x20000084

08000868 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000868:	e7fe      	b.n	8000868 <ADC1_IRQHandler>

0800086a <MAX7219_Init>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Init (void)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	af00      	add	r7, sp, #0
                               // configure "LOAD" as output

  MAX7219_Write(REG_SCAN_LIMIT, 7);                   // set up to scan all eight digits
 800086e:	2107      	movs	r1, #7
 8000870:	200b      	movs	r0, #11
 8000872:	f000 f847 	bl	8000904 <MAX7219_Write>
  MAX7219_Write(REG_DECODE, 0x00);                    // set to "no decode" for all digits
 8000876:	2100      	movs	r1, #0
 8000878:	2009      	movs	r0, #9
 800087a:	f000 f843 	bl	8000904 <MAX7219_Write>
  MAX7219_ShutdownStop();                             // select normal operation (i.e. not shutdown)
 800087e:	f000 f809 	bl	8000894 <MAX7219_ShutdownStop>
  MAX7219_DisplayTestStop();                          // select normal operation (i.e. not test mode)
 8000882:	f000 f80f 	bl	80008a4 <MAX7219_DisplayTestStop>
  MAX7219_Clear();                                    // clear all digits
 8000886:	f000 f827 	bl	80008d8 <MAX7219_Clear>
  MAX7219_SetBrightness(INTENSITY_MAX);               // set to maximum intensity
 800088a:	200f      	movs	r0, #15
 800088c:	f000 f812 	bl	80008b4 <MAX7219_SetBrightness>
}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}

08000894 <MAX7219_ShutdownStop>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_ShutdownStop (void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_SHUTDOWN, 1);                     // put MAX7219 into "normal" mode
 8000898:	2101      	movs	r1, #1
 800089a:	200c      	movs	r0, #12
 800089c:	f000 f832 	bl	8000904 <MAX7219_Write>
}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <MAX7219_DisplayTestStop>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_DisplayTestStop (void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_DISPLAY_TEST, 0);                 // put MAX7219 into "normal" mode
 80008a8:	2100      	movs	r1, #0
 80008aa:	200f      	movs	r0, #15
 80008ac:	f000 f82a 	bl	8000904 <MAX7219_Write>
}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <MAX7219_SetBrightness>:
* Arguments  : brightness (0-15)
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_SetBrightness (char brightness)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	71fb      	strb	r3, [r7, #7]
  brightness &= 0x0f;                                 // mask off extra bits
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	f003 030f 	and.w	r3, r3, #15
 80008c4:	71fb      	strb	r3, [r7, #7]
  MAX7219_Write(REG_INTENSITY, brightness);           // set brightness
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	4619      	mov	r1, r3
 80008ca:	200a      	movs	r0, #10
 80008cc:	f000 f81a 	bl	8000904 <MAX7219_Write>
}
 80008d0:	bf00      	nop
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <MAX7219_Clear>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Clear (void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
  char i;
  for (i=0; i < 8; i++)
 80008de:	2300      	movs	r3, #0
 80008e0:	71fb      	strb	r3, [r7, #7]
 80008e2:	e007      	b.n	80008f4 <MAX7219_Clear+0x1c>
    MAX7219_Write(i, 0x00);                           // turn all segments off
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	2100      	movs	r1, #0
 80008e8:	4618      	mov	r0, r3
 80008ea:	f000 f80b 	bl	8000904 <MAX7219_Write>
  for (i=0; i < 8; i++)
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	3301      	adds	r3, #1
 80008f2:	71fb      	strb	r3, [r7, #7]
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	2b07      	cmp	r3, #7
 80008f8:	d9f4      	bls.n	80008e4 <MAX7219_Clear+0xc>
}
 80008fa:	bf00      	nop
 80008fc:	bf00      	nop
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <MAX7219_Write>:
*              dataout = data to write to MAX7219
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Write (unsigned char reg_number, unsigned char dataout)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	460a      	mov	r2, r1
 800090e:	71fb      	strb	r3, [r7, #7]
 8000910:	4613      	mov	r3, r2
 8000912:	71bb      	strb	r3, [r7, #6]
 MAX7219_nCS_PORT->BSRR = (uint32_t)MAX7219_nCS_PIN<<16;// nCS = 0                                          // take LOAD high to begin
 8000914:	4b09      	ldr	r3, [pc, #36]	@ (800093c <MAX7219_Write+0x38>)
 8000916:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800091a:	619a      	str	r2, [r3, #24]
  MAX7219_SendByte(reg_number);                       // write register number to MAX7219
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	4618      	mov	r0, r3
 8000920:	f000 f80e 	bl	8000940 <MAX7219_SendByte>
  MAX7219_SendByte(dataout);                          // write data to MAX7219
 8000924:	79bb      	ldrb	r3, [r7, #6]
 8000926:	4618      	mov	r0, r3
 8000928:	f000 f80a 	bl	8000940 <MAX7219_SendByte>
  MAX7219_nCS_PORT->BSRR = (uint32_t)MAX7219_nCS_PIN;// nCS = 1                                       // take LOAD low to latch in data
 800092c:	4b03      	ldr	r3, [pc, #12]	@ (800093c <MAX7219_Write+0x38>)
 800092e:	2201      	movs	r2, #1
 8000930:	619a      	str	r2, [r3, #24]
 }
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40020800 	.word	0x40020800

08000940 <MAX7219_SendByte>:
* Returns    : none
*********************************************************************************************************
*/

static void MAX7219_SendByte (unsigned char dataout)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	71fb      	strb	r3, [r7, #7]

	HAL_SPI_Transmit(&hspi1, &dataout, 1, 1000);
 800094a:	1df9      	adds	r1, r7, #7
 800094c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000950:	2201      	movs	r2, #1
 8000952:	4803      	ldr	r0, [pc, #12]	@ (8000960 <MAX7219_SendByte+0x20>)
 8000954:	f001 f92d 	bl	8001bb2 <HAL_SPI_Transmit>

}
 8000958:	bf00      	nop
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000028 	.word	0x20000028

08000964 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800096a:	2300      	movs	r3, #0
 800096c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800096e:	2003      	movs	r0, #3
 8000970:	f000 f938 	bl	8000be4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000974:	200f      	movs	r0, #15
 8000976:	f000 f80d 	bl	8000994 <HAL_InitTick>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d002      	beq.n	8000986 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000980:	2301      	movs	r3, #1
 8000982:	71fb      	strb	r3, [r7, #7]
 8000984:	e001      	b.n	800098a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000986:	f7ff fea7 	bl	80006d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800098a:	79fb      	ldrb	r3, [r7, #7]
}
 800098c:	4618      	mov	r0, r3
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800099c:	2300      	movs	r3, #0
 800099e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80009a0:	4b16      	ldr	r3, [pc, #88]	@ (80009fc <HAL_InitTick+0x68>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d022      	beq.n	80009ee <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80009a8:	4b15      	ldr	r3, [pc, #84]	@ (8000a00 <HAL_InitTick+0x6c>)
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	4b13      	ldr	r3, [pc, #76]	@ (80009fc <HAL_InitTick+0x68>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80009b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80009b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80009bc:	4618      	mov	r0, r3
 80009be:	f000 f938 	bl	8000c32 <HAL_SYSTICK_Config>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d10f      	bne.n	80009e8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2b0f      	cmp	r3, #15
 80009cc:	d809      	bhi.n	80009e2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ce:	2200      	movs	r2, #0
 80009d0:	6879      	ldr	r1, [r7, #4]
 80009d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009d6:	f000 f910 	bl	8000bfa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009da:	4a0a      	ldr	r2, [pc, #40]	@ (8000a04 <HAL_InitTick+0x70>)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6013      	str	r3, [r2, #0]
 80009e0:	e007      	b.n	80009f2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
 80009e4:	73fb      	strb	r3, [r7, #15]
 80009e6:	e004      	b.n	80009f2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009e8:	2301      	movs	r3, #1
 80009ea:	73fb      	strb	r3, [r7, #15]
 80009ec:	e001      	b.n	80009f2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
 80009f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3710      	adds	r7, #16
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000008 	.word	0x20000008
 8000a00:	20000000 	.word	0x20000000
 8000a04:	20000004 	.word	0x20000004

08000a08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a0c:	4b05      	ldr	r3, [pc, #20]	@ (8000a24 <HAL_IncTick+0x1c>)
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	4b05      	ldr	r3, [pc, #20]	@ (8000a28 <HAL_IncTick+0x20>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4413      	add	r3, r2
 8000a16:	4a03      	ldr	r2, [pc, #12]	@ (8000a24 <HAL_IncTick+0x1c>)
 8000a18:	6013      	str	r3, [r2, #0]
}
 8000a1a:	bf00      	nop
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bc80      	pop	{r7}
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	20000080 	.word	0x20000080
 8000a28:	20000008 	.word	0x20000008

08000a2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a30:	4b02      	ldr	r3, [pc, #8]	@ (8000a3c <HAL_GetTick+0x10>)
 8000a32:	681b      	ldr	r3, [r3, #0]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr
 8000a3c:	20000080 	.word	0x20000080

08000a40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a48:	f7ff fff0 	bl	8000a2c <HAL_GetTick>
 8000a4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000a58:	d004      	beq.n	8000a64 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a5a:	4b09      	ldr	r3, [pc, #36]	@ (8000a80 <HAL_Delay+0x40>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	68fa      	ldr	r2, [r7, #12]
 8000a60:	4413      	add	r3, r2
 8000a62:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a64:	bf00      	nop
 8000a66:	f7ff ffe1 	bl	8000a2c <HAL_GetTick>
 8000a6a:	4602      	mov	r2, r0
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	1ad3      	subs	r3, r2, r3
 8000a70:	68fa      	ldr	r2, [r7, #12]
 8000a72:	429a      	cmp	r2, r3
 8000a74:	d8f7      	bhi.n	8000a66 <HAL_Delay+0x26>
  {
  }
}
 8000a76:	bf00      	nop
 8000a78:	bf00      	nop
 8000a7a:	3710      	adds	r7, #16
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000008 	.word	0x20000008

08000a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a94:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a9a:	68ba      	ldr	r2, [r7, #8]
 8000a9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ab0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ab6:	4a04      	ldr	r2, [pc, #16]	@ (8000ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	60d3      	str	r3, [r2, #12]
}
 8000abc:	bf00      	nop
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad0:	4b04      	ldr	r3, [pc, #16]	@ (8000ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	0a1b      	lsrs	r3, r3, #8
 8000ad6:	f003 0307 	and.w	r3, r3, #7
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bc80      	pop	{r7}
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	6039      	str	r1, [r7, #0]
 8000af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	db0a      	blt.n	8000b12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	b2da      	uxtb	r2, r3
 8000b00:	490c      	ldr	r1, [pc, #48]	@ (8000b34 <__NVIC_SetPriority+0x4c>)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	0112      	lsls	r2, r2, #4
 8000b08:	b2d2      	uxtb	r2, r2
 8000b0a:	440b      	add	r3, r1
 8000b0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b10:	e00a      	b.n	8000b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	4908      	ldr	r1, [pc, #32]	@ (8000b38 <__NVIC_SetPriority+0x50>)
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	f003 030f 	and.w	r3, r3, #15
 8000b1e:	3b04      	subs	r3, #4
 8000b20:	0112      	lsls	r2, r2, #4
 8000b22:	b2d2      	uxtb	r2, r2
 8000b24:	440b      	add	r3, r1
 8000b26:	761a      	strb	r2, [r3, #24]
}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000e100 	.word	0xe000e100
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b089      	sub	sp, #36	@ 0x24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	f003 0307 	and.w	r3, r3, #7
 8000b4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b50:	69fb      	ldr	r3, [r7, #28]
 8000b52:	f1c3 0307 	rsb	r3, r3, #7
 8000b56:	2b04      	cmp	r3, #4
 8000b58:	bf28      	it	cs
 8000b5a:	2304      	movcs	r3, #4
 8000b5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	3304      	adds	r3, #4
 8000b62:	2b06      	cmp	r3, #6
 8000b64:	d902      	bls.n	8000b6c <NVIC_EncodePriority+0x30>
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	3b03      	subs	r3, #3
 8000b6a:	e000      	b.n	8000b6e <NVIC_EncodePriority+0x32>
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	43da      	mvns	r2, r3
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	401a      	ands	r2, r3
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b84:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8e:	43d9      	mvns	r1, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b94:	4313      	orrs	r3, r2
         );
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3724      	adds	r7, #36	@ 0x24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr

08000ba0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bb0:	d301      	bcc.n	8000bb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e00f      	b.n	8000bd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000be0 <SysTick_Config+0x40>)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bbe:	210f      	movs	r1, #15
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bc4:	f7ff ff90 	bl	8000ae8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc8:	4b05      	ldr	r3, [pc, #20]	@ (8000be0 <SysTick_Config+0x40>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bce:	4b04      	ldr	r3, [pc, #16]	@ (8000be0 <SysTick_Config+0x40>)
 8000bd0:	2207      	movs	r2, #7
 8000bd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	e000e010 	.word	0xe000e010

08000be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f7ff ff49 	bl	8000a84 <__NVIC_SetPriorityGrouping>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b086      	sub	sp, #24
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	4603      	mov	r3, r0
 8000c02:	60b9      	str	r1, [r7, #8]
 8000c04:	607a      	str	r2, [r7, #4]
 8000c06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c0c:	f7ff ff5e 	bl	8000acc <__NVIC_GetPriorityGrouping>
 8000c10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	68b9      	ldr	r1, [r7, #8]
 8000c16:	6978      	ldr	r0, [r7, #20]
 8000c18:	f7ff ff90 	bl	8000b3c <NVIC_EncodePriority>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c22:	4611      	mov	r1, r2
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff ff5f 	bl	8000ae8 <__NVIC_SetPriority>
}
 8000c2a:	bf00      	nop
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f7ff ffb0 	bl	8000ba0 <SysTick_Config>
 8000c40:	4603      	mov	r3, r0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b087      	sub	sp, #28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c62:	e160      	b.n	8000f26 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	2101      	movs	r1, #1
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c70:	4013      	ands	r3, r2
 8000c72:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	f000 8152 	beq.w	8000f20 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f003 0303 	and.w	r3, r3, #3
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d005      	beq.n	8000c94 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c90:	2b02      	cmp	r3, #2
 8000c92:	d130      	bne.n	8000cf6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	2203      	movs	r2, #3
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	68da      	ldr	r2, [r3, #12]
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000cca:	2201      	movs	r2, #1
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	091b      	lsrs	r3, r3, #4
 8000ce0:	f003 0201 	and.w	r2, r3, #1
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f003 0303 	and.w	r3, r3, #3
 8000cfe:	2b03      	cmp	r3, #3
 8000d00:	d017      	beq.n	8000d32 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	68db      	ldr	r3, [r3, #12]
 8000d06:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	2203      	movs	r2, #3
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	43db      	mvns	r3, r3
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	4013      	ands	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	689a      	ldr	r2, [r3, #8]
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f003 0303 	and.w	r3, r3, #3
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	d123      	bne.n	8000d86 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	08da      	lsrs	r2, r3, #3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	3208      	adds	r2, #8
 8000d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d4a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	220f      	movs	r2, #15
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	691a      	ldr	r2, [r3, #16]
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	f003 0307 	and.w	r3, r3, #7
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	08da      	lsrs	r2, r3, #3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3208      	adds	r2, #8
 8000d80:	6939      	ldr	r1, [r7, #16]
 8000d82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	2203      	movs	r2, #3
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43db      	mvns	r3, r3
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f003 0203 	and.w	r2, r3, #3
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	f000 80ac 	beq.w	8000f20 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc8:	4b5e      	ldr	r3, [pc, #376]	@ (8000f44 <HAL_GPIO_Init+0x2f8>)
 8000dca:	6a1b      	ldr	r3, [r3, #32]
 8000dcc:	4a5d      	ldr	r2, [pc, #372]	@ (8000f44 <HAL_GPIO_Init+0x2f8>)
 8000dce:	f043 0301 	orr.w	r3, r3, #1
 8000dd2:	6213      	str	r3, [r2, #32]
 8000dd4:	4b5b      	ldr	r3, [pc, #364]	@ (8000f44 <HAL_GPIO_Init+0x2f8>)
 8000dd6:	6a1b      	ldr	r3, [r3, #32]
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000de0:	4a59      	ldr	r2, [pc, #356]	@ (8000f48 <HAL_GPIO_Init+0x2fc>)
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	089b      	lsrs	r3, r3, #2
 8000de6:	3302      	adds	r3, #2
 8000de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	f003 0303 	and.w	r3, r3, #3
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	220f      	movs	r2, #15
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	4013      	ands	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a51      	ldr	r2, [pc, #324]	@ (8000f4c <HAL_GPIO_Init+0x300>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d025      	beq.n	8000e58 <HAL_GPIO_Init+0x20c>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a50      	ldr	r2, [pc, #320]	@ (8000f50 <HAL_GPIO_Init+0x304>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d01f      	beq.n	8000e54 <HAL_GPIO_Init+0x208>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a4f      	ldr	r2, [pc, #316]	@ (8000f54 <HAL_GPIO_Init+0x308>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d019      	beq.n	8000e50 <HAL_GPIO_Init+0x204>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4a4e      	ldr	r2, [pc, #312]	@ (8000f58 <HAL_GPIO_Init+0x30c>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d013      	beq.n	8000e4c <HAL_GPIO_Init+0x200>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a4d      	ldr	r2, [pc, #308]	@ (8000f5c <HAL_GPIO_Init+0x310>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d00d      	beq.n	8000e48 <HAL_GPIO_Init+0x1fc>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4a4c      	ldr	r2, [pc, #304]	@ (8000f60 <HAL_GPIO_Init+0x314>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d007      	beq.n	8000e44 <HAL_GPIO_Init+0x1f8>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4a4b      	ldr	r2, [pc, #300]	@ (8000f64 <HAL_GPIO_Init+0x318>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d101      	bne.n	8000e40 <HAL_GPIO_Init+0x1f4>
 8000e3c:	2306      	movs	r3, #6
 8000e3e:	e00c      	b.n	8000e5a <HAL_GPIO_Init+0x20e>
 8000e40:	2307      	movs	r3, #7
 8000e42:	e00a      	b.n	8000e5a <HAL_GPIO_Init+0x20e>
 8000e44:	2305      	movs	r3, #5
 8000e46:	e008      	b.n	8000e5a <HAL_GPIO_Init+0x20e>
 8000e48:	2304      	movs	r3, #4
 8000e4a:	e006      	b.n	8000e5a <HAL_GPIO_Init+0x20e>
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	e004      	b.n	8000e5a <HAL_GPIO_Init+0x20e>
 8000e50:	2302      	movs	r3, #2
 8000e52:	e002      	b.n	8000e5a <HAL_GPIO_Init+0x20e>
 8000e54:	2301      	movs	r3, #1
 8000e56:	e000      	b.n	8000e5a <HAL_GPIO_Init+0x20e>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	697a      	ldr	r2, [r7, #20]
 8000e5c:	f002 0203 	and.w	r2, r2, #3
 8000e60:	0092      	lsls	r2, r2, #2
 8000e62:	4093      	lsls	r3, r2
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000e6a:	4937      	ldr	r1, [pc, #220]	@ (8000f48 <HAL_GPIO_Init+0x2fc>)
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	089b      	lsrs	r3, r3, #2
 8000e70:	3302      	adds	r3, #2
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e78:	4b3b      	ldr	r3, [pc, #236]	@ (8000f68 <HAL_GPIO_Init+0x31c>)
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	43db      	mvns	r3, r3
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4013      	ands	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d003      	beq.n	8000e9c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e9c:	4a32      	ldr	r2, [pc, #200]	@ (8000f68 <HAL_GPIO_Init+0x31c>)
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ea2:	4b31      	ldr	r3, [pc, #196]	@ (8000f68 <HAL_GPIO_Init+0x31c>)
 8000ea4:	68db      	ldr	r3, [r3, #12]
 8000ea6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d003      	beq.n	8000ec6 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ec6:	4a28      	ldr	r2, [pc, #160]	@ (8000f68 <HAL_GPIO_Init+0x31c>)
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ecc:	4b26      	ldr	r3, [pc, #152]	@ (8000f68 <HAL_GPIO_Init+0x31c>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d003      	beq.n	8000ef0 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8000f68 <HAL_GPIO_Init+0x31c>)
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ef6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f68 <HAL_GPIO_Init+0x31c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	43db      	mvns	r3, r3
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	4013      	ands	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d003      	beq.n	8000f1a <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f1a:	4a13      	ldr	r2, [pc, #76]	@ (8000f68 <HAL_GPIO_Init+0x31c>)
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	3301      	adds	r3, #1
 8000f24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	f47f ae97 	bne.w	8000c64 <HAL_GPIO_Init+0x18>
  }
}
 8000f36:	bf00      	nop
 8000f38:	bf00      	nop
 8000f3a:	371c      	adds	r7, #28
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40010000 	.word	0x40010000
 8000f4c:	40020000 	.word	0x40020000
 8000f50:	40020400 	.word	0x40020400
 8000f54:	40020800 	.word	0x40020800
 8000f58:	40020c00 	.word	0x40020c00
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	40021400 	.word	0x40021400
 8000f64:	40021800 	.word	0x40021800
 8000f68:	40010400 	.word	0x40010400

08000f6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	460b      	mov	r3, r1
 8000f76:	807b      	strh	r3, [r7, #2]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f7c:	787b      	ldrb	r3, [r7, #1]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d003      	beq.n	8000f8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f82:	887a      	ldrh	r2, [r7, #2]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8000f88:	e003      	b.n	8000f92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000f8a:	887b      	ldrh	r3, [r7, #2]
 8000f8c:	041a      	lsls	r2, r3, #16
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	619a      	str	r2, [r3, #24]
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr

08000f9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b088      	sub	sp, #32
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d101      	bne.n	8000fae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e31d      	b.n	80015ea <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fae:	4b94      	ldr	r3, [pc, #592]	@ (8001200 <HAL_RCC_OscConfig+0x264>)
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	f003 030c 	and.w	r3, r3, #12
 8000fb6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fb8:	4b91      	ldr	r3, [pc, #580]	@ (8001200 <HAL_RCC_OscConfig+0x264>)
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fc0:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d07b      	beq.n	80010c6 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	2b08      	cmp	r3, #8
 8000fd2:	d006      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	2b0c      	cmp	r3, #12
 8000fd8:	d10f      	bne.n	8000ffa <HAL_RCC_OscConfig+0x5e>
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fe0:	d10b      	bne.n	8000ffa <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fe2:	4b87      	ldr	r3, [pc, #540]	@ (8001200 <HAL_RCC_OscConfig+0x264>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d06a      	beq.n	80010c4 <HAL_RCC_OscConfig+0x128>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d166      	bne.n	80010c4 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e2f7      	b.n	80015ea <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d106      	bne.n	8001010 <HAL_RCC_OscConfig+0x74>
 8001002:	4b7f      	ldr	r3, [pc, #508]	@ (8001200 <HAL_RCC_OscConfig+0x264>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a7e      	ldr	r2, [pc, #504]	@ (8001200 <HAL_RCC_OscConfig+0x264>)
 8001008:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800100c:	6013      	str	r3, [r2, #0]
 800100e:	e02d      	b.n	800106c <HAL_RCC_OscConfig+0xd0>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d10c      	bne.n	8001032 <HAL_RCC_OscConfig+0x96>
 8001018:	4b79      	ldr	r3, [pc, #484]	@ (8001200 <HAL_RCC_OscConfig+0x264>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a78      	ldr	r2, [pc, #480]	@ (8001200 <HAL_RCC_OscConfig+0x264>)
 800101e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001022:	6013      	str	r3, [r2, #0]
 8001024:	4b76      	ldr	r3, [pc, #472]	@ (8001200 <HAL_RCC_OscConfig+0x264>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a75      	ldr	r2, [pc, #468]	@ (8001200 <HAL_RCC_OscConfig+0x264>)
 800102a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800102e:	6013      	str	r3, [r2, #0]
 8001030:	e01c      	b.n	800106c <HAL_RCC_OscConfig+0xd0>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	2b05      	cmp	r3, #5
 8001038:	d10c      	bne.n	8001054 <HAL_RCC_OscConfig+0xb8>
 800103a:	4b71      	ldr	r3, [pc, #452]	@ (8001200 <HAL_RCC_OscConfig+0x264>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a70      	ldr	r2, [pc, #448]	@ (8001200 <HAL_RCC_OscConfig+0x264>)
 8001040:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001044:	6013      	str	r3, [r2, #0]
 8001046:	4b6e      	ldr	r3, [pc, #440]	@ (8001200 <HAL_RCC_OscConfig+0x264>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a6d      	ldr	r2, [pc, #436]	@ (8001200 <HAL_RCC_OscConfig+0x264>)
 800104c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001050:	6013      	str	r3, [r2, #0]
 8001052:	e00b      	b.n	800106c <HAL_RCC_OscConfig+0xd0>
 8001054:	4b6a      	ldr	r3, [pc, #424]	@ (8001200 <HAL_RCC_OscConfig+0x264>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a69      	ldr	r2, [pc, #420]	@ (8001200 <HAL_RCC_OscConfig+0x264>)
 800105a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800105e:	6013      	str	r3, [r2, #0]
 8001060:	4b67      	ldr	r3, [pc, #412]	@ (8001200 <HAL_RCC_OscConfig+0x264>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a66      	ldr	r2, [pc, #408]	@ (8001200 <HAL_RCC_OscConfig+0x264>)
 8001066:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800106a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d013      	beq.n	800109c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001074:	f7ff fcda 	bl	8000a2c <HAL_GetTick>
 8001078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800107a:	e008      	b.n	800108e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800107c:	f7ff fcd6 	bl	8000a2c <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b64      	cmp	r3, #100	@ 0x64
 8001088:	d901      	bls.n	800108e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e2ad      	b.n	80015ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800108e:	4b5c      	ldr	r3, [pc, #368]	@ (8001200 <HAL_RCC_OscConfig+0x264>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d0f0      	beq.n	800107c <HAL_RCC_OscConfig+0xe0>
 800109a:	e014      	b.n	80010c6 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109c:	f7ff fcc6 	bl	8000a2c <HAL_GetTick>
 80010a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80010a2:	e008      	b.n	80010b6 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010a4:	f7ff fcc2 	bl	8000a2c <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b64      	cmp	r3, #100	@ 0x64
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e299      	b.n	80015ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80010b6:	4b52      	ldr	r3, [pc, #328]	@ (8001200 <HAL_RCC_OscConfig+0x264>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1f0      	bne.n	80010a4 <HAL_RCC_OscConfig+0x108>
 80010c2:	e000      	b.n	80010c6 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d05a      	beq.n	8001188 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	2b04      	cmp	r3, #4
 80010d6:	d005      	beq.n	80010e4 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	2b0c      	cmp	r3, #12
 80010dc:	d119      	bne.n	8001112 <HAL_RCC_OscConfig+0x176>
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d116      	bne.n	8001112 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010e4:	4b46      	ldr	r3, [pc, #280]	@ (8001200 <HAL_RCC_OscConfig+0x264>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d005      	beq.n	80010fc <HAL_RCC_OscConfig+0x160>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d001      	beq.n	80010fc <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e276      	b.n	80015ea <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010fc:	4b40      	ldr	r3, [pc, #256]	@ (8001200 <HAL_RCC_OscConfig+0x264>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	691b      	ldr	r3, [r3, #16]
 8001108:	021b      	lsls	r3, r3, #8
 800110a:	493d      	ldr	r1, [pc, #244]	@ (8001200 <HAL_RCC_OscConfig+0x264>)
 800110c:	4313      	orrs	r3, r2
 800110e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001110:	e03a      	b.n	8001188 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d020      	beq.n	800115c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800111a:	4b3a      	ldr	r3, [pc, #232]	@ (8001204 <HAL_RCC_OscConfig+0x268>)
 800111c:	2201      	movs	r2, #1
 800111e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001120:	f7ff fc84 	bl	8000a2c <HAL_GetTick>
 8001124:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001126:	e008      	b.n	800113a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001128:	f7ff fc80 	bl	8000a2c <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b02      	cmp	r3, #2
 8001134:	d901      	bls.n	800113a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e257      	b.n	80015ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800113a:	4b31      	ldr	r3, [pc, #196]	@ (8001200 <HAL_RCC_OscConfig+0x264>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	2b00      	cmp	r3, #0
 8001144:	d0f0      	beq.n	8001128 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001146:	4b2e      	ldr	r3, [pc, #184]	@ (8001200 <HAL_RCC_OscConfig+0x264>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	691b      	ldr	r3, [r3, #16]
 8001152:	021b      	lsls	r3, r3, #8
 8001154:	492a      	ldr	r1, [pc, #168]	@ (8001200 <HAL_RCC_OscConfig+0x264>)
 8001156:	4313      	orrs	r3, r2
 8001158:	604b      	str	r3, [r1, #4]
 800115a:	e015      	b.n	8001188 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800115c:	4b29      	ldr	r3, [pc, #164]	@ (8001204 <HAL_RCC_OscConfig+0x268>)
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001162:	f7ff fc63 	bl	8000a2c <HAL_GetTick>
 8001166:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001168:	e008      	b.n	800117c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800116a:	f7ff fc5f 	bl	8000a2c <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e236      	b.n	80015ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800117c:	4b20      	ldr	r3, [pc, #128]	@ (8001200 <HAL_RCC_OscConfig+0x264>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d1f0      	bne.n	800116a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0310 	and.w	r3, r3, #16
 8001190:	2b00      	cmp	r3, #0
 8001192:	f000 80b8 	beq.w	8001306 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d170      	bne.n	800127e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800119c:	4b18      	ldr	r3, [pc, #96]	@ (8001200 <HAL_RCC_OscConfig+0x264>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d005      	beq.n	80011b4 <HAL_RCC_OscConfig+0x218>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d101      	bne.n	80011b4 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e21a      	b.n	80015ea <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6a1a      	ldr	r2, [r3, #32]
 80011b8:	4b11      	ldr	r3, [pc, #68]	@ (8001200 <HAL_RCC_OscConfig+0x264>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d921      	bls.n	8001208 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6a1b      	ldr	r3, [r3, #32]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f000 fc09 	bl	80019e0 <RCC_SetFlashLatencyFromMSIRange>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e208      	b.n	80015ea <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011d8:	4b09      	ldr	r3, [pc, #36]	@ (8001200 <HAL_RCC_OscConfig+0x264>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a1b      	ldr	r3, [r3, #32]
 80011e4:	4906      	ldr	r1, [pc, #24]	@ (8001200 <HAL_RCC_OscConfig+0x264>)
 80011e6:	4313      	orrs	r3, r2
 80011e8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011ea:	4b05      	ldr	r3, [pc, #20]	@ (8001200 <HAL_RCC_OscConfig+0x264>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	69db      	ldr	r3, [r3, #28]
 80011f6:	061b      	lsls	r3, r3, #24
 80011f8:	4901      	ldr	r1, [pc, #4]	@ (8001200 <HAL_RCC_OscConfig+0x264>)
 80011fa:	4313      	orrs	r3, r2
 80011fc:	604b      	str	r3, [r1, #4]
 80011fe:	e020      	b.n	8001242 <HAL_RCC_OscConfig+0x2a6>
 8001200:	40023800 	.word	0x40023800
 8001204:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001208:	4b99      	ldr	r3, [pc, #612]	@ (8001470 <HAL_RCC_OscConfig+0x4d4>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6a1b      	ldr	r3, [r3, #32]
 8001214:	4996      	ldr	r1, [pc, #600]	@ (8001470 <HAL_RCC_OscConfig+0x4d4>)
 8001216:	4313      	orrs	r3, r2
 8001218:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800121a:	4b95      	ldr	r3, [pc, #596]	@ (8001470 <HAL_RCC_OscConfig+0x4d4>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	69db      	ldr	r3, [r3, #28]
 8001226:	061b      	lsls	r3, r3, #24
 8001228:	4991      	ldr	r1, [pc, #580]	@ (8001470 <HAL_RCC_OscConfig+0x4d4>)
 800122a:	4313      	orrs	r3, r2
 800122c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6a1b      	ldr	r3, [r3, #32]
 8001232:	4618      	mov	r0, r3
 8001234:	f000 fbd4 	bl	80019e0 <RCC_SetFlashLatencyFromMSIRange>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e1d3      	b.n	80015ea <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a1b      	ldr	r3, [r3, #32]
 8001246:	0b5b      	lsrs	r3, r3, #13
 8001248:	3301      	adds	r3, #1
 800124a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001252:	4a87      	ldr	r2, [pc, #540]	@ (8001470 <HAL_RCC_OscConfig+0x4d4>)
 8001254:	6892      	ldr	r2, [r2, #8]
 8001256:	0912      	lsrs	r2, r2, #4
 8001258:	f002 020f 	and.w	r2, r2, #15
 800125c:	4985      	ldr	r1, [pc, #532]	@ (8001474 <HAL_RCC_OscConfig+0x4d8>)
 800125e:	5c8a      	ldrb	r2, [r1, r2]
 8001260:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001262:	4a85      	ldr	r2, [pc, #532]	@ (8001478 <HAL_RCC_OscConfig+0x4dc>)
 8001264:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001266:	4b85      	ldr	r3, [pc, #532]	@ (800147c <HAL_RCC_OscConfig+0x4e0>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff fb92 	bl	8000994 <HAL_InitTick>
 8001270:	4603      	mov	r3, r0
 8001272:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d045      	beq.n	8001306 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	e1b5      	b.n	80015ea <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	699b      	ldr	r3, [r3, #24]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d029      	beq.n	80012da <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001286:	4b7e      	ldr	r3, [pc, #504]	@ (8001480 <HAL_RCC_OscConfig+0x4e4>)
 8001288:	2201      	movs	r2, #1
 800128a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128c:	f7ff fbce 	bl	8000a2c <HAL_GetTick>
 8001290:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001292:	e008      	b.n	80012a6 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001294:	f7ff fbca 	bl	8000a2c <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e1a1      	b.n	80015ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80012a6:	4b72      	ldr	r3, [pc, #456]	@ (8001470 <HAL_RCC_OscConfig+0x4d4>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d0f0      	beq.n	8001294 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012b2:	4b6f      	ldr	r3, [pc, #444]	@ (8001470 <HAL_RCC_OscConfig+0x4d4>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a1b      	ldr	r3, [r3, #32]
 80012be:	496c      	ldr	r1, [pc, #432]	@ (8001470 <HAL_RCC_OscConfig+0x4d4>)
 80012c0:	4313      	orrs	r3, r2
 80012c2:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012c4:	4b6a      	ldr	r3, [pc, #424]	@ (8001470 <HAL_RCC_OscConfig+0x4d4>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	69db      	ldr	r3, [r3, #28]
 80012d0:	061b      	lsls	r3, r3, #24
 80012d2:	4967      	ldr	r1, [pc, #412]	@ (8001470 <HAL_RCC_OscConfig+0x4d4>)
 80012d4:	4313      	orrs	r3, r2
 80012d6:	604b      	str	r3, [r1, #4]
 80012d8:	e015      	b.n	8001306 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80012da:	4b69      	ldr	r3, [pc, #420]	@ (8001480 <HAL_RCC_OscConfig+0x4e4>)
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e0:	f7ff fba4 	bl	8000a2c <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012e8:	f7ff fba0 	bl	8000a2c <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e177      	b.n	80015ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80012fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001470 <HAL_RCC_OscConfig+0x4d4>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1f0      	bne.n	80012e8 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0308 	and.w	r3, r3, #8
 800130e:	2b00      	cmp	r3, #0
 8001310:	d030      	beq.n	8001374 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d016      	beq.n	8001348 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800131a:	4b5a      	ldr	r3, [pc, #360]	@ (8001484 <HAL_RCC_OscConfig+0x4e8>)
 800131c:	2201      	movs	r2, #1
 800131e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001320:	f7ff fb84 	bl	8000a2c <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001328:	f7ff fb80 	bl	8000a2c <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e157      	b.n	80015ea <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800133a:	4b4d      	ldr	r3, [pc, #308]	@ (8001470 <HAL_RCC_OscConfig+0x4d4>)
 800133c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d0f0      	beq.n	8001328 <HAL_RCC_OscConfig+0x38c>
 8001346:	e015      	b.n	8001374 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001348:	4b4e      	ldr	r3, [pc, #312]	@ (8001484 <HAL_RCC_OscConfig+0x4e8>)
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800134e:	f7ff fb6d 	bl	8000a2c <HAL_GetTick>
 8001352:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001354:	e008      	b.n	8001368 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001356:	f7ff fb69 	bl	8000a2c <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e140      	b.n	80015ea <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001368:	4b41      	ldr	r3, [pc, #260]	@ (8001470 <HAL_RCC_OscConfig+0x4d4>)
 800136a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	2b00      	cmp	r3, #0
 8001372:	d1f0      	bne.n	8001356 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0304 	and.w	r3, r3, #4
 800137c:	2b00      	cmp	r3, #0
 800137e:	f000 80b5 	beq.w	80014ec <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001382:	2300      	movs	r3, #0
 8001384:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001386:	4b3a      	ldr	r3, [pc, #232]	@ (8001470 <HAL_RCC_OscConfig+0x4d4>)
 8001388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800138a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d10d      	bne.n	80013ae <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001392:	4b37      	ldr	r3, [pc, #220]	@ (8001470 <HAL_RCC_OscConfig+0x4d4>)
 8001394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001396:	4a36      	ldr	r2, [pc, #216]	@ (8001470 <HAL_RCC_OscConfig+0x4d4>)
 8001398:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800139c:	6253      	str	r3, [r2, #36]	@ 0x24
 800139e:	4b34      	ldr	r3, [pc, #208]	@ (8001470 <HAL_RCC_OscConfig+0x4d4>)
 80013a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013aa:	2301      	movs	r3, #1
 80013ac:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ae:	4b36      	ldr	r3, [pc, #216]	@ (8001488 <HAL_RCC_OscConfig+0x4ec>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d118      	bne.n	80013ec <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013ba:	4b33      	ldr	r3, [pc, #204]	@ (8001488 <HAL_RCC_OscConfig+0x4ec>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a32      	ldr	r2, [pc, #200]	@ (8001488 <HAL_RCC_OscConfig+0x4ec>)
 80013c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013c6:	f7ff fb31 	bl	8000a2c <HAL_GetTick>
 80013ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013cc:	e008      	b.n	80013e0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ce:	f7ff fb2d 	bl	8000a2c <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b64      	cmp	r3, #100	@ 0x64
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e104      	b.n	80015ea <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e0:	4b29      	ldr	r3, [pc, #164]	@ (8001488 <HAL_RCC_OscConfig+0x4ec>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0f0      	beq.n	80013ce <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d106      	bne.n	8001402 <HAL_RCC_OscConfig+0x466>
 80013f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001470 <HAL_RCC_OscConfig+0x4d4>)
 80013f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001470 <HAL_RCC_OscConfig+0x4d4>)
 80013fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013fe:	6353      	str	r3, [r2, #52]	@ 0x34
 8001400:	e02d      	b.n	800145e <HAL_RCC_OscConfig+0x4c2>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d10c      	bne.n	8001424 <HAL_RCC_OscConfig+0x488>
 800140a:	4b19      	ldr	r3, [pc, #100]	@ (8001470 <HAL_RCC_OscConfig+0x4d4>)
 800140c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800140e:	4a18      	ldr	r2, [pc, #96]	@ (8001470 <HAL_RCC_OscConfig+0x4d4>)
 8001410:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001414:	6353      	str	r3, [r2, #52]	@ 0x34
 8001416:	4b16      	ldr	r3, [pc, #88]	@ (8001470 <HAL_RCC_OscConfig+0x4d4>)
 8001418:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800141a:	4a15      	ldr	r2, [pc, #84]	@ (8001470 <HAL_RCC_OscConfig+0x4d4>)
 800141c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001420:	6353      	str	r3, [r2, #52]	@ 0x34
 8001422:	e01c      	b.n	800145e <HAL_RCC_OscConfig+0x4c2>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	2b05      	cmp	r3, #5
 800142a:	d10c      	bne.n	8001446 <HAL_RCC_OscConfig+0x4aa>
 800142c:	4b10      	ldr	r3, [pc, #64]	@ (8001470 <HAL_RCC_OscConfig+0x4d4>)
 800142e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001430:	4a0f      	ldr	r2, [pc, #60]	@ (8001470 <HAL_RCC_OscConfig+0x4d4>)
 8001432:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001436:	6353      	str	r3, [r2, #52]	@ 0x34
 8001438:	4b0d      	ldr	r3, [pc, #52]	@ (8001470 <HAL_RCC_OscConfig+0x4d4>)
 800143a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800143c:	4a0c      	ldr	r2, [pc, #48]	@ (8001470 <HAL_RCC_OscConfig+0x4d4>)
 800143e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001442:	6353      	str	r3, [r2, #52]	@ 0x34
 8001444:	e00b      	b.n	800145e <HAL_RCC_OscConfig+0x4c2>
 8001446:	4b0a      	ldr	r3, [pc, #40]	@ (8001470 <HAL_RCC_OscConfig+0x4d4>)
 8001448:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800144a:	4a09      	ldr	r2, [pc, #36]	@ (8001470 <HAL_RCC_OscConfig+0x4d4>)
 800144c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001450:	6353      	str	r3, [r2, #52]	@ 0x34
 8001452:	4b07      	ldr	r3, [pc, #28]	@ (8001470 <HAL_RCC_OscConfig+0x4d4>)
 8001454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001456:	4a06      	ldr	r2, [pc, #24]	@ (8001470 <HAL_RCC_OscConfig+0x4d4>)
 8001458:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800145c:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d024      	beq.n	80014b0 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001466:	f7ff fae1 	bl	8000a2c <HAL_GetTick>
 800146a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800146c:	e019      	b.n	80014a2 <HAL_RCC_OscConfig+0x506>
 800146e:	bf00      	nop
 8001470:	40023800 	.word	0x40023800
 8001474:	08002070 	.word	0x08002070
 8001478:	20000000 	.word	0x20000000
 800147c:	20000004 	.word	0x20000004
 8001480:	42470020 	.word	0x42470020
 8001484:	42470680 	.word	0x42470680
 8001488:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800148c:	f7ff face 	bl	8000a2c <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	f241 3288 	movw	r2, #5000	@ 0x1388
 800149a:	4293      	cmp	r3, r2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e0a3      	b.n	80015ea <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014a2:	4b54      	ldr	r3, [pc, #336]	@ (80015f4 <HAL_RCC_OscConfig+0x658>)
 80014a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0ee      	beq.n	800148c <HAL_RCC_OscConfig+0x4f0>
 80014ae:	e014      	b.n	80014da <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b0:	f7ff fabc 	bl	8000a2c <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80014b6:	e00a      	b.n	80014ce <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014b8:	f7ff fab8 	bl	8000a2c <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e08d      	b.n	80015ea <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80014ce:	4b49      	ldr	r3, [pc, #292]	@ (80015f4 <HAL_RCC_OscConfig+0x658>)
 80014d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1ee      	bne.n	80014b8 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80014da:	7ffb      	ldrb	r3, [r7, #31]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d105      	bne.n	80014ec <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014e0:	4b44      	ldr	r3, [pc, #272]	@ (80015f4 <HAL_RCC_OscConfig+0x658>)
 80014e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e4:	4a43      	ldr	r2, [pc, #268]	@ (80015f4 <HAL_RCC_OscConfig+0x658>)
 80014e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80014ea:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d079      	beq.n	80015e8 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	2b0c      	cmp	r3, #12
 80014f8:	d056      	beq.n	80015a8 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d13b      	bne.n	800157a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001502:	4b3d      	ldr	r3, [pc, #244]	@ (80015f8 <HAL_RCC_OscConfig+0x65c>)
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001508:	f7ff fa90 	bl	8000a2c <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001510:	f7ff fa8c 	bl	8000a2c <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e063      	b.n	80015ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001522:	4b34      	ldr	r3, [pc, #208]	@ (80015f4 <HAL_RCC_OscConfig+0x658>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1f0      	bne.n	8001510 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800152e:	4b31      	ldr	r3, [pc, #196]	@ (80015f4 <HAL_RCC_OscConfig+0x658>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800153e:	4319      	orrs	r1, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001544:	430b      	orrs	r3, r1
 8001546:	492b      	ldr	r1, [pc, #172]	@ (80015f4 <HAL_RCC_OscConfig+0x658>)
 8001548:	4313      	orrs	r3, r2
 800154a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800154c:	4b2a      	ldr	r3, [pc, #168]	@ (80015f8 <HAL_RCC_OscConfig+0x65c>)
 800154e:	2201      	movs	r2, #1
 8001550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001552:	f7ff fa6b 	bl	8000a2c <HAL_GetTick>
 8001556:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001558:	e008      	b.n	800156c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800155a:	f7ff fa67 	bl	8000a2c <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e03e      	b.n	80015ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800156c:	4b21      	ldr	r3, [pc, #132]	@ (80015f4 <HAL_RCC_OscConfig+0x658>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0f0      	beq.n	800155a <HAL_RCC_OscConfig+0x5be>
 8001578:	e036      	b.n	80015e8 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800157a:	4b1f      	ldr	r3, [pc, #124]	@ (80015f8 <HAL_RCC_OscConfig+0x65c>)
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001580:	f7ff fa54 	bl	8000a2c <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001588:	f7ff fa50 	bl	8000a2c <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e027      	b.n	80015ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800159a:	4b16      	ldr	r3, [pc, #88]	@ (80015f4 <HAL_RCC_OscConfig+0x658>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f0      	bne.n	8001588 <HAL_RCC_OscConfig+0x5ec>
 80015a6:	e01f      	b.n	80015e8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d101      	bne.n	80015b4 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e01a      	b.n	80015ea <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015b4:	4b0f      	ldr	r3, [pc, #60]	@ (80015f4 <HAL_RCC_OscConfig+0x658>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d10d      	bne.n	80015e4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d106      	bne.n	80015e4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d001      	beq.n	80015e8 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e000      	b.n	80015ea <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3720      	adds	r7, #32
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40023800 	.word	0x40023800
 80015f8:	42470060 	.word	0x42470060

080015fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d101      	bne.n	8001610 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e11a      	b.n	8001846 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001610:	4b8f      	ldr	r3, [pc, #572]	@ (8001850 <HAL_RCC_ClockConfig+0x254>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	683a      	ldr	r2, [r7, #0]
 800161a:	429a      	cmp	r2, r3
 800161c:	d919      	bls.n	8001652 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d105      	bne.n	8001630 <HAL_RCC_ClockConfig+0x34>
 8001624:	4b8a      	ldr	r3, [pc, #552]	@ (8001850 <HAL_RCC_ClockConfig+0x254>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a89      	ldr	r2, [pc, #548]	@ (8001850 <HAL_RCC_ClockConfig+0x254>)
 800162a:	f043 0304 	orr.w	r3, r3, #4
 800162e:	6013      	str	r3, [r2, #0]
 8001630:	4b87      	ldr	r3, [pc, #540]	@ (8001850 <HAL_RCC_ClockConfig+0x254>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f023 0201 	bic.w	r2, r3, #1
 8001638:	4985      	ldr	r1, [pc, #532]	@ (8001850 <HAL_RCC_ClockConfig+0x254>)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	4313      	orrs	r3, r2
 800163e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001640:	4b83      	ldr	r3, [pc, #524]	@ (8001850 <HAL_RCC_ClockConfig+0x254>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	429a      	cmp	r2, r3
 800164c:	d001      	beq.n	8001652 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e0f9      	b.n	8001846 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d008      	beq.n	8001670 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800165e:	4b7d      	ldr	r3, [pc, #500]	@ (8001854 <HAL_RCC_ClockConfig+0x258>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	497a      	ldr	r1, [pc, #488]	@ (8001854 <HAL_RCC_ClockConfig+0x258>)
 800166c:	4313      	orrs	r3, r2
 800166e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0301 	and.w	r3, r3, #1
 8001678:	2b00      	cmp	r3, #0
 800167a:	f000 808e 	beq.w	800179a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	2b02      	cmp	r3, #2
 8001684:	d107      	bne.n	8001696 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001686:	4b73      	ldr	r3, [pc, #460]	@ (8001854 <HAL_RCC_ClockConfig+0x258>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d121      	bne.n	80016d6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e0d7      	b.n	8001846 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b03      	cmp	r3, #3
 800169c:	d107      	bne.n	80016ae <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800169e:	4b6d      	ldr	r3, [pc, #436]	@ (8001854 <HAL_RCC_ClockConfig+0x258>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d115      	bne.n	80016d6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e0cb      	b.n	8001846 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d107      	bne.n	80016c6 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016b6:	4b67      	ldr	r3, [pc, #412]	@ (8001854 <HAL_RCC_ClockConfig+0x258>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d109      	bne.n	80016d6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e0bf      	b.n	8001846 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016c6:	4b63      	ldr	r3, [pc, #396]	@ (8001854 <HAL_RCC_ClockConfig+0x258>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e0b7      	b.n	8001846 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016d6:	4b5f      	ldr	r3, [pc, #380]	@ (8001854 <HAL_RCC_ClockConfig+0x258>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f023 0203 	bic.w	r2, r3, #3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	495c      	ldr	r1, [pc, #368]	@ (8001854 <HAL_RCC_ClockConfig+0x258>)
 80016e4:	4313      	orrs	r3, r2
 80016e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016e8:	f7ff f9a0 	bl	8000a2c <HAL_GetTick>
 80016ec:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d112      	bne.n	800171c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016f6:	e00a      	b.n	800170e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016f8:	f7ff f998 	bl	8000a2c <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001706:	4293      	cmp	r3, r2
 8001708:	d901      	bls.n	800170e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e09b      	b.n	8001846 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800170e:	4b51      	ldr	r3, [pc, #324]	@ (8001854 <HAL_RCC_ClockConfig+0x258>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f003 030c 	and.w	r3, r3, #12
 8001716:	2b08      	cmp	r3, #8
 8001718:	d1ee      	bne.n	80016f8 <HAL_RCC_ClockConfig+0xfc>
 800171a:	e03e      	b.n	800179a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	2b03      	cmp	r3, #3
 8001722:	d112      	bne.n	800174a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001724:	e00a      	b.n	800173c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001726:	f7ff f981 	bl	8000a2c <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001734:	4293      	cmp	r3, r2
 8001736:	d901      	bls.n	800173c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e084      	b.n	8001846 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800173c:	4b45      	ldr	r3, [pc, #276]	@ (8001854 <HAL_RCC_ClockConfig+0x258>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f003 030c 	and.w	r3, r3, #12
 8001744:	2b0c      	cmp	r3, #12
 8001746:	d1ee      	bne.n	8001726 <HAL_RCC_ClockConfig+0x12a>
 8001748:	e027      	b.n	800179a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d11d      	bne.n	800178e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001752:	e00a      	b.n	800176a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001754:	f7ff f96a 	bl	8000a2c <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001762:	4293      	cmp	r3, r2
 8001764:	d901      	bls.n	800176a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e06d      	b.n	8001846 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800176a:	4b3a      	ldr	r3, [pc, #232]	@ (8001854 <HAL_RCC_ClockConfig+0x258>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f003 030c 	and.w	r3, r3, #12
 8001772:	2b04      	cmp	r3, #4
 8001774:	d1ee      	bne.n	8001754 <HAL_RCC_ClockConfig+0x158>
 8001776:	e010      	b.n	800179a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001778:	f7ff f958 	bl	8000a2c <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001786:	4293      	cmp	r3, r2
 8001788:	d901      	bls.n	800178e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e05b      	b.n	8001846 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800178e:	4b31      	ldr	r3, [pc, #196]	@ (8001854 <HAL_RCC_ClockConfig+0x258>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 030c 	and.w	r3, r3, #12
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1ee      	bne.n	8001778 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800179a:	4b2d      	ldr	r3, [pc, #180]	@ (8001850 <HAL_RCC_ClockConfig+0x254>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d219      	bcs.n	80017dc <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d105      	bne.n	80017ba <HAL_RCC_ClockConfig+0x1be>
 80017ae:	4b28      	ldr	r3, [pc, #160]	@ (8001850 <HAL_RCC_ClockConfig+0x254>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a27      	ldr	r2, [pc, #156]	@ (8001850 <HAL_RCC_ClockConfig+0x254>)
 80017b4:	f043 0304 	orr.w	r3, r3, #4
 80017b8:	6013      	str	r3, [r2, #0]
 80017ba:	4b25      	ldr	r3, [pc, #148]	@ (8001850 <HAL_RCC_ClockConfig+0x254>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f023 0201 	bic.w	r2, r3, #1
 80017c2:	4923      	ldr	r1, [pc, #140]	@ (8001850 <HAL_RCC_ClockConfig+0x254>)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ca:	4b21      	ldr	r3, [pc, #132]	@ (8001850 <HAL_RCC_ClockConfig+0x254>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d001      	beq.n	80017dc <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e034      	b.n	8001846 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0304 	and.w	r3, r3, #4
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d008      	beq.n	80017fa <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001854 <HAL_RCC_ClockConfig+0x258>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	4917      	ldr	r1, [pc, #92]	@ (8001854 <HAL_RCC_ClockConfig+0x258>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0308 	and.w	r3, r3, #8
 8001802:	2b00      	cmp	r3, #0
 8001804:	d009      	beq.n	800181a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001806:	4b13      	ldr	r3, [pc, #76]	@ (8001854 <HAL_RCC_ClockConfig+0x258>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	490f      	ldr	r1, [pc, #60]	@ (8001854 <HAL_RCC_ClockConfig+0x258>)
 8001816:	4313      	orrs	r3, r2
 8001818:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800181a:	f000 f823 	bl	8001864 <HAL_RCC_GetSysClockFreq>
 800181e:	4602      	mov	r2, r0
 8001820:	4b0c      	ldr	r3, [pc, #48]	@ (8001854 <HAL_RCC_ClockConfig+0x258>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	091b      	lsrs	r3, r3, #4
 8001826:	f003 030f 	and.w	r3, r3, #15
 800182a:	490b      	ldr	r1, [pc, #44]	@ (8001858 <HAL_RCC_ClockConfig+0x25c>)
 800182c:	5ccb      	ldrb	r3, [r1, r3]
 800182e:	fa22 f303 	lsr.w	r3, r2, r3
 8001832:	4a0a      	ldr	r2, [pc, #40]	@ (800185c <HAL_RCC_ClockConfig+0x260>)
 8001834:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001836:	4b0a      	ldr	r3, [pc, #40]	@ (8001860 <HAL_RCC_ClockConfig+0x264>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff f8aa 	bl	8000994 <HAL_InitTick>
 8001840:	4603      	mov	r3, r0
 8001842:	72fb      	strb	r3, [r7, #11]

  return status;
 8001844:	7afb      	ldrb	r3, [r7, #11]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40023c00 	.word	0x40023c00
 8001854:	40023800 	.word	0x40023800
 8001858:	08002070 	.word	0x08002070
 800185c:	20000000 	.word	0x20000000
 8001860:	20000004 	.word	0x20000004

08001864 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001868:	b08e      	sub	sp, #56	@ 0x38
 800186a:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800186c:	4b58      	ldr	r3, [pc, #352]	@ (80019d0 <HAL_RCC_GetSysClockFreq+0x16c>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001874:	f003 030c 	and.w	r3, r3, #12
 8001878:	2b0c      	cmp	r3, #12
 800187a:	d00d      	beq.n	8001898 <HAL_RCC_GetSysClockFreq+0x34>
 800187c:	2b0c      	cmp	r3, #12
 800187e:	f200 8092 	bhi.w	80019a6 <HAL_RCC_GetSysClockFreq+0x142>
 8001882:	2b04      	cmp	r3, #4
 8001884:	d002      	beq.n	800188c <HAL_RCC_GetSysClockFreq+0x28>
 8001886:	2b08      	cmp	r3, #8
 8001888:	d003      	beq.n	8001892 <HAL_RCC_GetSysClockFreq+0x2e>
 800188a:	e08c      	b.n	80019a6 <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800188c:	4b51      	ldr	r3, [pc, #324]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0x170>)
 800188e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001890:	e097      	b.n	80019c2 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001892:	4b51      	ldr	r3, [pc, #324]	@ (80019d8 <HAL_RCC_GetSysClockFreq+0x174>)
 8001894:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001896:	e094      	b.n	80019c2 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800189a:	0c9b      	lsrs	r3, r3, #18
 800189c:	f003 020f 	and.w	r2, r3, #15
 80018a0:	4b4e      	ldr	r3, [pc, #312]	@ (80019dc <HAL_RCC_GetSysClockFreq+0x178>)
 80018a2:	5c9b      	ldrb	r3, [r3, r2]
 80018a4:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80018a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018a8:	0d9b      	lsrs	r3, r3, #22
 80018aa:	f003 0303 	and.w	r3, r3, #3
 80018ae:	3301      	adds	r3, #1
 80018b0:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018b2:	4b47      	ldr	r3, [pc, #284]	@ (80019d0 <HAL_RCC_GetSysClockFreq+0x16c>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d021      	beq.n	8001902 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80018be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018c0:	2200      	movs	r2, #0
 80018c2:	61bb      	str	r3, [r7, #24]
 80018c4:	61fa      	str	r2, [r7, #28]
 80018c6:	4b44      	ldr	r3, [pc, #272]	@ (80019d8 <HAL_RCC_GetSysClockFreq+0x174>)
 80018c8:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80018cc:	464a      	mov	r2, r9
 80018ce:	fb03 f202 	mul.w	r2, r3, r2
 80018d2:	2300      	movs	r3, #0
 80018d4:	4644      	mov	r4, r8
 80018d6:	fb04 f303 	mul.w	r3, r4, r3
 80018da:	4413      	add	r3, r2
 80018dc:	4a3e      	ldr	r2, [pc, #248]	@ (80019d8 <HAL_RCC_GetSysClockFreq+0x174>)
 80018de:	4644      	mov	r4, r8
 80018e0:	fba4 0102 	umull	r0, r1, r4, r2
 80018e4:	440b      	add	r3, r1
 80018e6:	4619      	mov	r1, r3
 80018e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ea:	2200      	movs	r2, #0
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	617a      	str	r2, [r7, #20]
 80018f0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80018f4:	f7fe fc42 	bl	800017c <__aeabi_uldivmod>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	4613      	mov	r3, r2
 80018fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8001900:	e04e      	b.n	80019a0 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001904:	2200      	movs	r2, #0
 8001906:	469a      	mov	sl, r3
 8001908:	4693      	mov	fp, r2
 800190a:	4652      	mov	r2, sl
 800190c:	465b      	mov	r3, fp
 800190e:	f04f 0000 	mov.w	r0, #0
 8001912:	f04f 0100 	mov.w	r1, #0
 8001916:	0159      	lsls	r1, r3, #5
 8001918:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800191c:	0150      	lsls	r0, r2, #5
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	ebb2 080a 	subs.w	r8, r2, sl
 8001926:	eb63 090b 	sbc.w	r9, r3, fp
 800192a:	f04f 0200 	mov.w	r2, #0
 800192e:	f04f 0300 	mov.w	r3, #0
 8001932:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001936:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800193a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800193e:	ebb2 0408 	subs.w	r4, r2, r8
 8001942:	eb63 0509 	sbc.w	r5, r3, r9
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	f04f 0300 	mov.w	r3, #0
 800194e:	00eb      	lsls	r3, r5, #3
 8001950:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001954:	00e2      	lsls	r2, r4, #3
 8001956:	4614      	mov	r4, r2
 8001958:	461d      	mov	r5, r3
 800195a:	eb14 030a 	adds.w	r3, r4, sl
 800195e:	603b      	str	r3, [r7, #0]
 8001960:	eb45 030b 	adc.w	r3, r5, fp
 8001964:	607b      	str	r3, [r7, #4]
 8001966:	f04f 0200 	mov.w	r2, #0
 800196a:	f04f 0300 	mov.w	r3, #0
 800196e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001972:	4629      	mov	r1, r5
 8001974:	028b      	lsls	r3, r1, #10
 8001976:	4620      	mov	r0, r4
 8001978:	4629      	mov	r1, r5
 800197a:	4604      	mov	r4, r0
 800197c:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001980:	4601      	mov	r1, r0
 8001982:	028a      	lsls	r2, r1, #10
 8001984:	4610      	mov	r0, r2
 8001986:	4619      	mov	r1, r3
 8001988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198a:	2200      	movs	r2, #0
 800198c:	60bb      	str	r3, [r7, #8]
 800198e:	60fa      	str	r2, [r7, #12]
 8001990:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001994:	f7fe fbf2 	bl	800017c <__aeabi_uldivmod>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4613      	mov	r3, r2
 800199e:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      sysclockfreq = pllvco;
 80019a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019a2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80019a4:	e00d      	b.n	80019c2 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80019a6:	4b0a      	ldr	r3, [pc, #40]	@ (80019d0 <HAL_RCC_GetSysClockFreq+0x16c>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	0b5b      	lsrs	r3, r3, #13
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80019b2:	6a3b      	ldr	r3, [r7, #32]
 80019b4:	3301      	adds	r3, #1
 80019b6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80019c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3738      	adds	r7, #56	@ 0x38
 80019c8:	46bd      	mov	sp, r7
 80019ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019ce:	bf00      	nop
 80019d0:	40023800 	.word	0x40023800
 80019d4:	00f42400 	.word	0x00f42400
 80019d8:	016e3600 	.word	0x016e3600
 80019dc:	08002064 	.word	0x08002064

080019e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b087      	sub	sp, #28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80019e8:	2300      	movs	r3, #0
 80019ea:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80019ec:	4b29      	ldr	r3, [pc, #164]	@ (8001a94 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d12c      	bne.n	8001a52 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80019f8:	4b26      	ldr	r3, [pc, #152]	@ (8001a94 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80019fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d005      	beq.n	8001a10 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001a04:	4b24      	ldr	r3, [pc, #144]	@ (8001a98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8001a0c:	617b      	str	r3, [r7, #20]
 8001a0e:	e016      	b.n	8001a3e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a10:	4b20      	ldr	r3, [pc, #128]	@ (8001a94 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a14:	4a1f      	ldr	r2, [pc, #124]	@ (8001a94 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a1a:	6253      	str	r3, [r2, #36]	@ 0x24
 8001a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8001a94 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001a28:	4b1b      	ldr	r3, [pc, #108]	@ (8001a98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8001a30:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a32:	4b18      	ldr	r3, [pc, #96]	@ (8001a94 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a36:	4a17      	ldr	r2, [pc, #92]	@ (8001a94 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a3c:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8001a44:	d105      	bne.n	8001a52 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8001a4c:	d101      	bne.n	8001a52 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001a4e:	2301      	movs	r3, #1
 8001a50:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d105      	bne.n	8001a64 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001a58:	4b10      	ldr	r3, [pc, #64]	@ (8001a9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a0f      	ldr	r2, [pc, #60]	@ (8001a9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a5e:	f043 0304 	orr.w	r3, r3, #4
 8001a62:	6013      	str	r3, [r2, #0]
 8001a64:	4b0d      	ldr	r3, [pc, #52]	@ (8001a9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f023 0201 	bic.w	r2, r3, #1
 8001a6c:	490b      	ldr	r1, [pc, #44]	@ (8001a9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001a74:	4b09      	ldr	r3, [pc, #36]	@ (8001a9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d001      	beq.n	8001a86 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e000      	b.n	8001a88 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	371c      	adds	r7, #28
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40007000 	.word	0x40007000
 8001a9c:	40023c00 	.word	0x40023c00

08001aa0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e07b      	b.n	8001baa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d108      	bne.n	8001acc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001ac2:	d009      	beq.n	8001ad8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	61da      	str	r2, [r3, #28]
 8001aca:	e005      	b.n	8001ad8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d106      	bne.n	8001af8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7fe fe1e 	bl	8000734 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2202      	movs	r2, #2
 8001afc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b0e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001b20:	431a      	orrs	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	431a      	orrs	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001b52:	431a      	orrs	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b5c:	ea42 0103 	orr.w	r1, r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b64:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	0c1b      	lsrs	r3, r3, #16
 8001b76:	f003 0104 	and.w	r1, r3, #4
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b7e:	f003 0210 	and.w	r2, r3, #16
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	430a      	orrs	r2, r1
 8001b88:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	69da      	ldr	r2, [r3, #28]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b98:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b088      	sub	sp, #32
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	60f8      	str	r0, [r7, #12]
 8001bba:	60b9      	str	r1, [r7, #8]
 8001bbc:	603b      	str	r3, [r7, #0]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001bc2:	f7fe ff33 	bl	8000a2c <HAL_GetTick>
 8001bc6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001bc8:	88fb      	ldrh	r3, [r7, #6]
 8001bca:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d001      	beq.n	8001bdc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	e12a      	b.n	8001e32 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d002      	beq.n	8001be8 <HAL_SPI_Transmit+0x36>
 8001be2:	88fb      	ldrh	r3, [r7, #6]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e122      	b.n	8001e32 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d101      	bne.n	8001bfa <HAL_SPI_Transmit+0x48>
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	e11b      	b.n	8001e32 <HAL_SPI_Transmit+0x280>
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2203      	movs	r2, #3
 8001c06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	68ba      	ldr	r2, [r7, #8]
 8001c14:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	88fa      	ldrh	r2, [r7, #6]
 8001c1a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	88fa      	ldrh	r2, [r7, #6]
 8001c20:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2200      	movs	r2, #0
 8001c26:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2200      	movs	r2, #0
 8001c32:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c48:	d10f      	bne.n	8001c6a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001c58:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001c68:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c74:	2b40      	cmp	r3, #64	@ 0x40
 8001c76:	d007      	beq.n	8001c88 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001c86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001c90:	d152      	bne.n	8001d38 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d002      	beq.n	8001ca0 <HAL_SPI_Transmit+0xee>
 8001c9a:	8b7b      	ldrh	r3, [r7, #26]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d145      	bne.n	8001d2c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca4:	881a      	ldrh	r2, [r3, #0]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb0:	1c9a      	adds	r2, r3, #2
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001cc4:	e032      	b.n	8001d2c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d112      	bne.n	8001cfa <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd8:	881a      	ldrh	r2, [r3, #0]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce4:	1c9a      	adds	r2, r3, #2
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001cf8:	e018      	b.n	8001d2c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001cfa:	f7fe fe97 	bl	8000a2c <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d803      	bhi.n	8001d12 <HAL_SPI_Transmit+0x160>
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d10:	d102      	bne.n	8001d18 <HAL_SPI_Transmit+0x166>
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d109      	bne.n	8001d2c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e082      	b.n	8001e32 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1c7      	bne.n	8001cc6 <HAL_SPI_Transmit+0x114>
 8001d36:	e053      	b.n	8001de0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d002      	beq.n	8001d46 <HAL_SPI_Transmit+0x194>
 8001d40:	8b7b      	ldrh	r3, [r7, #26]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d147      	bne.n	8001dd6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	330c      	adds	r3, #12
 8001d50:	7812      	ldrb	r2, [r2, #0]
 8001d52:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d58:	1c5a      	adds	r2, r3, #1
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	3b01      	subs	r3, #1
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001d6c:	e033      	b.n	8001dd6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d113      	bne.n	8001da4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	330c      	adds	r3, #12
 8001d86:	7812      	ldrb	r2, [r2, #0]
 8001d88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8e:	1c5a      	adds	r2, r3, #1
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001da2:	e018      	b.n	8001dd6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001da4:	f7fe fe42 	bl	8000a2c <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d803      	bhi.n	8001dbc <HAL_SPI_Transmit+0x20a>
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001dba:	d102      	bne.n	8001dc2 <HAL_SPI_Transmit+0x210>
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d109      	bne.n	8001dd6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e02d      	b.n	8001e32 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1c6      	bne.n	8001d6e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001de0:	69fa      	ldr	r2, [r7, #28]
 8001de2:	6839      	ldr	r1, [r7, #0]
 8001de4:	68f8      	ldr	r0, [r7, #12]
 8001de6:	f000 f8b1 	bl	8001f4c <SPI_EndRxTxTransaction>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d002      	beq.n	8001df6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2220      	movs	r2, #32
 8001df4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10a      	bne.n	8001e14 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001dfe:	2300      	movs	r3, #0
 8001e00:	617b      	str	r3, [r7, #20]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	617b      	str	r3, [r7, #20]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	617b      	str	r3, [r7, #20]
 8001e12:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e000      	b.n	8001e32 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8001e30:	2300      	movs	r3, #0
  }
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3720      	adds	r7, #32
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
	...

08001e3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b088      	sub	sp, #32
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	603b      	str	r3, [r7, #0]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001e4c:	f7fe fdee 	bl	8000a2c <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e54:	1a9b      	subs	r3, r3, r2
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	4413      	add	r3, r2
 8001e5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001e5c:	f7fe fde6 	bl	8000a2c <HAL_GetTick>
 8001e60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001e62:	4b39      	ldr	r3, [pc, #228]	@ (8001f48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	015b      	lsls	r3, r3, #5
 8001e68:	0d1b      	lsrs	r3, r3, #20
 8001e6a:	69fa      	ldr	r2, [r7, #28]
 8001e6c:	fb02 f303 	mul.w	r3, r2, r3
 8001e70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e72:	e054      	b.n	8001f1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e7a:	d050      	beq.n	8001f1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001e7c:	f7fe fdd6 	bl	8000a2c <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	69fa      	ldr	r2, [r7, #28]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d902      	bls.n	8001e92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d13d      	bne.n	8001f0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001ea0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001eaa:	d111      	bne.n	8001ed0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001eb4:	d004      	beq.n	8001ec0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ebe:	d107      	bne.n	8001ed0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ece:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ed8:	d10f      	bne.n	8001efa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001ef8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e017      	b.n	8001f3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d101      	bne.n	8001f18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	4013      	ands	r3, r2
 8001f28:	68ba      	ldr	r2, [r7, #8]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	bf0c      	ite	eq
 8001f2e:	2301      	moveq	r3, #1
 8001f30:	2300      	movne	r3, #0
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	461a      	mov	r2, r3
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d19b      	bne.n	8001e74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3720      	adds	r7, #32
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000000 	.word	0x20000000

08001f4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b088      	sub	sp, #32
 8001f50:	af02      	add	r7, sp, #8
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	2102      	movs	r1, #2
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f7ff ff6a 	bl	8001e3c <SPI_WaitFlagStateUntilTimeout>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d007      	beq.n	8001f7e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f72:	f043 0220 	orr.w	r2, r3, #32
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e032      	b.n	8001fe4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001f7e:	4b1b      	ldr	r3, [pc, #108]	@ (8001fec <SPI_EndRxTxTransaction+0xa0>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a1b      	ldr	r2, [pc, #108]	@ (8001ff0 <SPI_EndRxTxTransaction+0xa4>)
 8001f84:	fba2 2303 	umull	r2, r3, r2, r3
 8001f88:	0d5b      	lsrs	r3, r3, #21
 8001f8a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001f8e:	fb02 f303 	mul.w	r3, r2, r3
 8001f92:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001f9c:	d112      	bne.n	8001fc4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	9300      	str	r3, [sp, #0]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	2180      	movs	r1, #128	@ 0x80
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f7ff ff47 	bl	8001e3c <SPI_WaitFlagStateUntilTimeout>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d016      	beq.n	8001fe2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fb8:	f043 0220 	orr.w	r2, r3, #32
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e00f      	b.n	8001fe4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00a      	beq.n	8001fe0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fda:	2b80      	cmp	r3, #128	@ 0x80
 8001fdc:	d0f2      	beq.n	8001fc4 <SPI_EndRxTxTransaction+0x78>
 8001fde:	e000      	b.n	8001fe2 <SPI_EndRxTxTransaction+0x96>
        break;
 8001fe0:	bf00      	nop
  }

  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	20000000 	.word	0x20000000
 8001ff0:	165e9f81 	.word	0x165e9f81

08001ff4 <memset>:
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	4402      	add	r2, r0
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d100      	bne.n	8001ffe <memset+0xa>
 8001ffc:	4770      	bx	lr
 8001ffe:	f803 1b01 	strb.w	r1, [r3], #1
 8002002:	e7f9      	b.n	8001ff8 <memset+0x4>

08002004 <__libc_init_array>:
 8002004:	b570      	push	{r4, r5, r6, lr}
 8002006:	2600      	movs	r6, #0
 8002008:	4d0c      	ldr	r5, [pc, #48]	@ (800203c <__libc_init_array+0x38>)
 800200a:	4c0d      	ldr	r4, [pc, #52]	@ (8002040 <__libc_init_array+0x3c>)
 800200c:	1b64      	subs	r4, r4, r5
 800200e:	10a4      	asrs	r4, r4, #2
 8002010:	42a6      	cmp	r6, r4
 8002012:	d109      	bne.n	8002028 <__libc_init_array+0x24>
 8002014:	f000 f81a 	bl	800204c <_init>
 8002018:	2600      	movs	r6, #0
 800201a:	4d0a      	ldr	r5, [pc, #40]	@ (8002044 <__libc_init_array+0x40>)
 800201c:	4c0a      	ldr	r4, [pc, #40]	@ (8002048 <__libc_init_array+0x44>)
 800201e:	1b64      	subs	r4, r4, r5
 8002020:	10a4      	asrs	r4, r4, #2
 8002022:	42a6      	cmp	r6, r4
 8002024:	d105      	bne.n	8002032 <__libc_init_array+0x2e>
 8002026:	bd70      	pop	{r4, r5, r6, pc}
 8002028:	f855 3b04 	ldr.w	r3, [r5], #4
 800202c:	4798      	blx	r3
 800202e:	3601      	adds	r6, #1
 8002030:	e7ee      	b.n	8002010 <__libc_init_array+0xc>
 8002032:	f855 3b04 	ldr.w	r3, [r5], #4
 8002036:	4798      	blx	r3
 8002038:	3601      	adds	r6, #1
 800203a:	e7f2      	b.n	8002022 <__libc_init_array+0x1e>
 800203c:	08002088 	.word	0x08002088
 8002040:	08002088 	.word	0x08002088
 8002044:	08002088 	.word	0x08002088
 8002048:	0800208c 	.word	0x0800208c

0800204c <_init>:
 800204c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800204e:	bf00      	nop
 8002050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002052:	bc08      	pop	{r3}
 8002054:	469e      	mov	lr, r3
 8002056:	4770      	bx	lr

08002058 <_fini>:
 8002058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800205a:	bf00      	nop
 800205c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800205e:	bc08      	pop	{r3}
 8002060:	469e      	mov	lr, r3
 8002062:	4770      	bx	lr
